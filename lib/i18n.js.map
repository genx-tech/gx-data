{"version":3,"sources":["../src/i18n.js"],"names":["path","require","util","Util","Promise","Convertors","I18n","constructor","config","supportedLocales","map","l","normalizeLocale","reverseUpdate","isNullOrUndefined","toBoolean","updateWithMeta","timezone","pendingUpdates","isLocaleSupported","locale","n","some","setupAsync","reject","dictionary","momentLocale","localeToDash","toLowerCase","momentTimezone","getText","token","values","defaultText","_","isString","phrase","getValueByPath","addToDictionary","isObject","isEmpty","template","text","saveImmediate","comment","datetime","format","setValueByPath","save","value","r","tz","flush","dashForm","replace","split","l2","length","toUpperCase","extractLanguageCode","pos","lastIndexOf","substr","extractCountryCode","FileI18n","directory","self","loadDir","dict","dir","finish","fs","readdir","err","files","async","each","file","cb","langFilePath","join","stats","statSync","isDirectory","extName","extname","readJson","content","basename","then","langPath","resolve","p","existsSync","lang","fileSet","Set","forOwn","v","k","keyword","add","bp","f","replaceAll","delimiter","outputJsonSync","clear","File","module","exports"],"mappings":"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","sourcesContent":["const path = require('path');\nconst util = require('util');\nconst Util = require('./util.js');\nconst Promise = Util.Promise;\nconst Convertors = require('./Convertors');\n\nclass I18n {\n    /**\n     * An app module object.\n     * @constructs I18n\n     * @param {object} [config] - The i18n configuration.\n     * @property {array} [config.supportedLocales] - The default locale\n     * @property {bool} [config.reverseUpdate=false] - Reverse update when\n     * @property {bool} [config.updateWithMeta=false] -\n     * @property {string} [config.timezone] - Timezone\n     */\n    constructor(config) {\n        config || (config = {});\n\n        this.supportedLocales = config.supportedLocales\n            ? config.supportedLocales.map((l) => I18n.normalizeLocale(l))\n            : ['en_AU', 'en_US', 'zh_CN'];\n        this.reverseUpdate = util.isNullOrUndefined(config.reverseUpdate)\n            ? false\n            : Convertors.toBoolean(config.reverseUpdate);\n        this.updateWithMeta = util.isNullOrUndefined(config.updateWithMeta)\n            ? false\n            : Convertors.toBoolean(config.updateWithMeta);\n        this.timezone = config.timezone;\n        this.pendingUpdates = {};\n    }\n\n    isLocaleSupported(locale) {\n        let n = locale && I18n.normalizeLocale(locale);\n        return this.supportedLocales.some((l) => n === l);\n    }\n\n    async setupAsync(locale) {\n        if (!this.isLocaleSupported(locale))\n            return Promise.reject('unsupported_locale');\n\n        this.dictionary = {};\n\n        this.locale = I18n.normalizeLocale(locale || this.supportedLocales[0]);\n        this.momentLocale = I18n.localeToDash(this.locale).toLowerCase();\n        this.momentTimezone = Util.timezone;\n\n        return this;\n    }\n\n    getText(token, values, defaultText) {\n        if (Util._.isString(values)) {\n            defaultText = values;\n            values = null;\n        }\n\n        var phrase = Util.getValueByPath(this.dictionary, token);\n\n        if (util.isNullOrUndefined(phrase)) {\n            phrase = defaultText;\n\n            if (phrase) {\n                if (this.reverseUpdate) this.addToDictionary(token, phrase);\n            } else {\n                phrase = token;\n            }\n        } else if (util.isObject(phrase)) {\n            phrase = phrase['text'];\n        }\n\n        return Util._.isEmpty(values) ? phrase : Util.template(phrase, values);\n    }\n\n    addToDictionary(token, text, saveImmediate) {\n        if (this.updateWithMeta) {\n            text = {\n                text: text,\n                comment: 'Added at ' + this.datetime().format(),\n            };\n        }\n\n        Util.setValueByPath(this.dictionary, token, text);\n\n        this.pendingUpdates[token] = text;\n\n        if (saveImmediate) {\n            this.save();\n        }\n    }\n\n    save() {\n        this.pendingUpdates = {};\n    }\n\n    datetime(value, timezone) {\n        timezone || (timezone = this.timezone);\n\n        var r = this.momentTimezone(value).locale(this.momentLocale);\n\n        return timezone ? r.tz(timezone) : r;\n    }\n\n    flush() {\n        if (this.reverseUpdate) {\n            this.save();\n        }\n    }\n\n    get dashForm() {\n        return I18n.localeToDash(this.locale);\n    }\n\n    static normalizeLocale(locale) {\n        var l = locale.replace('-', '_').split('_', 2);\n        var l2 = l[0].toLowerCase();\n        if (l.length > 1) {\n            l2 += '_' + l[1].toUpperCase();\n        }\n        return l2;\n    }\n\n    static localeToDash(locale) {\n        return locale.replace('_', '-');\n    }\n\n    static extractLanguageCode(locale) {\n        var pos = locale.lastIndexOf('_');\n        if (pos == -1) return locale;\n\n        return locale.substr(0, pos);\n    }\n\n    static extractCountryCode(locale) {\n        var pos = locale.lastIndexOf('_');\n        if (pos == -1) return '';\n\n        return locale.substr(pos + 1);\n    }\n}\n\nclass FileI18n extends I18n {\n    constructor(config) {\n        super(config);\n\n        config || (config = {});\n\n        this.directory = config.directory || './locale';\n    }\n\n    async setupAsync(locale) {\n        const self = this;\n\n        function loadDir(dict, dir, finish) {\n            Util.fs.readdir(dir, function (err, files) {\n                if (err) return finish(err);\n\n                Util.async.each(\n                    files,\n                    function (file, cb) {\n                        let langFilePath = path.join(dir, file);\n                        let stats = Util.fs.statSync(langFilePath);\n\n                        if (stats.isDirectory()) {\n                            dict[file] = {};\n                            return loadDir(dict[file], langFilePath, cb);\n                        }\n\n                        let extName = path.extname(file);\n                        if (extName.toLowerCase() !== '.json') return cb();\n\n                        Util.fs.readJson(langFilePath, function (err, content) {\n                            if (err) return cb(err);\n\n                            let basename = path.basename(file, extName);\n                            dict[basename] = content;\n\n                            cb();\n                        });\n                    },\n                    finish\n                );\n            });\n        }\n\n        return super.setupAsync(locale).then(() => {\n            let langPath = path.resolve(self.directory, 'lang');\n\n            return new Promise((resolve, reject) => {\n                let p = path.join(langPath, self.locale);\n\n                if (!Util.fs.existsSync(p)) {\n                    //try only language code\n                    let lang = I18n.extractLanguageCode(self.locale);\n                    p = path.join(langPath, lang);\n\n                    if (!Util.fs.existsSync(p)) {\n                        return resolve(self);\n                    }\n                }\n\n                loadDir(self.dictionary, p, (err) => {\n                    if (err) return reject(err);\n                    resolve(self);\n                });\n            });\n        });\n    }\n\n    save() {\n        var fileSet = new Set();\n\n        Util._.forOwn(this.pendingUpdates, (v, k) => {\n            let keyword = path.extname(k);\n            let p = path.basename(k, keyword);\n            fileSet.add(p);\n        });\n\n        var langPath = path.resolve(this.directory, 'lang');\n        var bp = path.join(langPath, this.locale);\n\n        for (let p of fileSet) {\n            let content = Util.getValueByPath(this.dictionary, p);\n            let f = Util.replaceAll(p, '.', path.delimiter) + '.json';\n\n            Util.fs.outputJsonSync(path.join(bp, f), content);\n        }\n\n        fileSet.clear();\n\n        super.save();\n    }\n}\n\nI18n.File = FileI18n;\n\nmodule.exports = I18n;\n"],"file":"i18n.js"}