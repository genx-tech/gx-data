{"version":3,"sources":["../../src/loaders/excel.js"],"names":["unflattenObject","_","eachAsync_","require","module","exports","writeTemplate_","templateFile","columnsMeta","config","keys","Object","Excel","workbook","Workbook","sheet","addWorksheet","addRow","rowPlaceHolders","Array","length","templatedRows","rows","j","i","colKey","metadata","cell","getCell","type","dataValidation","allowBlank","formulae","values","join","alignment","horizontal","format","numFmt","border","top","style","xlsx","writeFile","load_","db","mainEntity","dataFile","reverseMapping","payloadFunctor","needConfirm","readFile","data","eachSheet","worksheet","colKeys","eachRow","row","rowNumber","drop","map","key","rowValues","isNonEmpty","find","val","toString","trim","record","fromPairs","zip","isEmpty","_record","push","errors","confirmations","rowsResult","Entity","model","processed","_confirm","forEach","c","create_","$dryRun","error","message","info","result","meta","keyField"],"mappings":"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","sourcesContent":["const { unflattenObject, _, eachAsync_ } = require('@genx/july');\n\nmodule.exports = {\n    writeTemplate_: async (templateFile, columnsMeta, config) => {\n        const keys = Object.keys(columnsMeta);\n\n        const Excel = require('exceljs');\n        let workbook = new Excel.Workbook();\n\n        const sheet = workbook.addWorksheet('Template');\n\n        // add header\n        sheet.addRow(keys);\n        const rowPlaceHolders = new Array(keys.length);\n\n        const templatedRows = config.rows || 50;\n\n        for (let j = 0; j < templatedRows; j++) {\n            // add en empty rows\n            sheet.addRow(rowPlaceHolders);\n\n            for (let i = 1; i <= keys.length; i++) {\n                const colKey = keys[i - 1];\n                const metadata = columnsMeta[colKey];\n                const cell = sheet.getCell(j + 2, i);\n\n                if (metadata) {\n                    if (metadata.type === 'enum') {\n                        cell.dataValidation = {\n                            type: 'list',\n                            allowBlank: true,\n                            formulae: [`\"${metadata.values.join(',')}\"`],\n                        };\n                    } else if (metadata.type === 'currency') {\n                        cell.alignment = { horizontal: 'right' };\n                        if (metadata.format && config[metadata.format]) {\n                            cell.numFmt = config[metadata.format];\n                        }\n                    }\n                }\n            }\n        }\n\n        sheet.addRow(rowPlaceHolders);\n\n        for (let i = 1; i <= keys.length; i++) {\n            const cell = sheet.getCell(templatedRows + 2, i);\n            cell.border = { top: { style: 'thin' } };\n        }\n\n        await workbook.xlsx.writeFile(templateFile);\n    },\n\n    load_: async (db, mainEntity, dataFile, reverseMapping, payloadFunctor, needConfirm) => {\n        const Excel = require('exceljs');\n        let workbook = new Excel.Workbook();\n        await workbook.xlsx.readFile(dataFile);\n\n        let data = [];\n\n        workbook.eachSheet((worksheet) => {\n            let colKeys;\n\n            worksheet.eachRow(function (row, rowNumber) {\n                if (!colKeys) {\n                    colKeys = _.drop(row.values).map(\n                        (key) => reverseMapping[key]\n                    );\n                } else {\n                    const rowValues = _.drop(row.values);\n                    const isNonEmpty = _.find(rowValues, val => val != null && val.toString().trim() !== \"\");\n\n                    if (!isNonEmpty) {\n                        return;\n                    }\n\n                    const record = _.fromPairs(\n                        _.zip(colKeys, rowValues)\n                    );\n\n                    if (!_.isEmpty(record)) {\n                        const _record = unflattenObject(record);\n\n                        data.push({\n                            rowNumber,\n                            record: _record,\n                        });\n                    }\n                }\n            });\n        });\n\n        const errors = [];\n        const confirmations = [];\n        const rowsResult = [];\n\n        const Entity = db.model(mainEntity);\n        const processed = [];\n        await eachAsync_(data, async ({ rowNumber, record }) => {\n            try {\n                const _confirm = [];\n                record = await payloadFunctor(Entity, record, _confirm);\n                //console.dir(record, { depth: 10 });\n\n                if (_confirm.length > 0) {\n                    _confirm.forEach(c => confirmations.push({ rowNumber, ...c }));\n                }\n\n                processed.push({ rowNumber, record });\n                await Entity.create_(record, { $dryRun: true });\n            } catch (error) {\n                //throw error;\n                errors.push({\n                    rowNumber,\n                    error: error.message,\n                    ...(error.info ? { info: error.info } : null)\n                });\n            }\n        });\n\n        if (errors.length > 0) {\n            return { errors };\n        }\n\n        if (needConfirm && confirmations.length > 0) {\n            return { confirmations };\n        }\n\n        await eachAsync_(processed, async ({ rowNumber, record }) => {\n            try {\n                const result = await Entity.create_(record);\n                rowsResult.push({\n                    rowNumber,\n                    [Entity.meta.keyField]: result[Entity.meta.keyField],\n                });\n            } catch (error) {\n                errors.push({\n                    rowNumber,\n                    error: error.message,\n                });\n            }\n        });\n\n        return { result: rowsResult, errors };\n    },\n};\n"],"file":"excel.js"}