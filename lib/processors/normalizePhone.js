"use strict";

require("source-map-support/register");

const {
  _
} = require('@genx/july');

const {
  ValidationError
} = require('../utils/Errors');

function normalizePhone(phone, defaultArea) {
  if (phone) {
    phone = phone.trim();

    if (phone.length > 0) {
      let s = phone[0];

      if (s === '+') {} else if (s === '0') {
        if (phone[1] === '0') {
          phone = '+' + phone.substr(2);
        } else {
          if (defaultArea == null) {
            throw new ValidationError('The mobile phone number must be supplied with a country code.', {
              data: phone
            });
          }

          phone = defaultArea + phone.substr(1);
        }
      } else {
        if (defaultArea == null) {
          throw new ValidationError('The mobile phone number must be supplied with a country code.', {
            data: phone
          });
        }

        phone = defaultArea + phone;
      }

      let leftB = phone.indexOf('(');
      let rightB = phone.indexOf(')');

      if (leftB > 0 && rightB > leftB) {
        phone = phone.substr(0, leftB) + _.trimStart(phone.substring(leftB + 1, rightB), '0') + phone.substr(rightB + 1);
      }

      phone = phone.replace(/\ |\-/g, '');
    }
  }

  return phone;
}

module.exports = normalizePhone;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcm9jZXNzb3JzL25vcm1hbGl6ZVBob25lLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiVmFsaWRhdGlvbkVycm9yIiwibm9ybWFsaXplUGhvbmUiLCJwaG9uZSIsImRlZmF1bHRBcmVhIiwidHJpbSIsImxlbmd0aCIsInMiLCJzdWJzdHIiLCJkYXRhIiwibGVmdEIiLCJpbmRleE9mIiwicmlnaHRCIiwidHJpbVN0YXJ0Iiwic3Vic3RyaW5nIiwicmVwbGFjZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBUUMsT0FBTyxDQUFDLFlBQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQXNCRCxPQUFPLENBQUMsaUJBQUQsQ0FBbkM7O0FBRUEsU0FBU0UsY0FBVCxDQUF3QkMsS0FBeEIsRUFBK0JDLFdBQS9CLEVBQTRDO0FBQ3hDLE1BQUlELEtBQUosRUFBVztBQUNQQSxJQUFBQSxLQUFLLEdBQUdBLEtBQUssQ0FBQ0UsSUFBTixFQUFSOztBQUVBLFFBQUlGLEtBQUssQ0FBQ0csTUFBTixHQUFlLENBQW5CLEVBQXNCO0FBQ2xCLFVBQUlDLENBQUMsR0FBR0osS0FBSyxDQUFDLENBQUQsQ0FBYjs7QUFDQSxVQUFJSSxDQUFDLEtBQUssR0FBVixFQUFlLENBRWQsQ0FGRCxNQUVPLElBQUlBLENBQUMsS0FBSyxHQUFWLEVBQWU7QUFDbEIsWUFBSUosS0FBSyxDQUFDLENBQUQsQ0FBTCxLQUFhLEdBQWpCLEVBQXNCO0FBQ2xCQSxVQUFBQSxLQUFLLEdBQUcsTUFBTUEsS0FBSyxDQUFDSyxNQUFOLENBQWEsQ0FBYixDQUFkO0FBQ0gsU0FGRCxNQUVPO0FBQ0gsY0FBSUosV0FBVyxJQUFJLElBQW5CLEVBQXlCO0FBQ3JCLGtCQUFNLElBQUlILGVBQUosQ0FBb0IsK0RBQXBCLEVBQXFGO0FBQ3ZGUSxjQUFBQSxJQUFJLEVBQUVOO0FBRGlGLGFBQXJGLENBQU47QUFHSDs7QUFDREEsVUFBQUEsS0FBSyxHQUFHQyxXQUFXLEdBQUdELEtBQUssQ0FBQ0ssTUFBTixDQUFhLENBQWIsQ0FBdEI7QUFDSDtBQUNKLE9BWE0sTUFXQTtBQUNILFlBQUlKLFdBQVcsSUFBSSxJQUFuQixFQUF5QjtBQUNyQixnQkFBTSxJQUFJSCxlQUFKLENBQW9CLCtEQUFwQixFQUFxRjtBQUN2RlEsWUFBQUEsSUFBSSxFQUFFTjtBQURpRixXQUFyRixDQUFOO0FBR0g7O0FBQ0RBLFFBQUFBLEtBQUssR0FBR0MsV0FBVyxHQUFHRCxLQUF0QjtBQUNIOztBQUVELFVBQUlPLEtBQUssR0FBR1AsS0FBSyxDQUFDUSxPQUFOLENBQWMsR0FBZCxDQUFaO0FBQ0EsVUFBSUMsTUFBTSxHQUFHVCxLQUFLLENBQUNRLE9BQU4sQ0FBYyxHQUFkLENBQWI7O0FBRUEsVUFBSUQsS0FBSyxHQUFHLENBQVIsSUFBYUUsTUFBTSxHQUFHRixLQUExQixFQUFpQztBQUM3QlAsUUFBQUEsS0FBSyxHQUFHQSxLQUFLLENBQUNLLE1BQU4sQ0FBYSxDQUFiLEVBQWdCRSxLQUFoQixJQUF5QlgsQ0FBQyxDQUFDYyxTQUFGLENBQVlWLEtBQUssQ0FBQ1csU0FBTixDQUFnQkosS0FBSyxHQUFDLENBQXRCLEVBQXlCRSxNQUF6QixDQUFaLEVBQThDLEdBQTlDLENBQXpCLEdBQThFVCxLQUFLLENBQUNLLE1BQU4sQ0FBYUksTUFBTSxHQUFDLENBQXBCLENBQXRGO0FBQ0g7O0FBRURULE1BQUFBLEtBQUssR0FBR0EsS0FBSyxDQUFDWSxPQUFOLENBQWMsUUFBZCxFQUF3QixFQUF4QixDQUFSO0FBQ0g7QUFDSjs7QUFFRCxTQUFPWixLQUFQO0FBQ0g7O0FBRURhLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmYsY0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IF8gfSA9IHJlcXVpcmUoJ0BnZW54L2p1bHknKTtcbmNvbnN0IHsgVmFsaWRhdGlvbkVycm9yIH0gPSByZXF1aXJlKCcuLi91dGlscy9FcnJvcnMnKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplUGhvbmUocGhvbmUsIGRlZmF1bHRBcmVhKSB7XG4gICAgaWYgKHBob25lKSB7XG4gICAgICAgIHBob25lID0gcGhvbmUudHJpbSgpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHBob25lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxldCBzID0gcGhvbmVbMF07XG4gICAgICAgICAgICBpZiAocyA9PT0gJysnKSB7XG4gICAgICAgICAgICAgICAgLy9ub3RoaW5nXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHMgPT09ICcwJykge1xuICAgICAgICAgICAgICAgIGlmIChwaG9uZVsxXSA9PT0gJzAnKSB7XG4gICAgICAgICAgICAgICAgICAgIHBob25lID0gJysnICsgcGhvbmUuc3Vic3RyKDIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0QXJlYSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKCdUaGUgbW9iaWxlIHBob25lIG51bWJlciBtdXN0IGJlIHN1cHBsaWVkIHdpdGggYSBjb3VudHJ5IGNvZGUuJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHBob25lXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwaG9uZSA9IGRlZmF1bHRBcmVhICsgcGhvbmUuc3Vic3RyKDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRBcmVhID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcignVGhlIG1vYmlsZSBwaG9uZSBudW1iZXIgbXVzdCBiZSBzdXBwbGllZCB3aXRoIGEgY291bnRyeSBjb2RlLicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHBob25lXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwaG9uZSA9IGRlZmF1bHRBcmVhICsgcGhvbmU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBsZWZ0QiA9IHBob25lLmluZGV4T2YoJygnKTtcbiAgICAgICAgICAgIGxldCByaWdodEIgPSBwaG9uZS5pbmRleE9mKCcpJyk7XG5cbiAgICAgICAgICAgIGlmIChsZWZ0QiA+IDAgJiYgcmlnaHRCID4gbGVmdEIpIHtcbiAgICAgICAgICAgICAgICBwaG9uZSA9IHBob25lLnN1YnN0cigwLCBsZWZ0QikgKyBfLnRyaW1TdGFydChwaG9uZS5zdWJzdHJpbmcobGVmdEIrMSwgcmlnaHRCKSwgJzAnKSArIHBob25lLnN1YnN0cihyaWdodEIrMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBob25lID0gcGhvbmUucmVwbGFjZSgvXFwgfFxcLS9nLCAnJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcGhvbmU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbm9ybWFsaXplUGhvbmU7Il19