{"version":3,"file":"DbModel.js","names":["_","naming","sleep_","require","fs","InvalidArgument","retryFailed","error","retryOK","result","directReturn","a","DbModel","constructor","app","connector","i18n","ownerApp","_modelCache","driver","model","entityName","modelClassName","pascalCase","entityCustomClassFactory","loadCustomModel","entityClassFactory","loadModel","modelClass","meta","packagePath","entityClassFromPackage","loadPackageModel","db","__init","customModelPath","toAbsolutePath","process","env","NODE_RT","existsSync","entitiesOfType","baseEntityName","filter","entities","Model","baseClasses","indexOf","retry_","transactionName","action_","connOptions","maxRetry","interval","onRetry_","connection","i","finished","logException","safeRetry_","ok","failed","doTransaction_","connOpts","close_","module","exports"],"sources":["../src/DbModel.js"],"sourcesContent":["const { _, naming, sleep_ } = require('@genx/july');\nconst { fs } = require('@genx/sys');\nconst { InvalidArgument } = require('@genx/error');\n\nconst retryFailed = (error) => [false, error];\nconst retryOK = (result) => [true, result];\n\nconst directReturn = (a) => a;\n\nclass DbModel {\n    constructor(app, connector, i18n) {\n        this.ownerApp = app;\n        this.app = app;\n        this.connector = connector;\n        this.i18n = i18n;\n\n        this._modelCache = {};\n    }\n\n    get driver() {\n        return this.connector.driver;\n    }\n\n    /**\n     * Get entity model class by entity name.\n     * @param {*} entityName\n     */\n    model(entityName) {\n        if (!entityName) {\n            throw new InvalidArgument('Entity name is required.')\n        }\n\n        if (this._modelCache[entityName]) return this._modelCache[entityName];\n\n        const modelClassName = naming.pascalCase(entityName);\n        if (this._modelCache[modelClassName])\n            return this._modelCache[modelClassName];\n\n        const entityCustomClassFactory = this.loadCustomModel(modelClassName);\n        const entityClassFactory = this.loadModel(modelClassName);\n\n        let modelClass = require(`./drivers/${this.driver}/EntityModel`);\n        modelClass = entityClassFactory(modelClass);\n\n        if (modelClass.meta.packagePath) {\n            const entityClassFromPackage = this.loadPackageModel(modelClass.meta.packagePath, modelClassName);\n            if (entityClassFromPackage) {\n                modelClass = entityClassFromPackage(modelClass);\n            }\n        }\n\n        if (entityCustomClassFactory) {\n            modelClass = entityCustomClassFactory(modelClass);\n        }\n\n        modelClass.db = this;\n\n        if (modelClass.__init) {\n            modelClass.__init();\n        }\n\n        this._modelCache[entityName] = modelClass;\n        if (modelClassName !== entityName) {\n            this._modelCache[modelClassName] = modelClass;\n        }\n\n        return modelClass;\n    }\n\n    loadPackageModel(packagePath, modelClassName) { \n        const customModelPath = this.ownerApp.toAbsolutePath(packagePath,  (process.env.NODE_RT && process.env.NODE_RT === 'babel') ? 'src' : 'lib', 'models', `${modelClassName}.js`);           \n        return fs.existsSync(customModelPath) && require(customModelPath);\n    }\n\n    entitiesOfType(baseEntityName) {\n        return _.filter(this.entities, (entityName) => {\n            const Model = this.model(entityName);\n            return (\n                Model.baseClasses &&\n                Model.baseClasses.indexOf(baseEntityName) > -1\n            );\n        });\n    }\n\n    /**\n     * Run an action and automatically retry when failed.\n     * @param {*} transactionName\n     * @param {*} action_\n     * @param {*} connOptions\n     * @param {*} maxRetry\n     * @param {*} interval\n     * @param {*} onRetry_\n     */\n    async retry_(\n        transactionName,\n        action_,\n        connOptions,\n        maxRetry,\n        interval,\n        onRetry_\n    ) {\n        // retry will be ignored, if the transaction is a part of another transaction\n        if (connOptions && connOptions.connection) {\n            return action_(directReturn, directReturn);\n        }\n\n        let i = 0;\n        if (maxRetry == null) maxRetry = 2;\n\n        while (i++ < maxRetry) {\n            const [finished, result] = await action_(retryOK, retryFailed);\n\n            if (finished) {\n                return result;\n            }\n\n            if (i === maxRetry) {\n                throw result;\n            }\n\n            this.app.logException(\n                'warn',\n                result,\n                `Unable to complete \"${transactionName}\" and will try ${\n                    maxRetry - i\n                } more times after ${interval || 0} ms.`\n            );\n\n            if (interval != null) {\n                await sleep_(interval);\n            }\n\n            if (onRetry_) {\n                await onRetry_();\n            }\n        }\n    }\n\n    /**\n     * Run an action as transaction and automatically retry when failed.\n     * @param {*} transactionName\n     * @param {*} action_\n     * @param {*} connOptions\n     * @param {*} maxRetry\n     * @param {*} interval\n     * @param {*} onRetry_\n     */\n    async safeRetry_(\n        transactionName,\n        action_,\n        connOptions,\n        maxRetry,\n        interval,\n        onRetry_\n    ) {\n        return this.retry_(\n            transactionName,\n            (ok, failed) =>\n                this.doTransaction_(\n                    async (connOpts) => ok(await action_(connOpts)),\n                    failed,\n                    connOptions\n                ),\n            connOptions,\n            maxRetry,\n            interval,\n            onRetry_\n        );\n    }\n\n    async close_() {\n        delete this._modelCache;\n        delete this.connector;\n        delete this.app;\n        delete this.ownerApp;\n    }\n}\n\nmodule.exports = DbModel;\n"],"mappings":"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"}