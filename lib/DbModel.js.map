{"version":3,"sources":["../src/DbModel.js"],"names":["_","naming","sleep_","require","retryFailed","error","retryOK","result","directReturn","a","DbModel","constructor","app","connector","i18n","_modelCache","driver","model","entityName","modelClassName","pascalCase","entityCustomClassFactory","loadCustomModel","entityClassFactory","loadModel","BaseEntityModel","modelClass","db","__init","entitiesOfType","baseEntityName","filter","entities","Model","baseClasses","indexOf","retry_","transactionName","action_","connOptions","maxRetry","interval","onRetry_","connection","i","finished","logException","safeRetry_","ok","failed","doTransaction_","connOpts","close_","module","exports"],"mappings":"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","sourcesContent":["const { _, naming, sleep_ } = require('@genx/july');\n\nconst retryFailed = (error) => [false, error];\nconst retryOK = (result) => [true, result];\n\nconst directReturn = (a) => a;\n\nclass DbModel {\n    constructor(app, connector, i18n) {\n        this.app = app;\n        this.connector = connector;\n        this.i18n = i18n;\n\n        this._modelCache = {};\n    }\n\n    get driver() {\n        return this.connector.driver;\n    }\n\n    /**\n     * Get entity model class by entity name.\n     * @param {*} entityName\n     */\n    model(entityName) {\n        if (this._modelCache[entityName]) return this._modelCache[entityName];\n\n        let modelClassName = naming.pascalCase(entityName);\n        if (this._modelCache[modelClassName])\n            return this._modelCache[modelClassName];\n\n        let entityCustomClassFactory = this.loadCustomModel(modelClassName);\n        let entityClassFactory = this.loadModel(modelClassName);\n\n        let BaseEntityModel = require(`./drivers/${this.driver}/EntityModel`);\n        if (entityCustomClassFactory) {\n            BaseEntityModel = entityCustomClassFactory(BaseEntityModel);\n        }\n\n        const modelClass = entityClassFactory(BaseEntityModel);\n        modelClass.db = this;\n\n        if (modelClass.__init) {\n            modelClass.__init();\n        }\n\n        this._modelCache[entityName] = modelClass;\n        if (modelClassName !== entityName) {\n            this._modelCache[modelClassName] = modelClass;\n        }\n\n        return modelClass;\n    }\n\n    entitiesOfType(baseEntityName) {\n        return _.filter(this.entities, (entityName) => {\n            let Model = this.model(entityName);\n            return (\n                Model.baseClasses &&\n                Model.baseClasses.indexOf(baseEntityName) > -1\n            );\n        });\n    }\n\n    /**\n     * Run an action and automatically retry when failed.\n     * @param {*} transactionName\n     * @param {*} action_\n     * @param {*} connOptions\n     * @param {*} maxRetry\n     * @param {*} interval\n     * @param {*} onRetry_\n     */\n    async retry_(\n        transactionName,\n        action_,\n        connOptions,\n        maxRetry,\n        interval,\n        onRetry_\n    ) {\n        //retry will be ignored, if the transaction is a part of another transaction\n        if (connOptions && connOptions.connection) {\n            return action_(directReturn, directReturn);\n        }\n\n        let i = 0;\n        if (maxRetry == null) maxRetry = 2;\n\n        while (i++ < maxRetry) {\n            const [finished, result] = await action_(retryOK, retryFailed);\n\n            if (finished) {\n                return result;\n            }\n\n            if (i === maxRetry) {\n                throw result;\n            }\n\n            this.app.logException(\n                'warn',\n                result,\n                `Unable to complete \"${transactionName}\" and will try ${\n                    maxRetry - i\n                } more times after ${interval || 0} ms.`\n            );\n\n            if (interval != null) {\n                await sleep_(interval);\n            }\n\n            if (onRetry_) {\n                await onRetry_();\n            }\n        }\n    }\n\n    /**\n     * Run an action as transaction and automatically retry when failed.\n     * @param {*} transactionName\n     * @param {*} action_\n     * @param {*} connOptions\n     * @param {*} maxRetry\n     * @param {*} interval\n     * @param {*} onRetry_\n     */\n    async safeRetry_(\n        transactionName,\n        action_,\n        connOptions,\n        maxRetry,\n        interval,\n        onRetry_\n    ) {\n        return this.retry_(\n            transactionName,\n            (ok, failed) =>\n                this.doTransaction_(\n                    async (connOpts) => ok(await action_(connOpts)),\n                    failed,\n                    connOptions\n                ),\n            connOptions,\n            maxRetry,\n            interval,\n            onRetry_\n        );\n    }\n\n    async close_() {\n        delete this._modelCache;\n        delete this.connector;\n        delete this.app;\n    }\n}\n\nmodule.exports = DbModel;\n"],"file":"DbModel.js"}