{"version":3,"file":"DbModel.js","names":["_","naming","sleep_","require","fs","InvalidArgument","retryFailed","error","retryOK","result","directReturn","a","DbModel","constructor","app","connector","i18n","ownerApp","_modelCache","driver","model","entityName","modelClassName","pascalCase","entityCustomClassFactory","loadCustomModel","entityClassFactory","loadModel","modelClass","meta","packagePath","entityClassFromPackage","loadPackageModel","db","__init","customModelPath","toAbsolutePath","process","env","NODE_RT","existsSync","entitiesOfType","baseEntityName","filter","entities","Model","baseClasses","indexOf","retry_","transactionName","action_","connOptions","maxRetry","interval","onRetry_","connection","i","finished","logException","safeRetry_","ok","failed","doTransaction_","connOpts","close_","module","exports"],"sources":["../src/DbModel.js"],"sourcesContent":["const { _, naming, sleep_ } = require('@genx/july');\nconst { fs } = require('@genx/sys');\nconst { InvalidArgument } = require('@genx/error');\n\nconst retryFailed = (error) => [false, error];\nconst retryOK = (result) => [true, result];\n\nconst directReturn = (a) => a;\n\nclass DbModel {\n    constructor(app, connector, i18n) {\n        this.ownerApp = app;\n        this.app = app;\n        this.connector = connector;\n        this.i18n = i18n;\n\n        this._modelCache = {};\n    }\n\n    get driver() {\n        return this.connector.driver;\n    }\n\n    /**\n     * Get entity model class by entity name.\n     * @param {*} entityName\n     */\n    model(entityName) {\n        if (!entityName) {\n            throw new InvalidArgument('Entity name is required.')\n        }\n\n        if (this._modelCache[entityName]) return this._modelCache[entityName];\n\n        const modelClassName = naming.pascalCase(entityName);\n        if (this._modelCache[modelClassName])\n            return this._modelCache[modelClassName];\n\n        const entityCustomClassFactory = this.loadCustomModel(modelClassName);\n        const entityClassFactory = this.loadModel(modelClassName);\n\n        let modelClass = require(`./drivers/${this.driver}/EntityModel`);\n        modelClass = entityClassFactory(modelClass);\n\n        if (modelClass.meta.packagePath) {\n            const entityClassFromPackage = this.loadPackageModel(modelClass.meta.packagePath, modelClassName);\n            if (entityClassFromPackage) {\n                modelClass = entityClassFromPackage(modelClass);\n            }\n        }\n\n        if (entityCustomClassFactory) {\n            modelClass = entityCustomClassFactory(modelClass);\n        }\n\n        modelClass.db = this;\n\n        if (modelClass.__init) {\n            modelClass.__init();\n        }\n\n        this._modelCache[entityName] = modelClass;\n        if (modelClassName !== entityName) {\n            this._modelCache[modelClassName] = modelClass;\n        }\n\n        return modelClass;\n    }\n\n    loadPackageModel(packagePath, modelClassName) { \n        const customModelPath = this.ownerApp.toAbsolutePath(packagePath,  (process.env.NODE_RT && process.env.NODE_RT === 'babel') ? 'src' : 'lib', 'models', `${modelClassName}.js`);           \n        return fs.existsSync(customModelPath) && require(customModelPath);\n    }\n\n    entitiesOfType(baseEntityName) {\n        return _.filter(this.entities, (entityName) => {\n            const Model = this.model(entityName);\n            return (\n                Model.baseClasses &&\n                Model.baseClasses.indexOf(baseEntityName) > -1\n            );\n        });\n    }\n\n    /**\n     * Run an action and automatically retry when failed.\n     * @param {*} transactionName\n     * @param {*} action_\n     * @param {*} connOptions\n     * @param {*} maxRetry\n     * @param {*} interval\n     * @param {*} onRetry_\n     */\n    async retry_(\n        transactionName,\n        action_,\n        connOptions,\n        maxRetry,\n        interval,\n        onRetry_\n    ) {\n        // retry will be ignored, if the transaction is a part of another transaction\n        if (connOptions && connOptions.connection) {\n            return action_(directReturn, directReturn);\n        }\n\n        let i = 0;\n        if (maxRetry == null) maxRetry = 2;\n\n        while (i++ < maxRetry) {\n            const [finished, result] = await action_(retryOK, retryFailed);\n\n            if (finished) {\n                return result;\n            }\n\n            if (i === maxRetry) {\n                throw result;\n            }\n\n            this.app.logException(\n                'warn',\n                result,\n                `Unable to complete \"${transactionName}\" and will try ${\n                    maxRetry - i\n                } more times after ${interval || 0} ms.`\n            );\n\n            if (interval != null) {\n                await sleep_(interval);\n            }\n\n            if (onRetry_) {\n                await onRetry_();\n            }\n        }\n    }\n\n    /**\n     * Run an action as transaction and automatically retry when failed.\n     * @param {*} transactionName\n     * @param {*} action_\n     * @param {*} connOptions\n     * @param {*} maxRetry\n     * @param {*} interval\n     * @param {*} onRetry_\n     */\n    async safeRetry_(\n        transactionName,\n        action_,\n        connOptions,\n        maxRetry,\n        interval,\n        onRetry_\n    ) {\n        return this.retry_(\n            transactionName,\n            (ok, failed) =>\n                this.doTransaction_(\n                    async (connOpts) => ok(await action_(connOpts)),\n                    failed,\n                    connOptions\n                ),\n            connOptions,\n            maxRetry,\n            interval,\n            onRetry_\n        );\n    }\n\n    async close_() {\n        delete this._modelCache;\n        delete this.connector;\n        delete this.app;\n        delete this.ownerApp;\n    }\n}\n\nmodule.exports = DbModel;\n"],"mappings":"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"}