"use strict";

require("source-map-support/register");

const validator = require('validator');

const {
  _
} = require('rk-utils');

exports.toBoolean = value => typeof value === 'boolean' ? value : validator.toBoolean(value, true);

exports.toText = value => value && (typeof value !== 'string' ? value.toString() : value).trim();

exports.toInt = (value, radix) => _.isInteger(value) ? value : parseInt(value, radix);

exports.toFloat = value => _.isFinite(value) ? value : validator.toFloat(value);

exports.jsonToBase64 = obj => Buffer.from(JSON.stringify(obj)).toString("base64");

exports.base64ToJson = base64 => JSON.parse(Buffer.from(base64, 'base64').toString('ascii'));

exports.textToDate = require('date-fns/parse');

exports.toKVPairs = (arrayOfObjects, property, transformer) => arrayOfObjects.reduce((table, obj) => {
  table[obj[property]] = transformer ? transformer(obj) : obj;
  return table;
}, {});

const mapKeysDeep = (arrayOfObjects, mapping) => {
  if (Array.isArray(arrayOfObjects)) return _.map(arrayOfObjects, obj => mapKeysDeep(obj, mapping));
  let newObj = {};

  _.forOwn(arrayOfObjects, (v, k) => {
    let nk = mapping[k];

    if (!nk) {
      newObj[k] = v;
    } else if (Array.isArray(nk)) {
      newObj[nk[0]] = mapKeysDeep(v, nk[1]);
    } else {
      newObj[nk] = v;
    }
  });

  return newObj;
};

exports.mapKeysDeep = mapKeysDeep;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Db252ZXJ0b3JzLmpzIl0sIm5hbWVzIjpbInZhbGlkYXRvciIsInJlcXVpcmUiLCJfIiwiZXhwb3J0cyIsInRvQm9vbGVhbiIsInZhbHVlIiwidG9UZXh0IiwidG9TdHJpbmciLCJ0cmltIiwidG9JbnQiLCJyYWRpeCIsImlzSW50ZWdlciIsInBhcnNlSW50IiwidG9GbG9hdCIsImlzRmluaXRlIiwianNvblRvQmFzZTY0Iiwib2JqIiwiQnVmZmVyIiwiZnJvbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJiYXNlNjRUb0pzb24iLCJiYXNlNjQiLCJwYXJzZSIsInRleHRUb0RhdGUiLCJ0b0tWUGFpcnMiLCJhcnJheU9mT2JqZWN0cyIsInByb3BlcnR5IiwidHJhbnNmb3JtZXIiLCJyZWR1Y2UiLCJ0YWJsZSIsIm1hcEtleXNEZWVwIiwibWFwcGluZyIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsIm5ld09iaiIsImZvck93biIsInYiLCJrIiwibmsiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsU0FBUyxHQUFHQyxPQUFPLENBQUMsV0FBRCxDQUF6Qjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBUUQsT0FBTyxDQUFDLFVBQUQsQ0FBckI7O0FBRUFFLE9BQU8sQ0FBQ0MsU0FBUixHQUFxQkMsS0FBRCxJQUFXLE9BQU9BLEtBQVAsS0FBaUIsU0FBakIsR0FBNkJBLEtBQTdCLEdBQXFDTCxTQUFTLENBQUNJLFNBQVYsQ0FBb0JDLEtBQXBCLEVBQTJCLElBQTNCLENBQXBFOztBQUVBRixPQUFPLENBQUNHLE1BQVIsR0FBa0JELEtBQUQsSUFBV0EsS0FBSyxJQUFJLENBQUMsT0FBT0EsS0FBUCxLQUFpQixRQUFqQixHQUE0QkEsS0FBSyxDQUFDRSxRQUFOLEVBQTVCLEdBQStDRixLQUFoRCxFQUF1REcsSUFBdkQsRUFBckM7O0FBRUFMLE9BQU8sQ0FBQ00sS0FBUixHQUFnQixDQUFDSixLQUFELEVBQVFLLEtBQVIsS0FBa0JSLENBQUMsQ0FBQ1MsU0FBRixDQUFZTixLQUFaLElBQXFCQSxLQUFyQixHQUE2Qk8sUUFBUSxDQUFDUCxLQUFELEVBQVFLLEtBQVIsQ0FBdkU7O0FBRUFQLE9BQU8sQ0FBQ1UsT0FBUixHQUFtQlIsS0FBRCxJQUFXSCxDQUFDLENBQUNZLFFBQUYsQ0FBV1QsS0FBWCxJQUFvQkEsS0FBcEIsR0FBNEJMLFNBQVMsQ0FBQ2EsT0FBVixDQUFrQlIsS0FBbEIsQ0FBekQ7O0FBRUFGLE9BQU8sQ0FBQ1ksWUFBUixHQUF3QkMsR0FBRCxJQUFTQyxNQUFNLENBQUNDLElBQVAsQ0FBWUMsSUFBSSxDQUFDQyxTQUFMLENBQWVKLEdBQWYsQ0FBWixFQUFpQ1QsUUFBakMsQ0FBMEMsUUFBMUMsQ0FBaEM7O0FBRUFKLE9BQU8sQ0FBQ2tCLFlBQVIsR0FBd0JDLE1BQUQsSUFBWUgsSUFBSSxDQUFDSSxLQUFMLENBQVdOLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSSxNQUFaLEVBQW9CLFFBQXBCLEVBQThCZixRQUE5QixDQUF1QyxPQUF2QyxDQUFYLENBQW5DOztBQUVBSixPQUFPLENBQUNxQixVQUFSLEdBQXFCdkIsT0FBTyxDQUFDLGdCQUFELENBQTVCOztBQUVBRSxPQUFPLENBQUNzQixTQUFSLEdBQW9CLENBQUNDLGNBQUQsRUFBaUJDLFFBQWpCLEVBQTJCQyxXQUEzQixLQUEyQ0YsY0FBYyxDQUFDRyxNQUFmLENBQXNCLENBQUNDLEtBQUQsRUFBUWQsR0FBUixLQUFnQjtBQUNqR2MsRUFBQUEsS0FBSyxDQUFDZCxHQUFHLENBQUNXLFFBQUQsQ0FBSixDQUFMLEdBQXVCQyxXQUFXLEdBQUdBLFdBQVcsQ0FBQ1osR0FBRCxDQUFkLEdBQXNCQSxHQUF4RDtBQUNBLFNBQU9jLEtBQVA7QUFDSCxDQUg4RCxFQUc1RCxFQUg0RCxDQUEvRDs7QUFLQSxNQUFNQyxXQUFXLEdBQUcsQ0FBQ0wsY0FBRCxFQUFpQk0sT0FBakIsS0FBNkI7QUFDN0MsTUFBSUMsS0FBSyxDQUFDQyxPQUFOLENBQWNSLGNBQWQsQ0FBSixFQUFtQyxPQUFPeEIsQ0FBQyxDQUFDaUMsR0FBRixDQUFNVCxjQUFOLEVBQXNCVixHQUFHLElBQUllLFdBQVcsQ0FBQ2YsR0FBRCxFQUFNZ0IsT0FBTixDQUF4QyxDQUFQO0FBRW5DLE1BQUlJLE1BQU0sR0FBRyxFQUFiOztBQUNDbEMsRUFBQUEsQ0FBQyxDQUFDbUMsTUFBRixDQUFTWCxjQUFULEVBQXlCLENBQUNZLENBQUQsRUFBSUMsQ0FBSixLQUFVO0FBQ2hDLFFBQUlDLEVBQUUsR0FBR1IsT0FBTyxDQUFDTyxDQUFELENBQWhCOztBQUNBLFFBQUksQ0FBQ0MsRUFBTCxFQUFTO0FBQ0xKLE1BQUFBLE1BQU0sQ0FBQ0csQ0FBRCxDQUFOLEdBQVlELENBQVo7QUFDSCxLQUZELE1BRU8sSUFBSUwsS0FBSyxDQUFDQyxPQUFOLENBQWNNLEVBQWQsQ0FBSixFQUF1QjtBQUMxQkosTUFBQUEsTUFBTSxDQUFDSSxFQUFFLENBQUMsQ0FBRCxDQUFILENBQU4sR0FBZ0JULFdBQVcsQ0FBQ08sQ0FBRCxFQUFJRSxFQUFFLENBQUMsQ0FBRCxDQUFOLENBQTNCO0FBQ0gsS0FGTSxNQUVBO0FBQ0hKLE1BQUFBLE1BQU0sQ0FBQ0ksRUFBRCxDQUFOLEdBQWFGLENBQWI7QUFDSDtBQUNKLEdBVEE7O0FBV0QsU0FBT0YsTUFBUDtBQUNILENBaEJEOztBQWtCQWpDLE9BQU8sQ0FBQzRCLFdBQVIsR0FBc0JBLFdBQXRCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHZhbGlkYXRvciA9IHJlcXVpcmUoJ3ZhbGlkYXRvcicpO1xuY29uc3QgeyBfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuXG5leHBvcnRzLnRvQm9vbGVhbiA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgPyB2YWx1ZSA6IHZhbGlkYXRvci50b0Jvb2xlYW4odmFsdWUsIHRydWUpO1xuXG5leHBvcnRzLnRvVGV4dCA9ICh2YWx1ZSkgPT4gdmFsdWUgJiYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgPyB2YWx1ZS50b1N0cmluZygpIDogdmFsdWUpLnRyaW0oKTtcblxuZXhwb3J0cy50b0ludCA9ICh2YWx1ZSwgcmFkaXgpID0+IF8uaXNJbnRlZ2VyKHZhbHVlKSA/IHZhbHVlIDogcGFyc2VJbnQodmFsdWUsIHJhZGl4KTsgXG5cbmV4cG9ydHMudG9GbG9hdCA9ICh2YWx1ZSkgPT4gXy5pc0Zpbml0ZSh2YWx1ZSkgPyB2YWx1ZSA6IHZhbGlkYXRvci50b0Zsb2F0KHZhbHVlKTsgXG5cbmV4cG9ydHMuanNvblRvQmFzZTY0ID0gKG9iaikgPT4gQnVmZmVyLmZyb20oSlNPTi5zdHJpbmdpZnkob2JqKSkudG9TdHJpbmcoXCJiYXNlNjRcIik7ICAgICAgIFxuXG5leHBvcnRzLmJhc2U2NFRvSnNvbiA9IChiYXNlNjQpID0+IEpTT04ucGFyc2UoQnVmZmVyLmZyb20oYmFzZTY0LCAnYmFzZTY0JykudG9TdHJpbmcoJ2FzY2lpJykpO1xuXG5leHBvcnRzLnRleHRUb0RhdGUgPSByZXF1aXJlKCdkYXRlLWZucy9wYXJzZScpO1xuXG5leHBvcnRzLnRvS1ZQYWlycyA9IChhcnJheU9mT2JqZWN0cywgcHJvcGVydHksIHRyYW5zZm9ybWVyKSA9PiBhcnJheU9mT2JqZWN0cy5yZWR1Y2UoKHRhYmxlLCBvYmopID0+IHtcbiAgICB0YWJsZVtvYmpbcHJvcGVydHldXSA9IHRyYW5zZm9ybWVyID8gdHJhbnNmb3JtZXIob2JqKSA6IG9iajtcbiAgICByZXR1cm4gdGFibGU7XG59LCB7fSk7XG5cbmNvbnN0IG1hcEtleXNEZWVwID0gKGFycmF5T2ZPYmplY3RzLCBtYXBwaW5nKSA9PiB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyYXlPZk9iamVjdHMpKSByZXR1cm4gXy5tYXAoYXJyYXlPZk9iamVjdHMsIG9iaiA9PiBtYXBLZXlzRGVlcChvYmosIG1hcHBpbmcpKTtcblxuICAgIGxldCBuZXdPYmogPSB7fTtcbiAgICAgXy5mb3JPd24oYXJyYXlPZk9iamVjdHMsICh2LCBrKSA9PiB7XG4gICAgICAgIGxldCBuayA9IG1hcHBpbmdba107XG4gICAgICAgIGlmICghbmspIHsgIFxuICAgICAgICAgICAgbmV3T2JqW2tdID0gdjtcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG5rKSkge1xuICAgICAgICAgICAgbmV3T2JqW25rWzBdXSA9IG1hcEtleXNEZWVwKHYsIG5rWzFdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld09ialtua10gPSB2O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmV3T2JqO1xufTtcblxuZXhwb3J0cy5tYXBLZXlzRGVlcCA9IG1hcEtleXNEZWVwOyJdfQ==