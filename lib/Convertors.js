"use strict";

require("source-map-support/register");

const validator = require("validator");

const {
  _
} = require("rk-utils");

exports.toBoolean = value => typeof value === "boolean" ? value : validator.toBoolean(value, true);

exports.toText = (value, noTrim) => {
  if (value) {
    value = typeof value !== "string" ? value.toString() : value;
    return noTrim ? value : value.trim();
  }

  return value;
};

exports.toInt = (value, radix) => _.isInteger(value) ? value : parseInt(value, radix);

exports.toFloat = value => _.isFinite(value) ? value : validator.toFloat(value);

exports.jsonToBase64 = obj => Buffer.from(JSON.stringify(obj)).toString("base64");

exports.base64ToJson = base64 => JSON.parse(Buffer.from(base64, "base64").toString("ascii"));

exports.textToDate = require("date-fns/parse");

exports.toKVPairs = (arrayOfObjects, property, transformer) => {
  const keyGetter = typeof property === 'function' ? property : obj => obj[property];
  return arrayOfObjects.reduce((table, obj) => {
    table[keyGetter(obj)] = transformer ? transformer(obj) : obj;
    return table;
  }, {});
};

const mapKeysDeep = (arrayOfObjects, mapping, keepUnmapped) => {
  if (Array.isArray(arrayOfObjects)) return _.map(arrayOfObjects, obj => mapKeysDeep(obj, mapping));
  if (typeof mapping === 'string') return {
    [mapping]: arrayOfObjects
  };
  let newObj = {};

  _.forOwn(arrayOfObjects, (v, k) => {
    if (k in mapping) {
      let nk = mapping[k];

      if (Array.isArray(nk)) {
        newObj[nk[0]] = { ...newObj[nk[0]],
          ...mapKeysDeep(v, nk[1])
        };
      } else {
        newObj[nk] = v;
      }
    } else {
      if (keepUnmapped) {
        newObj[k] = v;
      }
    }
  });

  return newObj;
};

exports.mapKeysDeep = mapKeysDeep;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Db252ZXJ0b3JzLmpzIl0sIm5hbWVzIjpbInZhbGlkYXRvciIsInJlcXVpcmUiLCJfIiwiZXhwb3J0cyIsInRvQm9vbGVhbiIsInZhbHVlIiwidG9UZXh0Iiwibm9UcmltIiwidG9TdHJpbmciLCJ0cmltIiwidG9JbnQiLCJyYWRpeCIsImlzSW50ZWdlciIsInBhcnNlSW50IiwidG9GbG9hdCIsImlzRmluaXRlIiwianNvblRvQmFzZTY0Iiwib2JqIiwiQnVmZmVyIiwiZnJvbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJiYXNlNjRUb0pzb24iLCJiYXNlNjQiLCJwYXJzZSIsInRleHRUb0RhdGUiLCJ0b0tWUGFpcnMiLCJhcnJheU9mT2JqZWN0cyIsInByb3BlcnR5IiwidHJhbnNmb3JtZXIiLCJrZXlHZXR0ZXIiLCJyZWR1Y2UiLCJ0YWJsZSIsIm1hcEtleXNEZWVwIiwibWFwcGluZyIsImtlZXBVbm1hcHBlZCIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsIm5ld09iaiIsImZvck93biIsInYiLCJrIiwibmsiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsU0FBUyxHQUFHQyxPQUFPLENBQUMsV0FBRCxDQUF6Qjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBUUQsT0FBTyxDQUFDLFVBQUQsQ0FBckI7O0FBRUFFLE9BQU8sQ0FBQ0MsU0FBUixHQUFxQkMsS0FBRCxJQUFZLE9BQU9BLEtBQVAsS0FBaUIsU0FBakIsR0FBNkJBLEtBQTdCLEdBQXFDTCxTQUFTLENBQUNJLFNBQVYsQ0FBb0JDLEtBQXBCLEVBQTJCLElBQTNCLENBQXJFOztBQUVBRixPQUFPLENBQUNHLE1BQVIsR0FBaUIsQ0FBQ0QsS0FBRCxFQUFRRSxNQUFSLEtBQW1CO0FBQ2hDLE1BQUlGLEtBQUosRUFBVztBQUNQQSxJQUFBQSxLQUFLLEdBQUcsT0FBT0EsS0FBUCxLQUFpQixRQUFqQixHQUE0QkEsS0FBSyxDQUFDRyxRQUFOLEVBQTVCLEdBQStDSCxLQUF2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SDtBQUNKLEtBUEQsTUFPTztBQUNILFVBQUlOLFlBQUosRUFBa0I7QUFDZEksUUFBQUEsTUFBTSxDQUFDRyxDQUFELENBQU4sR0FBWUQsQ0FBWjtBQUNIO0FBQ0o7QUFDSixHQWJEOztBQWVBLFNBQU9GLE1BQVA7QUFDSCxDQXRCRDs7QUF3QkFwQyxPQUFPLENBQUM4QixXQUFSLEdBQXNCQSxXQUF0QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB2YWxpZGF0b3IgPSByZXF1aXJlKFwidmFsaWRhdG9yXCIpO1xuY29uc3QgeyBfIH0gPSByZXF1aXJlKFwicmstdXRpbHNcIik7XG5cbmV4cG9ydHMudG9Cb29sZWFuID0gKHZhbHVlKSA9PiAodHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIiA/IHZhbHVlIDogdmFsaWRhdG9yLnRvQm9vbGVhbih2YWx1ZSwgdHJ1ZSkpO1xuXG5leHBvcnRzLnRvVGV4dCA9ICh2YWx1ZSwgbm9UcmltKSA9PiB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gdHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiID8gdmFsdWUudG9TdHJpbmcoKSA6IHZhbHVlO1xuICAgICAgICByZXR1cm4gbm9UcmltID8gdmFsdWUgOiB2YWx1ZS50cmltKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xufTtcblxuZXhwb3J0cy50b0ludCA9ICh2YWx1ZSwgcmFkaXgpID0+IChfLmlzSW50ZWdlcih2YWx1ZSkgPyB2YWx1ZSA6IHBhcnNlSW50KHZhbHVlLCByYWRpeCkpO1xuXG5leHBvcnRzLnRvRmxvYXQgPSAodmFsdWUpID0+IChfLmlzRmluaXRlKHZhbHVlKSA/IHZhbHVlIDogdmFsaWRhdG9yLnRvRmxvYXQodmFsdWUpKTtcblxuZXhwb3J0cy5qc29uVG9CYXNlNjQgPSAob2JqKSA9PiBCdWZmZXIuZnJvbShKU09OLnN0cmluZ2lmeShvYmopKS50b1N0cmluZyhcImJhc2U2NFwiKTtcblxuZXhwb3J0cy5iYXNlNjRUb0pzb24gPSAoYmFzZTY0KSA9PiBKU09OLnBhcnNlKEJ1ZmZlci5mcm9tKGJhc2U2NCwgXCJiYXNlNjRcIikudG9TdHJpbmcoXCJhc2NpaVwiKSk7XG5cbmV4cG9ydHMudGV4dFRvRGF0ZSA9IHJlcXVpcmUoXCJkYXRlLWZucy9wYXJzZVwiKTtcblxuZXhwb3J0cy50b0tWUGFpcnMgPSAoYXJyYXlPZk9iamVjdHMsIHByb3BlcnR5LCB0cmFuc2Zvcm1lcikgPT4ge1xuICAgIGNvbnN0IGtleUdldHRlciA9ICh0eXBlb2YgcHJvcGVydHkgPT09ICdmdW5jdGlvbicpID8gcHJvcGVydHkgOiBvYmogPT4gb2JqW3Byb3BlcnR5XTtcblxuICAgIHJldHVybiBhcnJheU9mT2JqZWN0cy5yZWR1Y2UoKHRhYmxlLCBvYmopID0+IHtcbiAgICAgICAgdGFibGVba2V5R2V0dGVyKG9iaildID0gdHJhbnNmb3JtZXIgPyB0cmFuc2Zvcm1lcihvYmopIDogb2JqO1xuICAgICAgICByZXR1cm4gdGFibGU7XG4gICAgfSwge30pO1xufTtcblxuLyoqXG4gKiBSZW1hcCB0aGUga2V5cyBvZiBvYmplY3QgZWxlbWVudHMgaW4gYW4gYXJyYXksIGxpa2UgcHJvamVjdGlvbi5cbiAqIEBwYXJhbSB7Kn0gYXJyYXlPZk9iamVjdHNcbiAqIEBwYXJhbSB7Kn0gbWFwcGluZyAtIGtleSB0byBuZXdLZXkgb3Iga2V5IHRvIGFycmF5WyBuZXdLZXksIHZhbHVlTWFwIF0gZm9yIG5leHQgbGV2ZWwgbWFwcGluZ1xuICogQHBhcmFtIHtib29sZWFufSBrZWVwVW5tYXBwZWQgLSBJZiB0cnVlLCB3aWxsIGtlZXAgdGhvc2Ugbm90IGluIG1hcHBpbmcgYXMgaXRzIG9yaWdpbmFsIGtleSwgb3RoZXJ3aXNlIGZpbHRlciBvdXRcbiAqL1xuY29uc3QgbWFwS2V5c0RlZXAgPSAoYXJyYXlPZk9iamVjdHMsIG1hcHBpbmcsIGtlZXBVbm1hcHBlZCkgPT4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFycmF5T2ZPYmplY3RzKSkgcmV0dXJuIF8ubWFwKGFycmF5T2ZPYmplY3RzLCAob2JqKSA9PiBtYXBLZXlzRGVlcChvYmosIG1hcHBpbmcpKTtcblxuICAgIGlmICh0eXBlb2YgbWFwcGluZyA9PT0gJ3N0cmluZycpIHJldHVybiB7IFttYXBwaW5nXTogYXJyYXlPZk9iamVjdHMgfTtcblxuICAgIGxldCBuZXdPYmogPSB7fTtcbiAgICBfLmZvck93bihhcnJheU9mT2JqZWN0cywgKHYsIGspID0+IHtcbiAgICAgICAgaWYgKGsgaW4gbWFwcGluZykge1xuICAgICAgICAgICAgbGV0IG5rID0gbWFwcGluZ1trXTtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5rKSkge1xuICAgICAgICAgICAgICAgIG5ld09ialtua1swXV0gPSB7IC4uLm5ld09ialtua1swXV0sIC4uLm1hcEtleXNEZWVwKHYsIG5rWzFdKSB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdPYmpbbmtdID0gdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChrZWVwVW5tYXBwZWQpIHtcbiAgICAgICAgICAgICAgICBuZXdPYmpba10gPSB2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmV3T2JqO1xufTtcblxuZXhwb3J0cy5tYXBLZXlzRGVlcCA9IG1hcEtleXNEZWVwO1xuIl19