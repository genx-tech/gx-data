"use strict";

require("source-map-support/register");

const validator = require("validator");

const {
  _
} = require("rk-utils");

exports.toBoolean = value => typeof value === "boolean" ? value : validator.toBoolean(value.toString(), true);

exports.toText = (value, noTrim) => {
  if (value) {
    value = typeof value !== "string" ? value.toString() : value;
    return noTrim ? value : value.trim();
  }

  return value;
};

exports.toInt = (value, radix) => _.isInteger(value) ? value : parseInt(value, radix);

exports.toFloat = value => _.isFinite(value) ? value : validator.toFloat(value);

exports.jsonToBase64 = obj => Buffer.from(JSON.stringify(obj)).toString("base64");

exports.base64ToJson = base64 => JSON.parse(Buffer.from(base64, "base64").toString("ascii"));

exports.textToDate = require("date-fns/parse");

exports.toKVPairs = (arrayOfObjects, property, transformer) => {
  const keyGetter = typeof property === 'function' ? property : obj => obj[property];
  return arrayOfObjects.reduce((table, obj) => {
    table[keyGetter(obj)] = transformer ? transformer(obj) : obj;
    return table;
  }, {});
};

const mapKeysDeep = (object, mapping, keepUnmapped) => {
  if (typeof mapping === 'string') return {
    [mapping]: object
  };
  let newObj = {};

  _.forOwn(object, (v, k) => {
    if (k in mapping) {
      let nk = mapping[k];

      if (Array.isArray(nk)) {
        newObj[nk[0]] = { ...newObj[nk[0]],
          ...mapKeysDeep(v, nk[1], keepUnmapped)
        };
      } else {
        newObj[nk] = v;
      }
    } else {
      if (keepUnmapped) {
        newObj[k] = v;
      }
    }
  });

  return newObj;
};

const mapArraysDeep = (arrayOfObjects, mapping, keepUnmapped) => _.map(arrayOfObjects, obj => mapKeysDeep(obj, mapping, keepUnmapped));

exports.mapKeysDeep = mapKeysDeep;
exports.mapArraysDeep = mapArraysDeep;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Db252ZXJ0b3JzLmpzIl0sIm5hbWVzIjpbInZhbGlkYXRvciIsInJlcXVpcmUiLCJfIiwiZXhwb3J0cyIsInRvQm9vbGVhbiIsInZhbHVlIiwidG9TdHJpbmciLCJ0b1RleHQiLCJub1RyaW0iLCJ0cmltIiwidG9JbnQiLCJyYWRpeCIsImlzSW50ZWdlciIsInBhcnNlSW50IiwidG9GbG9hdCIsImlzRmluaXRlIiwianNvblRvQmFzZTY0Iiwib2JqIiwiQnVmZmVyIiwiZnJvbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJiYXNlNjRUb0pzb24iLCJiYXNlNjQiLCJwYXJzZSIsInRleHRUb0RhdGUiLCJ0b0tWUGFpcnMiLCJhcnJheU9mT2JqZWN0cyIsInByb3BlcnR5IiwidHJhbnNmb3JtZXIiLCJrZXlHZXR0ZXIiLCJyZWR1Y2UiLCJ0YWJsZSIsIm1hcEtleXNEZWVwIiwib2JqZWN0IiwibWFwcGluZyIsImtlZXBVbm1hcHBlZCIsIm5ld09iaiIsImZvck93biIsInYiLCJrIiwibmsiLCJBcnJheSIsImlzQXJyYXkiLCJtYXBBcnJheXNEZWVwIiwibWFwIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLFdBQUQsQ0FBekI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQVFELE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUVBRSxPQUFPLENBQUNDLFNBQVIsR0FBcUJDLEtBQUQsSUFBWSxPQUFPQSxLQUFQLEtBQWlCLFNBQWpCLEdBQTZCQSxLQUE3QixHQUFxQ0wsU0FBUyxDQUFDSSxTQUFWLENBQW9CQyxLQUFLLENBQUNDLFFBQU4sRUFBcEIsRUFBc0MsSUFBdEMsQ0FBckU7O0FBRUFILE9BQU8sQ0FBQ0ksTUFBUixHQUFpQixDQUFDRixLQUFELEVBQVFHLE1BQVIsS0FBbUI7QUFDaEMsTUFBSUgsS0FBSixFQUFXO0FBQ1BBLElBQUFBLEtBQUssR0FBRyxPQUFPQSxLQUFQLEtBQWlCLFFBQWpC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QUFDSixHQWJEOztBQWVBLFNBQU9GLE1BQVA7QUFDSCxDQXBCRDs7QUFzQkEsTUFBTU8sYUFBYSxHQUFHLENBQUNqQixjQUFELEVBQWlCUSxPQUFqQixFQUEwQkMsWUFBMUIsS0FBMkNsQyxDQUFDLENBQUMyQyxHQUFGLENBQU1sQixjQUFOLEVBQXVCVixHQUFELElBQVNnQixXQUFXLENBQUNoQixHQUFELEVBQU1rQixPQUFOLEVBQWVDLFlBQWYsQ0FBMUMsQ0FBakU7O0FBRUFqQyxPQUFPLENBQUM4QixXQUFSLEdBQXNCQSxXQUF0QjtBQUNBOUIsT0FBTyxDQUFDeUMsYUFBUixHQUF3QkEsYUFBeEIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgdmFsaWRhdG9yID0gcmVxdWlyZShcInZhbGlkYXRvclwiKTtcbmNvbnN0IHsgXyB9ID0gcmVxdWlyZShcInJrLXV0aWxzXCIpO1xuXG5leHBvcnRzLnRvQm9vbGVhbiA9ICh2YWx1ZSkgPT4gKHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCIgPyB2YWx1ZSA6IHZhbGlkYXRvci50b0Jvb2xlYW4odmFsdWUudG9TdHJpbmcoKSwgdHJ1ZSkpO1xuXG5leHBvcnRzLnRvVGV4dCA9ICh2YWx1ZSwgbm9UcmltKSA9PiB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gdHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiID8gdmFsdWUudG9TdHJpbmcoKSA6IHZhbHVlO1xuICAgICAgICByZXR1cm4gbm9UcmltID8gdmFsdWUgOiB2YWx1ZS50cmltKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xufTtcblxuZXhwb3J0cy50b0ludCA9ICh2YWx1ZSwgcmFkaXgpID0+IChfLmlzSW50ZWdlcih2YWx1ZSkgPyB2YWx1ZSA6IHBhcnNlSW50KHZhbHVlLCByYWRpeCkpO1xuXG5leHBvcnRzLnRvRmxvYXQgPSAodmFsdWUpID0+IChfLmlzRmluaXRlKHZhbHVlKSA/IHZhbHVlIDogdmFsaWRhdG9yLnRvRmxvYXQodmFsdWUpKTtcblxuZXhwb3J0cy5qc29uVG9CYXNlNjQgPSAob2JqKSA9PiBCdWZmZXIuZnJvbShKU09OLnN0cmluZ2lmeShvYmopKS50b1N0cmluZyhcImJhc2U2NFwiKTtcblxuZXhwb3J0cy5iYXNlNjRUb0pzb24gPSAoYmFzZTY0KSA9PiBKU09OLnBhcnNlKEJ1ZmZlci5mcm9tKGJhc2U2NCwgXCJiYXNlNjRcIikudG9TdHJpbmcoXCJhc2NpaVwiKSk7XG5cbmV4cG9ydHMudGV4dFRvRGF0ZSA9IHJlcXVpcmUoXCJkYXRlLWZucy9wYXJzZVwiKTtcblxuZXhwb3J0cy50b0tWUGFpcnMgPSAoYXJyYXlPZk9iamVjdHMsIHByb3BlcnR5LCB0cmFuc2Zvcm1lcikgPT4ge1xuICAgIGNvbnN0IGtleUdldHRlciA9ICh0eXBlb2YgcHJvcGVydHkgPT09ICdmdW5jdGlvbicpID8gcHJvcGVydHkgOiBvYmogPT4gb2JqW3Byb3BlcnR5XTtcblxuICAgIHJldHVybiBhcnJheU9mT2JqZWN0cy5yZWR1Y2UoKHRhYmxlLCBvYmopID0+IHtcbiAgICAgICAgdGFibGVba2V5R2V0dGVyKG9iaildID0gdHJhbnNmb3JtZXIgPyB0cmFuc2Zvcm1lcihvYmopIDogb2JqO1xuICAgICAgICByZXR1cm4gdGFibGU7XG4gICAgfSwge30pO1xufTtcblxuLyoqXG4gKiBSZW1hcCB0aGUga2V5cyBvZiBvYmplY3QgZWxlbWVudHMgaW4gYW4gYXJyYXksIGxpa2UgcHJvamVjdGlvbi5cbiAqIEBwYXJhbSB7Kn0gb2JqZWN0XG4gKiBAcGFyYW0geyp9IG1hcHBpbmcgLSBrZXkgdG8gbmV3S2V5IG9yIGtleSB0byBhcnJheVsgbmV3S2V5LCB2YWx1ZU1hcCBdIGZvciBuZXh0IGxldmVsIG1hcHBpbmdcbiAqIEBwYXJhbSB7Ym9vbGVhbn0ga2VlcFVubWFwcGVkIC0gSWYgdHJ1ZSwgd2lsbCBrZWVwIHRob3NlIG5vdCBpbiBtYXBwaW5nIGFzIGl0cyBvcmlnaW5hbCBrZXksIG90aGVyd2lzZSBmaWx0ZXIgb3V0XG4gKi9cbmNvbnN0IG1hcEtleXNEZWVwID0gKG9iamVjdCwgbWFwcGluZywga2VlcFVubWFwcGVkKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBtYXBwaW5nID09PSAnc3RyaW5nJykgcmV0dXJuIHsgW21hcHBpbmddOiBvYmplY3QgfTtcblxuICAgIGxldCBuZXdPYmogPSB7fTtcbiAgICBfLmZvck93bihvYmplY3QsICh2LCBrKSA9PiB7XG4gICAgICAgIGlmIChrIGluIG1hcHBpbmcpIHtcbiAgICAgICAgICAgIGxldCBuayA9IG1hcHBpbmdba107XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShuaykpIHtcbiAgICAgICAgICAgICAgICBuZXdPYmpbbmtbMF1dID0geyAuLi5uZXdPYmpbbmtbMF1dLCAuLi5tYXBLZXlzRGVlcCh2LCBua1sxXSwga2VlcFVubWFwcGVkKSB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdPYmpbbmtdID0gdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChrZWVwVW5tYXBwZWQpIHtcbiAgICAgICAgICAgICAgICBuZXdPYmpba10gPSB2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmV3T2JqO1xufTtcblxuY29uc3QgbWFwQXJyYXlzRGVlcCA9IChhcnJheU9mT2JqZWN0cywgbWFwcGluZywga2VlcFVubWFwcGVkKSA9PiBfLm1hcChhcnJheU9mT2JqZWN0cywgKG9iaikgPT4gbWFwS2V5c0RlZXAob2JqLCBtYXBwaW5nLCBrZWVwVW5tYXBwZWQpKTtcblxuZXhwb3J0cy5tYXBLZXlzRGVlcCA9IG1hcEtleXNEZWVwO1xuZXhwb3J0cy5tYXBBcnJheXNEZWVwID0gbWFwQXJyYXlzRGVlcDtcbiJdfQ==