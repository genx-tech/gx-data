"use strict";

require("source-map-support/register");

const validator = require("validator");

const {
  _
} = require("@genx/july");

exports.toBoolean = value => typeof value === "boolean" ? value : validator.toBoolean(value.toString(), true);

exports.toText = (value, noTrim) => {
  if (value) {
    value = typeof value !== "string" ? value.toString() : value;
    return noTrim ? value : value.trim();
  }

  return value;
};

exports.toInt = (value, radix) => _.isInteger(value) ? value : parseInt(value, radix);

exports.toFloat = value => _.isFinite(value) ? value : validator.toFloat(value);

exports.jsonToBase64 = obj => Buffer.from(JSON.stringify(obj)).toString("base64");

exports.base64ToJson = base64 => JSON.parse(Buffer.from(base64, "base64").toString("ascii"));

exports.toKVPairs = (arrayOfObjects, property, transformer) => {
  const keyGetter = typeof property === "function" ? property : obj => obj[property];
  return arrayOfObjects.reduce((table, obj) => {
    table[keyGetter(obj)] = transformer ? transformer(obj) : obj;
    return table;
  }, {});
};

exports.toSet = (arrayOfObjects, property) => {
  if (!arrayOfObjects) return new Set();
  const valueGetter = typeof property === "function" ? property : obj => obj[property];
  const result = new Set();
  arrayOfObjects.forEach(obj => result.add(valueGetter(obj)));
  return result;
};

const mapKeysDeep = (object, mapping, keepUnmapped) => {
  if (typeof mapping === "string") return {
    [mapping]: object
  };
  let newObj = {};

  _.forOwn(object, (v, k) => {
    if (k in mapping) {
      let nk = mapping[k];

      if (Array.isArray(nk)) {
        newObj[nk[0]] = { ...newObj[nk[0]],
          ...mapKeysDeep(v, nk[1], keepUnmapped)
        };
      } else {
        newObj[nk] = v;
      }
    } else {
      if (keepUnmapped) {
        newObj[k] = v;
      }
    }
  });

  return newObj;
};

const mapArraysDeep = (arrayOfObjects, mapping, keepUnmapped) => _.map(arrayOfObjects, obj => mapKeysDeep(obj, mapping, keepUnmapped));

exports.mapKeysDeep = mapKeysDeep;
exports.mapArraysDeep = mapArraysDeep;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Db252ZXJ0b3JzLmpzIl0sIm5hbWVzIjpbInZhbGlkYXRvciIsInJlcXVpcmUiLCJfIiwiZXhwb3J0cyIsInRvQm9vbGVhbiIsInZhbHVlIiwidG9TdHJpbmciLCJ0b1RleHQiLCJub1RyaW0iLCJ0cmltIiwidG9JbnQiLCJyYWRpeCIsImlzSW50ZWdlciIsInBhcnNlSW50IiwidG9GbG9hdCIsImlzRmluaXRlIiwianNvblRvQmFzZTY0Iiwib2JqIiwiQnVmZmVyIiwiZnJvbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJiYXNlNjRUb0pzb24iLCJiYXNlNjQiLCJwYXJzZSIsInRvS1ZQYWlycyIsImFycmF5T2ZPYmplY3RzIiwicHJvcGVydHkiLCJ0cmFuc2Zvcm1lciIsImtleUdldHRlciIsInJlZHVjZSIsInRhYmxlIiwidG9TZXQiLCJTZXQiLCJ2YWx1ZUdldHRlciIsInJlc3VsdCIsImZvckVhY2giLCJhZGQiLCJtYXBLZXlzRGVlcCIsIm9iamVjdCIsIm1hcHBpbmciLCJrZWVwVW5tYXBwZWQiLCJuZXdPYmoiLCJmb3JPd24iLCJ2IiwiayIsIm5rIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwQXJyYXlzRGVlcCIsIm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxXQUFELENBQXpCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFRRCxPQUFPLENBQUMsWUFBRCxDQUFyQjs7QUFFQUUsT0FBTyxDQUFDQyxTQUFSLEdBQXFCQyxLQUFELElBQVksT0FBT0EsS0FBUCxLQUFpQixTQUFqQixHQUE2QkEsS0FBN0IsR0FBcUNMLFNBQVMsQ0FBQ0ksU0FBVixDQUFvQkMsS0FBSyxDQUFDQyxRQUFOLEVBQXBCLEVBQXNDLElBQXRDLENBQXJFOztBQUVBSCxPQUFPLENBQUNJLE1BQVIsR0FBaUIsQ0FBQ0YsS0FBRCxFQUFRRyxNQUFSLEtBQW1CO0FBQ2hDLE1BQUlILEtBQUosRUFBVztBQUNQ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QU4sQ0FBY0YsRUFBZCxDQUFKLEVBQXVCO0FBQ25CSixRQUFBQSxNQUFNLENBQUNJLEVBQUUsQ0FBQyxDQUFELENBQUgsQ0FBTixHQUFnQixFQUFFLEdBQUdKLE1BQU0sQ0FBQ0ksRUFBRSxDQUFDLENBQUQsQ0FBSCxDQUFYO0FBQW9CLGFBQUdSLFdBQVcsQ0FBQ00sQ0FBRCxFQUFJRSxFQUFFLENBQUMsQ0FBRCxDQUFOLEVBQVdMLFlBQVg7QUFBbEMsU0FBaEI7QUFDSCxPQUZELE1BRU87QUFDSEMsUUFBQUEsTUFBTSxDQUFDSSxFQUFELENBQU4sR0FBYUYsQ0FBYjtBQUNIO0FBQ0osS0FQRCxNQU9PO0FBQ0gsVUFBSUgsWUFBSixFQUFrQjtBQUNkQyxRQUFBQSxNQUFNLENBQUNHLENBQUQsQ0FBTixHQUFZRCxDQUFaO0FBQ0g7QUFDSjtBQUNKLEdBYkQ7O0FBZUEsU0FBT0YsTUFBUDtBQUNILENBcEJEOztBQXNCQSxNQUFNTyxhQUFhLEdBQUcsQ0FBQ3ZCLGNBQUQsRUFBaUJjLE9BQWpCLEVBQTBCQyxZQUExQixLQUNsQnZDLENBQUMsQ0FBQ2dELEdBQUYsQ0FBTXhCLGNBQU4sRUFBdUJULEdBQUQsSUFBU3FCLFdBQVcsQ0FBQ3JCLEdBQUQsRUFBTXVCLE9BQU4sRUFBZUMsWUFBZixDQUExQyxDQURKOztBQUdBdEMsT0FBTyxDQUFDbUMsV0FBUixHQUFzQkEsV0FBdEI7QUFDQW5DLE9BQU8sQ0FBQzhDLGFBQVIsR0FBd0JBLGFBQXhCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHZhbGlkYXRvciA9IHJlcXVpcmUoXCJ2YWxpZGF0b3JcIik7XG5jb25zdCB7IF8gfSA9IHJlcXVpcmUoXCJAZ2VueC9qdWx5XCIpO1xuXG5leHBvcnRzLnRvQm9vbGVhbiA9ICh2YWx1ZSkgPT4gKHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCIgPyB2YWx1ZSA6IHZhbGlkYXRvci50b0Jvb2xlYW4odmFsdWUudG9TdHJpbmcoKSwgdHJ1ZSkpO1xuXG5leHBvcnRzLnRvVGV4dCA9ICh2YWx1ZSwgbm9UcmltKSA9PiB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gdHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiID8gdmFsdWUudG9TdHJpbmcoKSA6IHZhbHVlO1xuICAgICAgICByZXR1cm4gbm9UcmltID8gdmFsdWUgOiB2YWx1ZS50cmltKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xufTtcblxuZXhwb3J0cy50b0ludCA9ICh2YWx1ZSwgcmFkaXgpID0+IChfLmlzSW50ZWdlcih2YWx1ZSkgPyB2YWx1ZSA6IHBhcnNlSW50KHZhbHVlLCByYWRpeCkpO1xuXG5leHBvcnRzLnRvRmxvYXQgPSAodmFsdWUpID0+IChfLmlzRmluaXRlKHZhbHVlKSA/IHZhbHVlIDogdmFsaWRhdG9yLnRvRmxvYXQodmFsdWUpKTtcblxuZXhwb3J0cy5qc29uVG9CYXNlNjQgPSAob2JqKSA9PiBCdWZmZXIuZnJvbShKU09OLnN0cmluZ2lmeShvYmopKS50b1N0cmluZyhcImJhc2U2NFwiKTtcblxuZXhwb3J0cy5iYXNlNjRUb0pzb24gPSAoYmFzZTY0KSA9PiBKU09OLnBhcnNlKEJ1ZmZlci5mcm9tKGJhc2U2NCwgXCJiYXNlNjRcIikudG9TdHJpbmcoXCJhc2NpaVwiKSk7XG5cbmV4cG9ydHMudG9LVlBhaXJzID0gKGFycmF5T2ZPYmplY3RzLCBwcm9wZXJ0eSwgdHJhbnNmb3JtZXIpID0+IHtcbiAgICBjb25zdCBrZXlHZXR0ZXIgPSB0eXBlb2YgcHJvcGVydHkgPT09IFwiZnVuY3Rpb25cIiA/IHByb3BlcnR5IDogKG9iaikgPT4gb2JqW3Byb3BlcnR5XTtcblxuICAgIHJldHVybiBhcnJheU9mT2JqZWN0cy5yZWR1Y2UoKHRhYmxlLCBvYmopID0+IHtcbiAgICAgICAgdGFibGVba2V5R2V0dGVyKG9iaildID0gdHJhbnNmb3JtZXIgPyB0cmFuc2Zvcm1lcihvYmopIDogb2JqO1xuICAgICAgICByZXR1cm4gdGFibGU7XG4gICAgfSwge30pO1xufTtcblxuZXhwb3J0cy50b1NldCA9IChhcnJheU9mT2JqZWN0cywgcHJvcGVydHkpID0+IHtcbiAgICBpZiAoIWFycmF5T2ZPYmplY3RzKSByZXR1cm4gbmV3IFNldCgpO1xuXG4gICAgY29uc3QgdmFsdWVHZXR0ZXIgPSB0eXBlb2YgcHJvcGVydHkgPT09IFwiZnVuY3Rpb25cIiA/IHByb3BlcnR5IDogKG9iaikgPT4gb2JqW3Byb3BlcnR5XTtcbiAgICBjb25zdCByZXN1bHQgID0gbmV3IFNldCgpO1xuXG4gICAgYXJyYXlPZk9iamVjdHMuZm9yRWFjaChvYmogPT4gcmVzdWx0LmFkZCh2YWx1ZUdldHRlcihvYmopKSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFJlbWFwIHRoZSBrZXlzIG9mIG9iamVjdCBlbGVtZW50cyBpbiBhbiBhcnJheSwgbGlrZSBwcm9qZWN0aW9uLlxuICogQHBhcmFtIHsqfSBvYmplY3RcbiAqIEBwYXJhbSB7Kn0gbWFwcGluZyAtIGtleSB0byBuZXdLZXkgb3Iga2V5IHRvIGFycmF5WyBuZXdLZXksIHZhbHVlTWFwIF0gZm9yIG5leHQgbGV2ZWwgbWFwcGluZ1xuICogQHBhcmFtIHtib29sZWFufSBrZWVwVW5tYXBwZWQgLSBJZiB0cnVlLCB3aWxsIGtlZXAgdGhvc2Ugbm90IGluIG1hcHBpbmcgYXMgaXRzIG9yaWdpbmFsIGtleSwgb3RoZXJ3aXNlIGZpbHRlciBvdXRcbiAqL1xuY29uc3QgbWFwS2V5c0RlZXAgPSAob2JqZWN0LCBtYXBwaW5nLCBrZWVwVW5tYXBwZWQpID0+IHtcbiAgICBpZiAodHlwZW9mIG1hcHBpbmcgPT09IFwic3RyaW5nXCIpIHJldHVybiB7IFttYXBwaW5nXTogb2JqZWN0IH07XG5cbiAgICBsZXQgbmV3T2JqID0ge307XG4gICAgXy5mb3JPd24ob2JqZWN0LCAodiwgaykgPT4ge1xuICAgICAgICBpZiAoayBpbiBtYXBwaW5nKSB7XG4gICAgICAgICAgICBsZXQgbmsgPSBtYXBwaW5nW2tdO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobmspKSB7XG4gICAgICAgICAgICAgICAgbmV3T2JqW25rWzBdXSA9IHsgLi4ubmV3T2JqW25rWzBdXSwgLi4ubWFwS2V5c0RlZXAodiwgbmtbMV0sIGtlZXBVbm1hcHBlZCkgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3T2JqW25rXSA9IHY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoa2VlcFVubWFwcGVkKSB7XG4gICAgICAgICAgICAgICAgbmV3T2JqW2tdID0gdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5ld09iajtcbn07XG5cbmNvbnN0IG1hcEFycmF5c0RlZXAgPSAoYXJyYXlPZk9iamVjdHMsIG1hcHBpbmcsIGtlZXBVbm1hcHBlZCkgPT5cbiAgICBfLm1hcChhcnJheU9mT2JqZWN0cywgKG9iaikgPT4gbWFwS2V5c0RlZXAob2JqLCBtYXBwaW5nLCBrZWVwVW5tYXBwZWQpKTtcblxuZXhwb3J0cy5tYXBLZXlzRGVlcCA9IG1hcEtleXNEZWVwO1xuZXhwb3J0cy5tYXBBcnJheXNEZWVwID0gbWFwQXJyYXlzRGVlcDtcbiJdfQ==