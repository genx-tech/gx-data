"use strict";

require("source-map-support/register");

const validator = require('validator');

const {
  _
} = require('rk-utils');

exports.toBoolean = value => typeof value === 'boolean' ? value : validator.toBoolean(value, true);

exports.toText = (value, noTrim) => {
  if (value) {
    value = typeof value !== 'string' ? value.toString() : value;
    return noTrim ? value : value.trim();
  }

  return value;
};

exports.toInt = (value, radix) => _.isInteger(value) ? value : parseInt(value, radix);

exports.toFloat = value => _.isFinite(value) ? value : validator.toFloat(value);

exports.jsonToBase64 = obj => Buffer.from(JSON.stringify(obj)).toString("base64");

exports.base64ToJson = base64 => JSON.parse(Buffer.from(base64, 'base64').toString('ascii'));

exports.textToDate = require('date-fns/parse');

exports.toKVPairs = (arrayOfObjects, property, transformer) => arrayOfObjects.reduce((table, obj) => {
  table[obj[property]] = transformer ? transformer(obj) : obj;
  return table;
}, {});

const mapKeysDeep = (arrayOfObjects, mapping) => {
  if (Array.isArray(arrayOfObjects)) return _.map(arrayOfObjects, obj => mapKeysDeep(obj, mapping));
  let newObj = {};

  _.forOwn(arrayOfObjects, (v, k) => {
    let nk = mapping[k];

    if (!nk) {
      newObj[k] = v;
    } else if (Array.isArray(nk)) {
      newObj[nk[0]] = mapKeysDeep(v, nk[1]);
    } else {
      newObj[nk] = v;
    }
  });

  return newObj;
};

exports.mapKeysDeep = mapKeysDeep;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Db252ZXJ0b3JzLmpzIl0sIm5hbWVzIjpbInZhbGlkYXRvciIsInJlcXVpcmUiLCJfIiwiZXhwb3J0cyIsInRvQm9vbGVhbiIsInZhbHVlIiwidG9UZXh0Iiwibm9UcmltIiwidG9TdHJpbmciLCJ0cmltIiwidG9JbnQiLCJyYWRpeCIsImlzSW50ZWdlciIsInBhcnNlSW50IiwidG9GbG9hdCIsImlzRmluaXRlIiwianNvblRvQmFzZTY0Iiwib2JqIiwiQnVmZmVyIiwiZnJvbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJiYXNlNjRUb0pzb24iLCJiYXNlNjQiLCJwYXJzZSIsInRleHRUb0RhdGUiLCJ0b0tWUGFpcnMiLCJhcnJheU9mT2JqZWN0cyIsInByb3BlcnR5IiwidHJhbnNmb3JtZXIiLCJyZWR1Y2UiLCJ0YWJsZSIsIm1hcEtleXNEZWVwIiwibWFwcGluZyIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsIm5ld09iaiIsImZvck93biIsInYiLCJrIiwibmsiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsU0FBUyxHQUFHQyxPQUFPLENBQUMsV0FBRCxDQUF6Qjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBUUQsT0FBTyxDQUFDLFVBQUQsQ0FBckI7O0FBRUFFLE9BQU8sQ0FBQ0MsU0FBUixHQUFxQkMsS0FBRCxJQUFXLE9BQU9BLEtBQVAsS0FBaUIsU0FBakIsR0FBNkJBLEtBQTdCLEdBQXFDTCxTQUFTLENBQUNJLFNBQVYsQ0FBb0JDLEtBQXBCLEVBQTJCLElBQTNCLENBQXBFOztBQUVBRixPQUFPLENBQUNHLE1BQVIsR0FBaUIsQ0FBQ0QsS0FBRCxFQUFRRSxNQUFSLEtBQW1CO0FBQ2hDLE1BQUlGLEtBQUosRUFBVztBQUNQQSxJQUFBQSxLQUFLLEdBQUcsT0FBT0EsS0FBUCxLQUFpQixRQUFqQixHQUE0QkEsS0FBSyxDQUFDRyxRQUFOLEVBQTVCLEdBQStDSCxLQUF2RDtBQUNBLFdBQU9FLE1BQU0sR0FBR0YsS0FBSCxHQUFXQSxLQUFLLENBQUNJLElBQU4sRUFBeEI7QUFDSDs7QUFFRCxTQUFPSixLQUFQO0FBQ0gsQ0FQRDs7QUFTQUYsT0FBTyxDQUFDTyxLQUFSLEdBQWdCLENBQUNMLEtBQUQsRUFBUU0sS0FBUixLQUFrQlQsQ0FBQyxDQUFDVSxTQUFGLENBQVlQLEtBQVosSUFBcUJBLEtBQXJCLEdBQTZCUSxRQUFRLENBQUNSLEtBQUQsRUFBUU0sS0FBUixDQUF2RTs7QUFFQVIsT0FBTyxDQUFDVyxPQUFSLEdBQW1CVCxLQUFELElBQVdILENBQUMsQ0FBQ2EsUUFBRixDQUFXVixLQUFYLElBQW9CQSxLQUFwQixHQUE0QkwsU0FBUyxDQUFDYyxPQUFWLENBQWtCVCxLQUFsQixDQUF6RDs7QUFFQUYsT0FBTyxDQUFDYSxZQUFSLEdBQXdCQyxHQUFELElBQVNDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUosR0FBZixDQUFaLEVBQWlDVCxRQUFqQyxDQUEwQyxRQUExQyxDQUFoQzs7QUFFQUwsT0FBTyxDQUFDbUIsWUFBUixHQUF3QkMsTUFBRCxJQUFZSCxJQUFJLENBQUNJLEtBQUwsQ0FBV04sTUFBTSxDQUFDQyxJQUFQLENBQVlJLE1BQVosRUFBb0IsUUFBcEIsRUFBOEJmLFFBQTlCLENBQXVDLE9BQXZDLENBQVgsQ0FBbkM7O0FBRUFMLE9BQU8sQ0FBQ3NCLFVBQVIsR0FBcUJ4QixPQUFPLENBQUMsZ0JBQUQsQ0FBNUI7O0FBRUFFLE9BQU8sQ0FBQ3VCLFNBQVIsR0FBb0IsQ0FBQ0MsY0FBRCxFQUFpQkMsUUFBakIsRUFBMkJDLFdBQTNCLEtBQTJDRixjQUFjLENBQUNHLE1BQWYsQ0FBc0IsQ0FBQ0MsS0FBRCxFQUFRZCxHQUFSLEtBQWdCO0FBQ2pHYyxFQUFBQSxLQUFLLENBQUNkLEdBQUcsQ0FBQ1csUUFBRCxDQUFKLENBQUwsR0FBdUJDLFdBQVcsR0FBR0EsV0FBVyxDQUFDWixHQUFELENBQWQsR0FBc0JBLEdBQXhEO0FBQ0EsU0FBT2MsS0FBUDtBQUNILENBSDhELEVBRzVELEVBSDRELENBQS9EOztBQUtBLE1BQU1DLFdBQVcsR0FBRyxDQUFDTCxjQUFELEVBQWlCTSxPQUFqQixLQUE2QjtBQUM3QyxNQUFJQyxLQUFLLENBQUNDLE9BQU4sQ0FBY1IsY0FBZCxDQUFKLEVBQW1DLE9BQU96QixDQUFDLENBQUNrQyxHQUFGLENBQU1ULGNBQU4sRUFBc0JWLEdBQUcsSUFBSWUsV0FBVyxDQUFDZixHQUFELEVBQU1nQixPQUFOLENBQXhDLENBQVA7QUFFbkMsTUFBSUksTUFBTSxHQUFHLEVBQWI7O0FBQ0NuQyxFQUFBQSxDQUFDLENBQUNvQyxNQUFGLENBQVNYLGNBQVQsRUFBeUIsQ0FBQ1ksQ0FBRCxFQUFJQyxDQUFKLEtBQVU7QUFDaEMsUUFBSUMsRUFBRSxHQUFHUixPQUFPLENBQUNPLENBQUQsQ0FBaEI7O0FBQ0EsUUFBSSxDQUFDQyxFQUFMLEVBQVM7QUFDTEosTUFBQUEsTUFBTSxDQUFDRyxDQUFELENBQU4sR0FBWUQsQ0FBWjtBQUNILEtBRkQsTUFFTyxJQUFJTCxLQUFLLENBQUNDLE9BQU4sQ0FBY00sRUFBZCxDQUFKLEVBQXVCO0FBQzFCSixNQUFBQSxNQUFNLENBQUNJLEVBQUUsQ0FBQyxDQUFELENBQUgsQ0FBTixHQUFnQlQsV0FBVyxDQUFDTyxDQUFELEVBQUlFLEVBQUUsQ0FBQyxDQUFELENBQU4sQ0FBM0I7QUFDSCxLQUZNLE1BRUE7QUFDSEosTUFBQUEsTUFBTSxDQUFDSSxFQUFELENBQU4sR0FBYUYsQ0FBYjtBQUNIO0FBQ0osR0FUQTs7QUFXRCxTQUFPRixNQUFQO0FBQ0gsQ0FoQkQ7O0FBa0JBbEMsT0FBTyxDQUFDNkIsV0FBUixHQUFzQkEsV0FBdEIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgdmFsaWRhdG9yID0gcmVxdWlyZSgndmFsaWRhdG9yJyk7XG5jb25zdCB7IF8gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5cbmV4cG9ydHMudG9Cb29sZWFuID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyA/IHZhbHVlIDogdmFsaWRhdG9yLnRvQm9vbGVhbih2YWx1ZSwgdHJ1ZSk7XG5cbmV4cG9ydHMudG9UZXh0ID0gKHZhbHVlLCBub1RyaW0pID0+IHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnID8gdmFsdWUudG9TdHJpbmcoKSA6IHZhbHVlO1xuICAgICAgICByZXR1cm4gbm9UcmltID8gdmFsdWUgOiB2YWx1ZS50cmltKCk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB2YWx1ZTtcbn07XG5cbmV4cG9ydHMudG9JbnQgPSAodmFsdWUsIHJhZGl4KSA9PiBfLmlzSW50ZWdlcih2YWx1ZSkgPyB2YWx1ZSA6IHBhcnNlSW50KHZhbHVlLCByYWRpeCk7IFxuXG5leHBvcnRzLnRvRmxvYXQgPSAodmFsdWUpID0+IF8uaXNGaW5pdGUodmFsdWUpID8gdmFsdWUgOiB2YWxpZGF0b3IudG9GbG9hdCh2YWx1ZSk7IFxuXG5leHBvcnRzLmpzb25Ub0Jhc2U2NCA9IChvYmopID0+IEJ1ZmZlci5mcm9tKEpTT04uc3RyaW5naWZ5KG9iaikpLnRvU3RyaW5nKFwiYmFzZTY0XCIpOyAgICAgICBcblxuZXhwb3J0cy5iYXNlNjRUb0pzb24gPSAoYmFzZTY0KSA9PiBKU09OLnBhcnNlKEJ1ZmZlci5mcm9tKGJhc2U2NCwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCdhc2NpaScpKTtcblxuZXhwb3J0cy50ZXh0VG9EYXRlID0gcmVxdWlyZSgnZGF0ZS1mbnMvcGFyc2UnKTtcblxuZXhwb3J0cy50b0tWUGFpcnMgPSAoYXJyYXlPZk9iamVjdHMsIHByb3BlcnR5LCB0cmFuc2Zvcm1lcikgPT4gYXJyYXlPZk9iamVjdHMucmVkdWNlKCh0YWJsZSwgb2JqKSA9PiB7XG4gICAgdGFibGVbb2JqW3Byb3BlcnR5XV0gPSB0cmFuc2Zvcm1lciA/IHRyYW5zZm9ybWVyKG9iaikgOiBvYmo7XG4gICAgcmV0dXJuIHRhYmxlO1xufSwge30pO1xuXG5jb25zdCBtYXBLZXlzRGVlcCA9IChhcnJheU9mT2JqZWN0cywgbWFwcGluZykgPT4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFycmF5T2ZPYmplY3RzKSkgcmV0dXJuIF8ubWFwKGFycmF5T2ZPYmplY3RzLCBvYmogPT4gbWFwS2V5c0RlZXAob2JqLCBtYXBwaW5nKSk7XG5cbiAgICBsZXQgbmV3T2JqID0ge307XG4gICAgIF8uZm9yT3duKGFycmF5T2ZPYmplY3RzLCAodiwgaykgPT4ge1xuICAgICAgICBsZXQgbmsgPSBtYXBwaW5nW2tdO1xuICAgICAgICBpZiAoIW5rKSB7ICBcbiAgICAgICAgICAgIG5ld09ialtrXSA9IHY7XG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShuaykpIHtcbiAgICAgICAgICAgIG5ld09ialtua1swXV0gPSBtYXBLZXlzRGVlcCh2LCBua1sxXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdPYmpbbmtdID0gdjtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5ld09iajtcbn07XG5cbmV4cG9ydHMubWFwS2V5c0RlZXAgPSBtYXBLZXlzRGVlcDsiXX0=