"use strict";

require("source-map-support/register");

const validator = require("validator");

const {
  _
} = require("rk-utils");

exports.toBoolean = value => typeof value === "boolean" ? value : validator.toBoolean(value.toString(), true);

exports.toText = (value, noTrim) => {
  if (value) {
    value = typeof value !== "string" ? value.toString() : value;
    return noTrim ? value : value.trim();
  }

  return value;
};

exports.toInt = (value, radix) => _.isInteger(value) ? value : parseInt(value, radix);

exports.toFloat = value => _.isFinite(value) ? value : validator.toFloat(value);

exports.jsonToBase64 = obj => Buffer.from(JSON.stringify(obj)).toString("base64");

exports.base64ToJson = base64 => JSON.parse(Buffer.from(base64, "base64").toString("ascii"));

exports.toKVPairs = (arrayOfObjects, property, transformer) => {
  const keyGetter = typeof property === "function" ? property : obj => obj[property];
  return arrayOfObjects.reduce((table, obj) => {
    table[keyGetter(obj)] = transformer ? transformer(obj) : obj;
    return table;
  }, {});
};

const mapKeysDeep = (object, mapping, keepUnmapped) => {
  if (typeof mapping === "string") return {
    [mapping]: object
  };
  let newObj = {};

  _.forOwn(object, (v, k) => {
    if (k in mapping) {
      let nk = mapping[k];

      if (Array.isArray(nk)) {
        newObj[nk[0]] = { ...newObj[nk[0]],
          ...mapKeysDeep(v, nk[1], keepUnmapped)
        };
      } else {
        newObj[nk] = v;
      }
    } else {
      if (keepUnmapped) {
        newObj[k] = v;
      }
    }
  });

  return newObj;
};

const mapArraysDeep = (arrayOfObjects, mapping, keepUnmapped) => _.map(arrayOfObjects, obj => mapKeysDeep(obj, mapping, keepUnmapped));

exports.mapKeysDeep = mapKeysDeep;
exports.mapArraysDeep = mapArraysDeep;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Db252ZXJ0b3JzLmpzIl0sIm5hbWVzIjpbInZhbGlkYXRvciIsInJlcXVpcmUiLCJfIiwiZXhwb3J0cyIsInRvQm9vbGVhbiIsInZhbHVlIiwidG9TdHJpbmciLCJ0b1RleHQiLCJub1RyaW0iLCJ0cmltIiwidG9JbnQiLCJyYWRpeCIsImlzSW50ZWdlciIsInBhcnNlSW50IiwidG9GbG9hdCIsImlzRmluaXRlIiwianNvblRvQmFzZTY0Iiwib2JqIiwiQnVmZmVyIiwiZnJvbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJiYXNlNjRUb0pzb24iLCJiYXNlNjQiLCJwYXJzZSIsInRvS1ZQYWlycyIsImFycmF5T2ZPYmplY3RzIiwicHJvcGVydHkiLCJ0cmFuc2Zvcm1lciIsImtleUdldHRlciIsInJlZHVjZSIsInRhYmxlIiwibWFwS2V5c0RlZXAiLCJvYmplY3QiLCJtYXBwaW5nIiwia2VlcFVubWFwcGVkIiwibmV3T2JqIiwiZm9yT3duIiwidiIsImsiLCJuayIsIkFycmF5IiwiaXNBcnJheSIsIm1hcEFycmF5c0RlZXAiLCJtYXAiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsU0FBUyxHQUFHQyxPQUFPLENBQUMsV0FBRCxDQUF6Qjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBUUQsT0FBTyxDQUFDLFVBQUQsQ0FBckI7O0FBRUFFLE9BQU8sQ0FBQ0MsU0FBUixHQUFxQkMsS0FBRCxJQUFZLE9BQU9BLEtBQVAsS0FBaUIsU0FBakIsR0FBNkJBLEtBQTdCLEdBQXFDTCxTQUFTLENBQUNJLFNBQVYsQ0FBb0JDLEtBQUssQ0FBQ0MsUUFBTixFQUFwQixFQUFzQyxJQUF0QyxDQUFyRTs7QUFFQUgsT0FBTyxDQUFDSSxNQUFSLEdBQWlCLENBQUNGLEtBQUQsRUFBUUcsTUFBUixLQUFtQjtBQUNoQyxNQUFJSCxLQUFKLEVBQVc7QUFDUEEsSUFBQUEsS0FBSyxHQUFHLE9BQU9BLEtBQVAsS0FBaUIsUUFBakIsR0FBNEJBLEtBQUss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LGNBQUQsRUFBaUJRLE9BQWpCLEVBQTBCQyxZQUExQixLQUNsQmpDLENBQUMsQ0FBQzBDLEdBQUYsQ0FBTWxCLGNBQU4sRUFBdUJULEdBQUQsSUFBU2UsV0FBVyxDQUFDZixHQUFELEVBQU1pQixPQUFOLEVBQWVDLFlBQWYsQ0FBMUMsQ0FESjs7QUFHQWhDLE9BQU8sQ0FBQzZCLFdBQVIsR0FBc0JBLFdBQXRCO0FBQ0E3QixPQUFPLENBQUN3QyxhQUFSLEdBQXdCQSxhQUF4QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB2YWxpZGF0b3IgPSByZXF1aXJlKFwidmFsaWRhdG9yXCIpO1xuY29uc3QgeyBfIH0gPSByZXF1aXJlKFwicmstdXRpbHNcIik7XG5cbmV4cG9ydHMudG9Cb29sZWFuID0gKHZhbHVlKSA9PiAodHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIiA/IHZhbHVlIDogdmFsaWRhdG9yLnRvQm9vbGVhbih2YWx1ZS50b1N0cmluZygpLCB0cnVlKSk7XG5cbmV4cG9ydHMudG9UZXh0ID0gKHZhbHVlLCBub1RyaW0pID0+IHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSB0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIgPyB2YWx1ZS50b1N0cmluZygpIDogdmFsdWU7XG4gICAgICAgIHJldHVybiBub1RyaW0gPyB2YWx1ZSA6IHZhbHVlLnRyaW0oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG59O1xuXG5leHBvcnRzLnRvSW50ID0gKHZhbHVlLCByYWRpeCkgPT4gKF8uaXNJbnRlZ2VyKHZhbHVlKSA/IHZhbHVlIDogcGFyc2VJbnQodmFsdWUsIHJhZGl4KSk7XG5cbmV4cG9ydHMudG9GbG9hdCA9ICh2YWx1ZSkgPT4gKF8uaXNGaW5pdGUodmFsdWUpID8gdmFsdWUgOiB2YWxpZGF0b3IudG9GbG9hdCh2YWx1ZSkpO1xuXG5leHBvcnRzLmpzb25Ub0Jhc2U2NCA9IChvYmopID0+IEJ1ZmZlci5mcm9tKEpTT04uc3RyaW5naWZ5KG9iaikpLnRvU3RyaW5nKFwiYmFzZTY0XCIpO1xuXG5leHBvcnRzLmJhc2U2NFRvSnNvbiA9IChiYXNlNjQpID0+IEpTT04ucGFyc2UoQnVmZmVyLmZyb20oYmFzZTY0LCBcImJhc2U2NFwiKS50b1N0cmluZyhcImFzY2lpXCIpKTtcblxuZXhwb3J0cy50b0tWUGFpcnMgPSAoYXJyYXlPZk9iamVjdHMsIHByb3BlcnR5LCB0cmFuc2Zvcm1lcikgPT4ge1xuICAgIGNvbnN0IGtleUdldHRlciA9IHR5cGVvZiBwcm9wZXJ0eSA9PT0gXCJmdW5jdGlvblwiID8gcHJvcGVydHkgOiAob2JqKSA9PiBvYmpbcHJvcGVydHldO1xuXG4gICAgcmV0dXJuIGFycmF5T2ZPYmplY3RzLnJlZHVjZSgodGFibGUsIG9iaikgPT4ge1xuICAgICAgICB0YWJsZVtrZXlHZXR0ZXIob2JqKV0gPSB0cmFuc2Zvcm1lciA/IHRyYW5zZm9ybWVyKG9iaikgOiBvYmo7XG4gICAgICAgIHJldHVybiB0YWJsZTtcbiAgICB9LCB7fSk7XG59O1xuXG4vKipcbiAqIFJlbWFwIHRoZSBrZXlzIG9mIG9iamVjdCBlbGVtZW50cyBpbiBhbiBhcnJheSwgbGlrZSBwcm9qZWN0aW9uLlxuICogQHBhcmFtIHsqfSBvYmplY3RcbiAqIEBwYXJhbSB7Kn0gbWFwcGluZyAtIGtleSB0byBuZXdLZXkgb3Iga2V5IHRvIGFycmF5WyBuZXdLZXksIHZhbHVlTWFwIF0gZm9yIG5leHQgbGV2ZWwgbWFwcGluZ1xuICogQHBhcmFtIHtib29sZWFufSBrZWVwVW5tYXBwZWQgLSBJZiB0cnVlLCB3aWxsIGtlZXAgdGhvc2Ugbm90IGluIG1hcHBpbmcgYXMgaXRzIG9yaWdpbmFsIGtleSwgb3RoZXJ3aXNlIGZpbHRlciBvdXRcbiAqL1xuY29uc3QgbWFwS2V5c0RlZXAgPSAob2JqZWN0LCBtYXBwaW5nLCBrZWVwVW5tYXBwZWQpID0+IHtcbiAgICBpZiAodHlwZW9mIG1hcHBpbmcgPT09IFwic3RyaW5nXCIpIHJldHVybiB7IFttYXBwaW5nXTogb2JqZWN0IH07XG5cbiAgICBsZXQgbmV3T2JqID0ge307XG4gICAgXy5mb3JPd24ob2JqZWN0LCAodiwgaykgPT4ge1xuICAgICAgICBpZiAoayBpbiBtYXBwaW5nKSB7XG4gICAgICAgICAgICBsZXQgbmsgPSBtYXBwaW5nW2tdO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobmspKSB7XG4gICAgICAgICAgICAgICAgbmV3T2JqW25rWzBdXSA9IHsgLi4ubmV3T2JqW25rWzBdXSwgLi4ubWFwS2V5c0RlZXAodiwgbmtbMV0sIGtlZXBVbm1hcHBlZCkgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3T2JqW25rXSA9IHY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoa2VlcFVubWFwcGVkKSB7XG4gICAgICAgICAgICAgICAgbmV3T2JqW2tdID0gdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5ld09iajtcbn07XG5cbmNvbnN0IG1hcEFycmF5c0RlZXAgPSAoYXJyYXlPZk9iamVjdHMsIG1hcHBpbmcsIGtlZXBVbm1hcHBlZCkgPT5cbiAgICBfLm1hcChhcnJheU9mT2JqZWN0cywgKG9iaikgPT4gbWFwS2V5c0RlZXAob2JqLCBtYXBwaW5nLCBrZWVwVW5tYXBwZWQpKTtcblxuZXhwb3J0cy5tYXBLZXlzRGVlcCA9IG1hcEtleXNEZWVwO1xuZXhwb3J0cy5tYXBBcnJheXNEZWVwID0gbWFwQXJyYXlzRGVlcDtcbiJdfQ==