"use strict";

require("source-map-support/register");

const validator = require("validator");

const {
  _
} = require("rk-utils");

const remap = require('./utils/remap');

exports.toBoolean = value => typeof value === "boolean" ? value : validator.toBoolean(value.toString(), true);

exports.toText = (value, noTrim) => {
  if (value) {
    value = typeof value !== "string" ? value.toString() : value;
    return noTrim ? value : value.trim();
  }

  return value;
};

exports.toInt = (value, radix) => _.isInteger(value) ? value : parseInt(value, radix);

exports.toFloat = value => _.isFinite(value) ? value : validator.toFloat(value);

exports.jsonToBase64 = obj => Buffer.from(JSON.stringify(obj)).toString("base64");

exports.base64ToJson = base64 => JSON.parse(Buffer.from(base64, "base64").toString("ascii"));

exports.toKVPairs = (arrayOfObjects, property, transformer) => {
  const keyGetter = typeof property === "function" ? property : obj => obj[property];
  return arrayOfObjects.reduce((table, obj) => {
    table[keyGetter(obj)] = transformer ? transformer(obj) : obj;
    return table;
  }, {});
};

exports.toSet = (arrayOfObjects, property) => {
  if (!arrayOfObjects) return new Set();
  const valueGetter = typeof property === "function" ? property : obj => obj[property];
  const result = new Set();
  arrayOfObjects.forEach(obj => result.add(valueGetter(obj)));
  return result;
};

const mapArraysDeep = (arrayOfObjects, mapping, keepUnmapped) => _.map(arrayOfObjects, obj => remap(obj, mapping, keepUnmapped));

exports.mapKeysDeep = remap;
exports.mapArraysDeep = mapArraysDeep;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Db252ZXJ0b3JzLmpzIl0sIm5hbWVzIjpbInZhbGlkYXRvciIsInJlcXVpcmUiLCJfIiwicmVtYXAiLCJleHBvcnRzIiwidG9Cb29sZWFuIiwidmFsdWUiLCJ0b1N0cmluZyIsInRvVGV4dCIsIm5vVHJpbSIsInRyaW0iLCJ0b0ludCIsInJhZGl4IiwiaXNJbnRlZ2VyIiwicGFyc2VJbnQiLCJ0b0Zsb2F0IiwiaXNGaW5pdGUiLCJqc29uVG9CYXNlNjQiLCJvYmoiLCJCdWZmZXIiLCJmcm9tIiwiSlNPTiIsInN0cmluZ2lmeSIsImJhc2U2NFRvSnNvbiIsImJhc2U2NCIsInBhcnNlIiwidG9LVlBhaXJzIiwiYXJyYXlPZk9iamVjdHMiLCJwcm9wZXJ0eSIsInRyYW5zZm9ybWVyIiwia2V5R2V0dGVyIiwicmVkdWNlIiwidGFibGUiLCJ0b1NldCIsIlNldCIsInZhbHVlR2V0dGVyIiwicmVzdWx0IiwiZm9yRWFjaCIsImFkZCIsIm1hcEFycmF5c0RlZXAiLCJtYXBwaW5nIiwia2VlcFVubWFwcGVkIiwibWFwIiwibWFwS2V5c0RlZXAiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsU0FBUyxHQUFHQyxPQUFPLENBQUMsV0FBRCxDQUF6Qjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBUUQsT0FBTyxDQUFDLFVBQUQsQ0FBckI7O0FBQ0EsTUFBTUUsS0FBSyxHQUFHRixPQUFPLENBQUMsZUFBRCxDQUFyQjs7QUFFQUcsT0FBTyxDQUFDQyxTQUFSLEdBQXFCQyxLQUFELElBQVksT0FBT0EsS0FBUCxLQUFpQixTQUFqQixHQUE2QkEsS0FBN0IsR0FBcUNOLFNBQVMsQ0FBQ0ssU0FBVixDQUFvQkMsS0FBSyxDQUFDQyxRQUFOLEVBQXBCLEVBQXNDLElBQXRDLENBQXJFOztBQUVBSCxPQUFPLENBQUNJLE1BQVIsR0FBaUIsQ0FBQ0YsS0FBRCxFQUFRRyxNQUFSLEtBQW1CO0FBQ2hDLE1BQUlILEtBQUosRUFBVztBQUNQQSxJQUFBQSxLQUFLLEdBQUcsT0FBT0EsS0FBUCxLQUFpQixRQUFqQixHQUE0QkEsS0FBSyxDQUFDQyxRQUFOLEVBQTVCLEdBQStDRCxLQUF2RDtBQUNBLFdBQU9HLE1BQU0sR0FBR0gsS0FBSCxHQUFXQSxLQUFLLENBQUNJLElBQU4sRUFBeEI7QUFDSDs7QUFFRCxTQUFPSixLQUFQO0FBQ0gsQ0FQRDs7QUFTQUYsT0FBTyxDQUFDTyxLQUFSLEdBQWdCLENBQUNMLEtBQUQsRUFBUU0sS0FBUixLQUFtQlYsQ0FBQyxDQUFDVyxTQUFGLENBQVlQLEtBQVosSUFBcUJBLEtBQXJCLEdBQTZCUSxRQUFRLENBQUNSLEtBQUQsRUFBUU0sS0FBUixDQUF4RTs7QUFFQVIsT0FBTyxDQUFDVyxPQUFSLEdBQW1CVCxLQUFELElBQVlKLENBQUMsQ0FBQ2MsUUFBRixDQUFXVixLQUFYLElBQW9CQSxLQUFwQixHQUE0Qk4sU0FBUyxDQUFDZSxPQUFWLENBQWtCVCxLQUFsQixDQUExRDs7QUFFQUYsT0FBTyxDQUFDYSxZQUFSLEdBQXdCQyxHQUFELElBQVNDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUosR0FBZixDQUFaLEVBQWlDWCxRQUFqQyxDQUEwQyxRQUExQyxDQUFoQzs7QUFFQUgsT0FBTyxDQUFDbUIsWUFBUixHQUF3QkMsTUFBRCxJQUFZSCxJQUFJLENBQUNJLEtBQUwsQ0FBV04sTUFBTSxDQUFDQyxJQUFQLENBQVlJLE1BQVosRUFBb0IsUUFBcEIsRUFBOEJqQixRQUE5QixDQUF1QyxPQUF2QyxDQUFYLENBQW5DOztBQUVBSCxPQUFPLENBQUNzQixTQUFSLEdBQW9CLENBQUNDLGNBQUQsRUFBaUJDLFFBQWpCLEVBQTJCQyxXQUEzQixLQUEyQztBQUMzRCxRQUFNQyxTQUFTLEdBQUcsT0FBT0YsUUFBUCxLQUFvQixVQUFwQixHQUFpQ0EsUUFBakMsR0FBNkNWLEdBQUQsSUFBU0EsR0FBRyxDQUFDVSxRQUFELENBQTFFO0FBRUEsU0FBT0QsY0FBYyxDQUFDSSxNQUFmLENBQXNCLENBQUNDLEtBQUQsRUFBUWQsR0FBUixLQUFnQjtBQUN6Q2MsSUFBQUEsS0FBSyxDQUFDRixTQUFTLENBQUNaLEdBQUQsQ0FBVixDQUFMLEdBQXdCVyxXQUFXLEdBQUdBLFdBQVcsQ0FBQ1gsR0FBRCxDQUFkLEdBQXNCQSxHQUF6RDtBQUNBLFdBQU9jLEtBQVA7QUFDSCxHQUhNLEVBR0osRUFISSxDQUFQO0FBSUgsQ0FQRDs7QUFTQTVCLE9BQU8sQ0FBQzZCLEtBQVIsR0FBZ0IsQ0FBQ04sY0FBRCxFQUFpQkMsUUFBakIsS0FBOEI7QUFDMUMsTUFBSSxDQUFDRCxjQUFMLEVBQXFCLE9BQU8sSUFBSU8sR0FBSixFQUFQO0FBRXJCLFFBQU1DLFdBQVcsR0FBRyxPQUFPUCxRQUFQLEtBQW9CLFVBQXBCLEdBQWlDQSxRQUFqQyxHQUE2Q1YsR0FBRCxJQUFTQSxHQUFHLENBQUNVLFFBQUQsQ0FBNUU7QUFDQSxRQUFNUSxNQUFNLEdBQUksSUFBSUYsR0FBSixFQUFoQjtBQUVBUCxFQUFBQSxjQUFjLENBQUNVLE9BQWYsQ0FBdUJuQixHQUFHLElBQUlrQixNQUFNLENBQUNFLEdBQVAsQ0FBV0gsV0FBVyxDQUFDakIsR0FBRCxDQUF0QixDQUE5QjtBQUVBLFNBQU9rQixNQUFQO0FBQ0gsQ0FURDs7QUFXQSxNQUFNRyxhQUFhLEdBQUcsQ0FBQ1osY0FBRCxFQUFpQmEsT0FBakIsRUFBMEJDLFlBQTFCLEtBQ2xCdkMsQ0FBQyxDQUFDd0MsR0FBRixDQUFNZixjQUFOLEVBQXVCVCxHQUFELElBQVNmLEtBQUssQ0FBQ2UsR0FBRCxFQUFNc0IsT0FBTixFQUFlQyxZQUFmLENBQXBDLENBREo7O0FBR0FyQyxPQUFPLENBQUN1QyxXQUFSLEdBQXNCeEMsS0FBdEI7QUFDQUMsT0FBTyxDQUFDbUMsYUFBUixHQUF3QkEsYUFBeEIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgdmFsaWRhdG9yID0gcmVxdWlyZShcInZhbGlkYXRvclwiKTtcbmNvbnN0IHsgXyB9ID0gcmVxdWlyZShcInJrLXV0aWxzXCIpO1xuY29uc3QgcmVtYXAgPSByZXF1aXJlKCcuL3V0aWxzL3JlbWFwJyk7XG5cbmV4cG9ydHMudG9Cb29sZWFuID0gKHZhbHVlKSA9PiAodHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIiA/IHZhbHVlIDogdmFsaWRhdG9yLnRvQm9vbGVhbih2YWx1ZS50b1N0cmluZygpLCB0cnVlKSk7XG5cbmV4cG9ydHMudG9UZXh0ID0gKHZhbHVlLCBub1RyaW0pID0+IHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSB0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIgPyB2YWx1ZS50b1N0cmluZygpIDogdmFsdWU7XG4gICAgICAgIHJldHVybiBub1RyaW0gPyB2YWx1ZSA6IHZhbHVlLnRyaW0oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG59O1xuXG5leHBvcnRzLnRvSW50ID0gKHZhbHVlLCByYWRpeCkgPT4gKF8uaXNJbnRlZ2VyKHZhbHVlKSA/IHZhbHVlIDogcGFyc2VJbnQodmFsdWUsIHJhZGl4KSk7XG5cbmV4cG9ydHMudG9GbG9hdCA9ICh2YWx1ZSkgPT4gKF8uaXNGaW5pdGUodmFsdWUpID8gdmFsdWUgOiB2YWxpZGF0b3IudG9GbG9hdCh2YWx1ZSkpO1xuXG5leHBvcnRzLmpzb25Ub0Jhc2U2NCA9IChvYmopID0+IEJ1ZmZlci5mcm9tKEpTT04uc3RyaW5naWZ5KG9iaikpLnRvU3RyaW5nKFwiYmFzZTY0XCIpO1xuXG5leHBvcnRzLmJhc2U2NFRvSnNvbiA9IChiYXNlNjQpID0+IEpTT04ucGFyc2UoQnVmZmVyLmZyb20oYmFzZTY0LCBcImJhc2U2NFwiKS50b1N0cmluZyhcImFzY2lpXCIpKTtcblxuZXhwb3J0cy50b0tWUGFpcnMgPSAoYXJyYXlPZk9iamVjdHMsIHByb3BlcnR5LCB0cmFuc2Zvcm1lcikgPT4ge1xuICAgIGNvbnN0IGtleUdldHRlciA9IHR5cGVvZiBwcm9wZXJ0eSA9PT0gXCJmdW5jdGlvblwiID8gcHJvcGVydHkgOiAob2JqKSA9PiBvYmpbcHJvcGVydHldO1xuXG4gICAgcmV0dXJuIGFycmF5T2ZPYmplY3RzLnJlZHVjZSgodGFibGUsIG9iaikgPT4ge1xuICAgICAgICB0YWJsZVtrZXlHZXR0ZXIob2JqKV0gPSB0cmFuc2Zvcm1lciA/IHRyYW5zZm9ybWVyKG9iaikgOiBvYmo7XG4gICAgICAgIHJldHVybiB0YWJsZTtcbiAgICB9LCB7fSk7XG59O1xuXG5leHBvcnRzLnRvU2V0ID0gKGFycmF5T2ZPYmplY3RzLCBwcm9wZXJ0eSkgPT4ge1xuICAgIGlmICghYXJyYXlPZk9iamVjdHMpIHJldHVybiBuZXcgU2V0KCk7XG5cbiAgICBjb25zdCB2YWx1ZUdldHRlciA9IHR5cGVvZiBwcm9wZXJ0eSA9PT0gXCJmdW5jdGlvblwiID8gcHJvcGVydHkgOiAob2JqKSA9PiBvYmpbcHJvcGVydHldO1xuICAgIGNvbnN0IHJlc3VsdCAgPSBuZXcgU2V0KCk7XG5cbiAgICBhcnJheU9mT2JqZWN0cy5mb3JFYWNoKG9iaiA9PiByZXN1bHQuYWRkKHZhbHVlR2V0dGVyKG9iaikpKTtcblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmNvbnN0IG1hcEFycmF5c0RlZXAgPSAoYXJyYXlPZk9iamVjdHMsIG1hcHBpbmcsIGtlZXBVbm1hcHBlZCkgPT5cbiAgICBfLm1hcChhcnJheU9mT2JqZWN0cywgKG9iaikgPT4gcmVtYXAob2JqLCBtYXBwaW5nLCBrZWVwVW5tYXBwZWQpKTtcblxuZXhwb3J0cy5tYXBLZXlzRGVlcCA9IHJlbWFwO1xuZXhwb3J0cy5tYXBBcnJheXNEZWVwID0gbWFwQXJyYXlzRGVlcDtcbiJdfQ==