"use strict";

require("source-map-support/register");

const validator = require("validator");

const {
  _
} = require("rk-utils");

exports.toBoolean = value => typeof value === "boolean" ? value : validator.toBoolean(value, true);

exports.toText = (value, noTrim) => {
  if (value) {
    value = typeof value !== "string" ? value.toString() : value;
    return noTrim ? value : value.trim();
  }

  return value;
};

exports.toInt = (value, radix) => _.isInteger(value) ? value : parseInt(value, radix);

exports.toFloat = value => _.isFinite(value) ? value : validator.toFloat(value);

exports.jsonToBase64 = obj => Buffer.from(JSON.stringify(obj)).toString("base64");

exports.base64ToJson = base64 => JSON.parse(Buffer.from(base64, "base64").toString("ascii"));

exports.textToDate = require("date-fns/parse");

exports.toKVPairs = (arrayOfObjects, property, transformer) => {
  const keyGetter = typeof property === 'function' ? property : obj => obj[property];
  return arrayOfObjects.reduce((table, obj) => {
    table[keyGetter(obj)] = transformer ? transformer(obj) : obj;
    return table;
  }, {});
};

const mapKeysDeep = (object, mapping, keepUnmapped) => {
  if (typeof mapping === 'string') return {
    [mapping]: object
  };
  let newObj = {};

  _.forOwn(object, (v, k) => {
    if (k in mapping) {
      let nk = mapping[k];

      if (Array.isArray(nk)) {
        newObj[nk[0]] = { ...newObj[nk[0]],
          ...mapKeysDeep(v, nk[1], keepUnmapped)
        };
      } else {
        newObj[nk] = v;
      }
    } else {
      if (keepUnmapped) {
        newObj[k] = v;
      }
    }
  });

  return newObj;
};

const mapArraysDeep = (arrayOfObjects, mapping, keepUnmapped) => _.map(arrayOfObjects, obj => mapKeysDeep(obj, mapping, keepUnmapped));

exports.mapKeysDeep = mapKeysDeep;
exports.mapArraysDeep = mapArraysDeep;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Db252ZXJ0b3JzLmpzIl0sIm5hbWVzIjpbInZhbGlkYXRvciIsInJlcXVpcmUiLCJfIiwiZXhwb3J0cyIsInRvQm9vbGVhbiIsInZhbHVlIiwidG9UZXh0Iiwibm9UcmltIiwidG9TdHJpbmciLCJ0cmltIiwidG9JbnQiLCJyYWRpeCIsImlzSW50ZWdlciIsInBhcnNlSW50IiwidG9GbG9hdCIsImlzRmluaXRlIiwianNvblRvQmFzZTY0Iiwib2JqIiwiQnVmZmVyIiwiZnJvbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJiYXNlNjRUb0pzb24iLCJiYXNlNjQiLCJwYXJzZSIsInRleHRUb0RhdGUiLCJ0b0tWUGFpcnMiLCJhcnJheU9mT2JqZWN0cyIsInByb3BlcnR5IiwidHJhbnNmb3JtZXIiLCJrZXlHZXR0ZXIiLCJyZWR1Y2UiLCJ0YWJsZSIsIm1hcEtleXNEZWVwIiwib2JqZWN0IiwibWFwcGluZyIsImtlZXBVbm1hcHBlZCIsIm5ld09iaiIsImZvck93biIsInYiLCJrIiwibmsiLCJBcnJheSIsImlzQXJyYXkiLCJtYXBBcnJheXNEZWVwIiwibWFwIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLFdBQUQsQ0FBekI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQVFELE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUVBRSxPQUFPLENBQUNDLFNBQVIsR0FBcUJDLEtBQUQsSUFBWSxPQUFPQSxLQUFQLEtBQWlCLFNBQWpCLEdBQTZCQSxLQUE3QixHQUFxQ0wsU0FBUyxDQUFDSSxTQUFWLENBQW9CQyxLQUFwQixFQUEyQixJQUEzQixDQUFyRTs7QUFFQUYsT0FBTyxDQUFDRyxNQUFSLEdBQWlCLENBQUNELEtBQUQsRUFBUUUsTUFBUixLQUFtQjtBQUNoQyxNQUFJRixLQUFKLEVBQVc7QUFDUEEsSUFBQUEsS0FBSyxHQUFHLE9BQU9BLEtBQVAsS0FBaUIsUUFBakIsR0FBNEJBLEtBQUssQ0FB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QUFPRixNQUFQO0FBQ0gsQ0FwQkQ7O0FBc0JBLE1BQU1PLGFBQWEsR0FBRyxDQUFDakIsY0FBRCxFQUFpQlEsT0FBakIsRUFBMEJDLFlBQTFCLEtBQTJDbEMsQ0FBQyxDQUFDMkMsR0FBRixDQUFNbEIsY0FBTixFQUF1QlYsR0FBRCxJQUFTZ0IsV0FBVyxDQUFDaEIsR0FBRCxFQUFNa0IsT0FBTixFQUFlQyxZQUFmLENBQTFDLENBQWpFOztBQUVBakMsT0FBTyxDQUFDOEIsV0FBUixHQUFzQkEsV0FBdEI7QUFDQTlCLE9BQU8sQ0FBQ3lDLGFBQVIsR0FBd0JBLGFBQXhCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHZhbGlkYXRvciA9IHJlcXVpcmUoXCJ2YWxpZGF0b3JcIik7XG5jb25zdCB7IF8gfSA9IHJlcXVpcmUoXCJyay11dGlsc1wiKTtcblxuZXhwb3J0cy50b0Jvb2xlYW4gPSAodmFsdWUpID0+ICh0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiID8gdmFsdWUgOiB2YWxpZGF0b3IudG9Cb29sZWFuKHZhbHVlLCB0cnVlKSk7XG5cbmV4cG9ydHMudG9UZXh0ID0gKHZhbHVlLCBub1RyaW0pID0+IHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSB0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIgPyB2YWx1ZS50b1N0cmluZygpIDogdmFsdWU7XG4gICAgICAgIHJldHVybiBub1RyaW0gPyB2YWx1ZSA6IHZhbHVlLnRyaW0oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG59O1xuXG5leHBvcnRzLnRvSW50ID0gKHZhbHVlLCByYWRpeCkgPT4gKF8uaXNJbnRlZ2VyKHZhbHVlKSA/IHZhbHVlIDogcGFyc2VJbnQodmFsdWUsIHJhZGl4KSk7XG5cbmV4cG9ydHMudG9GbG9hdCA9ICh2YWx1ZSkgPT4gKF8uaXNGaW5pdGUodmFsdWUpID8gdmFsdWUgOiB2YWxpZGF0b3IudG9GbG9hdCh2YWx1ZSkpO1xuXG5leHBvcnRzLmpzb25Ub0Jhc2U2NCA9IChvYmopID0+IEJ1ZmZlci5mcm9tKEpTT04uc3RyaW5naWZ5KG9iaikpLnRvU3RyaW5nKFwiYmFzZTY0XCIpO1xuXG5leHBvcnRzLmJhc2U2NFRvSnNvbiA9IChiYXNlNjQpID0+IEpTT04ucGFyc2UoQnVmZmVyLmZyb20oYmFzZTY0LCBcImJhc2U2NFwiKS50b1N0cmluZyhcImFzY2lpXCIpKTtcblxuZXhwb3J0cy50ZXh0VG9EYXRlID0gcmVxdWlyZShcImRhdGUtZm5zL3BhcnNlXCIpO1xuXG5leHBvcnRzLnRvS1ZQYWlycyA9IChhcnJheU9mT2JqZWN0cywgcHJvcGVydHksIHRyYW5zZm9ybWVyKSA9PiB7XG4gICAgY29uc3Qga2V5R2V0dGVyID0gKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJykgPyBwcm9wZXJ0eSA6IG9iaiA9PiBvYmpbcHJvcGVydHldO1xuXG4gICAgcmV0dXJuIGFycmF5T2ZPYmplY3RzLnJlZHVjZSgodGFibGUsIG9iaikgPT4ge1xuICAgICAgICB0YWJsZVtrZXlHZXR0ZXIob2JqKV0gPSB0cmFuc2Zvcm1lciA/IHRyYW5zZm9ybWVyKG9iaikgOiBvYmo7XG4gICAgICAgIHJldHVybiB0YWJsZTtcbiAgICB9LCB7fSk7XG59O1xuXG4vKipcbiAqIFJlbWFwIHRoZSBrZXlzIG9mIG9iamVjdCBlbGVtZW50cyBpbiBhbiBhcnJheSwgbGlrZSBwcm9qZWN0aW9uLlxuICogQHBhcmFtIHsqfSBvYmplY3RcbiAqIEBwYXJhbSB7Kn0gbWFwcGluZyAtIGtleSB0byBuZXdLZXkgb3Iga2V5IHRvIGFycmF5WyBuZXdLZXksIHZhbHVlTWFwIF0gZm9yIG5leHQgbGV2ZWwgbWFwcGluZ1xuICogQHBhcmFtIHtib29sZWFufSBrZWVwVW5tYXBwZWQgLSBJZiB0cnVlLCB3aWxsIGtlZXAgdGhvc2Ugbm90IGluIG1hcHBpbmcgYXMgaXRzIG9yaWdpbmFsIGtleSwgb3RoZXJ3aXNlIGZpbHRlciBvdXRcbiAqL1xuY29uc3QgbWFwS2V5c0RlZXAgPSAob2JqZWN0LCBtYXBwaW5nLCBrZWVwVW5tYXBwZWQpID0+IHtcbiAgICBpZiAodHlwZW9mIG1hcHBpbmcgPT09ICdzdHJpbmcnKSByZXR1cm4geyBbbWFwcGluZ106IG9iamVjdCB9O1xuXG4gICAgbGV0IG5ld09iaiA9IHt9O1xuICAgIF8uZm9yT3duKG9iamVjdCwgKHYsIGspID0+IHtcbiAgICAgICAgaWYgKGsgaW4gbWFwcGluZykge1xuICAgICAgICAgICAgbGV0IG5rID0gbWFwcGluZ1trXTtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5rKSkge1xuICAgICAgICAgICAgICAgIG5ld09ialtua1swXV0gPSB7IC4uLm5ld09ialtua1swXV0sIC4uLm1hcEtleXNEZWVwKHYsIG5rWzFdLCBrZWVwVW5tYXBwZWQpIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ld09ialtua10gPSB2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGtlZXBVbm1hcHBlZCkge1xuICAgICAgICAgICAgICAgIG5ld09ialtrXSA9IHY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBuZXdPYmo7XG59O1xuXG5jb25zdCBtYXBBcnJheXNEZWVwID0gKGFycmF5T2ZPYmplY3RzLCBtYXBwaW5nLCBrZWVwVW5tYXBwZWQpID0+IF8ubWFwKGFycmF5T2ZPYmplY3RzLCAob2JqKSA9PiBtYXBLZXlzRGVlcChvYmosIG1hcHBpbmcsIGtlZXBVbm1hcHBlZCkpO1xuXG5leHBvcnRzLm1hcEtleXNEZWVwID0gbWFwS2V5c0RlZXA7XG5leHBvcnRzLm1hcEFycmF5c0RlZXAgPSBtYXBBcnJheXNEZWVwO1xuIl19