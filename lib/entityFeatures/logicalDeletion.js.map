{"version":3,"file":"logicalDeletion.js","names":["Rules","require","mergeCondition","Generators","_","module","exports","RULE_BEFORE_FIND","feature","entityModel","context","findOptions","options","$includeDeleted","$query","field","$ne","value","RULE_BEFORE_DELETE","$physicalDeletion","timestampField","updateTo","default","meta","fields","i18n","updateOpts","$retrieveUpdated","$retrieveDeleted","$bypassReadOnly","Set","pick","return","_update_","connOptions","forSingleRecord","$retrieveDbResult","rawOptions","$result"],"sources":["../../src/entityFeatures/logicalDeletion.js"],"sourcesContent":["const Rules = require('../enum/Rules');\nconst { mergeCondition } = require('../utils/lang');\nconst Generators = require('../Generators');\nconst { _ } = require('@genx/july');\n\n/**\n * A rule specifies the entity will not be deleted physically.\n * @module EntityFeatureRuntime_LogicalDeletion\n */\n\nmodule.exports = {\n    [Rules.RULE_BEFORE_FIND]: (feature, entityModel, context) => {\n        const findOptions = context.options;\n        if (!findOptions.$includeDeleted) {\n            findOptions.$query = mergeCondition(findOptions.$query, {\n                [feature.field]: { $ne: feature.value },\n            });\n        }\n\n        return true;\n    },\n    [Rules.RULE_BEFORE_DELETE]: async (feature, entityModel, context) => {\n        const options = context.options;\n        if (!options.$physicalDeletion) {\n            const { field, value, timestampField } = feature;\n            const updateTo = {\n                [field]: value,\n            };\n\n            if (timestampField) {\n                updateTo[timestampField] = Generators.default(\n                    entityModel.meta.fields[timestampField],\n                    context.i18n\n                );\n            }\n\n            const updateOpts = {\n                $query: options.$query,\n                $retrieveUpdated: options.$retrieveDeleted,\n                $bypassReadOnly: new Set([field, timestampField]),\n                ..._.pick(options, ['$retrieveDeleted', '$retrieveDbResult']),\n            };\n\n            context.return = await entityModel._update_(\n                updateTo,\n                updateOpts,\n                context.connOptions,\n                context.forSingleRecord\n            );\n\n            if (options.$retrieveDbResult) {\n                context.rawOptions.$result = updateOpts.$result;\n            }\n\n            return false;\n        }\n\n        return true;\n    },\n};\n"],"mappings":";;;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,eAAe,CAAC;AACtC,MAAM;EAAEC;AAAe,CAAC,GAAGD,OAAO,CAAC,eAAe,CAAC;AACnD,MAAME,UAAU,GAAGF,OAAO,CAAC,eAAe,CAAC;AAC3C,MAAM;EAAEG;AAAE,CAAC,GAAGH,OAAO,CAAC,YAAY,CAAC;AAOnCI,MAAM,CAACC,OAAO,GAAG;EACb,CAACN,KAAK,CAACO,gBAAgB,GAAG,CAACC,OAAO,EAAEC,WAAW,EAAEC,OAAO,KAAK;IACzD,MAAMC,WAAW,GAAGD,OAAO,CAACE,OAAO;IACnC,IAAI,CAACD,WAAW,CAACE,eAAe,EAAE;MAC9BF,WAAW,CAACG,MAAM,GAAGZ,cAAc,CAACS,WAAW,CAACG,MAAM,EAAE;QACpD,CAACN,OAAO,CAACO,KAAK,GAAG;UAAEC,GAAG,EAAER,OAAO,CAACS;QAAM;MAC1C,CAAC,CAAC;IACN;IAEA,OAAO,IAAI;EACf,CAAC;EACD,CAACjB,KAAK,CAACkB,kBAAkB,GAAG,OAAOV,OAAO,EAAEC,WAAW,EAAEC,OAAO,KAAK;IACjE,MAAME,OAAO,GAAGF,OAAO,CAACE,OAAO;IAC/B,IAAI,CAACA,OAAO,CAACO,iBAAiB,EAAE;MAC5B,MAAM;QAAEJ,KAAK;QAAEE,KAAK;QAAEG;MAAe,CAAC,GAAGZ,OAAO;MAChD,MAAMa,QAAQ,GAAG;QACb,CAACN,KAAK,GAAGE;MACb,CAAC;MAED,IAAIG,cAAc,EAAE;QAChBC,QAAQ,CAACD,cAAc,CAAC,GAAGjB,UAAU,CAACmB,OAAO,CACzCb,WAAW,CAACc,IAAI,CAACC,MAAM,CAACJ,cAAc,CAAC,EACvCV,OAAO,CAACe,IAAI,CACf;MACL;MAEA,MAAMC,UAAU,GAAG;QACfZ,MAAM,EAAEF,OAAO,CAACE,MAAM;QACtBa,gBAAgB,EAAEf,OAAO,CAACgB,gBAAgB;QAC1CC,eAAe,EAAE,IAAIC,GAAG,CAAC,CAACf,KAAK,EAAEK,cAAc,CAAC,CAAC;QACjD,GAAGhB,CAAC,CAAC2B,IAAI,CAACnB,OAAO,EAAE,CAAC,kBAAkB,EAAE,mBAAmB,CAAC;MAChE,CAAC;MAEDF,OAAO,CAACsB,MAAM,GAAG,MAAMvB,WAAW,CAACwB,QAAQ,CACvCZ,QAAQ,EACRK,UAAU,EACVhB,OAAO,CAACwB,WAAW,EACnBxB,OAAO,CAACyB,eAAe,CAC1B;MAED,IAAIvB,OAAO,CAACwB,iBAAiB,EAAE;QAC3B1B,OAAO,CAAC2B,UAAU,CAACC,OAAO,GAAGZ,UAAU,CAACY,OAAO;MACnD;MAEA,OAAO,KAAK;IAChB;IAEA,OAAO,IAAI;EACf;AACJ,CAAC"}