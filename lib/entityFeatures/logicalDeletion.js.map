{"version":3,"file":"logicalDeletion.js","names":["Rules","require","mergeCondition","Generators","_","module","exports","RULE_BEFORE_FIND","feature","entityModel","context","findOptions","options","$includeDeleted","$query","field","$ne","value","RULE_BEFORE_DELETE","$physicalDeletion","timestampField","updateTo","default","meta","fields","i18n","updateOpts","$retrieveUpdated","$retrieveDeleted","$bypassReadOnly","Set","pick","return","_update_","connOptions","forSingleRecord","$retrieveDbResult","rawOptions","$result"],"sources":["../../src/entityFeatures/logicalDeletion.js"],"sourcesContent":["const Rules = require('../enum/Rules');\nconst { mergeCondition } = require('../utils/lang');\nconst Generators = require('../Generators');\nconst { _ } = require('@genx/july');\n\n/**\n * A rule specifies the entity will not be deleted physically.\n * @module EntityFeatureRuntime_LogicalDeletion\n */\n\nmodule.exports = {\n    [Rules.RULE_BEFORE_FIND]: (feature, entityModel, context) => {\n        const findOptions = context.options;\n        if (!findOptions.$includeDeleted) {\n            findOptions.$query = mergeCondition(findOptions.$query, {\n                [feature.field]: { $ne: feature.value },\n            });\n        }\n\n        return true;\n    },\n    [Rules.RULE_BEFORE_DELETE]: async (feature, entityModel, context) => {\n        const options = context.options;\n        if (!options.$physicalDeletion) {\n            const { field, value, timestampField } = feature;\n            const updateTo = {\n                [field]: value,\n            };\n\n            if (timestampField) {\n                updateTo[timestampField] = Generators.default(\n                    entityModel.meta.fields[timestampField],\n                    context.i18n\n                );\n            }\n\n            const updateOpts = {\n                $query: options.$query,\n                $retrieveUpdated: options.$retrieveDeleted,\n                $bypassReadOnly: new Set([field, timestampField]),\n                ..._.pick(options, ['$retrieveDeleted', '$retrieveDbResult']),\n            };\n\n            context.return = await entityModel._update_(\n                updateTo,\n                updateOpts,\n                context.connOptions,\n                context.forSingleRecord\n            );\n\n            if (options.$retrieveDbResult) {\n                context.rawOptions.$result = updateOpts.$result;\n            }\n\n            return false;\n        }\n\n        return true;\n    },\n};\n"],"mappings":";;;;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,eAAD,CAArB;;AACA,MAAM;EAAEC;AAAF,IAAqBD,OAAO,CAAC,eAAD,CAAlC;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,eAAD,CAA1B;;AACA,MAAM;EAAEG;AAAF,IAAQH,OAAO,CAAC,YAAD,CAArB;;AAOAI,MAAM,CAACC,OAAP,GAAiB;EACb,CAACN,KAAK,CAACO,gBAAP,GAA0B,CAACC,OAAD,EAAUC,WAAV,EAAuBC,OAAvB,KAAmC;IACzD,MAAMC,WAAW,GAAGD,OAAO,CAACE,OAA5B;;IACA,IAAI,CAACD,WAAW,CAACE,eAAjB,EAAkC;MAC9BF,WAAW,CAACG,MAAZ,GAAqBZ,cAAc,CAACS,WAAW,CAACG,MAAb,EAAqB;QACpD,CAACN,OAAO,CAACO,KAAT,GAAiB;UAAEC,GAAG,EAAER,OAAO,CAACS;QAAf;MADmC,CAArB,CAAnC;IAGH;;IAED,OAAO,IAAP;EACH,CAVY;EAWb,CAACjB,KAAK,CAACkB,kBAAP,GAA4B,OAAOV,OAAP,EAAgBC,WAAhB,EAA6BC,OAA7B,KAAyC;IACjE,MAAME,OAAO,GAAGF,OAAO,CAACE,OAAxB;;IACA,IAAI,CAACA,OAAO,CAACO,iBAAb,EAAgC;MAC5B,MAAM;QAAEJ,KAAF;QAASE,KAAT;QAAgBG;MAAhB,IAAmCZ,OAAzC;MACA,MAAMa,QAAQ,GAAG;QACb,CAACN,KAAD,GAASE;MADI,CAAjB;;MAIA,IAAIG,cAAJ,EAAoB;QAChBC,QAAQ,CAACD,cAAD,CAAR,GAA2BjB,UAAU,CAACmB,OAAX,CACvBb,WAAW,CAACc,IAAZ,CAAiBC,MAAjB,CAAwBJ,cAAxB,CADuB,EAEvBV,OAAO,CAACe,IAFe,CAA3B;MAIH;;MAED,MAAMC,UAAU,GAAG;QACfZ,MAAM,EAAEF,OAAO,CAACE,MADD;QAEfa,gBAAgB,EAAEf,OAAO,CAACgB,gBAFX;QAGfC,eAAe,EAAE,IAAIC,GAAJ,CAAQ,CAACf,KAAD,EAAQK,cAAR,CAAR,CAHF;QAIf,GAAGhB,CAAC,CAAC2B,IAAF,CAAOnB,OAAP,EAAgB,CAAC,kBAAD,EAAqB,mBAArB,CAAhB;MAJY,CAAnB;MAOAF,OAAO,CAACsB,MAAR,GAAiB,MAAMvB,WAAW,CAACwB,QAAZ,CACnBZ,QADmB,EAEnBK,UAFmB,EAGnBhB,OAAO,CAACwB,WAHW,EAInBxB,OAAO,CAACyB,eAJW,CAAvB;;MAOA,IAAIvB,OAAO,CAACwB,iBAAZ,EAA+B;QAC3B1B,OAAO,CAAC2B,UAAR,CAAmBC,OAAnB,GAA6BZ,UAAU,CAACY,OAAxC;MACH;;MAED,OAAO,KAAP;IACH;;IAED,OAAO,IAAP;EACH;AAhDY,CAAjB"}