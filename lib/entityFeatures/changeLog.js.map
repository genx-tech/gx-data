{"version":3,"sources":["../../src/entityFeatures/changeLog.js"],"names":["_","require","Rules","DATETIME","ApplicationError","getConnector","entityModel","feature","app","db","connector","log","getService","dataSource","createLogEntry_","context","operation","logEntry","entity","meta","name","which","queryKey","changedAt","typeObject","local","data","latest","existing","withUser","user","getValueFromContext","isNil","changedBy","clConnector","insertOne_","storeEntity","connOptions","module","exports","RULE_AFTER_CREATE","RULE_AFTER_UPDATE","RULE_AFTER_DELETE"],"mappings":";;;;AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAQC,OAAO,CAAC,YAAD,CAArB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,eAAD,CAArB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAeF,OAAO,CAAC,UAAD,CAA5B;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAuBH,OAAO,CAAC,iBAAD,CAApC;;AAEA,SAASI,YAAT,CAAsBC,WAAtB,EAAmCC,OAAnC,EAA4C;AACxC,QAAMC,GAAG,GAAGF,WAAW,CAACG,EAAZ,CAAeD,GAA3B;;AAEA,MAAI,CAACA,GAAL,EAAU;AACNF,IAAAA,WAAW,CAACG,EAAZ,CAAeC,SAAf,CAAyBC,GAAzB,CACI,MADJ,EAEK,8EAFL;AAIA,WAAO,IAAP;AACH;;AAED,SAAOH,GAAG,CAACI,UAAJ,CAAeL,OAAO,CAACM,UAAvB,CAAP;AACH;;AAED,eAAeC,eAAf,CAA+BR,WAA/B,EAA4CC,OAA5C,EAAqDQ,OAArD,EAA8DC,SAA9D,EAAyE;AACrE,QAAMC,QAAQ,GAAG;AACbC,IAAAA,MAAM,EAAEZ,WAAW,CAACa,IAAZ,CAAiBC,IADZ;AAEbJ,IAAAA,SAFa;AAGbK,IAAAA,KAAK,EAAEN,OAAO,CAACO,QAHF;AAIbC,IAAAA,SAAS,EAAEpB,QAAQ,CAACqB,UAAT,CAAoBC,KAApB;AAJE,GAAjB;;AAOA,MAAIT,SAAS,KAAK,QAAlB,EAA4B;AACxBC,IAAAA,QAAQ,CAACS,IAAT,GAAgBX,OAAO,CAACY,MAAxB;AACH,GAFD,MAEO;AACHV,IAAAA,QAAQ,CAACS,IAAT,GAAgBX,OAAO,CAACa,QAAxB;AACH;;AAED,MAAIrB,OAAO,CAACsB,QAAZ,EAAsB;AAClB,UAAMC,IAAI,GAAGxB,WAAW,CAACyB,mBAAZ,CAAgChB,OAAhC,EAAyCR,OAAO,CAACsB,QAAjD,CAAb;;AACA,QAAI7B,CAAC,CAACgC,KAAF,CAAQF,IAAR,CAAJ,EAAmB;AACf,YAAM,IAAI1B,gBAAJ,CACD,wBAAuBG,OAAO,CAACsB,QAAS,2BAA0BvB,WAAW,CAACa,IAAZ,CAAiBC,IAAK,gBAAeJ,SAAU,EADhH,CAAN;AAGH;;AAEDC,IAAAA,QAAQ,CAACgB,SAAT,GAAqBH,IAArB;AACH;;AAED,QAAMI,WAAW,GAAG7B,YAAY,CAACC,WAAD,EAAcC,OAAd,CAAhC;AACA,QAAM2B,WAAW,CAACC,UAAZ,CACF5B,OAAO,CAAC6B,WADN,EAEFnB,QAFE,EAGFF,OAAO,CAACsB,WAHN,CAAN;AAKH;;AAODC,MAAM,CAACC,OAAP,GAAiB;AACb,GAACrC,KAAK,CAACsC,iBAAP,GAA2B,CAACjC,OAAD,EAAUD,WAAV,EAAuBS,OAAvB,KACvBD,eAAe,CAACR,WAAD,EAAcC,OAAd,EAAuBQ,OAAvB,EAAgC,QAAhC,CAFN;AAGb,GAACb,KAAK,CAACuC,iBAAP,GAA2B,CAAClC,OAAD,EAAUD,WAAV,EAAuBS,OAAvB,KACvBD,eAAe,CAACR,WAAD,EAAcC,OAAd,EAAuBQ,OAAvB,EAAgC,QAAhC,CAJN;AAKb,GAACb,KAAK,CAACwC,iBAAP,GAA2B,CAACnC,OAAD,EAAUD,WAAV,EAAuBS,OAAvB,KACvBD,eAAe,CAACR,WAAD,EAAcC,OAAd,EAAuBQ,OAAvB,EAAgC,QAAhC;AANN,CAAjB","sourcesContent":["const { _ } = require('@genx/july');\nconst Rules = require('../enum/Rules');\nconst { DATETIME } = require('../types');\nconst { ApplicationError } = require('../utils/Errors');\n\nfunction getConnector(entityModel, feature) {\n    const app = entityModel.db.app;\n\n    if (!app) {\n        entityModel.db.connector.log(\n            'warn',\n            `\"changeLog\" feature does not work when used without a service container app.`\n        );\n        return true;\n    }\n\n    return app.getService(feature.dataSource);\n}\n\nasync function createLogEntry_(entityModel, feature, context, operation) {\n    const logEntry = {\n        entity: entityModel.meta.name,\n        operation,\n        which: context.queryKey,\n        changedAt: DATETIME.typeObject.local(),\n    };\n\n    if (operation !== 'delete') {\n        logEntry.data = context.latest;\n    } else {\n        logEntry.data = context.existing;\n    }\n\n    if (feature.withUser) {\n        const user = entityModel.getValueFromContext(context, feature.withUser);\n        if (_.isNil(user)) {\n            throw new ApplicationError(\n                `Cannot get value of [${feature.withUser}] from context. Entity: ${entityModel.meta.name}, operation: ${operation}`\n            );\n        }\n\n        logEntry.changedBy = user;\n    }\n\n    const clConnector = getConnector(entityModel, feature);\n    await clConnector.insertOne_(\n        feature.storeEntity,\n        logEntry,\n        context.connOptions\n    );\n}\n\n/**\n * A rule specifies the change of state will be tracked automatically.\n * @module EntityFeatureRuntime_ChangeLog\n */\n\nmodule.exports = {\n    [Rules.RULE_AFTER_CREATE]: (feature, entityModel, context) =>\n        createLogEntry_(entityModel, feature, context, 'create'),\n    [Rules.RULE_AFTER_UPDATE]: (feature, entityModel, context) =>\n        createLogEntry_(entityModel, feature, context, 'update'),\n    [Rules.RULE_AFTER_DELETE]: (feature, entityModel, context) =>\n        createLogEntry_(entityModel, feature, context, 'delete'),\n};\n"],"file":"changeLog.js"}