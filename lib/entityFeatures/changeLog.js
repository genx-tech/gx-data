"use strict";

require("source-map-support/register");

const {
  _
} = require('@genx/july');

const Rules = require('../enum/Rules');

const {
  DATETIME
} = require('../types');

const {
  ApplicationError
} = require('../utils/Errors');

function getConnector(entityModel, feature) {
  let app = entityModel.db.app;

  if (!app) {
    entityModel.db.connector.log('warn', `"changeLog" feature does not work when used without a service container app.`);
    return true;
  }

  return app.getService(feature.dataSource);
}

async function createLogEntry_(entityModel, feature, context, operation) {
  let logEntry = {
    entity: entityModel.meta.name,
    operation,
    which: context.queryKey,
    changedAt: DATETIME.typeObject.local()
  };

  if (operation !== 'delete') {
    logEntry.data = context.latest;
  } else {
    logEntry.data = context.existing;
  }

  if (feature.withUser) {
    let user = entityModel.getValueFromContext(context, feature.withUser);

    if (_.isNil(user)) {
      throw new ApplicationError(`Cannot get value of [${feature.withUser}] from context. Entity: ${entityModel.meta.name}, operation: ${operation}`);
    }

    logEntry.changedBy = user;
  }

  let clConnector = getConnector(entityModel, feature);
  await clConnector.insertOne_(feature.storeEntity, logEntry, context.connOptions);
}

module.exports = {
  [Rules.RULE_AFTER_CREATE]: (feature, entityModel, context) => createLogEntry_(entityModel, feature, context, 'create'),
  [Rules.RULE_AFTER_UPDATE]: (feature, entityModel, context) => createLogEntry_(entityModel, feature, context, 'update'),
  [Rules.RULE_AFTER_DELETE]: (feature, entityModel, context) => createLogEntry_(entityModel, feature, context, 'delete')
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbnRpdHlGZWF0dXJlcy9jaGFuZ2VMb2cuanMiXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJSdWxlcyIsIkRBVEVUSU1FIiwiQXBwbGljYXRpb25FcnJvciIsImdldENvbm5lY3RvciIsImVudGl0eU1vZGVsIiwiZmVhdHVyZSIsImFwcCIsImRiIiwiY29ubmVjdG9yIiwibG9nIiwiZ2V0U2VydmljZSIsImRhdGFTb3VyY2UiLCJjcmVhdGVMb2dFbnRyeV8iLCJjb250ZXh0Iiwib3BlcmF0aW9uIiwibG9nRW50cnkiLCJlbnRpdHkiLCJtZXRhIiwibmFtZSIsIndoaWNoIiwicXVlcnlLZXkiLCJjaGFuZ2VkQXQiLCJ0eXBlT2JqZWN0IiwibG9jYWwiLCJkYXRhIiwibGF0ZXN0IiwiZXhpc3RpbmciLCJ3aXRoVXNlciIsInVzZXIiLCJnZXRWYWx1ZUZyb21Db250ZXh0IiwiaXNOaWwiLCJjaGFuZ2VkQnkiLCJjbENvbm5lY3RvciIsImluc2VydE9uZV8iLCJzdG9yZUVudGl0eSIsImNvbm5PcHRpb25zIiwibW9kdWxlIiwiZXhwb3J0cyIsIlJVTEVfQUZURVJfQ1JFQVRFIiwiUlVMRV9BRlRFUl9VUERBVEUiLCJSVUxFX0FGVEVSX0RFTEVURSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBUUMsT0FBTyxDQUFDLFlBQUQsQ0FBckI7O0FBQ0EsTUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsZUFBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUVFLEVBQUFBO0FBQUYsSUFBZUYsT0FBTyxDQUFDLFVBQUQsQ0FBNUI7O0FBQ0EsTUFBTTtBQUFFRyxFQUFBQTtBQUFGLElBQXVCSCxPQUFPLENBQUMsaUJBQUQsQ0FBcEM7O0FBRUEsU0FBU0ksWUFBVCxDQUFzQkMsV0FBdEIsRUFBbUNDLE9BQW5DLEVBQTRDO0FBQ3hDLE1BQUlDLEdBQUcsR0FBR0YsV0FBVyxDQUFDRyxFQUFaLENBQWVELEdBQXpCOztBQUVBLE1BQUksQ0FBQ0EsR0FBTCxFQUFVO0FBQ05GLElBQUFBLFdBQVcsQ0FBQ0csRUFBWixDQUFlQyxTQUFmLENBQXlCQyxHQUF6QixDQUE2QixNQUE3QixFQUFzQyw4RUFBdEM7QUFDQSxXQUFPLElBQVA7QUFDSDs7QUFFRCxTQUFPSCxHQUFHLENBQUNJLFVBQUosQ0FBZUwsT0FBTyxDQUFDTSxVQUF2QixDQUFQO0FBQ0g7O0FBRUQsZUFBZUMsZUFBZixDQUErQlIsV0FBL0IsRUFBNENDLE9BQTVDLEVBQXFEUSxPQUFyRCxFQUE4REMsU0FBOUQsRUFBeUU7QUFDckUsTUFBSUMsUUFBUSxHQUFHO0FBQ1hDLElBQUFBLE1BQU0sRUFBRVosV0FBVyxDQUFDYSxJQUFaLENBQWlCQyxJQURkO0FBRVhKLElBQUFBLFNBRlc7QUFHWEssSUFBQUEsS0FBSyxFQUFFTixPQUFPLENBQUNPLFFBSEo7QUFJWEMsSUFBQUEsU0FBUyxFQUFFcEIsUUFBUSxDQUFDcUIsVUFBVCxDQUFvQkMsS0FBcEI7QUFKQSxHQUFmOztBQU9BLE1BQUlULFNBQVMsS0FBSyxRQUFsQixFQUE0QjtBQUN4QkMsSUFBQUEsUUFBUSxDQUFDUyxJQUFULEdBQWdCWCxPQUFPLENBQUNZLE1BQXhCO0FBQ0gsR0FGRCxNQUVPO0FBQ0hWLElBQUFBLFFBQVEsQ0FBQ1MsSUFBVCxHQUFnQlgsT0FBTyxDQUFDYSxRQUF4QjtBQUNIOztBQUVELE1BQUlyQixPQUFPLENBQUNzQixRQUFaLEVBQXNCO0FBQ2xCLFFBQUlDLElBQUksR0FBR3hCLFdBQVcsQ0FBQ3lCLG1CQUFaLENBQWdDaEIsT0FBaEMsRUFBeUNSLE9BQU8sQ0FBQ3NCLFFBQWpELENBQVg7O0FBQ0EsUUFBSTdCLENBQUMsQ0FBQ2dDLEtBQUYsQ0FBUUYsSUFBUixDQUFKLEVBQW1CO0FBQ2YsWUFBTSxJQUFJMUIsZ0JBQUosQ0FBc0Isd0JBQXVCRyxPQUFPLENBQUNzQixRQUFTLDJCQUEwQnZCLFdBQVcsQ0FBQ2EsSUFBWixDQUFpQkMsSUFBSyxnQkFBZUosU0FBVSxFQUF2SSxDQUFOO0FBQ0g7O0FBRURDLElBQUFBLFFBQVEsQ0FBQ2dCLFNBQVQsR0FBcUJILElBQXJCO0FBQ0g7O0FBRUQsTUFBSUksV0FBVyxHQUFHN0IsWUFBWSxDQUFDQyxXQUFELEVBQWNDLE9BQWQsQ0FBOUI7QUFDQSxRQUFNMkIsV0FBVyxDQUFDQyxVQUFaLENBQXVCNUIsT0FBTyxDQUFDNkIsV0FBL0IsRUFBNENuQixRQUE1QyxFQUFzREYsT0FBTyxDQUFDc0IsV0FBOUQsQ0FBTjtBQUNIOztBQU9EQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDYixHQUFDckMsS0FBSyxDQUFDc0MsaUJBQVAsR0FBMkIsQ0FBQ2pDLE9BQUQsRUFBVUQsV0FBVixFQUF1QlMsT0FBdkIsS0FBbUNELGVBQWUsQ0FBQ1IsV0FBRCxFQUFjQyxPQUFkLEVBQXVCUSxPQUF2QixFQUFnQyxRQUFoQyxDQURoRTtBQUViLEdBQUNiLEtBQUssQ0FBQ3VDLGlCQUFQLEdBQTJCLENBQUNsQyxPQUFELEVBQVVELFdBQVYsRUFBdUJTLE9BQXZCLEtBQW1DRCxlQUFlLENBQUNSLFdBQUQsRUFBY0MsT0FBZCxFQUF1QlEsT0FBdkIsRUFBZ0MsUUFBaEMsQ0FGaEU7QUFHYixHQUFDYixLQUFLLENBQUN3QyxpQkFBUCxHQUEyQixDQUFDbkMsT0FBRCxFQUFVRCxXQUFWLEVBQXVCUyxPQUF2QixLQUFtQ0QsZUFBZSxDQUFDUixXQUFELEVBQWNDLE9BQWQsRUFBdUJRLE9BQXZCLEVBQWdDLFFBQWhDO0FBSGhFLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHsgXyB9ID0gcmVxdWlyZSgnQGdlbngvanVseScpO1xuY29uc3QgUnVsZXMgPSByZXF1aXJlKCcuLi9lbnVtL1J1bGVzJyk7XG5jb25zdCB7IERBVEVUSU1FIH0gPSByZXF1aXJlKCcuLi90eXBlcycpO1xuY29uc3QgeyBBcHBsaWNhdGlvbkVycm9yIH0gPSByZXF1aXJlKCcuLi91dGlscy9FcnJvcnMnKVxuXG5mdW5jdGlvbiBnZXRDb25uZWN0b3IoZW50aXR5TW9kZWwsIGZlYXR1cmUpIHtcbiAgICBsZXQgYXBwID0gZW50aXR5TW9kZWwuZGIuYXBwO1xuICAgICAgICBcbiAgICBpZiAoIWFwcCkge1xuICAgICAgICBlbnRpdHlNb2RlbC5kYi5jb25uZWN0b3IubG9nKCd3YXJuJywgYFwiY2hhbmdlTG9nXCIgZmVhdHVyZSBkb2VzIG5vdCB3b3JrIHdoZW4gdXNlZCB3aXRob3V0IGEgc2VydmljZSBjb250YWluZXIgYXBwLmApXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBhcHAuZ2V0U2VydmljZShmZWF0dXJlLmRhdGFTb3VyY2UpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVMb2dFbnRyeV8oZW50aXR5TW9kZWwsIGZlYXR1cmUsIGNvbnRleHQsIG9wZXJhdGlvbikge1xuICAgIGxldCBsb2dFbnRyeSA9IHtcbiAgICAgICAgZW50aXR5OiBlbnRpdHlNb2RlbC5tZXRhLm5hbWUsXG4gICAgICAgIG9wZXJhdGlvbixcbiAgICAgICAgd2hpY2g6IGNvbnRleHQucXVlcnlLZXksIFxuICAgICAgICBjaGFuZ2VkQXQ6IERBVEVUSU1FLnR5cGVPYmplY3QubG9jYWwoKVxuICAgIH07XG5cbiAgICBpZiAob3BlcmF0aW9uICE9PSAnZGVsZXRlJykge1xuICAgICAgICBsb2dFbnRyeS5kYXRhID0gY29udGV4dC5sYXRlc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbG9nRW50cnkuZGF0YSA9IGNvbnRleHQuZXhpc3Rpbmc7XG4gICAgfVxuXG4gICAgaWYgKGZlYXR1cmUud2l0aFVzZXIpIHtcbiAgICAgICAgbGV0IHVzZXIgPSBlbnRpdHlNb2RlbC5nZXRWYWx1ZUZyb21Db250ZXh0KGNvbnRleHQsIGZlYXR1cmUud2l0aFVzZXIpO1xuICAgICAgICBpZiAoXy5pc05pbCh1c2VyKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFwcGxpY2F0aW9uRXJyb3IoYENhbm5vdCBnZXQgdmFsdWUgb2YgWyR7ZmVhdHVyZS53aXRoVXNlcn1dIGZyb20gY29udGV4dC4gRW50aXR5OiAke2VudGl0eU1vZGVsLm1ldGEubmFtZX0sIG9wZXJhdGlvbjogJHtvcGVyYXRpb259YCk7XG4gICAgICAgIH1cblxuICAgICAgICBsb2dFbnRyeS5jaGFuZ2VkQnkgPSB1c2VyO1xuICAgIH1cblxuICAgIGxldCBjbENvbm5lY3RvciA9IGdldENvbm5lY3RvcihlbnRpdHlNb2RlbCwgZmVhdHVyZSk7XG4gICAgYXdhaXQgY2xDb25uZWN0b3IuaW5zZXJ0T25lXyhmZWF0dXJlLnN0b3JlRW50aXR5LCBsb2dFbnRyeSwgY29udGV4dC5jb25uT3B0aW9ucyk7XG59XG5cbi8qKlxuICogQSBydWxlIHNwZWNpZmllcyB0aGUgY2hhbmdlIG9mIHN0YXRlIHdpbGwgYmUgdHJhY2tlZCBhdXRvbWF0aWNhbGx5LlxuICogQG1vZHVsZSBFbnRpdHlGZWF0dXJlUnVudGltZV9DaGFuZ2VMb2dcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBbUnVsZXMuUlVMRV9BRlRFUl9DUkVBVEVdOiAoZmVhdHVyZSwgZW50aXR5TW9kZWwsIGNvbnRleHQpID0+IGNyZWF0ZUxvZ0VudHJ5XyhlbnRpdHlNb2RlbCwgZmVhdHVyZSwgY29udGV4dCwgJ2NyZWF0ZScpLFxuICAgIFtSdWxlcy5SVUxFX0FGVEVSX1VQREFURV06IChmZWF0dXJlLCBlbnRpdHlNb2RlbCwgY29udGV4dCkgPT4gY3JlYXRlTG9nRW50cnlfKGVudGl0eU1vZGVsLCBmZWF0dXJlLCBjb250ZXh0LCAndXBkYXRlJyksXG4gICAgW1J1bGVzLlJVTEVfQUZURVJfREVMRVRFXTogKGZlYXR1cmUsIGVudGl0eU1vZGVsLCBjb250ZXh0KSA9PiBjcmVhdGVMb2dFbnRyeV8oZW50aXR5TW9kZWwsIGZlYXR1cmUsIGNvbnRleHQsICdkZWxldGUnKVxufTsiXX0=