{"version":3,"file":"atLeastOneNotNull.js","names":["_","quote","require","ValidationError","Rules","module","exports","RULE_BEFORE_CREATE","feature","entityModel","context","each","item","every","fieldName","isNil","latest","map","f","join","entity","meta","name","fields","RULE_BEFORE_UPDATE","existing"],"sources":["../../src/entityFeatures/atLeastOneNotNull.js"],"sourcesContent":["const { _, quote } = require('@genx/july');\nconst { ValidationError } = require('../utils/Errors');\nconst Rules = require('../enum/Rules');\n\n/**\n * A rule specifies at least one field not null, e.g. email or mobile.\n * @module EntityFeatureRuntime_AtLeastOneNotNull\n */\n\nmodule.exports = {\n    [Rules.RULE_BEFORE_CREATE]: (feature, entityModel, context) => {\n        _.each(feature, (item) => {\n            if (\n                _.every(item, (fieldName) => _.isNil(context.latest[fieldName]))\n            ) {\n                throw new ValidationError(\n                    `At least one of these fields ${item\n                        .map((f) => quote(f))\n                        .join(', ')} should not be null.`,\n                    {\n                        entity: entityModel.meta.name,\n                        fields: feature,\n                    }\n                );\n            }\n        });\n\n        return true;\n    },\n\n    [Rules.RULE_BEFORE_UPDATE]: (feature, entityModel, context) => {\n        _.each(feature, (item) => {\n            if (\n                _.every(item, (fieldName) =>\n                    fieldName in context.latest\n                        ? _.isNil(context.latest[fieldName])\n                        : context.existing &&\n                          _.isNil(context.existing[fieldName])\n                )\n            ) {\n                throw new ValidationError(\n                    `At least one of these fields ${item\n                        .map((f) => quote(f))\n                        .join(', ')} should not be null.`,\n                    {\n                        entity: entityModel.meta.name,\n                        fields: feature,\n                    }\n                );\n            }\n        });\n\n        return true;\n    },\n};\n"],"mappings":";;;AAAA,MAAM;EAAEA,CAAC;EAAEC;AAAM,CAAC,GAAGC,OAAO,CAAC,YAAY,CAAC;AAC1C,MAAM;EAAEC;AAAgB,CAAC,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AACtD,MAAME,KAAK,GAAGF,OAAO,CAAC,eAAe,CAAC;AAOtCG,MAAM,CAACC,OAAO,GAAG;EACb,CAACF,KAAK,CAACG,kBAAkB,GAAG,CAACC,OAAO,EAAEC,WAAW,EAAEC,OAAO,KAAK;IAC3DV,CAAC,CAACW,IAAI,CAACH,OAAO,EAAGI,IAAI,IAAK;MACtB,IACIZ,CAAC,CAACa,KAAK,CAACD,IAAI,EAAGE,SAAS,IAAKd,CAAC,CAACe,KAAK,CAACL,OAAO,CAACM,MAAM,CAACF,SAAS,CAAC,CAAC,CAAC,EAClE;QACE,MAAM,IAAIX,eAAe,CACpB,gCAA+BS,IAAI,CAC/BK,GAAG,CAAEC,CAAC,IAAKjB,KAAK,CAACiB,CAAC,CAAC,CAAC,CACpBC,IAAI,CAAC,IAAI,CAAE,sBAAqB,EACrC;UACIC,MAAM,EAAEX,WAAW,CAACY,IAAI,CAACC,IAAI;UAC7BC,MAAM,EAAEf;QACZ,CAAC,CACJ;MACL;IACJ,CAAC,CAAC;IAEF,OAAO,IAAI;EACf,CAAC;EAED,CAACJ,KAAK,CAACoB,kBAAkB,GAAG,CAAChB,OAAO,EAAEC,WAAW,EAAEC,OAAO,KAAK;IAC3DV,CAAC,CAACW,IAAI,CAACH,OAAO,EAAGI,IAAI,IAAK;MACtB,IACIZ,CAAC,CAACa,KAAK,CAACD,IAAI,EAAGE,SAAS,IACpBA,SAAS,IAAIJ,OAAO,CAACM,MAAM,GACrBhB,CAAC,CAACe,KAAK,CAACL,OAAO,CAACM,MAAM,CAACF,SAAS,CAAC,CAAC,GAClCJ,OAAO,CAACe,QAAQ,IAChBzB,CAAC,CAACe,KAAK,CAACL,OAAO,CAACe,QAAQ,CAACX,SAAS,CAAC,CAAC,CAC7C,EACH;QACE,MAAM,IAAIX,eAAe,CACpB,gCAA+BS,IAAI,CAC/BK,GAAG,CAAEC,CAAC,IAAKjB,KAAK,CAACiB,CAAC,CAAC,CAAC,CACpBC,IAAI,CAAC,IAAI,CAAE,sBAAqB,EACrC;UACIC,MAAM,EAAEX,WAAW,CAACY,IAAI,CAACC,IAAI;UAC7BC,MAAM,EAAEf;QACZ,CAAC,CACJ;MACL;IACJ,CAAC,CAAC;IAEF,OAAO,IAAI;EACf;AACJ,CAAC"}