"use strict";

require("source-map-support/register");

const Rules = require('../../enum/Rules');

const {
  mergeCondition
} = require('../../utils/lang');

const Generators = require('../Generators');

module.exports = {
  [Rules.RULE_BEFORE_FIND]: (feature, entityModel, context) => {
    let findOptions = context.options;

    if (!findOptions.$includeDeleted) {
      findOptions.$query = mergeCondition(findOptions.$query, {
        [feature.field]: {
          $ne: feature.value
        }
      });
    }

    return true;
  },
  [Rules.RULE_BEFORE_DELETE]: async (feature, entityModel, context) => {
    let options = context.options;

    if (!options.$physicalDeletion) {
      let {
        field,
        value,
        timestampField
      } = feature;
      let updateTo = {
        [field]: value
      };

      if (timestampField) {
        updateTo[timestampField] = Generators.default(entityModel.meta.fields[timestampField], context.i18n);
      }

      context.return = await entityModel._update_(updateTo, {
        $query: options.$query,
        $retrieveUpdated: options.$retrieveDeleted,
        $bypassReadOnly: new Set([field, timestampField])
      });
      return false;
    }

    return true;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbnRpdHlGZWF0dXJlcy9sb2dpY2FsRGVsZXRpb24uanMiXSwibmFtZXMiOlsiUnVsZXMiLCJyZXF1aXJlIiwibWVyZ2VDb25kaXRpb24iLCJHZW5lcmF0b3JzIiwibW9kdWxlIiwiZXhwb3J0cyIsIlJVTEVfQkVGT1JFX0ZJTkQiLCJmZWF0dXJlIiwiZW50aXR5TW9kZWwiLCJjb250ZXh0IiwiZmluZE9wdGlvbnMiLCJvcHRpb25zIiwiJGluY2x1ZGVEZWxldGVkIiwiJHF1ZXJ5IiwiZmllbGQiLCIkbmUiLCJ2YWx1ZSIsIlJVTEVfQkVGT1JFX0RFTEVURSIsIiRwaHlzaWNhbERlbGV0aW9uIiwidGltZXN0YW1wRmllbGQiLCJ1cGRhdGVUbyIsImRlZmF1bHQiLCJtZXRhIiwiZmllbGRzIiwiaTE4biIsInJldHVybiIsIl91cGRhdGVfIiwiJHJldHJpZXZlVXBkYXRlZCIsIiRyZXRyaWV2ZURlbGV0ZWQiLCIkYnlwYXNzUmVhZE9ubHkiLCJTZXQiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsa0JBQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQXFCRCxPQUFPLENBQUMsa0JBQUQsQ0FBbEM7O0FBQ0EsTUFBTUUsVUFBVSxHQUFHRixPQUFPLENBQUMsZUFBRCxDQUExQjs7QUFPQUcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2IsR0FBQ0wsS0FBSyxDQUFDTSxnQkFBUCxHQUEwQixDQUFDQyxPQUFELEVBQVVDLFdBQVYsRUFBdUJDLE9BQXZCLEtBQW1DO0FBQ3pELFFBQUlDLFdBQVcsR0FBR0QsT0FBTyxDQUFDRSxPQUExQjs7QUFDQSxRQUFJLENBQUNELFdBQVcsQ0FBQ0UsZUFBakIsRUFBa0M7QUFDOUJGLE1BQUFBLFdBQVcsQ0FBQ0csTUFBWixHQUFxQlgsY0FBYyxDQUFDUSxXQUFXLENBQUNHLE1BQWIsRUFBcUI7QUFBRSxTQUFDTixPQUFPLENBQUNPLEtBQVQsR0FBaUI7QUFBRUMsVUFBQUEsR0FBRyxFQUFFUixPQUFPLENBQUNTO0FBQWY7QUFBbkIsT0FBckIsQ0FBbkM7QUFDSDs7QUFFRCxXQUFPLElBQVA7QUFDSCxHQVJZO0FBU2IsR0FBQ2hCLEtBQUssQ0FBQ2lCLGtCQUFQLEdBQTRCLE9BQU9WLE9BQVAsRUFBZ0JDLFdBQWhCLEVBQTZCQyxPQUE3QixLQUF5QztBQUNqRSxRQUFJRSxPQUFPLEdBQUdGLE9BQU8sQ0FBQ0UsT0FBdEI7O0FBQ0EsUUFBSSxDQUFDQSxPQUFPLENBQUNPLGlCQUFiLEVBQWdDO0FBQzVCLFVBQUk7QUFBRUosUUFBQUEsS0FBRjtBQUFTRSxRQUFBQSxLQUFUO0FBQWdCRyxRQUFBQTtBQUFoQixVQUFtQ1osT0FBdkM7QUFDQSxVQUFJYSxRQUFRLEdBQUc7QUFDWCxTQUFDTixLQUFELEdBQVNFO0FBREUsT0FBZjs7QUFJQSxVQUFJRyxjQUFKLEVBQW9CO0FBQ2hCQyxRQUFBQSxRQUFRLENBQUNELGNBQUQsQ0FBUixHQUEyQmhCLFVBQVUsQ0FBQ2tCLE9BQVgsQ0FBbUJiLFdBQVcsQ0FBQ2MsSUFBWixDQUFpQkMsTUFBakIsQ0FBd0JKLGNBQXhCLENBQW5CLEVBQTREVixPQUFPLENBQUNlLElBQXBFLENBQTNCO0FBQ0g7O0FBRURmLE1BQUFBLE9BQU8sQ0FBQ2dCLE1BQVIsR0FBaUIsTUFBTWpCLFdBQVcsQ0FBQ2tCLFFBQVosQ0FBcUJOLFFBQXJCLEVBQStCO0FBQ2xEUCxRQUFBQSxNQUFNLEVBQUVGLE9BQU8sQ0FBQ0UsTUFEa0M7QUFFbERjLFFBQUFBLGdCQUFnQixFQUFFaEIsT0FBTyxDQUFDaUIsZ0JBRndCO0FBR2xEQyxRQUFBQSxlQUFlLEVBQUUsSUFBSUMsR0FBSixDQUFRLENBQUNoQixLQUFELEVBQVFLLGNBQVIsQ0FBUjtBQUhpQyxPQUEvQixDQUF2QjtBQU1BLGFBQU8sS0FBUDtBQUNIOztBQUVELFdBQU8sSUFBUDtBQUNIO0FBL0JZLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IFJ1bGVzID0gcmVxdWlyZSgnLi4vLi4vZW51bS9SdWxlcycpO1xuY29uc3QgeyBtZXJnZUNvbmRpdGlvbiB9ID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvbGFuZycpO1xuY29uc3QgR2VuZXJhdG9ycyA9IHJlcXVpcmUoJy4uL0dlbmVyYXRvcnMnKTtcblxuLyoqXG4gKiBBIHJ1bGUgc3BlY2lmaWVzIHRoZSBlbnRpdHkgd2lsbCBub3QgYmUgZGVsZXRlZCBwaHlzaWNhbGx5LlxuICogQG1vZHVsZSBFbnRpdHlGZWF0dXJlUnVudGltZV9Mb2dpY2FsRGVsZXRpb25cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBbUnVsZXMuUlVMRV9CRUZPUkVfRklORF06IChmZWF0dXJlLCBlbnRpdHlNb2RlbCwgY29udGV4dCkgPT4ge1xuICAgICAgICBsZXQgZmluZE9wdGlvbnMgPSBjb250ZXh0Lm9wdGlvbnM7XG4gICAgICAgIGlmICghZmluZE9wdGlvbnMuJGluY2x1ZGVEZWxldGVkKSB7XG4gICAgICAgICAgICBmaW5kT3B0aW9ucy4kcXVlcnkgPSBtZXJnZUNvbmRpdGlvbihmaW5kT3B0aW9ucy4kcXVlcnksIHsgW2ZlYXR1cmUuZmllbGRdOiB7ICRuZTogZmVhdHVyZS52YWx1ZSB9IH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBbUnVsZXMuUlVMRV9CRUZPUkVfREVMRVRFXTogYXN5bmMgKGZlYXR1cmUsIGVudGl0eU1vZGVsLCBjb250ZXh0KSA9PiB7XG4gICAgICAgIGxldCBvcHRpb25zID0gY29udGV4dC5vcHRpb25zO1xuICAgICAgICBpZiAoIW9wdGlvbnMuJHBoeXNpY2FsRGVsZXRpb24pIHtcbiAgICAgICAgICAgIGxldCB7IGZpZWxkLCB2YWx1ZSwgdGltZXN0YW1wRmllbGQgfSA9IGZlYXR1cmU7XG4gICAgICAgICAgICBsZXQgdXBkYXRlVG8gPSB7XG4gICAgICAgICAgICAgICAgW2ZpZWxkXTogdmFsdWVcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmICh0aW1lc3RhbXBGaWVsZCkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZVRvW3RpbWVzdGFtcEZpZWxkXSA9IEdlbmVyYXRvcnMuZGVmYXVsdChlbnRpdHlNb2RlbC5tZXRhLmZpZWxkc1t0aW1lc3RhbXBGaWVsZF0sIGNvbnRleHQuaTE4bik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnRleHQucmV0dXJuID0gYXdhaXQgZW50aXR5TW9kZWwuX3VwZGF0ZV8odXBkYXRlVG8sIHsgXG4gICAgICAgICAgICAgICAgJHF1ZXJ5OiBvcHRpb25zLiRxdWVyeSwgXG4gICAgICAgICAgICAgICAgJHJldHJpZXZlVXBkYXRlZDogb3B0aW9ucy4kcmV0cmlldmVEZWxldGVkLFxuICAgICAgICAgICAgICAgICRieXBhc3NSZWFkT25seTogbmV3IFNldChbZmllbGQsIHRpbWVzdGFtcEZpZWxkXSlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59OyJdfQ==