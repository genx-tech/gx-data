"use strict";

require("source-map-support/register");

const {
  _,
  quote
} = require('@genx/july');

const {
  ValidationError
} = require('../utils/Errors');

const Rules = require('../enum/Rules');

module.exports = {
  [Rules.RULE_BEFORE_CREATE]: (feature, entityModel, context) => {
    _.each(feature, item => {
      if (_.every(item, fieldName => _.isNil(context.latest[fieldName]))) {
        throw new ValidationError(`At least one of these fields ${item.map(f => quote(f)).join(', ')} should not be null.`, {
          entity: entityModel.meta.name,
          fields: feature
        });
      }
    });

    return true;
  },
  [Rules.RULE_BEFORE_UPDATE]: (feature, entityModel, context) => {
    _.each(feature, item => {
      if (_.every(item, fieldName => context.latest.hasOwnProperty(fieldName) ? _.isNil(context.latest[fieldName]) : context.existing && _.isNil(context.existing[fieldName]))) {
        throw new ValidationError(`At least one of these fields ${item.map(f => quote(f)).join(', ')} should not be null.`, {
          entity: entityModel.meta.name,
          fields: feature
        });
      }
    });

    return true;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbnRpdHlGZWF0dXJlcy9hdExlYXN0T25lTm90TnVsbC5qcyJdLCJuYW1lcyI6WyJfIiwicXVvdGUiLCJyZXF1aXJlIiwiVmFsaWRhdGlvbkVycm9yIiwiUnVsZXMiLCJtb2R1bGUiLCJleHBvcnRzIiwiUlVMRV9CRUZPUkVfQ1JFQVRFIiwiZmVhdHVyZSIsImVudGl0eU1vZGVsIiwiY29udGV4dCIsImVhY2giLCJpdGVtIiwiZXZlcnkiLCJmaWVsZE5hbWUiLCJpc05pbCIsImxhdGVzdCIsIm1hcCIsImYiLCJqb2luIiwiZW50aXR5IiwibWV0YSIsIm5hbWUiLCJmaWVsZHMiLCJSVUxFX0JFRk9SRV9VUERBVEUiLCJoYXNPd25Qcm9wZXJ0eSIsImV4aXN0aW5nIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU07QUFBRUEsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQTtBQUFMLElBQWVDLE9BQU8sQ0FBQyxZQUFELENBQTVCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFzQkQsT0FBTyxDQUFDLGlCQUFELENBQW5DOztBQUNBLE1BQU1FLEtBQUssR0FBR0YsT0FBTyxDQUFDLGVBQUQsQ0FBckI7O0FBT0FHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNiLEdBQUNGLEtBQUssQ0FBQ0csa0JBQVAsR0FBNEIsQ0FBQ0MsT0FBRCxFQUFVQyxXQUFWLEVBQXVCQyxPQUF2QixLQUFtQztBQUMzRFYsSUFBQUEsQ0FBQyxDQUFDVyxJQUFGLENBQU9ILE9BQVAsRUFBZ0JJLElBQUksSUFBSTtBQUNwQixVQUFJWixDQUFDLENBQUNhLEtBQUYsQ0FBUUQsSUFBUixFQUFjRSxTQUFTLElBQUlkLENBQUMsQ0FBQ2UsS0FBRixDQUFRTCxPQUFPLENBQUNNLE1BQVIsQ0FBZUYsU0FBZixDQUFSLENBQTNCLENBQUosRUFBb0U7QUFDaEUsY0FBTSxJQUFJWCxlQUFKLENBQXFCLGdDQUFnQ1MsSUFBSSxDQUFDSyxHQUFMLENBQVNDLENBQUMsSUFBSWpCLEtBQUssQ0FBQ2lCLENBQUQsQ0FBbkIsRUFBd0JDLElBQXhCLENBQTZCLElBQTdCLENBQW9DLHNCQUF6RixFQUFnSDtBQUNsSEMsVUFBQUEsTUFBTSxFQUFFWCxXQUFXLENBQUNZLElBQVosQ0FBaUJDLElBRHlGO0FBRWxIQyxVQUFBQSxNQUFNLEVBQUVmO0FBRjBHLFNBQWhILENBQU47QUFJSDtBQUNKLEtBUEQ7O0FBU0EsV0FBTyxJQUFQO0FBQ0gsR0FaWTtBQWNiLEdBQUNKLEtBQUssQ0FBQ29CLGtCQUFQLEdBQTRCLENBQUNoQixPQUFELEVBQVVDLFdBQVYsRUFBdUJDLE9BQXZCLEtBQW1DO0FBQzNEVixJQUFBQSxDQUFDLENBQUNXLElBQUYsQ0FBT0gsT0FBUCxFQUFnQkksSUFBSSxJQUFJO0FBQ3BCLFVBQUlaLENBQUMsQ0FBQ2EsS0FBRixDQUFRRCxJQUFSLEVBQWNFLFNBQVMsSUFBSUosT0FBTyxDQUFDTSxNQUFSLENBQWVTLGNBQWYsQ0FBOEJYLFNBQTlCLElBQzNCZCxDQUFDLENBQUNlLEtBQUYsQ0FBUUwsT0FBTyxDQUFDTSxNQUFSLENBQWVGLFNBQWYsQ0FBUixDQUQyQixHQUUxQkosT0FBTyxDQUFDZ0IsUUFBUixJQUFvQjFCLENBQUMsQ0FBQ2UsS0FBRixDQUFRTCxPQUFPLENBQUNnQixRQUFSLENBQWlCWixTQUFqQixDQUFSLENBRnJCLENBQUosRUFHRTtBQUNFLGNBQU0sSUFBSVgsZUFBSixDQUFxQixnQ0FBZ0NTLElBQUksQ0FBQ0ssR0FBTCxDQUFTQyxDQUFDLElBQUlqQixLQUFLLENBQUNpQixDQUFELENBQW5CLEVBQXdCQyxJQUF4QixDQUE2QixJQUE3QixDQUFvQyxzQkFBekYsRUFBZ0g7QUFDbEhDLFVBQUFBLE1BQU0sRUFBRVgsV0FBVyxDQUFDWSxJQUFaLENBQWlCQyxJQUR5RjtBQUVsSEMsVUFBQUEsTUFBTSxFQUFFZjtBQUYwRyxTQUFoSCxDQUFOO0FBSUg7QUFDSixLQVZEOztBQVlBLFdBQU8sSUFBUDtBQUNIO0FBNUJZLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHsgXywgcXVvdGUgfSA9IHJlcXVpcmUoJ0BnZW54L2p1bHknKTtcbmNvbnN0IHsgVmFsaWRhdGlvbkVycm9yIH0gPSByZXF1aXJlKCcuLi91dGlscy9FcnJvcnMnKTtcbmNvbnN0IFJ1bGVzID0gcmVxdWlyZSgnLi4vZW51bS9SdWxlcycpO1xuXG4vKipcbiAqIEEgcnVsZSBzcGVjaWZpZXMgYXQgbGVhc3Qgb25lIGZpZWxkIG5vdCBudWxsLCBlLmcuIGVtYWlsIG9yIG1vYmlsZS5cbiAqIEBtb2R1bGUgRW50aXR5RmVhdHVyZVJ1bnRpbWVfQXRMZWFzdE9uZU5vdE51bGxcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBbUnVsZXMuUlVMRV9CRUZPUkVfQ1JFQVRFXTogKGZlYXR1cmUsIGVudGl0eU1vZGVsLCBjb250ZXh0KSA9PiB7XG4gICAgICAgIF8uZWFjaChmZWF0dXJlLCBpdGVtID0+IHtcbiAgICAgICAgICAgIGlmIChfLmV2ZXJ5KGl0ZW0sIGZpZWxkTmFtZSA9PiBfLmlzTmlsKGNvbnRleHQubGF0ZXN0W2ZpZWxkTmFtZV0pKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoYEF0IGxlYXN0IG9uZSBvZiB0aGVzZSBmaWVsZHMgJHsgaXRlbS5tYXAoZiA9PiBxdW90ZShmKSkuam9pbignLCAnKSB9IHNob3VsZCBub3QgYmUgbnVsbC5gLCB7XG4gICAgICAgICAgICAgICAgICAgIGVudGl0eTogZW50aXR5TW9kZWwubWV0YS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBmaWVsZHM6IGZlYXR1cmVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7ICBcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgW1J1bGVzLlJVTEVfQkVGT1JFX1VQREFURV06IChmZWF0dXJlLCBlbnRpdHlNb2RlbCwgY29udGV4dCkgPT4ge1xuICAgICAgICBfLmVhY2goZmVhdHVyZSwgaXRlbSA9PiB7XG4gICAgICAgICAgICBpZiAoXy5ldmVyeShpdGVtLCBmaWVsZE5hbWUgPT4gY29udGV4dC5sYXRlc3QuaGFzT3duUHJvcGVydHkoZmllbGROYW1lKSA/IFxuICAgICAgICAgICAgICAgIF8uaXNOaWwoY29udGV4dC5sYXRlc3RbZmllbGROYW1lXSkgOiBcbiAgICAgICAgICAgICAgICAoY29udGV4dC5leGlzdGluZyAmJiBfLmlzTmlsKGNvbnRleHQuZXhpc3RpbmdbZmllbGROYW1lXSkpKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihgQXQgbGVhc3Qgb25lIG9mIHRoZXNlIGZpZWxkcyAkeyBpdGVtLm1hcChmID0+IHF1b3RlKGYpKS5qb2luKCcsICcpIH0gc2hvdWxkIG5vdCBiZSBudWxsLmAsIHtcbiAgICAgICAgICAgICAgICAgICAgZW50aXR5OiBlbnRpdHlNb2RlbC5tZXRhLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkczogZmVhdHVyZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTsgIFxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn07Il19