{"version":3,"sources":["../../src/entityFeatures/userEditTracking.js"],"names":["Rules","require","InvalidArgument","addCreatedBy_","entityModel","feature","context","options","$migration","latest","fields","createdBy","migrationUser","uid","getValueFromContext","uidSource","meta","name","addUpdatedBy_","$skipUpdateTracking","updatedBy","module","exports","RULE_BEFORE_VALIDATION","op"],"mappings":";;;;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,eAAD,CAArB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAsBD,OAAO,CAAC,iBAAD,CAAnC;;AAEA,SAASE,aAAT,CAAuBC,WAAvB,EAAoCC,OAApC,EAA6CC,OAA7C,EAAsD;AAClD,MAAIA,OAAO,CAACC,OAAR,CAAgBC,UAApB,EAAgC;AAC5BF,IAAAA,OAAO,CAACG,MAAR,CAAeJ,OAAO,CAACK,MAAR,CAAeC,SAA9B,IAA2CN,OAAO,CAACO,aAAnD;AACA,WAAO,IAAP;AACH;;AAED,MAAIC,GAAG,GAAGT,WAAW,CAACU,mBAAZ,CAAgCR,OAAhC,EAAyCD,OAAO,CAACU,SAAjD,CAAV;;AACA,MAAIF,GAAG,IAAI,IAAX,EAAiB;AACb,UAAM,IAAIX,eAAJ,CACD,YAAWG,OAAO,CAACU,SAAU,wBAAuBX,WAAW,CAACY,IAAZ,CAAiBC,IAAK,EADzE,CAAN;AAGH;;AACDX,EAAAA,OAAO,CAACG,MAAR,CAAeJ,OAAO,CAACK,MAAR,CAAeC,SAA9B,IAA2CE,GAA3C;AACA,SAAO,IAAP;AACH;;AAED,SAASK,aAAT,CAAuBd,WAAvB,EAAoCC,OAApC,EAA6CC,OAA7C,EAAsD;AAClD,MAAIA,OAAO,CAACC,OAAR,CAAgBY,mBAApB,EAAyC,OAAO,IAAP;AAEzC,MAAIN,GAAG,GAAGT,WAAW,CAACU,mBAAZ,CAAgCR,OAAhC,EAAyCD,OAAO,CAACU,SAAjD,CAAV;;AACA,MAAIF,GAAG,IAAI,IAAX,EAAiB;AACb,UAAM,IAAIX,eAAJ,CAAqB,YAAWG,OAAO,CAACU,SAAU,cAAlD,CAAN;AACH;;AACDT,EAAAA,OAAO,CAACG,MAAR,CAAeJ,OAAO,CAACK,MAAR,CAAeU,SAA9B,IAA2CP,GAA3C;AAEA,SAAO,IAAP;AACH;;AAODQ,MAAM,CAACC,OAAP,GAAiB;AACb,GAACtB,KAAK,CAACuB,sBAAP,GAAgC,CAAClB,OAAD,EAAUD,WAAV,EAAuBE,OAAvB,KAC5BA,OAAO,CAACkB,EAAR,KAAe,QAAf,GACMrB,aAAa,CAACC,WAAD,EAAcC,OAAd,EAAuBC,OAAvB,CADnB,GAEMY,aAAa,CAACd,WAAD,EAAcC,OAAd,EAAuBC,OAAvB;AAJV,CAAjB","sourcesContent":["const Rules = require('../enum/Rules');\nconst { InvalidArgument } = require('../utils/Errors');\n\nfunction addCreatedBy_(entityModel, feature, context) {\n    if (context.options.$migration) {\n        context.latest[feature.fields.createdBy] = feature.migrationUser;\n        return true;\n    }\n\n    let uid = entityModel.getValueFromContext(context, feature.uidSource);\n    if (uid == null) {\n        throw new InvalidArgument(\n            `Context \"${feature.uidSource}\" not found. Entity: ${entityModel.meta.name}`\n        );\n    }\n    context.latest[feature.fields.createdBy] = uid;\n    return true;\n}\n\nfunction addUpdatedBy_(entityModel, feature, context) {\n    if (context.options.$skipUpdateTracking) return true;\n\n    let uid = entityModel.getValueFromContext(context, feature.uidSource);\n    if (uid == null) {\n        throw new InvalidArgument(`Context \"${feature.uidSource}\" not found.`);\n    }\n    context.latest[feature.fields.updatedBy] = uid;\n    //revision++\n    return true;\n}\n\n/**\n * A rule specifies the change of state will be tracked automatically.\n * @module EntityFeatureRuntime_ChangeLog\n */\n\nmodule.exports = {\n    [Rules.RULE_BEFORE_VALIDATION]: (feature, entityModel, context) =>\n        context.op === 'create'\n            ? addCreatedBy_(entityModel, feature, context)\n            : addUpdatedBy_(entityModel, feature, context),\n};\n"],"file":"userEditTracking.js"}