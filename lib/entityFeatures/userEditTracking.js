"use strict";

require("source-map-support/register");

const Rules = require('../enum/Rules');

const {
  InvalidArgument
} = require('../utils/Errors');

function addCreatedBy_(entityModel, feature, context) {
  if (context.options.$migration) {
    context.latest[feature.fields.createdBy] = feature.migrationUser;
    return true;
  }

  let uid = entityModel.getValueFromContext(context, feature.uidSource);

  if (uid == null) {
    throw new InvalidArgument(`Context "${feature.uidSource}" not found.`);
  }

  context.latest[feature.fields.createdBy] = uid;
  return true;
}

function addUpdatedBy_(entityModel, feature, context) {
  let uid = entityModel.getValueFromContext(context, feature.uidSource);

  if (uid == null) {
    throw new InvalidArgument(`Context "${feature.uidSource}" not found.`);
  }

  context.latest[feature.fields.updatedBy] = uid;
  return true;
}

module.exports = {
  [Rules.RULE_BEFORE_CREATE]: (feature, entityModel, context) => addCreatedBy_(entityModel, feature, context),
  [Rules.RULE_BEFORE_UPDATE]: (feature, entityModel, context) => addUpdatedBy_(entityModel, feature, context)
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbnRpdHlGZWF0dXJlcy91c2VyRWRpdFRyYWNraW5nLmpzIl0sIm5hbWVzIjpbIlJ1bGVzIiwicmVxdWlyZSIsIkludmFsaWRBcmd1bWVudCIsImFkZENyZWF0ZWRCeV8iLCJlbnRpdHlNb2RlbCIsImZlYXR1cmUiLCJjb250ZXh0Iiwib3B0aW9ucyIsIiRtaWdyYXRpb24iLCJsYXRlc3QiLCJmaWVsZHMiLCJjcmVhdGVkQnkiLCJtaWdyYXRpb25Vc2VyIiwidWlkIiwiZ2V0VmFsdWVGcm9tQ29udGV4dCIsInVpZFNvdXJjZSIsImFkZFVwZGF0ZWRCeV8iLCJ1cGRhdGVkQnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiUlVMRV9CRUZPUkVfQ1JFQVRFIiwiUlVMRV9CRUZPUkVfVVBEQVRFIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLGVBQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQXNCRCxPQUFPLENBQUMsaUJBQUQsQ0FBbkM7O0FBRUEsU0FBU0UsYUFBVCxDQUF1QkMsV0FBdkIsRUFBb0NDLE9BQXBDLEVBQTZDQyxPQUE3QyxFQUFzRDtBQUNsRCxNQUFJQSxPQUFPLENBQUNDLE9BQVIsQ0FBZ0JDLFVBQXBCLEVBQWdDO0FBQzVCRixJQUFBQSxPQUFPLENBQUNHLE1BQVIsQ0FBZUosT0FBTyxDQUFDSyxNQUFSLENBQWVDLFNBQTlCLElBQTJDTixPQUFPLENBQUNPLGFBQW5EO0FBQ0EsV0FBTyxJQUFQO0FBQ0g7O0FBRUQsTUFBSUMsR0FBRyxHQUFHVCxXQUFXLENBQUNVLG1CQUFaLENBQWdDUixPQUFoQyxFQUF5Q0QsT0FBTyxDQUFDVSxTQUFqRCxDQUFWOztBQUNBLE1BQUlGLEdBQUcsSUFBSSxJQUFYLEVBQWlCO0FBQ2IsVUFBTSxJQUFJWCxlQUFKLENBQXFCLFlBQVdHLE9BQU8sQ0FBQ1UsU0FBVSxjQUFsRCxDQUFOO0FBQ0g7O0FBQ0RULEVBQUFBLE9BQU8sQ0FBQ0csTUFBUixDQUFlSixPQUFPLENBQUNLLE1BQVIsQ0FBZUMsU0FBOUIsSUFBMkNFLEdBQTNDO0FBQ0EsU0FBTyxJQUFQO0FBQ0g7O0FBRUQsU0FBU0csYUFBVCxDQUF1QlosV0FBdkIsRUFBb0NDLE9BQXBDLEVBQTZDQyxPQUE3QyxFQUFzRDtBQUNsRCxNQUFJTyxHQUFHLEdBQUdULFdBQVcsQ0FBQ1UsbUJBQVosQ0FBZ0NSLE9BQWhDLEVBQXlDRCxPQUFPLENBQUNVLFNBQWpELENBQVY7O0FBQ0EsTUFBSUYsR0FBRyxJQUFJLElBQVgsRUFBaUI7QUFDYixVQUFNLElBQUlYLGVBQUosQ0FBcUIsWUFBV0csT0FBTyxDQUFDVSxTQUFVLGNBQWxELENBQU47QUFDSDs7QUFDRFQsRUFBQUEsT0FBTyxDQUFDRyxNQUFSLENBQWVKLE9BQU8sQ0FBQ0ssTUFBUixDQUFlTyxTQUE5QixJQUEyQ0osR0FBM0M7QUFDQSxTQUFPLElBQVA7QUFDSDs7QUFPREssTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2IsR0FBQ25CLEtBQUssQ0FBQ29CLGtCQUFQLEdBQTRCLENBQUNmLE9BQUQsRUFBVUQsV0FBVixFQUF1QkUsT0FBdkIsS0FBbUNILGFBQWEsQ0FBQ0MsV0FBRCxFQUFjQyxPQUFkLEVBQXVCQyxPQUF2QixDQUQvRDtBQUViLEdBQUNOLEtBQUssQ0FBQ3FCLGtCQUFQLEdBQTRCLENBQUNoQixPQUFELEVBQVVELFdBQVYsRUFBdUJFLE9BQXZCLEtBQW1DVSxhQUFhLENBQUNaLFdBQUQsRUFBY0MsT0FBZCxFQUF1QkMsT0FBdkI7QUFGL0QsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgUnVsZXMgPSByZXF1aXJlKCcuLi9lbnVtL1J1bGVzJyk7XG5jb25zdCB7IEludmFsaWRBcmd1bWVudCB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvRXJyb3JzJyk7XG5cbmZ1bmN0aW9uIGFkZENyZWF0ZWRCeV8oZW50aXR5TW9kZWwsIGZlYXR1cmUsIGNvbnRleHQpIHtcbiAgICBpZiAoY29udGV4dC5vcHRpb25zLiRtaWdyYXRpb24pIHtcbiAgICAgICAgY29udGV4dC5sYXRlc3RbZmVhdHVyZS5maWVsZHMuY3JlYXRlZEJ5XSA9IGZlYXR1cmUubWlncmF0aW9uVXNlcjtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgbGV0IHVpZCA9IGVudGl0eU1vZGVsLmdldFZhbHVlRnJvbUNvbnRleHQoY29udGV4dCwgZmVhdHVyZS51aWRTb3VyY2UpO1xuICAgIGlmICh1aWQgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50KGBDb250ZXh0IFwiJHtmZWF0dXJlLnVpZFNvdXJjZX1cIiBub3QgZm91bmQuYClcbiAgICB9XG4gICAgY29udGV4dC5sYXRlc3RbZmVhdHVyZS5maWVsZHMuY3JlYXRlZEJ5XSA9IHVpZDtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gYWRkVXBkYXRlZEJ5XyhlbnRpdHlNb2RlbCwgZmVhdHVyZSwgY29udGV4dCkge1xuICAgIGxldCB1aWQgPSBlbnRpdHlNb2RlbC5nZXRWYWx1ZUZyb21Db250ZXh0KGNvbnRleHQsIGZlYXR1cmUudWlkU291cmNlKTtcbiAgICBpZiAodWlkID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudChgQ29udGV4dCBcIiR7ZmVhdHVyZS51aWRTb3VyY2V9XCIgbm90IGZvdW5kLmApXG4gICAgfVxuICAgIGNvbnRleHQubGF0ZXN0W2ZlYXR1cmUuZmllbGRzLnVwZGF0ZWRCeV0gPSB1aWQ7ICAgIFxuICAgIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEEgcnVsZSBzcGVjaWZpZXMgdGhlIGNoYW5nZSBvZiBzdGF0ZSB3aWxsIGJlIHRyYWNrZWQgYXV0b21hdGljYWxseS5cbiAqIEBtb2R1bGUgRW50aXR5RmVhdHVyZVJ1bnRpbWVfQ2hhbmdlTG9nXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgW1J1bGVzLlJVTEVfQkVGT1JFX0NSRUFURV06IChmZWF0dXJlLCBlbnRpdHlNb2RlbCwgY29udGV4dCkgPT4gYWRkQ3JlYXRlZEJ5XyhlbnRpdHlNb2RlbCwgZmVhdHVyZSwgY29udGV4dCksXG4gICAgW1J1bGVzLlJVTEVfQkVGT1JFX1VQREFURV06IChmZWF0dXJlLCBlbnRpdHlNb2RlbCwgY29udGV4dCkgPT4gYWRkVXBkYXRlZEJ5XyhlbnRpdHlNb2RlbCwgZmVhdHVyZSwgY29udGV4dClcbn07Il19