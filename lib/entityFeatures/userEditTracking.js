"use strict";

require("source-map-support/register");

const Rules = require('../enum/Rules');

const {
  InvalidArgument
} = require('../utils/Errors');

function addCreatedBy_(entityModel, feature, context) {
  if (context.options.$migration && context.latest[feature.fields.createdBy] != null) {
    return true;
  }

  let uid = entityModel.getValueFromContext(context, feature.uidSource);

  if (uid == null) {
    throw new InvalidArgument(`Context "${feature.uidSource}" not found.`);
  }

  context.latest[feature.fields.createdBy] = uid;
  return true;
}

function addUpdatedBy_(entityModel, feature, context) {
  let uid = entityModel.getValueFromContext(context, feature.uidSource);

  if (uid == null) {
    throw new InvalidArgument(`Context "${feature.uidSource}" not found.`);
  }

  context.latest[feature.fields.updatedBy] = uid;
  context.latest[feature.fields.revision] = entityModel.queryBinExpr(entityModel.queryColumn(feature.fields.revision), '+', 1);
  return true;
}

module.exports = {
  [Rules.RULE_BEFORE_CREATE]: (feature, entityModel, context) => addCreatedBy_(entityModel, feature, context),
  [Rules.RULE_BEFORE_UPDATE]: (feature, entityModel, context) => addUpdatedBy_(entityModel, feature, context)
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbnRpdHlGZWF0dXJlcy91c2VyRWRpdFRyYWNraW5nLmpzIl0sIm5hbWVzIjpbIlJ1bGVzIiwicmVxdWlyZSIsIkludmFsaWRBcmd1bWVudCIsImFkZENyZWF0ZWRCeV8iLCJlbnRpdHlNb2RlbCIsImZlYXR1cmUiLCJjb250ZXh0Iiwib3B0aW9ucyIsIiRtaWdyYXRpb24iLCJsYXRlc3QiLCJmaWVsZHMiLCJjcmVhdGVkQnkiLCJ1aWQiLCJnZXRWYWx1ZUZyb21Db250ZXh0IiwidWlkU291cmNlIiwiYWRkVXBkYXRlZEJ5XyIsInVwZGF0ZWRCeSIsInJldmlzaW9uIiwicXVlcnlCaW5FeHByIiwicXVlcnlDb2x1bW4iLCJtb2R1bGUiLCJleHBvcnRzIiwiUlVMRV9CRUZPUkVfQ1JFQVRFIiwiUlVMRV9CRUZPUkVfVVBEQVRFIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLGVBQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQXNCRCxPQUFPLENBQUMsaUJBQUQsQ0FBbkM7O0FBRUEsU0FBU0UsYUFBVCxDQUF1QkMsV0FBdkIsRUFBb0NDLE9BQXBDLEVBQTZDQyxPQUE3QyxFQUFzRDtBQUNsRCxNQUFJQSxPQUFPLENBQUNDLE9BQVIsQ0FBZ0JDLFVBQWhCLElBQThCRixPQUFPLENBQUNHLE1BQVIsQ0FBZUosT0FBTyxDQUFDSyxNQUFSLENBQWVDLFNBQTlCLEtBQTRDLElBQTlFLEVBQW9GO0FBQ2hGLFdBQU8sSUFBUDtBQUNIOztBQUVELE1BQUlDLEdBQUcsR0FBR1IsV0FBVyxDQUFDUyxtQkFBWixDQUFnQ1AsT0FBaEMsRUFBeUNELE9BQU8sQ0FBQ1MsU0FBakQsQ0FBVjs7QUFDQSxNQUFJRixHQUFHLElBQUksSUFBWCxFQUFpQjtBQUNiLFVBQU0sSUFBSVYsZUFBSixDQUFxQixZQUFXRyxPQUFPLENBQUNTLFNBQVUsY0FBbEQsQ0FBTjtBQUNIOztBQUNEUixFQUFBQSxPQUFPLENBQUNHLE1BQVIsQ0FBZUosT0FBTyxDQUFDSyxNQUFSLENBQWVDLFNBQTlCLElBQTJDQyxHQUEzQztBQUNBLFNBQU8sSUFBUDtBQUNIOztBQUVELFNBQVNHLGFBQVQsQ0FBdUJYLFdBQXZCLEVBQW9DQyxPQUFwQyxFQUE2Q0MsT0FBN0MsRUFBc0Q7QUFDbEQsTUFBSU0sR0FBRyxHQUFHUixXQUFXLENBQUNTLG1CQUFaLENBQWdDUCxPQUFoQyxFQUF5Q0QsT0FBTyxDQUFDUyxTQUFqRCxDQUFWOztBQUNBLE1BQUlGLEdBQUcsSUFBSSxJQUFYLEVBQWlCO0FBQ2IsVUFBTSxJQUFJVixlQUFKLENBQXFCLFlBQVdHLE9BQU8sQ0FBQ1MsU0FBVSxjQUFsRCxDQUFOO0FBQ0g7O0FBQ0RSLEVBQUFBLE9BQU8sQ0FBQ0csTUFBUixDQUFlSixPQUFPLENBQUNLLE1BQVIsQ0FBZU0sU0FBOUIsSUFBMkNKLEdBQTNDO0FBQ0FOLEVBQUFBLE9BQU8sQ0FBQ0csTUFBUixDQUFlSixPQUFPLENBQUNLLE1BQVIsQ0FBZU8sUUFBOUIsSUFBMENiLFdBQVcsQ0FBQ2MsWUFBWixDQUF5QmQsV0FBVyxDQUFDZSxXQUFaLENBQXdCZCxPQUFPLENBQUNLLE1BQVIsQ0FBZU8sUUFBdkMsQ0FBekIsRUFBMkUsR0FBM0UsRUFBZ0YsQ0FBaEYsQ0FBMUM7QUFDQSxTQUFPLElBQVA7QUFDSDs7QUFPREcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2IsR0FBQ3JCLEtBQUssQ0FBQ3NCLGtCQUFQLEdBQTRCLENBQUNqQixPQUFELEVBQVVELFdBQVYsRUFBdUJFLE9BQXZCLEtBQW1DSCxhQUFhLENBQUNDLFdBQUQsRUFBY0MsT0FBZCxFQUF1QkMsT0FBdkIsQ0FEL0Q7QUFFYixHQUFDTixLQUFLLENBQUN1QixrQkFBUCxHQUE0QixDQUFDbEIsT0FBRCxFQUFVRCxXQUFWLEVBQXVCRSxPQUF2QixLQUFtQ1MsYUFBYSxDQUFDWCxXQUFELEVBQWNDLE9BQWQsRUFBdUJDLE9BQXZCO0FBRi9ELENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IFJ1bGVzID0gcmVxdWlyZSgnLi4vZW51bS9SdWxlcycpO1xuY29uc3QgeyBJbnZhbGlkQXJndW1lbnQgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL0Vycm9ycycpO1xuXG5mdW5jdGlvbiBhZGRDcmVhdGVkQnlfKGVudGl0eU1vZGVsLCBmZWF0dXJlLCBjb250ZXh0KSB7XG4gICAgaWYgKGNvbnRleHQub3B0aW9ucy4kbWlncmF0aW9uICYmIGNvbnRleHQubGF0ZXN0W2ZlYXR1cmUuZmllbGRzLmNyZWF0ZWRCeV0gIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZXQgdWlkID0gZW50aXR5TW9kZWwuZ2V0VmFsdWVGcm9tQ29udGV4dChjb250ZXh0LCBmZWF0dXJlLnVpZFNvdXJjZSk7XG4gICAgaWYgKHVpZCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnQoYENvbnRleHQgXCIke2ZlYXR1cmUudWlkU291cmNlfVwiIG5vdCBmb3VuZC5gKVxuICAgIH1cbiAgICBjb250ZXh0LmxhdGVzdFtmZWF0dXJlLmZpZWxkcy5jcmVhdGVkQnldID0gdWlkO1xuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBhZGRVcGRhdGVkQnlfKGVudGl0eU1vZGVsLCBmZWF0dXJlLCBjb250ZXh0KSB7XG4gICAgbGV0IHVpZCA9IGVudGl0eU1vZGVsLmdldFZhbHVlRnJvbUNvbnRleHQoY29udGV4dCwgZmVhdHVyZS51aWRTb3VyY2UpO1xuICAgIGlmICh1aWQgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50KGBDb250ZXh0IFwiJHtmZWF0dXJlLnVpZFNvdXJjZX1cIiBub3QgZm91bmQuYClcbiAgICB9XG4gICAgY29udGV4dC5sYXRlc3RbZmVhdHVyZS5maWVsZHMudXBkYXRlZEJ5XSA9IHVpZDtcbiAgICBjb250ZXh0LmxhdGVzdFtmZWF0dXJlLmZpZWxkcy5yZXZpc2lvbl0gPSBlbnRpdHlNb2RlbC5xdWVyeUJpbkV4cHIoZW50aXR5TW9kZWwucXVlcnlDb2x1bW4oZmVhdHVyZS5maWVsZHMucmV2aXNpb24pLCAnKycsIDEpO1xuICAgIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEEgcnVsZSBzcGVjaWZpZXMgdGhlIGNoYW5nZSBvZiBzdGF0ZSB3aWxsIGJlIHRyYWNrZWQgYXV0b21hdGljYWxseS5cbiAqIEBtb2R1bGUgRW50aXR5RmVhdHVyZVJ1bnRpbWVfQ2hhbmdlTG9nXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgW1J1bGVzLlJVTEVfQkVGT1JFX0NSRUFURV06IChmZWF0dXJlLCBlbnRpdHlNb2RlbCwgY29udGV4dCkgPT4gYWRkQ3JlYXRlZEJ5XyhlbnRpdHlNb2RlbCwgZmVhdHVyZSwgY29udGV4dCksXG4gICAgW1J1bGVzLlJVTEVfQkVGT1JFX1VQREFURV06IChmZWF0dXJlLCBlbnRpdHlNb2RlbCwgY29udGV4dCkgPT4gYWRkVXBkYXRlZEJ5XyhlbnRpdHlNb2RlbCwgZmVhdHVyZSwgY29udGV4dClcbn07Il19