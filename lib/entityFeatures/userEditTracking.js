"use strict";

require("source-map-support/register");

const Rules = require('../enum/Rules');

const {
  InvalidArgument
} = require('../utils/Errors');

function addCreatedBy_(entityModel, feature, context) {
  if (context.options.$migration) {
    context.latest[feature.fields.createdBy] = feature.migrationUser;
    return true;
  }

  let uid = entityModel.getValueFromContext(context, feature.uidSource);

  if (uid == null) {
    throw new InvalidArgument(`Context "${feature.uidSource}" not found.`);
  }

  context.latest[feature.fields.createdBy] = uid;
  return true;
}

function addUpdatedBy_(entityModel, feature, context) {
  let uid = entityModel.getValueFromContext(context, feature.uidSource);

  if (uid == null) {
    throw new InvalidArgument(`Context "${feature.uidSource}" not found.`);
  }

  context.latest[feature.fields.updatedBy] = uid;
  context.latest[feature.fields.revision] = entityModel.queryBinExpr(entityModel.queryColumn(feature.fields.revision), '+', 1);
  return true;
}

module.exports = {
  [Rules.RULE_BEFORE_CREATE]: (feature, entityModel, context) => addCreatedBy_(entityModel, feature, context),
  [Rules.RULE_BEFORE_UPDATE]: (feature, entityModel, context) => addUpdatedBy_(entityModel, feature, context)
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbnRpdHlGZWF0dXJlcy91c2VyRWRpdFRyYWNraW5nLmpzIl0sIm5hbWVzIjpbIlJ1bGVzIiwicmVxdWlyZSIsIkludmFsaWRBcmd1bWVudCIsImFkZENyZWF0ZWRCeV8iLCJlbnRpdHlNb2RlbCIsImZlYXR1cmUiLCJjb250ZXh0Iiwib3B0aW9ucyIsIiRtaWdyYXRpb24iLCJsYXRlc3QiLCJmaWVsZHMiLCJjcmVhdGVkQnkiLCJtaWdyYXRpb25Vc2VyIiwidWlkIiwiZ2V0VmFsdWVGcm9tQ29udGV4dCIsInVpZFNvdXJjZSIsImFkZFVwZGF0ZWRCeV8iLCJ1cGRhdGVkQnkiLCJyZXZpc2lvbiIsInF1ZXJ5QmluRXhwciIsInF1ZXJ5Q29sdW1uIiwibW9kdWxlIiwiZXhwb3J0cyIsIlJVTEVfQkVGT1JFX0NSRUFURSIsIlJVTEVfQkVGT1JFX1VQREFURSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxlQUFELENBQXJCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFzQkQsT0FBTyxDQUFDLGlCQUFELENBQW5DOztBQUVBLFNBQVNFLGFBQVQsQ0FBdUJDLFdBQXZCLEVBQW9DQyxPQUFwQyxFQUE2Q0MsT0FBN0MsRUFBc0Q7QUFDbEQsTUFBSUEsT0FBTyxDQUFDQyxPQUFSLENBQWdCQyxVQUFwQixFQUFnQztBQUM1QkYsSUFBQUEsT0FBTyxDQUFDRyxNQUFSLENBQWVKLE9BQU8sQ0FBQ0ssTUFBUixDQUFlQyxTQUE5QixJQUEyQ04sT0FBTyxDQUFDTyxhQUFuRDtBQUNBLFdBQU8sSUFBUDtBQUNIOztBQUVELE1BQUlDLEdBQUcsR0FBR1QsV0FBVyxDQUFDVSxtQkFBWixDQUFnQ1IsT0FBaEMsRUFBeUNELE9BQU8sQ0FBQ1UsU0FBakQsQ0FBVjs7QUFDQSxNQUFJRixHQUFHLElBQUksSUFBWCxFQUFpQjtBQUNiLFVBQU0sSUFBSVgsZUFBSixDQUFxQixZQUFXRyxPQUFPLENBQUNVLFNBQVUsY0FBbEQsQ0FBTjtBQUNIOztBQUNEVCxFQUFBQSxPQUFPLENBQUNHLE1BQVIsQ0FBZUosT0FBTyxDQUFDSyxNQUFSLENBQWVDLFNBQTlCLElBQTJDRSxHQUEzQztBQUNBLFNBQU8sSUFBUDtBQUNIOztBQUVELFNBQVNHLGFBQVQsQ0FBdUJaLFdBQXZCLEVBQW9DQyxPQUFwQyxFQUE2Q0MsT0FBN0MsRUFBc0Q7QUFDbEQsTUFBSU8sR0FBRyxHQUFHVCxXQUFXLENBQUNVLG1CQUFaLENBQWdDUixPQUFoQyxFQUF5Q0QsT0FBTyxDQUFDVSxTQUFqRCxDQUFWOztBQUNBLE1BQUlGLEdBQUcsSUFBSSxJQUFYLEVBQWlCO0FBQ2IsVUFBTSxJQUFJWCxlQUFKLENBQXFCLFlBQVdHLE9BQU8sQ0FBQ1UsU0FBVSxjQUFsRCxDQUFOO0FBQ0g7O0FBQ0RULEVBQUFBLE9BQU8sQ0FBQ0csTUFBUixDQUFlSixPQUFPLENBQUNLLE1BQVIsQ0FBZU8sU0FBOUIsSUFBMkNKLEdBQTNDO0FBQ0FQLEVBQUFBLE9BQU8sQ0FBQ0csTUFBUixDQUFlSixPQUFPLENBQUNLLE1BQVIsQ0FBZVEsUUFBOUIsSUFBMENkLFdBQVcsQ0FBQ2UsWUFBWixDQUF5QmYsV0FBVyxDQUFDZ0IsV0FBWixDQUF3QmYsT0FBTyxDQUFDSyxNQUFSLENBQWVRLFFBQXZDLENBQXpCLEVBQTJFLEdBQTNFLEVBQWdGLENBQWhGLENBQTFDO0FBQ0EsU0FBTyxJQUFQO0FBQ0g7O0FBT0RHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNiLEdBQUN0QixLQUFLLENBQUN1QixrQkFBUCxHQUE0QixDQUFDbEIsT0FBRCxFQUFVRCxXQUFWLEVBQXVCRSxPQUF2QixLQUFtQ0gsYUFBYSxDQUFDQyxXQUFELEVBQWNDLE9BQWQsRUFBdUJDLE9BQXZCLENBRC9EO0FBRWIsR0FBQ04sS0FBSyxDQUFDd0Isa0JBQVAsR0FBNEIsQ0FBQ25CLE9BQUQsRUFBVUQsV0FBVixFQUF1QkUsT0FBdkIsS0FBbUNVLGFBQWEsQ0FBQ1osV0FBRCxFQUFjQyxPQUFkLEVBQXVCQyxPQUF2QjtBQUYvRCxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBSdWxlcyA9IHJlcXVpcmUoJy4uL2VudW0vUnVsZXMnKTtcbmNvbnN0IHsgSW52YWxpZEFyZ3VtZW50IH0gPSByZXF1aXJlKCcuLi91dGlscy9FcnJvcnMnKTtcblxuZnVuY3Rpb24gYWRkQ3JlYXRlZEJ5XyhlbnRpdHlNb2RlbCwgZmVhdHVyZSwgY29udGV4dCkge1xuICAgIGlmIChjb250ZXh0Lm9wdGlvbnMuJG1pZ3JhdGlvbikge1xuICAgICAgICBjb250ZXh0LmxhdGVzdFtmZWF0dXJlLmZpZWxkcy5jcmVhdGVkQnldID0gZmVhdHVyZS5taWdyYXRpb25Vc2VyO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZXQgdWlkID0gZW50aXR5TW9kZWwuZ2V0VmFsdWVGcm9tQ29udGV4dChjb250ZXh0LCBmZWF0dXJlLnVpZFNvdXJjZSk7XG4gICAgaWYgKHVpZCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnQoYENvbnRleHQgXCIke2ZlYXR1cmUudWlkU291cmNlfVwiIG5vdCBmb3VuZC5gKVxuICAgIH1cbiAgICBjb250ZXh0LmxhdGVzdFtmZWF0dXJlLmZpZWxkcy5jcmVhdGVkQnldID0gdWlkO1xuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBhZGRVcGRhdGVkQnlfKGVudGl0eU1vZGVsLCBmZWF0dXJlLCBjb250ZXh0KSB7XG4gICAgbGV0IHVpZCA9IGVudGl0eU1vZGVsLmdldFZhbHVlRnJvbUNvbnRleHQoY29udGV4dCwgZmVhdHVyZS51aWRTb3VyY2UpO1xuICAgIGlmICh1aWQgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50KGBDb250ZXh0IFwiJHtmZWF0dXJlLnVpZFNvdXJjZX1cIiBub3QgZm91bmQuYClcbiAgICB9XG4gICAgY29udGV4dC5sYXRlc3RbZmVhdHVyZS5maWVsZHMudXBkYXRlZEJ5XSA9IHVpZDtcbiAgICBjb250ZXh0LmxhdGVzdFtmZWF0dXJlLmZpZWxkcy5yZXZpc2lvbl0gPSBlbnRpdHlNb2RlbC5xdWVyeUJpbkV4cHIoZW50aXR5TW9kZWwucXVlcnlDb2x1bW4oZmVhdHVyZS5maWVsZHMucmV2aXNpb24pLCAnKycsIDEpO1xuICAgIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEEgcnVsZSBzcGVjaWZpZXMgdGhlIGNoYW5nZSBvZiBzdGF0ZSB3aWxsIGJlIHRyYWNrZWQgYXV0b21hdGljYWxseS5cbiAqIEBtb2R1bGUgRW50aXR5RmVhdHVyZVJ1bnRpbWVfQ2hhbmdlTG9nXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgW1J1bGVzLlJVTEVfQkVGT1JFX0NSRUFURV06IChmZWF0dXJlLCBlbnRpdHlNb2RlbCwgY29udGV4dCkgPT4gYWRkQ3JlYXRlZEJ5XyhlbnRpdHlNb2RlbCwgZmVhdHVyZSwgY29udGV4dCksXG4gICAgW1J1bGVzLlJVTEVfQkVGT1JFX1VQREFURV06IChmZWF0dXJlLCBlbnRpdHlNb2RlbCwgY29udGV4dCkgPT4gYWRkVXBkYXRlZEJ5XyhlbnRpdHlNb2RlbCwgZmVhdHVyZSwgY29udGV4dClcbn07Il19