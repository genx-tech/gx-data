"use strict";

require("source-map-support/register");

const Rules = require('../enum/Rules');

const {
  InvalidArgument
} = require('../utils/Errors');

function addCreatedBy_(entityModel, feature, context) {
  if (context.options.$migration) {
    context.latest[feature.fields.createdBy] = feature.migrationUser;
    return true;
  }

  let uid = entityModel.getValueFromContext(context, feature.uidSource);

  if (uid == null) {
    throw new InvalidArgument(`Context "${feature.uidSource}" not found. Entity: ${entityModel.meta.name}`);
  }

  context.latest[feature.fields.createdBy] = uid;
  return true;
}

function addUpdatedBy_(entityModel, feature, context) {
  if (context.options.$skipUpdateTracking) return true;
  let uid = entityModel.getValueFromContext(context, feature.uidSource);

  if (uid == null) {
    throw new InvalidArgument(`Context "${feature.uidSource}" not found.`);
  }

  context.latest[feature.fields.updatedBy] = uid;
  return true;
}

module.exports = {
  [Rules.RULE_BEFORE_VALIDATION]: (feature, entityModel, context) => context.op === 'create' ? addCreatedBy_(entityModel, feature, context) : addUpdatedBy_(entityModel, feature, context)
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbnRpdHlGZWF0dXJlcy91c2VyRWRpdFRyYWNraW5nLmpzIl0sIm5hbWVzIjpbIlJ1bGVzIiwicmVxdWlyZSIsIkludmFsaWRBcmd1bWVudCIsImFkZENyZWF0ZWRCeV8iLCJlbnRpdHlNb2RlbCIsImZlYXR1cmUiLCJjb250ZXh0Iiwib3B0aW9ucyIsIiRtaWdyYXRpb24iLCJsYXRlc3QiLCJmaWVsZHMiLCJjcmVhdGVkQnkiLCJtaWdyYXRpb25Vc2VyIiwidWlkIiwiZ2V0VmFsdWVGcm9tQ29udGV4dCIsInVpZFNvdXJjZSIsIm1ldGEiLCJuYW1lIiwiYWRkVXBkYXRlZEJ5XyIsIiRza2lwVXBkYXRlVHJhY2tpbmciLCJ1cGRhdGVkQnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiUlVMRV9CRUZPUkVfVkFMSURBVElPTiIsIm9wIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLGVBQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQXNCRCxPQUFPLENBQUMsaUJBQUQsQ0FBbkM7O0FBRUEsU0FBU0UsYUFBVCxDQUF1QkMsV0FBdkIsRUFBb0NDLE9BQXBDLEVBQTZDQyxPQUE3QyxFQUFzRDtBQUNsRCxNQUFJQSxPQUFPLENBQUNDLE9BQVIsQ0FBZ0JDLFVBQXBCLEVBQWdDO0FBQzVCRixJQUFBQSxPQUFPLENBQUNHLE1BQVIsQ0FBZUosT0FBTyxDQUFDSyxNQUFSLENBQWVDLFNBQTlCLElBQTJDTixPQUFPLENBQUNPLGFBQW5EO0FBQ0EsV0FBTyxJQUFQO0FBQ0g7O0FBRUQsTUFBSUMsR0FBRyxHQUFHVCxXQUFXLENBQUNVLG1CQUFaLENBQWdDUixPQUFoQyxFQUF5Q0QsT0FBTyxDQUFDVSxTQUFqRCxDQUFWOztBQUNBLE1BQUlGLEdBQUcsSUFBSSxJQUFYLEVBQWlCO0FBQ2IsVUFBTSxJQUFJWCxlQUFKLENBQXFCLFlBQVdHLE9BQU8sQ0FBQ1UsU0FBVSx3QkFBdUJYLFdBQVcsQ0FBQ1ksSUFBWixDQUFpQkMsSUFBSyxFQUEvRixDQUFOO0FBQ0g7O0FBQ0RYLEVBQUFBLE9BQU8sQ0FBQ0csTUFBUixDQUFlSixPQUFPLENBQUNLLE1BQVIsQ0FBZUMsU0FBOUIsSUFBMkNFLEdBQTNDO0FBQ0EsU0FBTyxJQUFQO0FBQ0g7O0FBRUQsU0FBU0ssYUFBVCxDQUF1QmQsV0FBdkIsRUFBb0NDLE9BQXBDLEVBQTZDQyxPQUE3QyxFQUFzRDtBQUNsRCxNQUFJQSxPQUFPLENBQUNDLE9BQVIsQ0FBZ0JZLG1CQUFwQixFQUF5QyxPQUFPLElBQVA7QUFFekMsTUFBSU4sR0FBRyxHQUFHVCxXQUFXLENBQUNVLG1CQUFaLENBQWdDUixPQUFoQyxFQUF5Q0QsT0FBTyxDQUFDVSxTQUFqRCxDQUFWOztBQUNBLE1BQUlGLEdBQUcsSUFBSSxJQUFYLEVBQWlCO0FBQ2IsVUFBTSxJQUFJWCxlQUFKLENBQXFCLFlBQVdHLE9BQU8sQ0FBQ1UsU0FBVSxjQUFsRCxDQUFOO0FBQ0g7O0FBQ0RULEVBQUFBLE9BQU8sQ0FBQ0csTUFBUixDQUFlSixPQUFPLENBQUNLLE1BQVIsQ0FBZVUsU0FBOUIsSUFBMkNQLEdBQTNDO0FBRUEsU0FBTyxJQUFQO0FBQ0g7O0FBT0RRLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNiLEdBQUN0QixLQUFLLENBQUN1QixzQkFBUCxHQUFnQyxDQUFDbEIsT0FBRCxFQUFVRCxXQUFWLEVBQXVCRSxPQUF2QixLQUFtQ0EsT0FBTyxDQUFDa0IsRUFBUixLQUFlLFFBQWYsR0FBMEJyQixhQUFhLENBQUNDLFdBQUQsRUFBY0MsT0FBZCxFQUF1QkMsT0FBdkIsQ0FBdkMsR0FBeUVZLGFBQWEsQ0FBQ2QsV0FBRCxFQUFjQyxPQUFkLEVBQXVCQyxPQUF2QjtBQUQ1SSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBSdWxlcyA9IHJlcXVpcmUoJy4uL2VudW0vUnVsZXMnKTtcbmNvbnN0IHsgSW52YWxpZEFyZ3VtZW50IH0gPSByZXF1aXJlKCcuLi91dGlscy9FcnJvcnMnKTtcblxuZnVuY3Rpb24gYWRkQ3JlYXRlZEJ5XyhlbnRpdHlNb2RlbCwgZmVhdHVyZSwgY29udGV4dCkge1xuICAgIGlmIChjb250ZXh0Lm9wdGlvbnMuJG1pZ3JhdGlvbikge1xuICAgICAgICBjb250ZXh0LmxhdGVzdFtmZWF0dXJlLmZpZWxkcy5jcmVhdGVkQnldID0gZmVhdHVyZS5taWdyYXRpb25Vc2VyO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZXQgdWlkID0gZW50aXR5TW9kZWwuZ2V0VmFsdWVGcm9tQ29udGV4dChjb250ZXh0LCBmZWF0dXJlLnVpZFNvdXJjZSk7XG4gICAgaWYgKHVpZCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnQoYENvbnRleHQgXCIke2ZlYXR1cmUudWlkU291cmNlfVwiIG5vdCBmb3VuZC4gRW50aXR5OiAke2VudGl0eU1vZGVsLm1ldGEubmFtZX1gKVxuICAgIH1cbiAgICBjb250ZXh0LmxhdGVzdFtmZWF0dXJlLmZpZWxkcy5jcmVhdGVkQnldID0gdWlkO1xuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBhZGRVcGRhdGVkQnlfKGVudGl0eU1vZGVsLCBmZWF0dXJlLCBjb250ZXh0KSB7XG4gICAgaWYgKGNvbnRleHQub3B0aW9ucy4kc2tpcFVwZGF0ZVRyYWNraW5nKSByZXR1cm4gdHJ1ZTtcbiAgICBcbiAgICBsZXQgdWlkID0gZW50aXR5TW9kZWwuZ2V0VmFsdWVGcm9tQ29udGV4dChjb250ZXh0LCBmZWF0dXJlLnVpZFNvdXJjZSk7XG4gICAgaWYgKHVpZCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnQoYENvbnRleHQgXCIke2ZlYXR1cmUudWlkU291cmNlfVwiIG5vdCBmb3VuZC5gKVxuICAgIH1cbiAgICBjb250ZXh0LmxhdGVzdFtmZWF0dXJlLmZpZWxkcy51cGRhdGVkQnldID0gdWlkOyAgICBcbiAgICAvL3JldmlzaW9uKytcbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBBIHJ1bGUgc3BlY2lmaWVzIHRoZSBjaGFuZ2Ugb2Ygc3RhdGUgd2lsbCBiZSB0cmFja2VkIGF1dG9tYXRpY2FsbHkuXG4gKiBAbW9kdWxlIEVudGl0eUZlYXR1cmVSdW50aW1lX0NoYW5nZUxvZ1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIFtSdWxlcy5SVUxFX0JFRk9SRV9WQUxJREFUSU9OXTogKGZlYXR1cmUsIGVudGl0eU1vZGVsLCBjb250ZXh0KSA9PiBjb250ZXh0Lm9wID09PSAnY3JlYXRlJyA/IGFkZENyZWF0ZWRCeV8oZW50aXR5TW9kZWwsIGZlYXR1cmUsIGNvbnRleHQpIDogYWRkVXBkYXRlZEJ5XyhlbnRpdHlNb2RlbCwgZmVhdHVyZSwgY29udGV4dClcbn07Il19