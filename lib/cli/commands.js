"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  _,
  fs
} = Util;

const {
  extractDriverAndConnectorName
} = require('../utils/lang');

const Convention = require('../enum/Convention');

exports.commands = {
  'build': 'Generate database scripts and entity models.',
  'migrate': 'Create database structure.',
  'dataset': 'List available data set.',
  'import': 'Import data set.',
  'export': 'Export data from database.',
  'reverse': 'Reverse engineering from a databse.',
  'listValidators': 'List all builtin validators.'
};

exports.options = core => {
  let cmdOptions = {};
  cmdOptions['c'] = {
    desc: "Oolong config file",
    alias: ["conf", "config"],
    inquire: true,
    promptMessage: 'Please input the config file path:',
    promptDefault: "conf/oolong.json",
    onReady: async () => core.startContainer()
  };

  switch (core.command) {
    case 'build':
      break;

    case 'migrate':
      cmdOptions['r'] = {
        desc: 'Reset all data if the database exists',
        promptMessage: 'Reset existing database?',
        promptDefault: false,
        inquire: true,
        required: true,
        alias: ['reset'],
        isBool: true
      };
      break;

    case 'dataset':
      cmdOptions['schema'] = {
        desc: 'The schema to list',
        promptMessage: 'Please select a schema:',
        inquire: true,
        required: true,
        promptType: 'list',
        choicesProvider: () => core.getSchemasInConfig()
      };
      break;

    case 'import':
      cmdOptions['schema'] = {
        desc: 'The schema to list',
        promptMessage: 'Please select a schema:',
        inquire: true,
        required: true,
        promptType: 'list',
        choicesProvider: () => core.getSchemasInConfig()
      };
      cmdOptions['dataset'] = {
        desc: 'The name of the data set to import',
        promptMessage: 'Please select the target dataset:',
        alias: ['ds', 'data'],
        inquire: true,
        promptType: 'list',
        choicesProvider: () => core.getDataset_()
      };
      break;

    case 'export':
      cmdOptions['conn'] = {
        desc: 'The data source connector',
        alias: ['connector'],
        promptMessage: 'Please select the data source connector:',
        inquire: true,
        required: true,
        promptType: 'list',
        choicesProvider: () => Object.keys(core.connectionStrings),
        afterInquire: () => {
          console.log('The conenction string of selected connector:', connectionStrings[core.option('conn')]);
        }
      };
      break;

    case 'reverse':
      cmdOptions['conn'] = {
        desc: 'The data source connector',
        alias: ['connector'],
        promptMessage: 'Please select the data source connector:',
        inquire: true,
        required: true,
        promptType: 'list',
        choicesProvider: () => Object.keys(core.connectionStrings),
        afterInquire: () => {
          console.log('The conenction string of selected connector:', connectionStrings[core.option('conn')]);
        }
      };
      break;

    case 'listValidators':
      break;

    default:
      break;
  }

  return cmdOptions;
};

exports.main = core => {
  if (core.option('v')) {
    console.log('v' + core.app.version);
  } else {
    core.showUsage();
  }
};

exports.build = async core => {
  core.app.log('verbose', 'oolong build');
  let oolongConfig = core.oolongConfig;
  let dslSourceDir = Util.getValueByPath(oolongConfig, 'oolong.dslSourceDir', 'oolong');

  if (!dslSourceDir) {
    throw new Error('"oolong.dslSourceDir" not found in oolong config.');
  }

  let modelOutputDir = Util.getValueByPath(oolongConfig, 'oolong.modelOutputDir', 'src/models');

  if (!modelOutputDir) {
    throw new Error('"oolong.modelOutputDir" not found in oolong config.');
  }

  let scriptOutputDir = Util.getValueByPath(oolongConfig, 'oolong.scriptOutputDir', 'src/scripts');

  if (!scriptOutputDir) {
    throw new Error('"oolong.scriptOutputDir" not found in oolong config.');
  }

  let manifestOutputDir = Util.getValueByPath(oolongConfig, 'oolong.manifestOutputDir');
  let dslSourcePath = core.app.toAbsolutePath(dslSourceDir);
  let modelOutputPath = core.app.toAbsolutePath(modelOutputDir);
  let scriptOutputPath = core.app.toAbsolutePath(scriptOutputDir);
  let manifestOutputPath = manifestOutputDir && core.app.toAbsolutePath(manifestOutputDir);

  if (!fs.existsSync(dslSourcePath)) {
    return Promise.reject(`DSL source directory "${dslSourcePath}" not found.`);
  }

  let useJsonSource = Util.getValueByPath(oolongConfig, 'oolong.useJsonSource', false);
  let saveIntermediate = Util.getValueByPath(oolongConfig, 'oolong.saveIntermediate', false);
  return core.api.build_({
    logger: core.app.logger,
    dslSourcePath,
    modelOutputPath,
    scriptOutputPath,
    manifestOutputPath,
    useJsonSource,
    saveIntermediate,
    schemaDeployment: core.schemaDeployment
  });
};

exports.migrate = async core => {
  core.app.log('verbose', 'oolong migrate');
  let oolongConfig = core.oolongConfig;
  let modelDir = Util.getValueByPath(oolongConfig, 'oolong.modelDir');

  if (!modelDir) {
    throw new Error('"oolong.modelDir" not found in oolong config.');
  }

  let dslSourceDir = Util.getValueByPath(oolongConfig, 'oolong.dslSourceDir');

  if (!dslSourceDir) {
    throw new Error('"oolong.dslSourceDir" not found in oolong config.');
  }

  let scriptSourceDir = Util.getValueByPath(oolongConfig, 'oolong.scriptSourceDir');

  if (!scriptSourceDir) {
    throw new Error('"oolong.scriptSourceDir" not found in oolong config.');
  }

  let modelPath = core.app.toAbsolutePath(modelDir);
  let dslSourcePath = core.app.toAbsolutePath(dslSourceDir);
  let scriptSourcePath = core.app.toAbsolutePath(scriptSourceDir);

  if (!fs.existsSync(modelPath)) {
    return Promise.reject(`Model directory "${modelPath}" not found.`);
  }

  if (!fs.existsSync(dslSourcePath)) {
    return Promise.reject(`DSL source directory "${dslSourcePath}" not found.`);
  }

  if (!fs.existsSync(scriptSourcePath)) {
    return Promise.reject(`Database scripts directory "${scriptSourcePath}" not found.`);
  }

  let useJsonSource = Util.getValueByPath(oolongConfig, 'oolong.useJsonSource', false);
  return core.api.migrate_({
    appModule: core.container,
    logger: core.app.logger,
    modelPath,
    dslSourcePath,
    scriptSourcePath,
    useJsonSource,
    schemaDeployment: core.schemaDeployment
  }, core.option('reset'));
};

exports.dataset = async core => {
  core.app.log('verbose', 'oolong dataset');
  let dataset = await core.getDataset_();
  core.app.log('info', 'Available dataset: \n' + dataset.join('\n') + '\n');
};

exports.import = async core => {
  core.app.log('verbose', 'oolong import');
  let oolongConfig = core.oolongConfig;
  let modelDir = Util.getValueByPath(oolongConfig, 'oolong.modelDir');

  if (!modelDir) {
    throw new Error('"oolong.modelDir" not found in oolong config.');
  }

  let scriptSourceDir = Util.getValueByPath(oolongConfig, 'oolong.scriptSourceDir');

  if (!scriptSourceDir) {
    throw new Error('"oolong.scriptSourceDir" not found in oolong config.');
  }

  let modelPath = core.app.toAbsolutePath(modelDir);
  let scriptSourcePath = core.app.toAbsolutePath(scriptSourceDir);
  let schema = core.option('schema');
  let dataset = core.option('dataset');
  return core.api.import_({
    logger: core.app.logger,
    modelPath,
    scriptSourcePath,
    schemaDeployment: core.schemaDeployment
  }, schema, dataset);
};

exports.reverse = async core => {
  core.app.log('verbose', 'oolong reverse');
  let oolongConfig = core.oolongConfig;
  let dslReverseOutputDir = Util.getValueByPath(oolongConfig, 'oolong.dslReverseOutputDir');

  if (!dslReverseOutputDir) {
    throw new Error('"oolong.dslReverseOutputDir" not found in oolong config.');
  }

  let outputDir = core.getReverseOutputDir(core.app.toAbsolutePath(dslReverseOutputDir));
  let conn = core.option('conn');
  let [driver] = extractDriverAndConnectorName(conn);
  let connOptions = Util.getValueByPath(oolongConfig, 'dataSource.' + conn);

  if (!connOptions) {
    throw new Error("Assertion failed: connOptions");
  }

  if (typeof connOptions.reverseRules === 'string') {
    connOptions.reverseRules = require(core.app.toAbsolutePath(connOptions.reverseRules));
  }

  if (!(!connOptions.reverseRules || _.isPlainObject(connOptions.reverseRules))) {
    throw new Error("Assertion failed: !connOptions.reverseRules || _.isPlainObject(connOptions.reverseRules)");
  }

  return core.api.reverse_({
    logger: core.app.logger,
    dslReverseOutputPath: outputDir,
    driver,
    connOptions
  });
};

exports.export = async core => {
  core.app.log('verbose', 'oolong reverse');
  let oolongConfig = core.oolongConfig;
  let dataExportDir = Util.getValueByPath(oolongConfig, 'oolong.dataExportDir');

  if (!dataExportDir) {
    throw new Error('"oolong.dataExportDir" not found in oolong config.');
  }

  let outputDir = core.app.toAbsolutePath(dataExportDir);
  let conn = core.option('conn');
  let [driver] = extractDriverAndConnectorName(conn);
  let connOptions = Util.getValueByPath(oolongConfig, 'dataSource.' + conn);

  if (!connOptions) {
    throw new Error("Assertion failed: connOptions");
  }

  if (typeof connOptions.reverseRules === 'string') {
    connOptions.reverseRules = require(core.app.toAbsolutePath(connOptions.reverseRules));
  }

  if (!(!connOptions.reverseRules || _.isPlainObject(connOptions.reverseRules))) {
    throw new Error("Assertion failed: !connOptions.reverseRules || _.isPlainObject(connOptions.reverseRules)");
  }

  return core.api.reverse_({
    logger: core.app.logger,
    dslReverseOutputPath: outputDir,
    driver,
    connOptions
  });
};

exports.listValidators = async core => {
  core.app.log('verbose', 'oolong listValidators');
  let list = core.api.getValidatorList();
  core.app.log('info', 'Available validators: \n' + list.join('\n') + '\n');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvY29tbWFuZHMuanMiXSwibmFtZXMiOlsiVXRpbCIsInJlcXVpcmUiLCJfIiwiZnMiLCJleHRyYWN0RHJpdmVyQW5kQ29ubmVjdG9yTmFtZSIsIkNvbnZlbnRpb24iLCJleHBvcnRzIiwiY29tbWFuZHMiLCJvcHRpb25zIiwiY29yZSIsImNtZE9wdGlvbnMiLCJkZXNjIiwiYWxpYXMiLCJpbnF1aXJlIiwicHJvbXB0TWVzc2FnZSIsInByb21wdERlZmF1bHQiLCJvblJlYWR5Iiwic3RhcnRDb250YWluZXIiLCJjb21tYW5kIiwicmVxdWlyZWQiLCJpc0Jvb2wiLCJwcm9tcHRUeXBlIiwiY2hvaWNlc1Byb3ZpZGVyIiwiZ2V0U2NoZW1hc0luQ29uZmlnIiwiZ2V0RGF0YXNldF8iLCJPYmplY3QiLCJrZXlzIiwiY29ubmVjdGlvblN0cmluZ3MiLCJhZnRlcklucXVpcmUiLCJjb25zb2xlIiwibG9nIiwib3B0aW9uIiwibWFpbiIsImFwcCIsInZlcnNpb24iLCJzaG93VXNhZ2UiLCJidWlsZCIsIm9vbG9uZ0NvbmZpZyIsImRzbFNvdXJjZURpciIsImdldFZhbHVlQnlQYXRoIiwiRXJyb3IiLCJtb2RlbE91dHB1dERpciIsInNjcmlwdE91dHB1dERpciIsIm1hbmlmZXN0T3V0cHV0RGlyIiwiZHNsU291cmNlUGF0aCIsInRvQWJzb2x1dGVQYXRoIiwibW9kZWxPdXRwdXRQYXRoIiwic2NyaXB0T3V0cHV0UGF0aCIsIm1hbmlmZXN0T3V0cHV0UGF0aCIsImV4aXN0c1N5bmMiLCJQcm9taXNlIiwicmVqZWN0IiwidXNlSnNvblNvdXJjZSIsInNhdmVJbnRlcm1lZGlhdGUiLCJhcGkiLCJidWlsZF8iLCJsb2dnZXIiLCJzY2hlbWFEZXBsb3ltZW50IiwibWlncmF0ZSIsIm1vZGVsRGlyIiwic2NyaXB0U291cmNlRGlyIiwibW9kZWxQYXRoIiwic2NyaXB0U291cmNlUGF0aCIsIm1pZ3JhdGVfIiwiYXBwTW9kdWxlIiwiY29udGFpbmVyIiwiZGF0YXNldCIsImpvaW4iLCJpbXBvcnQiLCJzY2hlbWEiLCJpbXBvcnRfIiwicmV2ZXJzZSIsImRzbFJldmVyc2VPdXRwdXREaXIiLCJvdXRwdXREaXIiLCJnZXRSZXZlcnNlT3V0cHV0RGlyIiwiY29ubiIsImRyaXZlciIsImNvbm5PcHRpb25zIiwicmV2ZXJzZVJ1bGVzIiwiaXNQbGFpbk9iamVjdCIsInJldmVyc2VfIiwiZHNsUmV2ZXJzZU91dHB1dFBhdGgiLCJleHBvcnQiLCJkYXRhRXhwb3J0RGlyIiwibGlzdFZhbGlkYXRvcnMiLCJsaXN0IiwiZ2V0VmFsaWRhdG9yTGlzdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQTtBQUFMLElBQVlILElBQWxCOztBQUNBLE1BQU07QUFBRUksRUFBQUE7QUFBRixJQUFvQ0gsT0FBTyxDQUFDLGVBQUQsQ0FBakQ7O0FBRUEsTUFBTUksVUFBVSxHQUFHSixPQUFPLENBQUMsb0JBQUQsQ0FBMUI7O0FBRUFLLE9BQU8sQ0FBQ0MsUUFBUixHQUFtQjtBQUNmLFdBQVMsOENBRE07QUFFZixhQUFXLDRCQUZJO0FBR2YsYUFBVywwQkFISTtBQUlmLFlBQVUsa0JBSks7QUFLZixZQUFVLDRCQUxLO0FBTWYsYUFBVyxxQ0FOSTtBQU9mLG9CQUFrQjtBQVBILENBQW5COztBQWFBRCxPQUFPLENBQUNFLE9BQVIsR0FBbUJDLElBQUQsSUFBVTtBQUN4QixNQUFJQyxVQUFVLEdBQUcsRUFBakI7QUFFQUEsRUFBQUEsVUFBVSxDQUFDLEdBQUQsQ0FBVixHQUFrQjtBQUNkQyxJQUFBQSxJQUFJLEVBQUUsb0JBRFE7QUFFZEMsSUFBQUEsS0FBSyxFQUFFLENBQUUsTUFBRixFQUFVLFFBQVYsQ0FGTztBQUdkQyxJQUFBQSxPQUFPLEVBQUUsSUFISztBQUlkQyxJQUFBQSxhQUFhLEVBQUUsb0NBSkQ7QUFLZEMsSUFBQUEsYUFBYSxFQUFF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TUFBSXVELElBQUksR0FBRzVFLElBQUksQ0FBQzZDLEdBQUwsQ0FBU2dDLGdCQUFULEVBQVg7QUFFQTdFLEVBQUFBLElBQUksQ0FBQ3dCLEdBQUwsQ0FBU0gsR0FBVCxDQUFhLE1BQWIsRUFBcUIsNkJBQTZCdUQsSUFBSSxDQUFDbEIsSUFBTCxDQUFVLElBQVYsQ0FBN0IsR0FBK0MsSUFBcEU7QUFDSCxDQU5EIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IFV0aWwgPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyBfLCBmcyB9ID0gVXRpbDtcbmNvbnN0IHsgZXh0cmFjdERyaXZlckFuZENvbm5lY3Rvck5hbWUgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL2xhbmcnKTtcblxuY29uc3QgQ29udmVudGlvbiA9IHJlcXVpcmUoJy4uL2VudW0vQ29udmVudGlvbicpO1xuXG5leHBvcnRzLmNvbW1hbmRzID0geyAgICBcbiAgICAnYnVpbGQnOiAnR2VuZXJhdGUgZGF0YWJhc2Ugc2NyaXB0cyBhbmQgZW50aXR5IG1vZGVscy4nLFxuICAgICdtaWdyYXRlJzogJ0NyZWF0ZSBkYXRhYmFzZSBzdHJ1Y3R1cmUuJywgICAgICAgIFxuICAgICdkYXRhc2V0JzogJ0xpc3QgYXZhaWxhYmxlIGRhdGEgc2V0LicsXG4gICAgJ2ltcG9ydCc6ICdJbXBvcnQgZGF0YSBzZXQuJyxcbiAgICAnZXhwb3J0JzogJ0V4cG9ydCBkYXRhIGZyb20gZGF0YWJhc2UuJyxcbiAgICAncmV2ZXJzZSc6ICdSZXZlcnNlIGVuZ2luZWVyaW5nIGZyb20gYSBkYXRhYnNlLicsXG4gICAgJ2xpc3RWYWxpZGF0b3JzJzogJ0xpc3QgYWxsIGJ1aWx0aW4gdmFsaWRhdG9ycy4nXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7T29sb25nQ29yZX0gY29yZSAtIE9vbG9uZ0NvcmUgb2JqZWN0LlxuICovXG5leHBvcnRzLm9wdGlvbnMgPSAoY29yZSkgPT4ge1xuICAgIGxldCBjbWRPcHRpb25zID0ge307XG5cbiAgICBjbWRPcHRpb25zWydjJ10gPSB7XG4gICAgICAgIGRlc2M6IFwiT29sb25nIGNvbmZpZyBmaWxlXCIsXG4gICAgICAgIGFsaWFzOiBbIFwiY29uZlwiLCBcImNvbmZpZ1wiIF0sICAgICAgICAgICAgICAgIFxuICAgICAgICBpbnF1aXJlOiB0cnVlLFxuICAgICAgICBwcm9tcHRNZXNzYWdlOiAnUGxlYXNlIGlucHV0IHRoZSBjb25maWcgZmlsZSBwYXRoOicsXG4gICAgICAgIHByb21wdERlZmF1bHQ6IFwiY29uZi9vb2xvbmcuanNvblwiLFxuICAgICAgICBvblJlYWR5OiBhc3luYyAoKSA9PiBjb3JlLnN0YXJ0Q29udGFpbmVyKClcbiAgICB9OyAgXG5cbiAgICBzd2l0Y2ggKGNvcmUuY29tbWFuZCkge1xuICAgICAgICBjYXNlICdidWlsZCc6XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdtaWdyYXRlJzpcbiAgICAgICAgICAgIGNtZE9wdGlvbnNbJ3InXSA9IHtcbiAgICAgICAgICAgICAgICBkZXNjOiAnUmVzZXQgYWxsIGRhdGEgaWYgdGhlIGRhdGFiYXNlIGV4aXN0cycsXG4gICAgICAgICAgICAgICAgcHJvbXB0TWVzc2FnZTogJ1Jlc2V0IGV4aXN0aW5nIGRhdGFiYXNlPycsXG4gICAgICAgICAgICAgICAgcHJvbXB0RGVmYXVsdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaW5xdWlyZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhbGlhczogWyAncmVzZXQnIF0sXG4gICAgICAgICAgICAgICAgaXNCb29sOiB0cnVlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYnJlYWs7ICAgICAgICBcblxuICAgICAgICBjYXNlICdkYXRhc2V0JzogXG4gICAgICAgICAgICBjbWRPcHRpb25zWydzY2hlbWEnXSA9IHtcbiAgICAgICAgICAgICAgICBkZXNjOiAnVGhlIHNjaGVtYSB0byBsaXN0JywgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcHJvbXB0TWVzc2FnZTogJ1BsZWFzZSBzZWxlY3QgYSBzY2hlbWE6JyxcbiAgICAgICAgICAgICAgICBpbnF1aXJlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHByb21wdFR5cGU6ICdsaXN0JyxcbiAgICAgICAgICAgICAgICBjaG9pY2VzUHJvdmlkZXI6ICgpID0+IGNvcmUuZ2V0U2NoZW1hc0luQ29uZmlnKClcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdpbXBvcnQnOlxuICAgICAgICAgICAgY21kT3B0aW9uc1snc2NoZW1hJ10gPSB7XG4gICAgICAgICAgICAgICAgZGVzYzogJ1RoZSBzY2hlbWEgdG8gbGlzdCcsICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHByb21wdE1lc3NhZ2U6ICdQbGVhc2Ugc2VsZWN0IGEgc2NoZW1hOicsXG4gICAgICAgICAgICAgICAgaW5xdWlyZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwcm9tcHRUeXBlOiAnbGlzdCcsXG4gICAgICAgICAgICAgICAgY2hvaWNlc1Byb3ZpZGVyOiAoKSA9PiBjb3JlLmdldFNjaGVtYXNJbkNvbmZpZygpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY21kT3B0aW9uc1snZGF0YXNldCddID0ge1xuICAgICAgICAgICAgICAgIGRlc2M6ICdUaGUgbmFtZSBvZiB0aGUgZGF0YSBzZXQgdG8gaW1wb3J0JyxcbiAgICAgICAgICAgICAgICBwcm9tcHRNZXNzYWdlOiAnUGxlYXNlIHNlbGVjdCB0aGUgdGFyZ2V0IGRhdGFzZXQ6JyxcbiAgICAgICAgICAgICAgICBhbGlhczogWyAnZHMnLCAnZGF0YScgXSxcbiAgICAgICAgICAgICAgICBpbnF1aXJlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHByb21wdFR5cGU6ICdsaXN0JyxcbiAgICAgICAgICAgICAgICBjaG9pY2VzUHJvdmlkZXI6ICgpID0+IGNvcmUuZ2V0RGF0YXNldF8oKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2V4cG9ydCc6XG4gICAgICAgICAgICBjbWRPcHRpb25zWydjb25uJ10gPSB7XG4gICAgICAgICAgICAgICAgZGVzYzogJ1RoZSBkYXRhIHNvdXJjZSBjb25uZWN0b3InLFxuICAgICAgICAgICAgICAgIGFsaWFzOiBbICdjb25uZWN0b3InIF0sXG4gICAgICAgICAgICAgICAgcHJvbXB0TWVzc2FnZTogJ1BsZWFzZSBzZWxlY3QgdGhlIGRhdGEgc291cmNlIGNvbm5lY3RvcjonLFxuICAgICAgICAgICAgICAgIGlucXVpcmU6IHRydWUsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgcHJvbXB0VHlwZTogJ2xpc3QnLFxuICAgICAgICAgICAgICAgIGNob2ljZXNQcm92aWRlcjogKCkgPT4gT2JqZWN0LmtleXMoY29yZS5jb25uZWN0aW9uU3RyaW5ncyksXG4gICAgICAgICAgICAgICAgYWZ0ZXJJbnF1aXJlOiAoKSA9PiB7IGNvbnNvbGUubG9nKCdUaGUgY29uZW5jdGlvbiBzdHJpbmcgb2Ygc2VsZWN0ZWQgY29ubmVjdG9yOicsIGNvbm5lY3Rpb25TdHJpbmdzW2NvcmUub3B0aW9uKCdjb25uJyldKTsgfSAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH07ICAgICAgICAgICBcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3JldmVyc2UnOiAgICAgICAgXG4gICAgICAgICAgICBjbWRPcHRpb25zWydjb25uJ10gPSB7XG4gICAgICAgICAgICAgICAgZGVzYzogJ1RoZSBkYXRhIHNvdXJjZSBjb25uZWN0b3InLFxuICAgICAgICAgICAgICAgIGFsaWFzOiBbICdjb25uZWN0b3InIF0sXG4gICAgICAgICAgICAgICAgcHJvbXB0TWVzc2FnZTogJ1BsZWFzZSBzZWxlY3QgdGhlIGRhdGEgc291cmNlIGNvbm5lY3RvcjonLFxuICAgICAgICAgICAgICAgIGlucXVpcmU6IHRydWUsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgcHJvbXB0VHlwZTogJ2xpc3QnLFxuICAgICAgICAgICAgICAgIGNob2ljZXNQcm92aWRlcjogKCkgPT4gT2JqZWN0LmtleXMoY29yZS5jb25uZWN0aW9uU3RyaW5ncyksXG4gICAgICAgICAgICAgICAgYWZ0ZXJJbnF1aXJlOiAoKSA9PiB7IGNvbnNvbGUubG9nKCdUaGUgY29uZW5jdGlvbiBzdHJpbmcgb2Ygc2VsZWN0ZWQgY29ubmVjdG9yOicsIGNvbm5lY3Rpb25TdHJpbmdzW2NvcmUub3B0aW9uKCdjb25uJyldKTsgfSAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdsaXN0VmFsaWRhdG9ycyc6XG4gICAgICAgICAgICBicmVhazsgICAgXG4gICAgICAgIFxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgLy9tb2R1bGUgZ2VuZXJhbCBvcHRpb25zXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gY21kT3B0aW9ucztcbn07XG5cbmV4cG9ydHMubWFpbiA9IChjb3JlKSA9PiB7XG4gICAgaWYgKGNvcmUub3B0aW9uKCd2JykpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3YnICsgY29yZS5hcHAudmVyc2lvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29yZS5zaG93VXNhZ2UoKTtcbiAgICB9XG59O1xuXG5leHBvcnRzLmJ1aWxkID0gYXN5bmMgKGNvcmUpID0+IHtcbiAgICBjb3JlLmFwcC5sb2coJ3ZlcmJvc2UnLCAnb29sb25nIGJ1aWxkJyk7XG5cbiAgICBsZXQgb29sb25nQ29uZmlnID0gY29yZS5vb2xvbmdDb25maWc7XG5cbiAgICBsZXQgZHNsU291cmNlRGlyID0gVXRpbC5nZXRWYWx1ZUJ5UGF0aChvb2xvbmdDb25maWcsICdvb2xvbmcuZHNsU291cmNlRGlyJywgJ29vbG9uZycpO1xuICAgIGlmICghZHNsU291cmNlRGlyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignXCJvb2xvbmcuZHNsU291cmNlRGlyXCIgbm90IGZvdW5kIGluIG9vbG9uZyBjb25maWcuJyk7XG4gICAgfVxuXG4gICAgbGV0IG1vZGVsT3V0cHV0RGlyID0gVXRpbC5nZXRWYWx1ZUJ5UGF0aChvb2xvbmdDb25maWcsICdvb2xvbmcubW9kZWxPdXRwdXREaXInLCAnc3JjL21vZGVscycpO1xuICAgIGlmICghbW9kZWxPdXRwdXREaXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIm9vbG9uZy5tb2RlbE91dHB1dERpclwiIG5vdCBmb3VuZCBpbiBvb2xvbmcgY29uZmlnLicpO1xuICAgIH1cblxuICAgIGxldCBzY3JpcHRPdXRwdXREaXIgPSBVdGlsLmdldFZhbHVlQnlQYXRoKG9vbG9uZ0NvbmZpZywgJ29vbG9uZy5zY3JpcHRPdXRwdXREaXInLCAnc3JjL3NjcmlwdHMnKTtcbiAgICBpZiAoIXNjcmlwdE91dHB1dERpcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wib29sb25nLnNjcmlwdE91dHB1dERpclwiIG5vdCBmb3VuZCBpbiBvb2xvbmcgY29uZmlnLicpO1xuICAgIH1cblxuICAgIGxldCBtYW5pZmVzdE91dHB1dERpciA9IFV0aWwuZ2V0VmFsdWVCeVBhdGgob29sb25nQ29uZmlnLCAnb29sb25nLm1hbmlmZXN0T3V0cHV0RGlyJyk7XG4gICAgXG4gICAgbGV0IGRzbFNvdXJjZVBhdGggPSBjb3JlLmFwcC50b0Fic29sdXRlUGF0aChkc2xTb3VyY2VEaXIpOyAgICBcbiAgICBsZXQgbW9kZWxPdXRwdXRQYXRoID0gY29yZS5hcHAudG9BYnNvbHV0ZVBhdGgobW9kZWxPdXRwdXREaXIpO1xuICAgIGxldCBzY3JpcHRPdXRwdXRQYXRoID0gY29yZS5hcHAudG9BYnNvbHV0ZVBhdGgoc2NyaXB0T3V0cHV0RGlyKTtcbiAgICBsZXQgbWFuaWZlc3RPdXRwdXRQYXRoID0gbWFuaWZlc3RPdXRwdXREaXIgJiYgY29yZS5hcHAudG9BYnNvbHV0ZVBhdGgobWFuaWZlc3RPdXRwdXREaXIpO1xuXG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKGRzbFNvdXJjZVBhdGgpKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRFNMIHNvdXJjZSBkaXJlY3RvcnkgXCIke2RzbFNvdXJjZVBhdGh9XCIgbm90IGZvdW5kLmApO1xuICAgIH1cblxuICAgIGxldCB1c2VKc29uU291cmNlID0gVXRpbC5nZXRWYWx1ZUJ5UGF0aChvb2xvbmdDb25maWcsICdvb2xvbmcudXNlSnNvblNvdXJjZScsIGZhbHNlKTsgICAgICAgXG4gICAgbGV0IHNhdmVJbnRlcm1lZGlhdGUgPSBVdGlsLmdldFZhbHVlQnlQYXRoKG9vbG9uZ0NvbmZpZywgJ29vbG9uZy5zYXZlSW50ZXJtZWRpYXRlJywgZmFsc2UpOyAgICAgICBcblxuICAgIHJldHVybiBjb3JlLmFwaS5idWlsZF8oe1xuICAgICAgICBsb2dnZXI6IGNvcmUuYXBwLmxvZ2dlcixcbiAgICAgICAgZHNsU291cmNlUGF0aCxcbiAgICAgICAgbW9kZWxPdXRwdXRQYXRoLFxuICAgICAgICBzY3JpcHRPdXRwdXRQYXRoLFxuICAgICAgICBtYW5pZmVzdE91dHB1dFBhdGgsXG4gICAgICAgIHVzZUpzb25Tb3VyY2UsXG4gICAgICAgIHNhdmVJbnRlcm1lZGlhdGUsXG4gICAgICAgIHNjaGVtYURlcGxveW1lbnQ6IGNvcmUuc2NoZW1hRGVwbG95bWVudFxuICAgIH0pO1xufTtcblxuZXhwb3J0cy5taWdyYXRlID0gYXN5bmMgKGNvcmUpID0+IHtcbiAgICBjb3JlLmFwcC5sb2coJ3ZlcmJvc2UnLCAnb29sb25nIG1pZ3JhdGUnKTtcblxuICAgIGxldCBvb2xvbmdDb25maWcgPSBjb3JlLm9vbG9uZ0NvbmZpZztcblxuICAgIGxldCBtb2RlbERpciAgPSBVdGlsLmdldFZhbHVlQnlQYXRoKG9vbG9uZ0NvbmZpZywgJ29vbG9uZy5tb2RlbERpcicpO1xuICAgIGlmICghbW9kZWxEaXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIm9vbG9uZy5tb2RlbERpclwiIG5vdCBmb3VuZCBpbiBvb2xvbmcgY29uZmlnLicpO1xuICAgIH1cblxuICAgIGxldCBkc2xTb3VyY2VEaXIgPSBVdGlsLmdldFZhbHVlQnlQYXRoKG9vbG9uZ0NvbmZpZywgJ29vbG9uZy5kc2xTb3VyY2VEaXInKTtcbiAgICBpZiAoIWRzbFNvdXJjZURpcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wib29sb25nLmRzbFNvdXJjZURpclwiIG5vdCBmb3VuZCBpbiBvb2xvbmcgY29uZmlnLicpO1xuICAgIH1cblxuICAgIGxldCBzY3JpcHRTb3VyY2VEaXIgPSBVdGlsLmdldFZhbHVlQnlQYXRoKG9vbG9uZ0NvbmZpZywgJ29vbG9uZy5zY3JpcHRTb3VyY2VEaXInKTtcbiAgICBpZiAoIXNjcmlwdFNvdXJjZURpcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wib29sb25nLnNjcmlwdFNvdXJjZURpclwiIG5vdCBmb3VuZCBpbiBvb2xvbmcgY29uZmlnLicpO1xuICAgIH1cblxuICAgIGxldCBtb2RlbFBhdGggPSBjb3JlLmFwcC50b0Fic29sdXRlUGF0aChtb2RlbERpcik7ICAgIFxuICAgIGxldCBkc2xTb3VyY2VQYXRoID0gY29yZS5hcHAudG9BYnNvbHV0ZVBhdGgoZHNsU291cmNlRGlyKTsgICAgXG4gICAgbGV0IHNjcmlwdFNvdXJjZVBhdGggPSBjb3JlLmFwcC50b0Fic29sdXRlUGF0aChzY3JpcHRTb3VyY2VEaXIpO1xuXG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKG1vZGVsUGF0aCkpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGBNb2RlbCBkaXJlY3RvcnkgXCIke21vZGVsUGF0aH1cIiBub3QgZm91bmQuYCk7XG4gICAgfVxuXG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKGRzbFNvdXJjZVBhdGgpKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRFNMIHNvdXJjZSBkaXJlY3RvcnkgXCIke2RzbFNvdXJjZVBhdGh9XCIgbm90IGZvdW5kLmApO1xuICAgIH1cblxuICAgIGlmICghZnMuZXhpc3RzU3luYyhzY3JpcHRTb3VyY2VQYXRoKSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYERhdGFiYXNlIHNjcmlwdHMgZGlyZWN0b3J5IFwiJHtzY3JpcHRTb3VyY2VQYXRofVwiIG5vdCBmb3VuZC5gKTtcbiAgICB9XG5cbiAgICBsZXQgdXNlSnNvblNvdXJjZSA9IFV0aWwuZ2V0VmFsdWVCeVBhdGgob29sb25nQ29uZmlnLCAnb29sb25nLnVzZUpzb25Tb3VyY2UnLCBmYWxzZSk7XG5cbiAgICByZXR1cm4gY29yZS5hcGkubWlncmF0ZV8oe1xuICAgICAgICBhcHBNb2R1bGU6IGNvcmUuY29udGFpbmVyLFxuICAgICAgICBsb2dnZXI6IGNvcmUuYXBwLmxvZ2dlcixcbiAgICAgICAgbW9kZWxQYXRoLFxuICAgICAgICBkc2xTb3VyY2VQYXRoLCAgICAgICAgXG4gICAgICAgIHNjcmlwdFNvdXJjZVBhdGgsXG4gICAgICAgIHVzZUpzb25Tb3VyY2UsXG4gICAgICAgIHNjaGVtYURlcGxveW1lbnQ6IGNvcmUuc2NoZW1hRGVwbG95bWVudFxuICAgIH0sIGNvcmUub3B0aW9uKCdyZXNldCcpKTtcbn07XG5cbmV4cG9ydHMuZGF0YXNldCA9IGFzeW5jIChjb3JlKSA9PiB7XG4gICAgY29yZS5hcHAubG9nKCd2ZXJib3NlJywgJ29vbG9uZyBkYXRhc2V0Jyk7XG5cbiAgICBsZXQgZGF0YXNldCA9IGF3YWl0IGNvcmUuZ2V0RGF0YXNldF8oKTtcbiAgICBcbiAgICBjb3JlLmFwcC5sb2coJ2luZm8nLCAnQXZhaWxhYmxlIGRhdGFzZXQ6IFxcbicgKyBkYXRhc2V0LmpvaW4oJ1xcbicpICsgJ1xcbicpO1xufVxuXG5leHBvcnRzLmltcG9ydCA9IGFzeW5jIChjb3JlKSA9PiB7XG4gICAgY29yZS5hcHAubG9nKCd2ZXJib3NlJywgJ29vbG9uZyBpbXBvcnQnKTtcblxuICAgIGxldCBvb2xvbmdDb25maWcgPSBjb3JlLm9vbG9uZ0NvbmZpZztcblxuICAgIGxldCBtb2RlbERpciAgPSBVdGlsLmdldFZhbHVlQnlQYXRoKG9vbG9uZ0NvbmZpZywgJ29vbG9uZy5tb2RlbERpcicpO1xuICAgIGlmICghbW9kZWxEaXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIm9vbG9uZy5tb2RlbERpclwiIG5vdCBmb3VuZCBpbiBvb2xvbmcgY29uZmlnLicpO1xuICAgIH1cblxuICAgIGxldCBzY3JpcHRTb3VyY2VEaXIgPSBVdGlsLmdldFZhbHVlQnlQYXRoKG9vbG9uZ0NvbmZpZywgJ29vbG9uZy5zY3JpcHRTb3VyY2VEaXInKTtcbiAgICBpZiAoIXNjcmlwdFNvdXJjZURpcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wib29sb25nLnNjcmlwdFNvdXJjZURpclwiIG5vdCBmb3VuZCBpbiBvb2xvbmcgY29uZmlnLicpO1xuICAgIH1cbiAgICBcbiAgICBsZXQgbW9kZWxQYXRoID0gY29yZS5hcHAudG9BYnNvbHV0ZVBhdGgobW9kZWxEaXIpOyAgICBcbiAgICBsZXQgc2NyaXB0U291cmNlUGF0aCA9IGNvcmUuYXBwLnRvQWJzb2x1dGVQYXRoKHNjcmlwdFNvdXJjZURpcik7XG5cbiAgICBsZXQgc2NoZW1hID0gY29yZS5vcHRpb24oJ3NjaGVtYScpOyAgICBcbiAgICBsZXQgZGF0YXNldCA9IGNvcmUub3B0aW9uKCdkYXRhc2V0Jyk7ICAgIFxuXG4gICAgcmV0dXJuIGNvcmUuYXBpLmltcG9ydF8oe1xuICAgICAgICBsb2dnZXI6IGNvcmUuYXBwLmxvZ2dlciwgICAgICAgIFxuICAgICAgICBtb2RlbFBhdGgsXG4gICAgICAgIHNjcmlwdFNvdXJjZVBhdGgsICAgICAgICBcbiAgICAgICAgc2NoZW1hRGVwbG95bWVudDogY29yZS5zY2hlbWFEZXBsb3ltZW50XG4gICAgfSwgc2NoZW1hLCBkYXRhc2V0KTtcbn1cblxuZXhwb3J0cy5yZXZlcnNlID0gYXN5bmMgKGNvcmUpID0+IHtcbiAgICBjb3JlLmFwcC5sb2coJ3ZlcmJvc2UnLCAnb29sb25nIHJldmVyc2UnKTtcblxuICAgIGxldCBvb2xvbmdDb25maWcgPSBjb3JlLm9vbG9uZ0NvbmZpZztcblxuICAgIGxldCBkc2xSZXZlcnNlT3V0cHV0RGlyID0gVXRpbC5nZXRWYWx1ZUJ5UGF0aChvb2xvbmdDb25maWcsICdvb2xvbmcuZHNsUmV2ZXJzZU91dHB1dERpcicpO1xuICAgIGlmICghZHNsUmV2ZXJzZU91dHB1dERpcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wib29sb25nLmRzbFJldmVyc2VPdXRwdXREaXJcIiBub3QgZm91bmQgaW4gb29sb25nIGNvbmZpZy4nKTtcbiAgICB9XG5cbiAgICBsZXQgb3V0cHV0RGlyID0gY29yZS5nZXRSZXZlcnNlT3V0cHV0RGlyKGNvcmUuYXBwLnRvQWJzb2x1dGVQYXRoKGRzbFJldmVyc2VPdXRwdXREaXIpKTtcblxuICAgIC8vdG9kbzogcmVsb2NhdGlvbiwgYW5kIGRlZXAgY29weSBjb25uZWN0aW9uIG9wdGlvbnNcbiAgICBsZXQgY29ubiA9IGNvcmUub3B0aW9uKCdjb25uJyk7XG4gICAgbGV0IFsgZHJpdmVyIF0gPSBleHRyYWN0RHJpdmVyQW5kQ29ubmVjdG9yTmFtZShjb25uKTtcbiAgICBsZXQgY29ubk9wdGlvbnMgPSBVdGlsLmdldFZhbHVlQnlQYXRoKG9vbG9uZ0NvbmZpZywgJ2RhdGFTb3VyY2UuJyArIGNvbm4pO1xuICAgIGFzc2VydDogY29ubk9wdGlvbnM7ICAgIFxuXG4gICAgaWYgKHR5cGVvZiBjb25uT3B0aW9ucy5yZXZlcnNlUnVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbm5PcHRpb25zLnJldmVyc2VSdWxlcyA9IHJlcXVpcmUoY29yZS5hcHAudG9BYnNvbHV0ZVBhdGgoY29ubk9wdGlvbnMucmV2ZXJzZVJ1bGVzKSk7XG4gICAgfSBcblxuICAgIGFzc2VydDogIWNvbm5PcHRpb25zLnJldmVyc2VSdWxlcyB8fCBfLmlzUGxhaW5PYmplY3QoY29ubk9wdGlvbnMucmV2ZXJzZVJ1bGVzKTtcblxuICAgIHJldHVybiBjb3JlLmFwaS5yZXZlcnNlXyh7IFxuICAgICAgICBsb2dnZXI6IGNvcmUuYXBwLmxvZ2dlcixcbiAgICAgICAgZHNsUmV2ZXJzZU91dHB1dFBhdGg6IG91dHB1dERpcixcbiAgICAgICAgZHJpdmVyLFxuICAgICAgICBjb25uT3B0aW9uc1xuICAgIH0pO1xufTtcblxuZXhwb3J0cy5leHBvcnQgPSBhc3luYyAoY29yZSkgPT4ge1xuICAgIGNvcmUuYXBwLmxvZygndmVyYm9zZScsICdvb2xvbmcgcmV2ZXJzZScpO1xuXG4gICAgbGV0IG9vbG9uZ0NvbmZpZyA9IGNvcmUub29sb25nQ29uZmlnO1xuXG4gICAgbGV0IGRhdGFFeHBvcnREaXIgPSBVdGlsLmdldFZhbHVlQnlQYXRoKG9vbG9uZ0NvbmZpZywgJ29vbG9uZy5kYXRhRXhwb3J0RGlyJyk7XG4gICAgaWYgKCFkYXRhRXhwb3J0RGlyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignXCJvb2xvbmcuZGF0YUV4cG9ydERpclwiIG5vdCBmb3VuZCBpbiBvb2xvbmcgY29uZmlnLicpO1xuICAgIH1cblxuICAgIGxldCBvdXRwdXREaXIgPSBjb3JlLmFwcC50b0Fic29sdXRlUGF0aChkYXRhRXhwb3J0RGlyKTtcblxuICAgIC8vdG9kbzogcmVsb2NhdGlvbiwgYW5kIGRlZXAgY29weSBjb25uZWN0aW9uIG9wdGlvbnNcbiAgICBsZXQgY29ubiA9IGNvcmUub3B0aW9uKCdjb25uJyk7XG4gICAgbGV0IFsgZHJpdmVyIF0gPSBleHRyYWN0RHJpdmVyQW5kQ29ubmVjdG9yTmFtZShjb25uKTtcbiAgICBsZXQgY29ubk9wdGlvbnMgPSBVdGlsLmdldFZhbHVlQnlQYXRoKG9vbG9uZ0NvbmZpZywgJ2RhdGFTb3VyY2UuJyArIGNvbm4pO1xuICAgIGFzc2VydDogY29ubk9wdGlvbnM7ICAgIFxuXG4gICAgaWYgKHR5cGVvZiBjb25uT3B0aW9ucy5yZXZlcnNlUnVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbm5PcHRpb25zLnJldmVyc2VSdWxlcyA9IHJlcXVpcmUoY29yZS5hcHAudG9BYnNvbHV0ZVBhdGgoY29ubk9wdGlvbnMucmV2ZXJzZVJ1bGVzKSk7XG4gICAgfSBcblxuICAgIGFzc2VydDogIWNvbm5PcHRpb25zLnJldmVyc2VSdWxlcyB8fCBfLmlzUGxhaW5PYmplY3QoY29ubk9wdGlvbnMucmV2ZXJzZVJ1bGVzKTtcblxuICAgIHJldHVybiBjb3JlLmFwaS5yZXZlcnNlXyh7IFxuICAgICAgICBsb2dnZXI6IGNvcmUuYXBwLmxvZ2dlcixcbiAgICAgICAgZHNsUmV2ZXJzZU91dHB1dFBhdGg6IG91dHB1dERpcixcbiAgICAgICAgZHJpdmVyLFxuICAgICAgICBjb25uT3B0aW9uc1xuICAgIH0pO1xufTtcblxuZXhwb3J0cy5saXN0VmFsaWRhdG9ycyA9IGFzeW5jIChjb3JlKSA9PiB7XG4gICAgY29yZS5hcHAubG9nKCd2ZXJib3NlJywgJ29vbG9uZyBsaXN0VmFsaWRhdG9ycycpO1xuXG4gICAgbGV0IGxpc3QgPSBjb3JlLmFwaS5nZXRWYWxpZGF0b3JMaXN0KCk7XG5cbiAgICBjb3JlLmFwcC5sb2coJ2luZm8nLCAnQXZhaWxhYmxlIHZhbGlkYXRvcnM6IFxcbicgKyBsaXN0LmpvaW4oJ1xcbicpICsgJ1xcbicpO1xufSJdfQ==