{"version":3,"sources":["../../../src/drivers/rabbitmq/Connector.js"],"names":["_","require","tryRequire","AmqpNode","Connector","MessageContentType","RabbitmqConnector","constructor","connectionString","options","end_","acitveConnections","conn","close","connect_","connect","log","getConnectionStringWithoutCredential","on","err","logger","reason","opts","direction","chKey","exchange","queue","ch","createChannel","disconnect_","omit","ping_","sendToWorkers_","obj","assertQueue","durable","ret","sendToQueue","Buffer","from","JSON","stringify","persistent","content_type","logMsg","logMessage","msg","workerConsume_","consumerMethod","prefetch","consume","content","toString","noAck","publish_","routeKey","assertExchange","publish","subscribe_","subscriberMethod","q","exclusive","bindQueue","driverLib","module","exports"],"mappings":"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","sourcesContent":["const { _ } = require('@genx/july');\nconst { tryRequire } = require('@genx/sys');\nconst AmqpNode = tryRequire('amqplib');\nconst Connector = require('../../Connector');\n\n/**\n * A callback function to be called to handle a dequeued message.\n * @callback workerFunction\n * @param {Channel} ch - MQ Channel object\n * @param {Message} msg - Message object\n */\n\nconst MessageContentType = 'application/json';\n\n/**\n * Rabbitmq data storage connector.\n * @class\n * @extends Connector\n */\nclass RabbitmqConnector extends Connector {\n    /**\n     * @param {string} name\n     * @param {object} options\n     * @property {boolean} [options.logMessage] - Flag to log queued message\n     */\n    constructor(connectionString, options) {\n        super('rabbitmq', connectionString, options);\n    }\n\n    /**\n     * Close all connection initiated by this connector.\n     */\n    async end_() {\n        delete this.acitveConnections;\n\n        if (this.conn) {\n            await this.conn.close();\n        }\n\n        delete this.conn;\n    }\n\n    /**\n     * Create a database connection based on the default connection string of the connector and given options.\n     * @param {Object} [options] - Extra options for the connection, optional.\n     * @property {string} [options.queue] - Connection for queue, default ''\n     * @property {string} [options.exchange] - Connection for queue, default ''\n     * @property {string} [options.direction] - Connection for queue, default ''\n     * @returns {Promise.<Db>}\n     */\n    async connect_(options) {\n        if (!this.conn) {\n            this.conn = await AmqpNode.connect(this.connectionString);\n            this.log(\n                'verbose',\n                `rabbitmq: successfully connected to \"${this.getConnectionStringWithoutCredential()}\".`\n            );\n\n            this.conn.on('error', async (err) => {\n                this.log('error', `rabbitmq: connection error: ${err}}`);\n            });\n\n            if (this.options.logger) {\n                this.conn.on('blocked', (reason) => {\n                    this.log(\n                        'warn',\n                        `rabbitmq: connection is blocked. ${reason}`\n                    );\n                });\n\n                this.conn.on('unblocked', () => {\n                    this.log('info', 'rabbitmq: connection is unblocked.');\n                });\n            }\n        }\n\n        const opts = {\n            direction: 'out',\n            ...options,\n        };\n\n        const chKey = opts.exchange\n            ? `[X]${opts.exchange}|${opts.direction}`\n            : `[Q]${opts.queue}|${opts.direction}`;\n\n        this.acitveConnections || (this.acitveConnections = {});\n        let ch = this.acitveConnections[chKey];\n\n        if (!ch) {\n            ch = await this.conn.createChannel();\n\n            ch.on('error', async (err) => {\n                this.log('error', `rabbitmq: channel error. ${err}`);\n            });\n\n            this.acitveConnections[chKey] = ch;\n\n            this.log(\n                'verbose',\n                `rabbitmq: new channel created for queue \"${chKey}\".`\n            );\n        }\n\n        return ch;\n    }\n\n    /**\n     * Close a database connection.\n     * @param {Db} conn - MySQL connection.\n     */\n    async disconnect_(ch) {\n        this.log('verbose', 'rabbitmq: channel closed.');\n\n        if (this.acitveConnections) {\n            this.acitveConnections = _.omit(\n                this.acitveConnections,\n                (conn) => conn === ch\n            );\n        }\n    }\n\n    async ping_() {\n        return true;\n    }\n\n    /**\n     * Send a message to worker queue.\n     * @see https://www.rabbitmq.com/tutorials/tutorial-two-javascript.html\n     * @param {*} queue\n     * @param {*} obj\n     */\n    async sendToWorkers_(queue, obj) {\n        const ch = await this.connect_({ queue, direction: 'out' });\n\n        await ch.assertQueue(queue, {\n            durable: true,\n        });\n\n        const ret = await ch.sendToQueue(\n            queue,\n            Buffer.from(JSON.stringify(obj)),\n            {\n                persistent: true,\n                content_type: MessageContentType,\n            }\n        );\n\n        const logMsg = `rabbitmq: new message enqueued to [${queue}].`;\n\n        if (this.options.logMessage) {\n            this.log('verbose', logMsg, { msg: obj });\n        } else {\n            this.log('verbose', logMsg);\n        }\n\n        return ret;\n    }\n\n    /**\n     * Waiting for message from a queue by a worker.\n     * @see https://www.rabbitmq.com/tutorials/tutorial-two-javascript.html\n     * @param {*} queue\n     * @param {workerFunction} consumerMethod\n     */\n    async workerConsume_(queue, consumerMethod) {\n        const ch = await this.connect_({ queue, direction: 'in' });\n\n        await ch.assertQueue(queue, {\n            durable: true,\n        });\n\n        await ch.prefetch(1);\n\n        const logMsg = `rabbitmq: new message dequeued from [${queue}].`;\n\n        return ch.consume(\n            queue,\n            (msg) => {\n                if (this.options.logMessage) {\n                    this.log('verbose', logMsg, {\n                        msg: msg.content.toString(),\n                    });\n                } else {\n                    this.log('verbose', logMsg);\n                }\n\n                return consumerMethod(ch, msg);\n            },\n            {\n                // manual acknowledgment mode\n                // need send a proper acknowledgment from the worker, once done with a task.\n                noAck: false,\n            }\n        );\n    }\n\n    /**\n     * Publish a message to all subscribers.\n     * @param {*} exchange\n     * @param {*} obj\n     * @param {*} routeKey\n     */\n    async publish_(exchange, obj, routeKey) {\n        const ch = await this.connect_({ exchange, direction: 'out' });\n\n        await ch.assertExchange(exchange, 'fanout', {\n            durable: false,\n        });\n\n        const ret = await ch.publish(\n            exchange,\n            routeKey || '',\n            Buffer.from(JSON.stringify(obj)),\n            {\n                content_type: MessageContentType,\n            }\n        );\n\n        const logMsg = `rabbitmq: new message published to exchange [${exchange}].`;\n\n        if (this.options.logMessage) {\n            this.log('verbose', logMsg, { msg: obj });\n        } else {\n            this.log('verbose', logMsg);\n        }\n\n        return ret;\n    }\n\n    /**\n     * Subscribe to a message exchange.\n     * @param {*} exchange\n     * @param {workerFunction} subscriberMethod\n     * @param {*} routeKey\n     */\n    async subscribe_(exchange, subscriberMethod, routeKey) {\n        const ch = await this.connect_({ exchange, direction: 'in' });\n\n        await ch.assertExchange(exchange, 'fanout', {\n            durable: false,\n        });\n\n        const q = await ch.assertQueue('', {\n            exclusive: true,\n        });\n\n        await ch.bindQueue(q.queue, exchange, routeKey || '');\n\n        const logMsg = `rabbitmq: new message received from exchange [${exchange}].`;\n\n        return ch.consume(\n            q.queue,\n            (msg) => {\n                if (this.options.logMessage) {\n                    this.log('verbose', logMsg, {\n                        msg: msg.content.toString(),\n                    });\n                } else {\n                    this.log('verbose', logMsg);\n                }\n\n                return subscriberMethod(ch, msg);\n            },\n            {\n                // auto acknowledgment mode\n                noAck: true,\n            }\n        );\n    }\n}\n\nRabbitmqConnector.driverLib = AmqpNode;\n\nmodule.exports = RabbitmqConnector;\n"],"file":"Connector.js"}