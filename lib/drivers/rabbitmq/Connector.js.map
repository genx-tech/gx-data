{"version":3,"file":"Connector.js","names":["_","require","tryRequire","AmqpNode","Connector","MessageContentType","RabbitmqConnector","constructor","connectionString","options","end_","acitveConnections","conn","close","connect_","connect","log","getConnectionStringWithoutCredential","on","err","logger","reason","opts","direction","chKey","exchange","queue","ch","createChannel","disconnect_","omit","ping_","sendToWorkers_","obj","assertQueue","durable","ret","sendToQueue","Buffer","from","JSON","stringify","persistent","content_type","logMsg","logMessage","msg","workerConsume_","consumerMethod","prefetch","consume","content","toString","noAck","publish_","routeKey","assertExchange","publish","subscribe_","subscriberMethod","q","exclusive","bindQueue","driverLib","module","exports"],"sources":["../../../src/drivers/rabbitmq/Connector.js"],"sourcesContent":["const { _ } = require('@genx/july');\nconst { tryRequire } = require('@genx/sys');\nconst AmqpNode = tryRequire('amqplib');\nconst Connector = require('../../Connector');\n\n/**\n * A callback function to be called to handle a dequeued message.\n * @callback workerFunction\n * @param {Channel} ch - MQ Channel object\n * @param {Message} msg - Message object\n */\n\nconst MessageContentType = 'application/json';\n\n/**\n * Rabbitmq data storage connector.\n * @class\n * @extends Connector\n */\nclass RabbitmqConnector extends Connector {\n    /**\n     * @param {string} name\n     * @param {object} options\n     * @property {boolean} [options.logMessage] - Flag to log queued message\n     */\n    constructor(connectionString, options) {\n        super('rabbitmq', connectionString, options);\n    }\n\n    /**\n     * Close all connection initiated by this connector.\n     */\n    async end_() {\n        delete this.acitveConnections;\n\n        if (this.conn) {\n            await this.conn.close();\n        }\n\n        delete this.conn;\n    }\n\n    /**\n     * Create a database connection based on the default connection string of the connector and given options.\n     * @param {Object} [options] - Extra options for the connection, optional.\n     * @property {string} [options.queue] - Connection for queue, default ''\n     * @property {string} [options.exchange] - Connection for queue, default ''\n     * @property {string} [options.direction] - Connection for queue, default ''\n     * @returns {Promise.<Db>}\n     */\n    async connect_(options) {\n        if (!this.conn) {\n            this.conn = await AmqpNode.connect(this.connectionString);\n            this.log(\n                'verbose',\n                `rabbitmq: successfully connected to \"${this.getConnectionStringWithoutCredential()}\".`\n            );\n\n            this.conn.on('error', async (err) => {\n                this.log('error', `rabbitmq: connection error: ${err}}`);\n            });\n\n            if (this.options.logger) {\n                this.conn.on('blocked', (reason) => {\n                    this.log(\n                        'warn',\n                        `rabbitmq: connection is blocked. ${reason}`\n                    );\n                });\n\n                this.conn.on('unblocked', () => {\n                    this.log('info', 'rabbitmq: connection is unblocked.');\n                });\n            }\n        }\n\n        const opts = {\n            direction: 'out',\n            ...options,\n        };\n\n        const chKey = opts.exchange\n            ? `[X]${opts.exchange}|${opts.direction}`\n            : `[Q]${opts.queue}|${opts.direction}`;\n\n        this.acitveConnections || (this.acitveConnections = {});\n        let ch = this.acitveConnections[chKey];\n\n        if (!ch) {\n            ch = await this.conn.createChannel();\n\n            ch.on('error', async (err) => {\n                this.log('error', `rabbitmq: channel error. ${err}`);\n            });\n\n            this.acitveConnections[chKey] = ch;\n\n            this.log(\n                'verbose',\n                `rabbitmq: new channel created for queue \"${chKey}\".`\n            );\n        }\n\n        return ch;\n    }\n\n    /**\n     * Close a database connection.\n     * @param {Db} conn - MySQL connection.\n     */\n    async disconnect_(ch) {\n        this.log('verbose', 'rabbitmq: channel closed.');\n\n        if (this.acitveConnections) {\n            this.acitveConnections = _.omit(\n                this.acitveConnections,\n                (conn) => conn === ch\n            );\n        }\n    }\n\n    async ping_() {\n        return true;\n    }\n\n    /**\n     * Send a message to worker queue.\n     * @see https://www.rabbitmq.com/tutorials/tutorial-two-javascript.html\n     * @param {*} queue\n     * @param {*} obj\n     */\n    async sendToWorkers_(queue, obj) {\n        const ch = await this.connect_({ queue, direction: 'out' });\n\n        await ch.assertQueue(queue, {\n            durable: true,\n        });\n\n        const ret = await ch.sendToQueue(\n            queue,\n            Buffer.from(JSON.stringify(obj)),\n            {\n                persistent: true,\n                content_type: MessageContentType,\n            }\n        );\n\n        const logMsg = `rabbitmq: new message enqueued to [${queue}].`;\n\n        if (this.options.logMessage) {\n            this.log('verbose', logMsg, { msg: obj });\n        } else {\n            this.log('verbose', logMsg);\n        }\n\n        return ret;\n    }\n\n    /**\n     * Waiting for message from a queue by a worker.\n     * @see https://www.rabbitmq.com/tutorials/tutorial-two-javascript.html\n     * @param {*} queue\n     * @param {workerFunction} consumerMethod\n     */\n    async workerConsume_(queue, consumerMethod) {\n        const ch = await this.connect_({ queue, direction: 'in' });\n\n        await ch.assertQueue(queue, {\n            durable: true,\n        });\n\n        await ch.prefetch(1);\n\n        const logMsg = `rabbitmq: new message dequeued from [${queue}].`;\n\n        return ch.consume(\n            queue,\n            (msg) => {\n                if (this.options.logMessage) {\n                    this.log('verbose', logMsg, {\n                        msg: msg.content.toString(),\n                    });\n                } else {\n                    this.log('verbose', logMsg);\n                }\n\n                return consumerMethod(ch, msg);\n            },\n            {\n                // manual acknowledgment mode\n                // need send a proper acknowledgment from the worker, once done with a task.\n                noAck: false,\n            }\n        );\n    }\n\n    /**\n     * Publish a message to all subscribers.\n     * @param {*} exchange\n     * @param {*} obj\n     * @param {*} routeKey\n     */\n    async publish_(exchange, obj, routeKey) {\n        const ch = await this.connect_({ exchange, direction: 'out' });\n\n        await ch.assertExchange(exchange, 'fanout', {\n            durable: false,\n        });\n\n        const ret = await ch.publish(\n            exchange,\n            routeKey || '',\n            Buffer.from(JSON.stringify(obj)),\n            {\n                content_type: MessageContentType,\n            }\n        );\n\n        const logMsg = `rabbitmq: new message published to exchange [${exchange}].`;\n\n        if (this.options.logMessage) {\n            this.log('verbose', logMsg, { msg: obj });\n        } else {\n            this.log('verbose', logMsg);\n        }\n\n        return ret;\n    }\n\n    /**\n     * Subscribe to a message exchange.\n     * @param {*} exchange\n     * @param {workerFunction} subscriberMethod\n     * @param {*} routeKey\n     */\n    async subscribe_(exchange, subscriberMethod, routeKey) {\n        const ch = await this.connect_({ exchange, direction: 'in' });\n\n        await ch.assertExchange(exchange, 'fanout', {\n            durable: false,\n        });\n\n        const q = await ch.assertQueue('', {\n            exclusive: true,\n        });\n\n        await ch.bindQueue(q.queue, exchange, routeKey || '');\n\n        const logMsg = `rabbitmq: new message received from exchange [${exchange}].`;\n\n        return ch.consume(\n            q.queue,\n            (msg) => {\n                if (this.options.logMessage) {\n                    this.log('verbose', logMsg, {\n                        msg: msg.content.toString(),\n                    });\n                } else {\n                    this.log('verbose', logMsg);\n                }\n\n                return subscriberMethod(ch, msg);\n            },\n            {\n                // auto acknowledgment mode\n                noAck: true,\n            }\n        );\n    }\n}\n\nRabbitmqConnector.driverLib = AmqpNode;\n\nmodule.exports = RabbitmqConnector;\n"],"mappings":"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"}