"use strict";require("source-map-support/register");const Util=require("rk-utils");const{_,getValueByPath,setValueByPath,eachAsync_}=Util;const{DateTime}=require("luxon");const EntityModel=require("../../EntityModel");const{ApplicationError,RequestError}=require("../../Errors");const Types=require("../../types");class MySQLEntityModel extends EntityModel{static get hasAutoIncrement(){let autoId=this.meta.features.autoId;return autoId&&this.meta.fields[autoId.field].autoIncrementId}static getNestedObject(entityObj,keyPath){return getValueByPath(entityObj,keyPath.split(".").map(p=>":"+p).join("."))}static _translateSymbolToken(name){if(name==="now"){return this.db.connector.raw("NOW()")}throw new Error("not support")}static _serialize(value){if(typeof value==="boolean")return value?1:0;if(value instanceof DateTime){return value.toISO({includeOffset:false})}return value}static _serializeByTypeInfo(value,info){if(info.type==="boolean"){return value?1:0}if(info.type==="datetime"&&value instanceof DateTime){return value.toISO({includeOffset:false})}if(info.type==="array"&&Array.isArray(value)){if(info.csv){return Types.ARRAY.toCsv(value)}else{return Types.ARRAY.serialize(value)}}if(info.type==="object"){return Types.OBJECT.serialize(value)}return value}static async create_(...args){try{return await super.create_(...args)}catch(error){let errorCode=error.code;if(errorCode==="ER_NO_REFERENCED_ROW_2"){throw new RequestError("The new entity is referencing to an unexisting entity. Detail: "+error.message)}else if(errorCode==="ER_DUP_ENTRY"){throw new RequestError(error.message+` while creating a new "${this.meta.name}".`)}throw error}}static async updateOne_(...args){try{return await super.updateOne_(...args)}catch(error){let errorCode=error.code;if(errorCode==="ER_NO_REFERENCED_ROW_2"){throw new RequestError("The entity to be updated is referencing to an unexisting entity. Detail: "+error.message)}else if(errorCode==="ER_DUP_ENTRY"){throw new RequestError(error.message+` while updating an existing "${this.meta.name}".`)}throw error}}static async _doReplaceOne_(context){await this.ensureTransaction_(context);let entity=await this.findOne_({$query:context.options.$query},context.connOptions);let ret,options;if(entity){if(context.options.$retrieveExisting){context.rawOptions.$existing=entity}options={...context.options,$query:{[this.meta.keyField]:this.valueOfKey(entity)},$existing:entity};ret=await this.updateOne_(context.raw,options,context.connOptions)}else{options={..._.omit(context.options,["$retrieveUpdated","$bypassEnsureUnique"]),$retrieveCreated:context.options.$retrieveUpdated};ret=await this.create_(context.raw,options,context.connOptions)}if(options.$existing){context.rawOptions.$existing=options.$existing}if(options.$result){context.rawOptions.$result=options.$result}return ret}static _internalBeforeCreate_(context){return true}static async _internalAfterCreate_(context){if(context.options.$retrieveDbResult){context.rawOptions.$result=context.result}if(context.options.$retrieveCreated){if(this.hasAutoIncrement){let{insertId}=context.result;context.queryKey={[this.meta.features.autoId.field]:insertId}}else{context.queryKey=this.getUniqueKeyValuePairsFrom(context.latest)}let retrieveOptions=_.isPlainObject(context.options.$retrieveCreated)?context.options.$retrieveCreated:{};context.return=await this.findOne_({...retrieveOptions,$query:context.queryKey},context.connOptions)}else{if(this.hasAutoIncrement){let{insertId}=context.result;context.queryKey={[this.meta.features.autoId.field]:insertId};context.return={...context.return,...context.queryKey}}}}static _internalBeforeUpdate_(context){return true}static _internalBeforeUpdateMany_(context){return true}static async _internalAfterUpdate_(context){if(context.options.$retrieveDbResult){context.rawOptions.$result=context.result}if(context.options.$retrieveUpdated){let condition={$query:this.getUniqueKeyValuePairsFrom(context.options.$query)};if(context.options.$bypassEnsureUnique){condition.$bypassEnsureUnique=context.options.$bypassEnsureUnique}let retrieveOptions={};if(_.isPlainObject(context.options.$retrieveUpdated)){retrieveOptions=context.options.$retrieveUpdated}else if(context.options.$relationships){retrieveOptions.$relationships=context.options.$relationships}context.return=await this.findOne_({...condition,...retrieveOptions},context.connOptions);if(context.return){context.queryKey=this.getUniqueKeyValuePairsFrom(context.return)}else{context.queryKey=condition.$query}}}static async _internalAfterUpdateMany_(context){if(context.options.$retrieveDbResult){context.rawOptions.$result=context.result}if(context.options.$retrieveUpdated){let retrieveOptions={};if(_.isPlainObject(context.options.$retrieveUpdated)){retrieveOptions=context.options.$retrieveUpdated}else if(context.options.$relationships){retrieveOptions.$relationships=context.options.$relationships}context.return=await this.findAll_({...retrieveOptions,$query:context.options.$query},context.connOptions)}context.queryKey=context.options.$query}static async _internalBeforeDelete_(context){if(context.options.$retrieveDeleted){await this.ensureTransaction_(context);let retrieveOptions=_.isPlainObject(context.options.$retrieveDeleted)?context.options.$retrieveDeleted:{};context.return=context.existing=await this.findOne_({...retrieveOptions,$query:context.options.$query},context.connOptions)}return true}static async _internalBeforeDeleteMany_(context){if(context.options.$retrieveDeleted){await this.ensureTransaction_(context);let retrieveOptions=_.isPlainObject(context.options.$retrieveDeleted)?context.options.$retrieveDeleted:{};context.return=context.existing=await this.findAll_({...retrieveOptions,$query:context.options.$query},context.connOptions)}return true}static _internalAfterDelete_(context){if(context.options.$retrieveDbResult){context.rawOptions.$result=context.result}}static _internalAfterDeleteMany_(context){if(context.options.$retrieveDbResult){context.rawOptions.$result=context.result}}static _prepareAssociations(findOptions){let associations=_.uniq(findOptions.$association).sort();let assocTable={},counter=0,cache={};associations.forEach(assoc=>{if(_.isPlainObject(assoc)){assoc=this._translateSchemaNameToDb(assoc,this.db.schemaName);let alias=assoc.alias;if(!assoc.alias){alias=":join"+ ++counter}assocTable[alias]={entity:assoc.entity,joinType:assoc.type,output:assoc.output,key:assoc.key,alias,on:assoc.on,...(assoc.dataset?this.db.connector.buildQuery(assoc.entity,assoc.model._prepareQueries({...assoc.dataset,$variables:findOptions.$variables})):{})}}else{this._loadAssocIntoTable(assocTable,cache,assoc)}});return assocTable}static _loadAssocIntoTable(assocTable,cache,assoc){if(cache[assoc])return cache[assoc];let lastPos=assoc.lastIndexOf(".");let result;if(lastPos===-1){let assocInfo={...this.meta.associations[assoc]};if(_.isEmpty(assocInfo)){throw new RequestError(`Entity "${this.meta.name}" does not have the association "${assoc}".`)}result=cache[assoc]=assocTable[assoc]={...this._translateSchemaNameToDb(assocInfo)}}else{let base=assoc.substr(0,lastPos);let last=assoc.substr(lastPos+1);let baseNode=cache[base];if(!baseNode){baseNode=this._loadAssocIntoTable(assocTable,cache,base)}let entity=baseNode.model||this.db.model(baseNode.entity);let assocInfo={...entity.meta.associations[last]};if(_.isEmpty(assocInfo)){throw new RequestError(`Entity "${entity.meta.name}" does not have the association "${assoc}".`)}result={...entity._translateSchemaNameToDb(assocInfo,this.db)};if(!baseNode.subAssocs){baseNode.subAssocs={}}cache[assoc]=baseNode.subAssocs[last]=result}if(result.assoc){this._loadAssocIntoTable(assocTable,cache,assoc+"."+result.assoc)}return result}static _translateSchemaNameToDb(assoc,currentDb){if(assoc.entity.indexOf(".")>0){let[schemaName,entityName]=assoc.entity.split(".",2);let app=this.db.app;if(!app){throw new ApplicationError("Cross db association requires the db object have access to other db object.")}let refDb=app.db(schemaName);if(!refDb){throw new ApplicationError(`The referenced schema "${schemaName}" does not have db model in the same application.`)}assoc.entity=refDb.connector.database+"."+entityName;assoc.model=refDb.model(entityName);if(!assoc.model){throw new ApplicationError(`Failed load the entity model "${schemaName}.${entityName}".`)}}else{assoc.model=this.db.model(assoc.entity);if(currentDb&&currentDb!==this.db){assoc.entity=this.db.connector.database+"."+assoc.entity}}if(!assoc.key){assoc.key=assoc.model.meta.keyField}return assoc}static _mapRecordsToObjects([rows,columns,aliasMap],hierarchy){let mainIndex={};let self=this;function mergeRecord(existingRow,rowObject,associations,nodePath){_.each(associations,({sql,key,list,subAssocs},anchor)=>{if(sql)return;let currentPath=nodePath.concat();currentPath.push(anchor);let objKey=":"+anchor;let subObj=rowObject[objKey];if(!subObj){return}let subIndexes=existingRow.subIndexes[objKey];let rowKey=subObj[key];if(_.isNil(rowKey))return;let existingSubRow=subIndexes&&subIndexes[rowKey];if(existingSubRow){if(subAssocs){mergeRecord(existingSubRow,subObj,subAssocs,currentPath)}}else{if(!list){throw new ApplicationError(`The structure of association "${currentPath.join(".")}" with [key=${key}] of entity "${self.meta.name}" should be a list.`,{existingRow,rowObject})}if(existingRow.rowObject[objKey]){existingRow.rowObject[objKey].push(subObj)}else{existingRow.rowObject[objKey]=[subObj]}let subIndex={rowObject:subObj};if(subAssocs){subIndex.subIndexes=buildSubIndexes(subObj,subAssocs)}if(!subIndexes){throw new ApplicationError(`The subIndexes of association "${currentPath.join(".")}" with [key=${key}] of entity "${self.meta.name}" does not exist.`,{existingRow,rowObject})}subIndexes[rowKey]=subIndex}})}function buildSubIndexes(rowObject,associations){let indexes={};_.each(associations,({sql,key,list,subAssocs},anchor)=>{if(sql){return}let objKey=":"+anchor;let subObject=rowObject[objKey];let subIndex={rowObject:subObject};if(list){if(!subObject){return}if(_.isNil(subObject[key])){rowObject[objKey]=[];subObject=null}else{rowObject[objKey]=[subObject]}}else if(subObject&&_.isNil(subObject[key])){subObject=rowObject[objKey]=null}if(subObject){if(subAssocs){subIndex.subIndexes=buildSubIndexes(subObject,subAssocs)}indexes[objKey]={[subObject[key]]:subIndex}}});return indexes}let arrayOfObjs=[];rows.forEach((row,i)=>{let rowObject={};let tableCache={};row.reduce((result,value,i)=>{let col=columns[i];if(col.table==="A"){result[col.name]=value}else{let bucket=tableCache[col.table];if(bucket){bucket[col.name]=value}else{let nodePath=aliasMap[col.table];if(nodePath){let subObject={[col.name]:value};tableCache[col.table]=subObject;setValueByPath(result,nodePath,subObject)}}}return result},rowObject);let rowKey=rowObject[this.meta.keyField];let existingRow=mainIndex[rowKey];if(existingRow){mergeRecord(existingRow,rowObject,hierarchy,[])}else{arrayOfObjs.push(rowObject);mainIndex[rowKey]={rowObject,subIndexes:buildSubIndexes(rowObject,hierarchy)}}});return arrayOfObjs}static _extractAssociations(data){let raw={},assocs={};_.forOwn(data,(v,k)=>{if(k.startsWith(":")){assocs[k.substr(1)]=v}else{raw[k]=v}});return[raw,assocs]}static async _createAssocs_(context,assocs){let meta=this.meta.associations;let keyValue=context.return[this.meta.keyField];if(_.isNil(keyValue)){throw new ApplicationError("Missing required primary key field value. Entity: "+this.meta.name)}return eachAsync_(assocs,async(data,anchor)=>{let assocMeta=meta[anchor];if(!assocMeta){throw new ApplicationError(`Unknown association "${anchor}" of entity "${this.meta.name}".`)}let assocModel=this.db.model(assocMeta.entity);if(assocMeta.list){data=_.castArray(data);return eachAsync_(data,item=>assocModel.create_({...item,...(assocMeta.field?{[assocMeta.field]:keyValue}:{})},context.options,context.connOptions))}else if(!_.isPlainObject(data)){if(Array.isArray(data)){throw new RequestError(`Invalid type of associated entity (${assocMeta.entity}) data triggered from "${this.meta.name}" entity. Singular value expected (${anchor}), but an array is given instead.`)}if(!assocMeta.assoc){throw new ApplicationError(`The associated field of relation "${anchor}" does not exist in the entity meta data.`)}data={[assocMeta.assoc]:data}}return assocModel.create_({...data,...(assocMeta.field?{[assocMeta.field]:keyValue}:{})},context.options,context.connOptions)})}static async _updateAssocs_(context,assocs){let meta=this.meta.associations;let keyValue=context.return[this.meta.keyField];if(_.isNil(keyValue)){throw new ApplicationError("Missing required primary key field value. Entity: "+this.meta.name)}return eachAsync_(assocs,async(data,anchor)=>{let assocMeta=meta[anchor];if(!assocMeta){throw new ApplicationError(`Unknown association "${anchor}" of entity "${this.meta.name}".`)}let assocModel=this.db.model(assocMeta.entity);if(assocMeta.list){data=_.castArray(data);return eachAsync_(data,item=>assocModel.replaceOne_({...item,...(assocMeta.field?{[assocMeta.field]:keyValue}:{})},null,context.connOptions))}else if(!_.isPlainObject(data)){if(Array.isArray(data)){throw new RequestError(`Invalid type of associated entity (${assocMeta.entity}) data triggered from "${this.meta.name}" entity. Singular value expected (${anchor}), but an array is given instead.`)}if(!assocMeta.assoc){throw new ApplicationError(`The associated field of relation "${anchor}" does not exist in the entity meta data.`)}data={[assocMeta.assoc]:data}}return assocModel.replaceOne_({...data,...(assocMeta.field?{[assocMeta.field]:keyValue}:{})},null,context.connOptions)})}}module.exports=MySQLEntityModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kcml2ZXJzL215c3FsL0VudGl0eU1vZGVsLmpzIl0sIm5hbWVzIjpbIlV0aWwiLCJyZXF1aXJlIiwiXyIsImdldFZhbHVlQnlQYXRoIiwic2V0VmFsdWVCeVBhdGgiLCJlYWNoQXN5bmNfIiwiRGF0ZVRpbWUiLCJFbnRpdHlNb2RlbCIsIkFwcGxpY2F0aW9uRXJyb3IiLCJSZXF1ZXN0RXJyb3IiLCJUeXBlcyIsIk15U1FMRW50aXR5TW9kZWwiLCJoYXNBdXRvSW5jcmVtZW50IiwiYXV0b0lkIiwibWV0YSIsImZlYXR1cmVzIiwiZmllbGRzIiwiZmllbGQiLCJhdXRvSW5jcmVtZW50SWQiLCJnZXROZXN0ZWRPYmplY3QiLCJlbnRpdHlPYmoiLCJrZXlQYXRoIiwic3BsaXQiLCJtYXAiLCJwIiwiam9pbiIsIl90cmFuc2xhdGVTeW1ib2xUb2tlbiIsIm5hbWUiLCJkYiIsImNvbm5lY3RvciIsInJhdyIsIkVycm9yIiwiX3NlcmlhbGl6ZSIsInZhbHVlIiwidG9JU08iLCJpbmNsdWRlT2Zmc2V0IiwiX3NlcmlhbGl6ZUJ5VHlwZUluZm8iLCJpbmZvIiwidHlwZSIsIkFycmF5IiwiaXNBcnJheSIsImNzdiIsIkFSUkFZIiwidG9Dc3YiLCJzZXJpYWxpemUiLCJPQkpFQ1QiLCJjcmVhdGVfIiwiYXJncyIsImVycm9yIiwiZXJyb3JDb2RlIiwiY29kZSIsIm1lc3NhZ2UiLCJ1cGRhdGVPbmVfIiwiX2RvUmVwbGFjZU9uZV8iLCJjb250ZXh0IiwiZW5zdXJlVHJhbnNhY3Rpb25fIiwiZW50aXR5IiwiZmluZE9uZV8iLCIkcXVlcnkiLCJvcHRpb25zIiwiY29ubk9wdGlvbnMiLCJyZXQiLCIkcmV0cmlldmVFeGlzdGluZyIsInJhd09wdGlvbnMiLCIkZXhpc3RpbmciLCJrZXlGaWVsZCIsInZhbHVlT2ZLZXkiLCJvbWl0IiwiJHJldHJpZXZlQ3JlYXRlZCIsIiRyZXRyaWV2ZVVwZGF0ZWQiLCIkcmVzdWx0IiwiX2ludGVybmFsQmVmb3JlQ3JlYXRlXyIsIl9pbnRlcm5hbEFmdGVyQ3JlYXRlXyIsIiRyZXRyaWV2ZURiUmVzdWx0IiwicmVzdWx0IiwiaW5zZXJ0SWQiLCJxdWVyeUtleSIsImdldFVuaXF1ZUtleVZhbHVlUGFpcnNGcm9tIiwibGF0ZXN0IiwicmV0cmlldmVPcHRpb25zIiwiaXNQbGFpbk9iamVjdCIsInJldHVybiIsIl9pbnRlcm5hbEJlZm9yZVVwZGF0ZV8iLCJfaW50ZXJuYWxCZWZvcmVVcGRhdGVNYW55XyIsIl9pbnRlcm5hbEFmdGVyVXBkYXRlXyIsImNvbmRpdGlvbiIsIiRieXBhc3NFbnN1cmVVbmlxdWUiLCIkcmVsYXRpb25zaGlwcyIsIl9pbnRlcm5hbEFmdGVyVXBkYXRlTWFueV8iLCJmaW5kQWxsXyIsIl9pbnRlcm5hbEJlZm9yZURlbGV0ZV8iLCIkcmV0cmlldmVEZWxldGVkIiwiZXhpc3RpbmciLCJfaW50ZXJuYWxCZWZvcmVEZWxldGVNYW55XyIsIl9pbnRlcm5hbEFmdGVyRGVsZXRlXyIsIl9pbnRlcm5hbEFmdGVyRGVsZXRlTWFueV8iLCJfcHJlcGFyZUFzc29jaWF0aW9ucyIsImZpbmRPcHRpb25zIiwiYXNzb2NpYXRpb25zIiwidW5pcSIsIiRhc3NvY2lhdGlvbiIsInNvcnQiLCJhc3NvY1RhYmxlIiwiY291bnRlciIsImNhY2hlIiwiZm9yRWFjaCIsImFzc29jIiwiX3RyYW5zbGF0ZVNjaGVtYU5hbWVUb0RiIiwic2NoZW1hTmFtZSIsImFsaWFzIiwiam9pblR5cGUiLCJvdXRwdXQiLCJrZXkiLCJvbiIsImRhdGFzZXQiLCJidWlsZFF1ZXJ5IiwibW9kZWwiLCJfcHJlcGFyZVF1ZXJpZXMiLCIkdmFyaWFibGVzIiwiX2xvYWRBc3NvY0ludG9UYWJsZSIsImxhc3RQb3MiLCJsYXN0SW5kZXhPZiIsImFzc29jSW5mbyIsImlzRW1wdHkiLCJiYXNlIiwic3Vic3RyIiwibGFzdCIsImJhc2VOb2RlIiwic3ViQXNzb2NzIiwiY3VycmVudERiIiwiaW5kZXhPZiIsImVudGl0eU5hbWUiLCJhcHAiLCJyZWZEYiIsImRhdGFiYXNlIiwiX21hcFJlY29yZHNUb09iamVjdHMiLCJyb3dzIiwiY29sdW1ucyIsImFsaWFzTWFwIiwiaGllcmFyY2h5IiwibWFpbkluZGV4Iiwic2VsZiIsIm1lcmdlUmVjb3JkIiwiZXhpc3RpbmdSb3ciLCJyb3dPYmplY3QiLCJub2RlUGF0aCIsImVhY2giLCJzcWwiLCJsaXN0IiwiYW5jaG9yIiwiY3VycmVudFBhdGgiLCJjb25jYXQiLCJwdXNoIiwib2JqS2V5Iiwic3ViT2JqIiwic3ViSW5kZXhlcyIsInJvd0tleSIsImlzTmlsIiwiZXhpc3RpbmdTdWJSb3ciLCJzdWJJbmRleCIsImJ1aWxkU3ViSW5kZXhlcyIsImluZGV4ZXMiLCJzdWJPYmplY3QiLCJhcnJheU9mT2JqcyIsInJvdyIsImkiLCJ0YWJsZUNhY2hlIiwicmVkdWNlIiwiY29sIiwidGFibGUiLCJidWNrZXQiLCJfZXh0cmFjdEFzc29jaWF0aW9ucyIsImRhdGEiLCJhc3NvY3MiLCJmb3JPd24iLCJ2IiwiayIsInN0YXJ0c1dpdGgiLCJfY3JlYXRlQXNzb2NzXyIsImtleVZhbHVlIiwiYXNzb2NNZXRhIiwiYXNzb2NNb2RlbCIsImNhc3RBcnJheSIsIml0ZW0iLCJfdXBkYXRlQXNzb2NzXyIsInJlcGxhY2VPbmVfIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsYSx1Q0FFQSxLQUFNQSxDQUFBQSxJQUFJLENBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXBCLENBQ0EsS0FBTSxDQUFFQyxDQUFGLENBQUtDLGNBQUwsQ0FBcUJDLGNBQXJCLENBQXFDQyxVQUFyQyxFQUFvREwsSUFBMUQsQ0FFQSxLQUFNLENBQUVNLFFBQUYsRUFBZUwsT0FBTyxDQUFDLE9BQUQsQ0FBNUIsQ0FDQSxLQUFNTSxDQUFBQSxXQUFXLENBQUdOLE9BQU8sQ0FBQyxtQkFBRCxDQUEzQixDQUNBLEtBQU0sQ0FBRU8sZ0JBQUYsQ0FBb0JDLFlBQXBCLEVBQXFDUixPQUFPLENBQUMsY0FBRCxDQUFsRCxDQUNBLEtBQU1TLENBQUFBLEtB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RSxDQUFDUSxTQUFTLENBQUMxRSxLQUFYLEVBQW1Ca0UsSUFBckIsQ0FDVixDQUVELE1BQU9TLENBQUFBLFVBQVUsQ0FBQ0ksV0FBWCxDQUF1QixDQUFFLEdBQUdiLElBQUwsQ0FBVyxJQUFJUSxTQUFTLENBQUNuSyxLQUFWLENBQWtCLENBQUUsQ0FBQ21LLFNBQVMsQ0FBQ25LLEtBQVgsRUFBbUJrSyxRQUFyQixDQUFsQixDQUFvRCxFQUF4RCxDQUFYLENBQXZCLENBQWlHLElBQWpHLENBQXVHN0gsT0FBTyxDQUFDTSxXQUEvRyxDQUNWLENBekJnQixDQTBCcEIsQ0E1cEJzQyxDQStwQjNDOEgsTUFBTSxDQUFDQyxPQUFQLENBQWlCaEwsZ0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IFV0aWwgPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyBfLCBnZXRWYWx1ZUJ5UGF0aCwgc2V0VmFsdWVCeVBhdGgsIGVhY2hBc3luY18gfSA9IFV0aWw7XG5cbmNvbnN0IHsgRGF0ZVRpbWUgfSA9IHJlcXVpcmUoJ2x1eG9uJyk7XG5jb25zdCBFbnRpdHlNb2RlbCA9IHJlcXVpcmUoJy4uLy4uL0VudGl0eU1vZGVsJyk7XG5jb25zdCB7IEFwcGxpY2F0aW9uRXJyb3IsIFJlcXVlc3RFcnJvciB9ID0gcmVxdWlyZSgnLi4vLi4vRXJyb3JzJyk7XG5jb25zdCBUeXBlcyA9IHJlcXVpcmUoJy4uLy4uL3R5cGVzJyk7XG5cbi8qKlxuICogTXlTUUwgZW50aXR5IG1vZGVsIGNsYXNzLlxuICovXG5jbGFzcyBNeVNRTEVudGl0eU1vZGVsIGV4dGVuZHMgRW50aXR5TW9kZWwgeyAgXG4gICAgLyoqXG4gICAgICogW3NwZWNpZmljXSBDaGVjayBpZiB0aGlzIGVudGl0eSBoYXMgYXV0byBpbmNyZW1lbnQgZmVhdHVyZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IGhhc0F1dG9JbmNyZW1lbnQoKSB7XG4gICAgICAgIGxldCBhdXRvSWQgPSB0aGlzLm1ldGEuZmVhdHVyZXMuYXV0b0lkO1xuICAgICAgICByZXR1cm4gYXV0b0lkICYmIHRoaXMubWV0YS5maWVsZHNbYXV0b0lkLmZpZWxkXS5hdXRvSW5jcmVtZW50SWQ7ICAgIFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFtvdmVycmlkZV0gXG4gICAgICogQHBhcmFtIHsqfSBlbnRpdHlPYmogXG4gICAgICogQHBhcmFtIHsqfSBrZXlQYXRoIFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXROZXN0ZWRPYmplY3QoZW50aXR5T2JqLCBrZXlQYXRoKSB7XG4gICAgICAgIHJldHVybiBnZXRWYWx1ZUJ5UGF0aChlbnRpdHlPYmosIGtleVBhdGguc3BsaXQoJy4nKS5tYXAocCA9PiAnOicrcCkuam9pbignLicpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBbb3ZlcnJpZGVdIFNlcmlhbGl6ZSB2YWx1ZSBpbnRvIGRhdGFiYXNlIGFjY2VwdGFibGUgZm9ybWF0LlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBuYW1lIC0gTmFtZSBvZiB0aGUgc3ltYm9sIHRva2VuIFxuICAgICAqL1xuICAgIHN0YXRpYyBfdHJhbnNsYXRlU3ltYm9sVG9rZW4obmFtZSkge1xuICAgICAgICBpZiAobmFtZSA9PT0gJ25vdycpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRiLmNvbm5lY3Rvci5yYXcoJ05PVygpJyk7XG4gICAgICAgIH0gXG4gICAgICAgIFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBzdXBwb3J0Jyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogW292ZXJyaWRlXVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgXG4gICAgICovXG4gICAgc3RhdGljIF9zZXJpYWxpemUodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gdmFsdWUgPyAxIDogMDtcblxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlVGltZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPKHsgaW5jbHVkZU9mZnNldDogZmFsc2UgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSAgICBcblxuICAgIC8qKlxuICAgICAqIFtvdmVycmlkZV1cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFxuICAgICAqIEBwYXJhbSB7Kn0gaW5mbyBcbiAgICAgKi9cbiAgICBzdGF0aWMgX3NlcmlhbGl6ZUJ5VHlwZUluZm8odmFsdWUsIGluZm8pIHtcbiAgICAgICAgaWYgKGluZm8udHlwZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgPyAxIDogMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmZvLnR5cGUgPT09ICdkYXRldGltZScgJiYgdmFsdWUgaW5zdGFuY2VvZiBEYXRlVGltZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPKHsgaW5jbHVkZU9mZnNldDogZmFsc2UgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5mby50eXBlID09PSAnYXJyYXknICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAoaW5mby5jc3YpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gVHlwZXMuQVJSQVkudG9Dc3YodmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gVHlwZXMuQVJSQVkuc2VyaWFsaXplKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmZvLnR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gVHlwZXMuT0JKRUNULnNlcmlhbGl6ZSh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSAgICBcblxuICAgIHN0YXRpYyBhc3luYyBjcmVhdGVfKC4uLmFyZ3MpIHtcbiAgICAgICAgdHJ5IHsgICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBzdXBlci5jcmVhdGVfKC4uLmFyZ3MpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgbGV0IGVycm9yQ29kZSA9IGVycm9yLmNvZGU7XG5cbiAgICAgICAgICAgIGlmIChlcnJvckNvZGUgPT09ICdFUl9OT19SRUZFUkVOQ0VEX1JPV18yJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1ZXN0RXJyb3IoJ1RoZSBuZXcgZW50aXR5IGlzIHJlZmVyZW5jaW5nIHRvIGFuIHVuZXhpc3RpbmcgZW50aXR5LiBEZXRhaWw6ICcgKyBlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3JDb2RlID09PSAnRVJfRFVQX0VOVFJZJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1ZXN0RXJyb3IoZXJyb3IubWVzc2FnZSArIGAgd2hpbGUgY3JlYXRpbmcgYSBuZXcgXCIke3RoaXMubWV0YS5uYW1lfVwiLmApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBhc3luYyB1cGRhdGVPbmVfKC4uLmFyZ3MpIHtcbiAgICAgICAgdHJ5IHsgICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBzdXBlci51cGRhdGVPbmVfKC4uLmFyZ3MpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgbGV0IGVycm9yQ29kZSA9IGVycm9yLmNvZGU7XG5cbiAgICAgICAgICAgIGlmIChlcnJvckNvZGUgPT09ICdFUl9OT19SRUZFUkVOQ0VEX1JPV18yJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1ZXN0RXJyb3IoJ1RoZSBlbnRpdHkgdG8gYmUgdXBkYXRlZCBpcyByZWZlcmVuY2luZyB0byBhbiB1bmV4aXN0aW5nIGVudGl0eS4gRGV0YWlsOiAnICsgZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yQ29kZSA9PT0gJ0VSX0RVUF9FTlRSWScpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWVzdEVycm9yKGVycm9yLm1lc3NhZ2UgKyBgIHdoaWxlIHVwZGF0aW5nIGFuIGV4aXN0aW5nIFwiJHt0aGlzLm1ldGEubmFtZX1cIi5gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgX2RvUmVwbGFjZU9uZV8oY29udGV4dCkge1xuICAgICAgICBhd2FpdCB0aGlzLmVuc3VyZVRyYW5zYWN0aW9uXyhjb250ZXh0KTsgXG4gICAgICAgICAgICBcbiAgICAgICAgbGV0IGVudGl0eSA9IGF3YWl0IHRoaXMuZmluZE9uZV8oeyAkcXVlcnk6IGNvbnRleHQub3B0aW9ucy4kcXVlcnkgfSwgY29udGV4dC5jb25uT3B0aW9ucyk7XG5cbiAgICAgICAgbGV0IHJldCwgb3B0aW9ucztcblxuICAgICAgICBpZiAoZW50aXR5KSB7XG4gICAgICAgICAgICBpZiAoY29udGV4dC5vcHRpb25zLiRyZXRyaWV2ZUV4aXN0aW5nKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5yYXdPcHRpb25zLiRleGlzdGluZyA9IGVudGl0eTtcbiAgICAgICAgICAgIH0gICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBvcHRpb25zID0geyBcbiAgICAgICAgICAgICAgICAuLi5jb250ZXh0Lm9wdGlvbnMsIFxuICAgICAgICAgICAgICAgICRxdWVyeTogeyBbdGhpcy5tZXRhLmtleUZpZWxkXTogdGhpcy52YWx1ZU9mS2V5KGVudGl0eSkgfSwgXG4gICAgICAgICAgICAgICAgJGV4aXN0aW5nOiBlbnRpdHkgXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXQgPSBhd2FpdCB0aGlzLnVwZGF0ZU9uZV8oY29udGV4dC5yYXcsIG9wdGlvbnMsIGNvbnRleHQuY29ubk9wdGlvbnMpO1xuICAgICAgICB9IGVsc2UgeyAgICAgIFxuICAgICAgICAgICAgb3B0aW9ucyA9IHsgXG4gICAgICAgICAgICAgICAgLi4uXy5vbWl0KGNvbnRleHQub3B0aW9ucywgWyckcmV0cmlldmVVcGRhdGVkJywgJyRieXBhc3NFbnN1cmVVbmlxdWUnXSksXG4gICAgICAgICAgICAgICAgJHJldHJpZXZlQ3JlYXRlZDogY29udGV4dC5vcHRpb25zLiRyZXRyaWV2ZVVwZGF0ZWQgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9OyAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXQgPSBhd2FpdCB0aGlzLmNyZWF0ZV8oY29udGV4dC5yYXcsIG9wdGlvbnMsIGNvbnRleHQuY29ubk9wdGlvbnMpO1xuICAgICAgICB9ICAgICAgIFxuXG4gICAgICAgIGlmIChvcHRpb25zLiRleGlzdGluZykge1xuICAgICAgICAgICAgY29udGV4dC5yYXdPcHRpb25zLiRleGlzdGluZyA9IG9wdGlvbnMuJGV4aXN0aW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuJHJlc3VsdCkge1xuICAgICAgICAgICAgY29udGV4dC5yYXdPcHRpb25zLiRyZXN1bHQgPSBvcHRpb25zLiRyZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIHN0YXRpYyBfaW50ZXJuYWxCZWZvcmVDcmVhdGVfKGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFBvc3QgY3JlYXRlIHByb2Nlc3NpbmcuXG4gICAgICogQHBhcmFtIHsqfSBjb250ZXh0IFxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbY29udGV4dC5vcHRpb25zXSAtIENyZWF0ZSBvcHRpb25zICAgICBcbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFtvcHRpb25zLiRyZXRyaWV2ZUNyZWF0ZWRdIC0gUmV0cmlldmUgdGhlIG5ld2x5IGNyZWF0ZWQgcmVjb3JkIGZyb20gZGIuIFxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBfaW50ZXJuYWxBZnRlckNyZWF0ZV8oY29udGV4dCkge1xuICAgICAgICBpZiAoY29udGV4dC5vcHRpb25zLiRyZXRyaWV2ZURiUmVzdWx0KSB7XG4gICAgICAgICAgICBjb250ZXh0LnJhd09wdGlvbnMuJHJlc3VsdCA9IGNvbnRleHQucmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQub3B0aW9ucy4kcmV0cmlldmVDcmVhdGVkKSB7ICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodGhpcy5oYXNBdXRvSW5jcmVtZW50KSB7XG4gICAgICAgICAgICAgICAgbGV0IHsgaW5zZXJ0SWQgfSA9IGNvbnRleHQucmVzdWx0O1xuICAgICAgICAgICAgICAgIGNvbnRleHQucXVlcnlLZXkgPSB7IFt0aGlzLm1ldGEuZmVhdHVyZXMuYXV0b0lkLmZpZWxkXTogaW5zZXJ0SWQgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5xdWVyeUtleSA9IHRoaXMuZ2V0VW5pcXVlS2V5VmFsdWVQYWlyc0Zyb20oY29udGV4dC5sYXRlc3QpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgcmV0cmlldmVPcHRpb25zID0gXy5pc1BsYWluT2JqZWN0KGNvbnRleHQub3B0aW9ucy4kcmV0cmlldmVDcmVhdGVkKSA/IGNvbnRleHQub3B0aW9ucy4kcmV0cmlldmVDcmVhdGVkIDoge307XG4gICAgICAgICAgICBjb250ZXh0LnJldHVybiA9IGF3YWl0IHRoaXMuZmluZE9uZV8oeyAuLi5yZXRyaWV2ZU9wdGlvbnMsICRxdWVyeTogY29udGV4dC5xdWVyeUtleSB9LCBjb250ZXh0LmNvbm5PcHRpb25zKTsgICAgICAgICAgICBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc0F1dG9JbmNyZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBsZXQgeyBpbnNlcnRJZCB9ID0gY29udGV4dC5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgY29udGV4dC5xdWVyeUtleSA9IHsgW3RoaXMubWV0YS5mZWF0dXJlcy5hdXRvSWQuZmllbGRdOiBpbnNlcnRJZCB9O1xuICAgICAgICAgICAgICAgIGNvbnRleHQucmV0dXJuID0geyAuLi5jb250ZXh0LnJldHVybiwgLi4uY29udGV4dC5xdWVyeUtleSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIF9pbnRlcm5hbEJlZm9yZVVwZGF0ZV8oY29udGV4dCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgX2ludGVybmFsQmVmb3JlVXBkYXRlTWFueV8oY29udGV4dCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQb3N0IHVwZGF0ZSBwcm9jZXNzaW5nLlxuICAgICAqIEBwYXJhbSB7Kn0gY29udGV4dCBcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW2NvbnRleHQub3B0aW9uc10gLSBVcGRhdGUgb3B0aW9ucyAgICAgXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbY29udGV4dC5vcHRpb25zLiRyZXRyaWV2ZVVwZGF0ZWRdIC0gUmV0cmlldmUgdGhlIG5ld2x5IHVwZGF0ZWQgcmVjb3JkIGZyb20gZGIuIFxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBfaW50ZXJuYWxBZnRlclVwZGF0ZV8oY29udGV4dCkge1xuICAgICAgICBpZiAoY29udGV4dC5vcHRpb25zLiRyZXRyaWV2ZURiUmVzdWx0KSB7XG4gICAgICAgICAgICBjb250ZXh0LnJhd09wdGlvbnMuJHJlc3VsdCA9IGNvbnRleHQucmVzdWx0OyAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm9wdGlvbnMuJHJldHJpZXZlVXBkYXRlZCkgeyAgICBcbiAgICAgICAgICAgIGxldCBjb25kaXRpb24gPSB7ICRxdWVyeTogdGhpcy5nZXRVbmlxdWVLZXlWYWx1ZVBhaXJzRnJvbShjb250ZXh0Lm9wdGlvbnMuJHF1ZXJ5KSB9O1xuICAgICAgICAgICAgaWYgKGNvbnRleHQub3B0aW9ucy4kYnlwYXNzRW5zdXJlVW5pcXVlKSB7XG4gICAgICAgICAgICAgICAgY29uZGl0aW9uLiRieXBhc3NFbnN1cmVVbmlxdWUgPSBjb250ZXh0Lm9wdGlvbnMuJGJ5cGFzc0Vuc3VyZVVuaXF1ZTtcbiAgICAgICAgICAgIH0gXG5cbiAgICAgICAgICAgIGxldCByZXRyaWV2ZU9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdChjb250ZXh0Lm9wdGlvbnMuJHJldHJpZXZlVXBkYXRlZCkpIHtcbiAgICAgICAgICAgICAgICByZXRyaWV2ZU9wdGlvbnMgPSBjb250ZXh0Lm9wdGlvbnMuJHJldHJpZXZlVXBkYXRlZDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5vcHRpb25zLiRyZWxhdGlvbnNoaXBzKSB7XG4gICAgICAgICAgICAgICAgcmV0cmlldmVPcHRpb25zLiRyZWxhdGlvbnNoaXBzID0gY29udGV4dC5vcHRpb25zLiRyZWxhdGlvbnNoaXBzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb250ZXh0LnJldHVybiA9IGF3YWl0IHRoaXMuZmluZE9uZV8oeyAuLi5jb25kaXRpb24sIC4uLnJldHJpZXZlT3B0aW9ucyB9LCBjb250ZXh0LmNvbm5PcHRpb25zKTtcbiAgICAgICAgICAgIGlmIChjb250ZXh0LnJldHVybikge1xuICAgICAgICAgICAgICAgIGNvbnRleHQucXVlcnlLZXkgPSB0aGlzLmdldFVuaXF1ZUtleVZhbHVlUGFpcnNGcm9tKGNvbnRleHQucmV0dXJuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5xdWVyeUtleSA9IGNvbmRpdGlvbi4kcXVlcnk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQb3N0IHVwZGF0ZSBwcm9jZXNzaW5nLlxuICAgICAqIEBwYXJhbSB7Kn0gY29udGV4dCBcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIC0gVXBkYXRlIG9wdGlvbnMgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW29wdGlvbnMuJHJldHJpZXZlVXBkYXRlZF0gLSBSZXRyaWV2ZSB0aGUgbmV3bHkgdXBkYXRlZCByZWNvcmQgZnJvbSBkYi4gXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIF9pbnRlcm5hbEFmdGVyVXBkYXRlTWFueV8oY29udGV4dCkge1xuICAgICAgICBpZiAoY29udGV4dC5vcHRpb25zLiRyZXRyaWV2ZURiUmVzdWx0KSB7XG4gICAgICAgICAgICBjb250ZXh0LnJhd09wdGlvbnMuJHJlc3VsdCA9IGNvbnRleHQucmVzdWx0O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGFmdGVyVXBkYXRlTWFueSBSZXN1bHRTZXRIZWFkZXIge1xuICAgICAgICAgICAgICogZmllbGRDb3VudDogMCxcbiAgICAgICAgICAgICAqIGFmZmVjdGVkUm93czogMSxcbiAgICAgICAgICAgICAqIGluc2VydElkOiAwLFxuICAgICAgICAgICAgICogaW5mbzogJ1Jvd3MgbWF0Y2hlZDogMSAgQ2hhbmdlZDogMSAgV2FybmluZ3M6IDAnLFxuICAgICAgICAgICAgICogc2VydmVyU3RhdHVzOiAzLFxuICAgICAgICAgICAgICogd2FybmluZ1N0YXR1czogMCxcbiAgICAgICAgICAgICAqIGNoYW5nZWRSb3dzOiAxIH1cbiAgICAgICAgICAgICAqL1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQub3B0aW9ucy4kcmV0cmlldmVVcGRhdGVkKSB7ICAgIFxuICAgICAgICAgICAgbGV0IHJldHJpZXZlT3B0aW9ucyA9IHt9O1xuXG4gICAgICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KGNvbnRleHQub3B0aW9ucy4kcmV0cmlldmVVcGRhdGVkKSkge1xuICAgICAgICAgICAgICAgIHJldHJpZXZlT3B0aW9ucyA9IGNvbnRleHQub3B0aW9ucy4kcmV0cmlldmVVcGRhdGVkO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm9wdGlvbnMuJHJlbGF0aW9uc2hpcHMpIHtcbiAgICAgICAgICAgICAgICByZXRyaWV2ZU9wdGlvbnMuJHJlbGF0aW9uc2hpcHMgPSBjb250ZXh0Lm9wdGlvbnMuJHJlbGF0aW9uc2hpcHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnRleHQucmV0dXJuID0gYXdhaXQgdGhpcy5maW5kQWxsXyh7IC4uLnJldHJpZXZlT3B0aW9ucywgJHF1ZXJ5OiBjb250ZXh0Lm9wdGlvbnMuJHF1ZXJ5IH0sIGNvbnRleHQuY29ubk9wdGlvbnMpOyAgICAgICAgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5xdWVyeUtleSA9IGNvbnRleHQub3B0aW9ucy4kcXVlcnk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQmVmb3JlIGRlbGV0aW5nIGFuIGVudGl0eS5cbiAgICAgKiBAcGFyYW0geyp9IGNvbnRleHQgXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R9IFtjb250ZXh0Lm9wdGlvbnNdIC0gRGVsZXRlIG9wdGlvbnMgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW29wdGlvbnMuJHJldHJpZXZlRGVsZXRlZF0gLSBSZXRyaWV2ZSB0aGUgcmVjZW50bHkgZGVsZXRlZCByZWNvcmQgZnJvbSBkYi4gXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIF9pbnRlcm5hbEJlZm9yZURlbGV0ZV8oY29udGV4dCkge1xuICAgICAgICBpZiAoY29udGV4dC5vcHRpb25zLiRyZXRyaWV2ZURlbGV0ZWQpIHsgICAgICAgICAgICBcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZW5zdXJlVHJhbnNhY3Rpb25fKGNvbnRleHQpOyBcblxuICAgICAgICAgICAgbGV0IHJldHJpZXZlT3B0aW9ucyA9IF8uaXNQbGFpbk9iamVjdChjb250ZXh0Lm9wdGlvbnMuJHJldHJpZXZlRGVsZXRlZCkgPyBcbiAgICAgICAgICAgICAgICBjb250ZXh0Lm9wdGlvbnMuJHJldHJpZXZlRGVsZXRlZCA6XG4gICAgICAgICAgICAgICAge307XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnRleHQucmV0dXJuID0gY29udGV4dC5leGlzdGluZyA9IGF3YWl0IHRoaXMuZmluZE9uZV8oeyAuLi5yZXRyaWV2ZU9wdGlvbnMsICRxdWVyeTogY29udGV4dC5vcHRpb25zLiRxdWVyeSB9LCBjb250ZXh0LmNvbm5PcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHN0YXRpYyBhc3luYyBfaW50ZXJuYWxCZWZvcmVEZWxldGVNYW55Xyhjb250ZXh0KSB7XG4gICAgICAgIGlmIChjb250ZXh0Lm9wdGlvbnMuJHJldHJpZXZlRGVsZXRlZCkgeyAgICAgICAgICAgIFxuICAgICAgICAgICAgYXdhaXQgdGhpcy5lbnN1cmVUcmFuc2FjdGlvbl8oY29udGV4dCk7IFxuXG4gICAgICAgICAgICBsZXQgcmV0cmlldmVPcHRpb25zID0gXy5pc1BsYWluT2JqZWN0KGNvbnRleHQub3B0aW9ucy4kcmV0cmlldmVEZWxldGVkKSA/IFxuICAgICAgICAgICAgICAgIGNvbnRleHQub3B0aW9ucy4kcmV0cmlldmVEZWxldGVkIDpcbiAgICAgICAgICAgICAgICB7fTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29udGV4dC5yZXR1cm4gPSBjb250ZXh0LmV4aXN0aW5nID0gYXdhaXQgdGhpcy5maW5kQWxsXyh7IC4uLnJldHJpZXZlT3B0aW9ucywgJHF1ZXJ5OiBjb250ZXh0Lm9wdGlvbnMuJHF1ZXJ5IH0sIGNvbnRleHQuY29ubk9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUG9zdCBkZWxldGUgcHJvY2Vzc2luZy5cbiAgICAgKiBAcGFyYW0geyp9IGNvbnRleHQgXG4gICAgICovXG4gICAgc3RhdGljIF9pbnRlcm5hbEFmdGVyRGVsZXRlXyhjb250ZXh0KSB7XG4gICAgICAgIGlmIChjb250ZXh0Lm9wdGlvbnMuJHJldHJpZXZlRGJSZXN1bHQpIHtcbiAgICAgICAgICAgIGNvbnRleHQucmF3T3B0aW9ucy4kcmVzdWx0ID0gY29udGV4dC5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQb3N0IGRlbGV0ZSBwcm9jZXNzaW5nLlxuICAgICAqIEBwYXJhbSB7Kn0gY29udGV4dCBcbiAgICAgKi9cbiAgICBzdGF0aWMgX2ludGVybmFsQWZ0ZXJEZWxldGVNYW55Xyhjb250ZXh0KSB7XG4gICAgICAgIGlmIChjb250ZXh0Lm9wdGlvbnMuJHJldHJpZXZlRGJSZXN1bHQpIHtcbiAgICAgICAgICAgIGNvbnRleHQucmF3T3B0aW9ucy4kcmVzdWx0ID0gY29udGV4dC5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0geyp9IGZpbmRPcHRpb25zIFxuICAgICAqL1xuICAgIHN0YXRpYyBfcHJlcGFyZUFzc29jaWF0aW9ucyhmaW5kT3B0aW9ucykgeyBcbiAgICAgICAgbGV0IGFzc29jaWF0aW9ucyA9IF8udW5pcShmaW5kT3B0aW9ucy4kYXNzb2NpYXRpb24pLnNvcnQoKTsgICAgICAgIFxuICAgICAgICBsZXQgYXNzb2NUYWJsZSA9IHt9LCBjb3VudGVyID0gMCwgY2FjaGUgPSB7fTsgICAgICAgXG5cbiAgICAgICAgYXNzb2NpYXRpb25zLmZvckVhY2goYXNzb2MgPT4ge1xuICAgICAgICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdChhc3NvYykpIHtcbiAgICAgICAgICAgICAgICBhc3NvYyA9IHRoaXMuX3RyYW5zbGF0ZVNjaGVtYU5hbWVUb0RiKGFzc29jLCB0aGlzLmRiLnNjaGVtYU5hbWUpO1xuXG4gICAgICAgICAgICAgICAgbGV0IGFsaWFzID0gYXNzb2MuYWxpYXM7XG4gICAgICAgICAgICAgICAgaWYgKCFhc3NvYy5hbGlhcykge1xuICAgICAgICAgICAgICAgICAgICBhbGlhcyA9ICc6am9pbicgKyArK2NvdW50ZXI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYXNzb2NUYWJsZVthbGlhc10gPSB7IFxuICAgICAgICAgICAgICAgICAgICBlbnRpdHk6IGFzc29jLmVudGl0eSwgXG4gICAgICAgICAgICAgICAgICAgIGpvaW5UeXBlOiBhc3NvYy50eXBlLCBcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0OiBhc3NvYy5vdXRwdXQsXG4gICAgICAgICAgICAgICAgICAgIGtleTogYXNzb2Mua2V5LFxuICAgICAgICAgICAgICAgICAgICBhbGlhcyxcbiAgICAgICAgICAgICAgICAgICAgb246IGFzc29jLm9uLFxuICAgICAgICAgICAgICAgICAgICAuLi4oYXNzb2MuZGF0YXNldCA/IHRoaXMuZGIuY29ubmVjdG9yLmJ1aWxkUXVlcnkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzb2MuZW50aXR5LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NvYy5tb2RlbC5fcHJlcGFyZVF1ZXJpZXMoeyAuLi5hc3NvYy5kYXRhc2V0LCAkdmFyaWFibGVzOiBmaW5kT3B0aW9ucy4kdmFyaWFibGVzIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApIDoge30pICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2FkQXNzb2NJbnRvVGFibGUoYXNzb2NUYWJsZSwgY2FjaGUsIGFzc29jKTtcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcbiAgICAgICAgfSk7ICAgICAgICBcblxuICAgICAgICByZXR1cm4gYXNzb2NUYWJsZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0geyp9IGFzc29jVGFibGUgLSBIaWVyYXJjaHkgd2l0aCBzdWJBc3NvY3NcbiAgICAgKiBAcGFyYW0geyp9IGNhY2hlIC0gRG90dGVkIHBhdGggYXMga2V5XG4gICAgICogQHBhcmFtIHsqfSBhc3NvYyAtIERvdHRlZCBwYXRoXG4gICAgICovXG4gICAgc3RhdGljIF9sb2FkQXNzb2NJbnRvVGFibGUoYXNzb2NUYWJsZSwgY2FjaGUsIGFzc29jKSB7XG4gICAgICAgIGlmIChjYWNoZVthc3NvY10pIHJldHVybiBjYWNoZVthc3NvY107XG5cbiAgICAgICAgbGV0IGxhc3RQb3MgPSBhc3NvYy5sYXN0SW5kZXhPZignLicpOyAgICAgICAgXG4gICAgICAgIGxldCByZXN1bHQ7ICBcblxuICAgICAgICBpZiAobGFzdFBvcyA9PT0gLTEpIHsgICAgICAgICBcbiAgICAgICAgICAgIC8vZGlyZWN0IGFzc29jaWF0aW9uXG4gICAgICAgICAgICBsZXQgYXNzb2NJbmZvID0geyAuLi50aGlzLm1ldGEuYXNzb2NpYXRpb25zW2Fzc29jXSB9OyAgIFxuICAgICAgICAgICAgaWYgKF8uaXNFbXB0eShhc3NvY0luZm8pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVlc3RFcnJvcihgRW50aXR5IFwiJHt0aGlzLm1ldGEubmFtZX1cIiBkb2VzIG5vdCBoYXZlIHRoZSBhc3NvY2lhdGlvbiBcIiR7YXNzb2N9XCIuYClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVzdWx0ID0gY2FjaGVbYXNzb2NdID0gYXNzb2NUYWJsZVthc3NvY10gPSB7IC4uLnRoaXMuX3RyYW5zbGF0ZVNjaGVtYU5hbWVUb0RiKGFzc29jSW5mbykgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBiYXNlID0gYXNzb2Muc3Vic3RyKDAsIGxhc3RQb3MpO1xuICAgICAgICAgICAgbGV0IGxhc3QgPSBhc3NvYy5zdWJzdHIobGFzdFBvcysxKTsgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IGJhc2VOb2RlID0gY2FjaGVbYmFzZV07XG4gICAgICAgICAgICBpZiAoIWJhc2VOb2RlKSB7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGJhc2VOb2RlID0gdGhpcy5fbG9hZEFzc29jSW50b1RhYmxlKGFzc29jVGFibGUsIGNhY2hlLCBiYXNlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcblxuICAgICAgICAgICAgbGV0IGVudGl0eSA9IGJhc2VOb2RlLm1vZGVsIHx8IHRoaXMuZGIubW9kZWwoYmFzZU5vZGUuZW50aXR5KTtcbiAgICAgICAgICAgIGxldCBhc3NvY0luZm8gPSB7IC4uLmVudGl0eS5tZXRhLmFzc29jaWF0aW9uc1tsYXN0XSB9O1xuICAgICAgICAgICAgaWYgKF8uaXNFbXB0eShhc3NvY0luZm8pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVlc3RFcnJvcihgRW50aXR5IFwiJHtlbnRpdHkubWV0YS5uYW1lfVwiIGRvZXMgbm90IGhhdmUgdGhlIGFzc29jaWF0aW9uIFwiJHthc3NvY31cIi5gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVzdWx0ID0geyAuLi5lbnRpdHkuX3RyYW5zbGF0ZVNjaGVtYU5hbWVUb0RiKGFzc29jSW5mbywgdGhpcy5kYikgfTtcblxuICAgICAgICAgICAgaWYgKCFiYXNlTm9kZS5zdWJBc3NvY3MpIHtcbiAgICAgICAgICAgICAgICBiYXNlTm9kZS5zdWJBc3NvY3MgPSB7fTtcbiAgICAgICAgICAgIH0gXG5cbiAgICAgICAgICAgIGNhY2hlW2Fzc29jXSA9IGJhc2VOb2RlLnN1YkFzc29jc1tsYXN0XSA9IHJlc3VsdDtcbiAgICAgICAgfSAgICAgIFxuXG4gICAgICAgIGlmIChyZXN1bHQuYXNzb2MpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvYWRBc3NvY0ludG9UYWJsZShhc3NvY1RhYmxlLCBjYWNoZSwgYXNzb2MgKyAnLicgKyByZXN1bHQuYXNzb2MpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBzdGF0aWMgX3RyYW5zbGF0ZVNjaGVtYU5hbWVUb0RiKGFzc29jLCBjdXJyZW50RGIpIHtcbiAgICAgICAgaWYgKGFzc29jLmVudGl0eS5pbmRleE9mKCcuJykgPiAwKSB7XG4gICAgICAgICAgICBsZXQgWyBzY2hlbWFOYW1lLCBlbnRpdHlOYW1lIF0gPSBhc3NvYy5lbnRpdHkuc3BsaXQoJy4nLCAyKTtcblxuICAgICAgICAgICAgbGV0IGFwcCA9IHRoaXMuZGIuYXBwO1xuICAgICAgICAgICAgaWYgKCFhcHApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXBwbGljYXRpb25FcnJvcignQ3Jvc3MgZGIgYXNzb2NpYXRpb24gcmVxdWlyZXMgdGhlIGRiIG9iamVjdCBoYXZlIGFjY2VzcyB0byBvdGhlciBkYiBvYmplY3QuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCByZWZEYiA9IGFwcC5kYihzY2hlbWFOYW1lKTtcbiAgICAgICAgICAgIGlmICghcmVmRGIpIHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFwcGxpY2F0aW9uRXJyb3IoYFRoZSByZWZlcmVuY2VkIHNjaGVtYSBcIiR7c2NoZW1hTmFtZX1cIiBkb2VzIG5vdCBoYXZlIGRiIG1vZGVsIGluIHRoZSBzYW1lIGFwcGxpY2F0aW9uLmApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhc3NvYy5lbnRpdHkgPSByZWZEYi5jb25uZWN0b3IuZGF0YWJhc2UgKyAnLicgKyBlbnRpdHlOYW1lO1xuICAgICAgICAgICAgYXNzb2MubW9kZWwgPSByZWZEYi5tb2RlbChlbnRpdHlOYW1lKTtcblxuICAgICAgICAgICAgaWYgKCFhc3NvYy5tb2RlbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcHBsaWNhdGlvbkVycm9yKGBGYWlsZWQgbG9hZCB0aGUgZW50aXR5IG1vZGVsIFwiJHtzY2hlbWFOYW1lfS4ke2VudGl0eU5hbWV9XCIuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhc3NvYy5tb2RlbCA9IHRoaXMuZGIubW9kZWwoYXNzb2MuZW50aXR5KTsgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGN1cnJlbnREYiAmJiBjdXJyZW50RGIgIT09IHRoaXMuZGIpIHtcbiAgICAgICAgICAgICAgICBhc3NvYy5lbnRpdHkgPSB0aGlzLmRiLmNvbm5lY3Rvci5kYXRhYmFzZSArICcuJyArIGFzc29jLmVudGl0eTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghYXNzb2Mua2V5KSB7XG4gICAgICAgICAgICBhc3NvYy5rZXkgPSBhc3NvYy5tb2RlbC5tZXRhLmtleUZpZWxkOyAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhc3NvYztcbiAgICB9XG5cbiAgICBzdGF0aWMgX21hcFJlY29yZHNUb09iamVjdHMoW3Jvd3MsIGNvbHVtbnMsIGFsaWFzTWFwXSwgaGllcmFyY2h5KSB7XG4gICAgICAgIGxldCBtYWluSW5kZXggPSB7fTsgICAgICAgIFxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgZnVuY3Rpb24gbWVyZ2VSZWNvcmQoZXhpc3RpbmdSb3csIHJvd09iamVjdCwgYXNzb2NpYXRpb25zLCBub2RlUGF0aCkgeyAgICAgICAgICAgIFxuICAgICAgICAgICAgXy5lYWNoKGFzc29jaWF0aW9ucywgKHsgc3FsLCBrZXksIGxpc3QsIHN1YkFzc29jcyB9LCBhbmNob3IpID0+IHsgXG4gICAgICAgICAgICAgICAgaWYgKHNxbCkgcmV0dXJuOyAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50UGF0aCA9IG5vZGVQYXRoLmNvbmNhdCgpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRQYXRoLnB1c2goYW5jaG9yKTtcblxuICAgICAgICAgICAgICAgIGxldCBvYmpLZXkgPSAnOicgKyBhbmNob3I7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxldCBzdWJPYmogPSByb3dPYmplY3Rbb2JqS2V5XTtcblxuICAgICAgICAgICAgICAgIGlmICghc3ViT2JqKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgc3ViSW5kZXhlcyA9IGV4aXN0aW5nUm93LnN1YkluZGV4ZXNbb2JqS2V5XTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBqb2luZWQgYW4gZW1wdHkgcmVjb3JkXG4gICAgICAgICAgICAgICAgbGV0IHJvd0tleSA9IHN1Yk9ialtrZXldO1xuICAgICAgICAgICAgICAgIGlmIChfLmlzTmlsKHJvd0tleSkpIHJldHVybjtcblxuICAgICAgICAgICAgICAgIGxldCBleGlzdGluZ1N1YlJvdyA9IHN1YkluZGV4ZXMgJiYgc3ViSW5kZXhlc1tyb3dLZXldO1xuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ1N1YlJvdykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3ViQXNzb2NzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXJnZVJlY29yZChleGlzdGluZ1N1YlJvdywgc3ViT2JqLCBzdWJBc3NvY3MsIGN1cnJlbnRQYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFsaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXBwbGljYXRpb25FcnJvcihgVGhlIHN0cnVjdHVyZSBvZiBhc3NvY2lhdGlvbiBcIiR7Y3VycmVudFBhdGguam9pbignLicpfVwiIHdpdGggW2tleT0ke2tleX1dIG9mIGVudGl0eSBcIiR7c2VsZi5tZXRhLm5hbWV9XCIgc2hvdWxkIGJlIGEgbGlzdC5gLCB7IGV4aXN0aW5nUm93LCByb3dPYmplY3QgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nUm93LnJvd09iamVjdFtvYmpLZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZ1Jvdy5yb3dPYmplY3Rbb2JqS2V5XS5wdXNoKHN1Yk9iaik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZ1Jvdy5yb3dPYmplY3Rbb2JqS2V5XSA9IFsgc3ViT2JqIF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGxldCBzdWJJbmRleCA9IHsgXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dPYmplY3Q6IHN1Yk9iaiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJBc3NvY3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YkluZGV4LnN1YkluZGV4ZXMgPSBidWlsZFN1YkluZGV4ZXMoc3ViT2JqLCBzdWJBc3NvY3MpXG4gICAgICAgICAgICAgICAgICAgIH0gICAgXG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzdWJJbmRleGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXBwbGljYXRpb25FcnJvcihgVGhlIHN1YkluZGV4ZXMgb2YgYXNzb2NpYXRpb24gXCIke2N1cnJlbnRQYXRoLmpvaW4oJy4nKX1cIiB3aXRoIFtrZXk9JHtrZXl9XSBvZiBlbnRpdHkgXCIke3NlbGYubWV0YS5uYW1lfVwiIGRvZXMgbm90IGV4aXN0LmAsIHsgZXhpc3RpbmdSb3csIHJvd09iamVjdCB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHN1YkluZGV4ZXNbcm93S2V5XSA9IHN1YkluZGV4OyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBidWlsZFN1YkluZGV4ZXMocm93T2JqZWN0LCBhc3NvY2lhdGlvbnMpIHtcbiAgICAgICAgICAgIGxldCBpbmRleGVzID0ge307XG5cbiAgICAgICAgICAgIF8uZWFjaChhc3NvY2lhdGlvbnMsICh7IHNxbCwga2V5LCBsaXN0LCBzdWJBc3NvY3MgfSwgYW5jaG9yKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNxbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYXNzZXJ0OiBrZXk7XG5cbiAgICAgICAgICAgICAgICBsZXQgb2JqS2V5ID0gJzonICsgYW5jaG9yO1xuICAgICAgICAgICAgICAgIGxldCBzdWJPYmplY3QgPSByb3dPYmplY3Rbb2JqS2V5XTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGV0IHN1YkluZGV4ID0geyBcbiAgICAgICAgICAgICAgICAgICAgcm93T2JqZWN0OiBzdWJPYmplY3QgXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmIChsaXN0KSB7ICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICghc3ViT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvL21hbnkgdG8gKiAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChfLmlzTmlsKHN1Yk9iamVjdFtrZXldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9zdWJPYmplY3Qgbm90IGV4aXN0LCBqdXN0IGZpbGxlZCB3aXRoIG51bGwgYnkgam9pbmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93T2JqZWN0W29iaktleV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk9iamVjdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3dPYmplY3Rbb2JqS2V5XSA9IFsgc3ViT2JqZWN0IF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN1Yk9iamVjdCAmJiBfLmlzTmlsKHN1Yk9iamVjdFtrZXldKSkge1xuICAgICAgICAgICAgICAgICAgICBzdWJPYmplY3QgPSByb3dPYmplY3Rbb2JqS2V5XSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHN1Yk9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3ViQXNzb2NzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJJbmRleC5zdWJJbmRleGVzID0gYnVpbGRTdWJJbmRleGVzKHN1Yk9iamVjdCwgc3ViQXNzb2NzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGluZGV4ZXNbb2JqS2V5XSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFtzdWJPYmplY3Rba2V5XV06IHN1YkluZGV4XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7ICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGluZGV4ZXM7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgYXJyYXlPZk9ianMgPSBbXTtcblxuICAgICAgICAvL3Byb2Nlc3MgZWFjaCByb3dcbiAgICAgICAgcm93cy5mb3JFYWNoKChyb3csIGkpID0+IHtcbiAgICAgICAgICAgIGxldCByb3dPYmplY3QgPSB7fTsgLy8gaGFzaC1zdHlsZSBkYXRhIHJvd1xuICAgICAgICAgICAgbGV0IHRhYmxlQ2FjaGUgPSB7fTsgLy8gZnJvbSBhbGlhcyB0byBjaGlsZCBwcm9wIG9mIHJvd09iamVjdFxuXG4gICAgICAgICAgICByb3cucmVkdWNlKChyZXN1bHQsIHZhbHVlLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGNvbCA9IGNvbHVtbnNbaV07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGNvbC50YWJsZSA9PT0gJ0EnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtjb2wubmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICBcbiAgICAgICAgICAgICAgICAgICAgbGV0IGJ1Y2tldCA9IHRhYmxlQ2FjaGVbY29sLnRhYmxlXTsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoYnVja2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2FscmVhZHkgbmVzdGVkIGluc2lkZSBcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1Y2tldFtjb2wubmFtZV0gPSB2YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5vZGVQYXRoID0gYWxpYXNNYXBbY29sLnRhYmxlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlUGF0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdWJPYmplY3QgPSB7IFtjb2wubmFtZV06IHZhbHVlIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVDYWNoZVtjb2wudGFibGVdID0gc3ViT2JqZWN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFZhbHVlQnlQYXRoKHJlc3VsdCwgbm9kZVBhdGgsIHN1Yk9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfSwgcm93T2JqZWN0KTsgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgcm93S2V5ID0gcm93T2JqZWN0W3RoaXMubWV0YS5rZXlGaWVsZF07XG4gICAgICAgICAgICBsZXQgZXhpc3RpbmdSb3cgPSBtYWluSW5kZXhbcm93S2V5XTtcbiAgICAgICAgICAgIGlmIChleGlzdGluZ1Jvdykge1xuICAgICAgICAgICAgICAgIG1lcmdlUmVjb3JkKGV4aXN0aW5nUm93LCByb3dPYmplY3QsIGhpZXJhcmNoeSwgW10pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcnJheU9mT2Jqcy5wdXNoKHJvd09iamVjdCk7XG4gICAgICAgICAgICAgICAgbWFpbkluZGV4W3Jvd0tleV0gPSB7IFxuICAgICAgICAgICAgICAgICAgICByb3dPYmplY3QsIFxuICAgICAgICAgICAgICAgICAgICBzdWJJbmRleGVzOiBidWlsZFN1YkluZGV4ZXMocm93T2JqZWN0LCBoaWVyYXJjaHkpXG4gICAgICAgICAgICAgICAgfTsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBhcnJheU9mT2JqcztcbiAgICB9XG5cbiAgICBzdGF0aWMgX2V4dHJhY3RBc3NvY2lhdGlvbnMoZGF0YSkge1xuICAgICAgICBsZXQgcmF3ID0ge30sIGFzc29jcyA9IHt9O1xuICAgICAgICBcbiAgICAgICAgXy5mb3JPd24oZGF0YSwgKHYsIGspID0+IHtcbiAgICAgICAgICAgIGlmIChrLnN0YXJ0c1dpdGgoJzonKSkge1xuICAgICAgICAgICAgICAgIGFzc29jc1trLnN1YnN0cigxKV0gPSB2O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByYXdba10gPSB2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBbIHJhdywgYXNzb2NzIF07ICAgICAgICBcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgX2NyZWF0ZUFzc29jc18oY29udGV4dCwgYXNzb2NzKSB7XG4gICAgICAgIGxldCBtZXRhID0gdGhpcy5tZXRhLmFzc29jaWF0aW9ucztcbiAgICAgICAgbGV0IGtleVZhbHVlID0gY29udGV4dC5yZXR1cm5bdGhpcy5tZXRhLmtleUZpZWxkXTtcblxuICAgICAgICBpZiAoXy5pc05pbChrZXlWYWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBcHBsaWNhdGlvbkVycm9yKCdNaXNzaW5nIHJlcXVpcmVkIHByaW1hcnkga2V5IGZpZWxkIHZhbHVlLiBFbnRpdHk6ICcgKyB0aGlzLm1ldGEubmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZWFjaEFzeW5jXyhhc3NvY3MsIGFzeW5jIChkYXRhLCBhbmNob3IpID0+IHtcbiAgICAgICAgICAgIGxldCBhc3NvY01ldGEgPSBtZXRhW2FuY2hvcl07XG4gICAgICAgICAgICBpZiAoIWFzc29jTWV0YSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcHBsaWNhdGlvbkVycm9yKGBVbmtub3duIGFzc29jaWF0aW9uIFwiJHthbmNob3J9XCIgb2YgZW50aXR5IFwiJHt0aGlzLm1ldGEubmFtZX1cIi5gKTtcbiAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgbGV0IGFzc29jTW9kZWwgPSB0aGlzLmRiLm1vZGVsKGFzc29jTWV0YS5lbnRpdHkpO1xuXG4gICAgICAgICAgICBpZiAoYXNzb2NNZXRhLmxpc3QpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gXy5jYXN0QXJyYXkoZGF0YSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZWFjaEFzeW5jXyhkYXRhLCBpdGVtID0+IGFzc29jTW9kZWwuY3JlYXRlXyh7IC4uLml0ZW0sIC4uLihhc3NvY01ldGEuZmllbGQgPyB7IFthc3NvY01ldGEuZmllbGRdOiBrZXlWYWx1ZSB9IDoge30pIH0sIGNvbnRleHQub3B0aW9ucywgY29udGV4dC5jb25uT3B0aW9ucykpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghXy5pc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVlc3RFcnJvcihgSW52YWxpZCB0eXBlIG9mIGFzc29jaWF0ZWQgZW50aXR5ICgke2Fzc29jTWV0YS5lbnRpdHl9KSBkYXRhIHRyaWdnZXJlZCBmcm9tIFwiJHt0aGlzLm1ldGEubmFtZX1cIiBlbnRpdHkuIFNpbmd1bGFyIHZhbHVlIGV4cGVjdGVkICgke2FuY2hvcn0pLCBidXQgYW4gYXJyYXkgaXMgZ2l2ZW4gaW5zdGVhZC5gKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIWFzc29jTWV0YS5hc3NvYykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXBwbGljYXRpb25FcnJvcihgVGhlIGFzc29jaWF0ZWQgZmllbGQgb2YgcmVsYXRpb24gXCIke2FuY2hvcn1cIiBkb2VzIG5vdCBleGlzdCBpbiB0aGUgZW50aXR5IG1ldGEgZGF0YS5gKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkYXRhID0geyBbYXNzb2NNZXRhLmFzc29jXTogZGF0YSB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYXNzb2NNb2RlbC5jcmVhdGVfKHsgLi4uZGF0YSwgLi4uKGFzc29jTWV0YS5maWVsZCA/IHsgW2Fzc29jTWV0YS5maWVsZF06IGtleVZhbHVlIH0gOiB7fSkgfSwgY29udGV4dC5vcHRpb25zLCBjb250ZXh0LmNvbm5PcHRpb25zKTsgIFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgX3VwZGF0ZUFzc29jc18oY29udGV4dCwgYXNzb2NzKSB7XG4gICAgICAgIGxldCBtZXRhID0gdGhpcy5tZXRhLmFzc29jaWF0aW9ucztcbiAgICAgICAgbGV0IGtleVZhbHVlID0gY29udGV4dC5yZXR1cm5bdGhpcy5tZXRhLmtleUZpZWxkXTtcblxuICAgICAgICBpZiAoXy5pc05pbChrZXlWYWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBcHBsaWNhdGlvbkVycm9yKCdNaXNzaW5nIHJlcXVpcmVkIHByaW1hcnkga2V5IGZpZWxkIHZhbHVlLiBFbnRpdHk6ICcgKyB0aGlzLm1ldGEubmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZWFjaEFzeW5jXyhhc3NvY3MsIGFzeW5jIChkYXRhLCBhbmNob3IpID0+IHtcbiAgICAgICAgICAgIGxldCBhc3NvY01ldGEgPSBtZXRhW2FuY2hvcl07XG4gICAgICAgICAgICBpZiAoIWFzc29jTWV0YSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcHBsaWNhdGlvbkVycm9yKGBVbmtub3duIGFzc29jaWF0aW9uIFwiJHthbmNob3J9XCIgb2YgZW50aXR5IFwiJHt0aGlzLm1ldGEubmFtZX1cIi5gKTtcbiAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgbGV0IGFzc29jTW9kZWwgPSB0aGlzLmRiLm1vZGVsKGFzc29jTWV0YS5lbnRpdHkpO1xuXG4gICAgICAgICAgICBpZiAoYXNzb2NNZXRhLmxpc3QpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gXy5jYXN0QXJyYXkoZGF0YSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZWFjaEFzeW5jXyhkYXRhLCBpdGVtID0+IGFzc29jTW9kZWwucmVwbGFjZU9uZV8oeyAuLi5pdGVtLCAuLi4oYXNzb2NNZXRhLmZpZWxkID8geyBbYXNzb2NNZXRhLmZpZWxkXToga2V5VmFsdWUgfSA6IHt9KSB9LCBudWxsLCBjb250ZXh0LmNvbm5PcHRpb25zKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFfLmlzUGxhaW5PYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWVzdEVycm9yKGBJbnZhbGlkIHR5cGUgb2YgYXNzb2NpYXRlZCBlbnRpdHkgKCR7YXNzb2NNZXRhLmVudGl0eX0pIGRhdGEgdHJpZ2dlcmVkIGZyb20gXCIke3RoaXMubWV0YS5uYW1lfVwiIGVudGl0eS4gU2luZ3VsYXIgdmFsdWUgZXhwZWN0ZWQgKCR7YW5jaG9yfSksIGJ1dCBhbiBhcnJheSBpcyBnaXZlbiBpbnN0ZWFkLmApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghYXNzb2NNZXRhLmFzc29jKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcHBsaWNhdGlvbkVycm9yKGBUaGUgYXNzb2NpYXRlZCBmaWVsZCBvZiByZWxhdGlvbiBcIiR7YW5jaG9yfVwiIGRvZXMgbm90IGV4aXN0IGluIHRoZSBlbnRpdHkgbWV0YSBkYXRhLmApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRhdGEgPSB7IFthc3NvY01ldGEuYXNzb2NdOiBkYXRhIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBhc3NvY01vZGVsLnJlcGxhY2VPbmVfKHsgLi4uZGF0YSwgLi4uKGFzc29jTWV0YS5maWVsZCA/IHsgW2Fzc29jTWV0YS5maWVsZF06IGtleVZhbHVlIH0gOiB7fSkgfSwgbnVsbCwgY29udGV4dC5jb25uT3B0aW9ucyk7ICBcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE15U1FMRW50aXR5TW9kZWw7Il19