{"version":3,"file":"sugar.js","names":["require","assert","Lang","baseQuery","model","name","column","alias","findOptions","connOptions","projection","type","args","toLowerCase","$projection","push","data","findAll_","baseUpdate","method","value","updateOptions","Number","isNaN","$inc","$dec","updateOne_","module","exports","count_","max_","min_","sum_","increment_","decrement_","findOrCreate_","Array","isArray","Object","keys","length","$query","forEach","key","result","findOne_","created","create_"],"sources":["../../../../src/drivers/mysql/mixin/sugar.js"],"sourcesContent":["'use strict';\nconst assert = require('assert');\nconst Lang = require('../../../utils/lang');\n\nasync function baseQuery(model, name, column, alias, findOptions, connOptions) {\n    const projection = {\n        type: 'function',\n        name,\n        args: [column || '*'],\n        alias: alias || name.toLowerCase()\n    }\n\n    if (findOptions) {\n        if (findOptions.$projection) {\n            findOptions.$projection.push(projection);\n        } else {\n            findOptions.$projection = [projection];\n        }\n    } else {\n        findOptions = {\n            $projection: [projection]\n        }\n    }\n\n    const data = await model.findAll_(findOptions, connOptions);\n    return data[0];\n}\n\nasync function baseUpdate(model, method, column, value, updateOptions, connOptions) {\n    assert(column, 'Column name is required.');\n    assert(((typeof value) === 'number' && !Number.isNaN(value)), 'Value must be number.');\n\n    value = value || 1;\n\n    const data = {};\n    data[column] = method === 'increment' ? Lang.$inc(column, value) : Lang.$dec(column, value);\n    return await model.updateOne_(data, updateOptions, connOptions);\n}\n\nmodule.exports = {\n    async count_(column, alias, findOptions, connOptions) {\n        return baseQuery(this, 'COUNT', column, alias, findOptions, connOptions);\n    },\n    async max_(column, alias, findOptions, connOptions) {\n        assert(column, 'Column name is required.');\n\n        return baseQuery(this, 'MAX', column, alias, findOptions, connOptions);\n    },\n    async min_(column, alias, findOptions, connOptions) {\n        assert(column, 'Column name is required.');\n\n        return baseQuery(this, 'MIN', column, alias, findOptions, connOptions);\n    },\n    async sum_(column, alias, findOptions, connOptions) {\n        assert(column, 'Column name is required.');\n\n        return baseQuery(this, 'SUM', column, alias, findOptions, connOptions);\n    },\n    async increment_(column, value, updateOptions, connOptions) {\n        return baseUpdate(this, 'increment', column, value, updateOptions, connOptions);\n    },\n    async decrement_(column, value, updateOptions, connOptions) {\n        return baseUpdate(this, 'decrement', column, value, updateOptions, connOptions);\n    },\n    async findOrCreate_(data, findOptions, connOptions) {\n        // eslint-disable-next-line valid-typeof\n        assert(!(Array.isArray ? Array.isArray(data) : ((typeof data) === '[object Array]')), 'Data can not be array.');\n        assert((data !== null) && ((typeof data) === 'object') && Object.keys(data).length, 'Data can not be empty.');\n\n        // eslint-disable-next-line valid-typeof\n        assert(!(Array.isArray ? Array.isArray(findOptions) : ((typeof findOptions) === '[object Array]')), 'FindOptions can not be array.');\n        assert((findOptions !== null) && ((typeof findOptions) === 'object') && Object.keys(findOptions).length, 'FindOptions can not be empty.');\n\n        assert((findOptions.$query !== null) && ((typeof findOptions.$query) === 'object') && Object.keys(findOptions.$query).length, 'FindOptions $query can not be empty.');\n\n        Object.keys(findOptions.$query).forEach(key => {\n            if (!data[key]) {\n                data[key] = findOptions.$query[key]\n            }\n        });\n\n        let result = await this.findOne_(findOptions, connOptions);\n        if (result) {\n            return { created: false, result };\n        } else {\n            result = await this.create_(data, null, connOptions);\n            return { created: true, result };\n        }\n    }\n}"],"mappings":"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"}