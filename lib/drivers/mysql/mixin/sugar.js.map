{"version":3,"file":"sugar.js","names":["assert","require","Lang","baseQuery","model","name","column","alias","findOptions","connOptions","projection","type","args","toLowerCase","$projection","push","data","findAll_","baseUpdate","method","value","updateOptions","Number","isNaN","$inc","$dec","updateOne_","module","exports","count_","max_","min_","sum_","increment_","decrement_","findOrCreate_","Array","isArray","Object","keys","length","$query","forEach","key","result","findOne_","created","create_"],"sources":["../../../../src/drivers/mysql/mixin/sugar.js"],"sourcesContent":["'use strict';\nconst assert = require('assert');\nconst Lang = require('../../../utils/lang');\n\nasync function baseQuery(model, name, column, alias, findOptions, connOptions) {\n    const projection = {\n        type: 'function',\n        name,\n        args: [column || '*'],\n        alias: alias || name.toLowerCase()\n    }\n\n    if (findOptions) {\n        if (findOptions.$projection) {\n            findOptions.$projection.push(projection);\n        } else {\n            findOptions.$projection = [projection];\n        }\n    } else {\n        findOptions = {\n            $projection: [projection]\n        }\n    }\n\n    const data = await model.findAll_(findOptions, connOptions);\n    return data[0];\n}\n\nasync function baseUpdate(model, method, column, value, updateOptions, connOptions) {\n    assert(column, 'Column name is required.');\n    assert(((typeof value) === 'number' && !Number.isNaN(value)), 'Value must be number.');\n\n    value = value || 1;\n\n    const data = {};\n    data[column] = method === 'increment' ? Lang.$inc(column, value) : Lang.$dec(column, value);\n    return await model.updateOne_(data, updateOptions, connOptions);\n}\n\nmodule.exports = {\n    async count_(column, alias, findOptions, connOptions) {\n        return baseQuery(this, 'COUNT', column, alias, findOptions, connOptions);\n    },\n    async max_(column, alias, findOptions, connOptions) {\n        assert(column, 'Column name is required.');\n\n        return baseQuery(this, 'MAX', column, alias, findOptions, connOptions);\n    },\n    async min_(column, alias, findOptions, connOptions) {\n        assert(column, 'Column name is required.');\n\n        return baseQuery(this, 'MIN', column, alias, findOptions, connOptions);\n    },\n    async sum_(column, alias, findOptions, connOptions) {\n        assert(column, 'Column name is required.');\n\n        return baseQuery(this, 'SUM', column, alias, findOptions, connOptions);\n    },\n    async increment_(column, value, updateOptions, connOptions) {\n        return baseUpdate(this, 'increment', column, value, updateOptions, connOptions);\n    },\n    async decrement_(column, value, updateOptions, connOptions) {\n        return baseUpdate(this, 'decrement', column, value, updateOptions, connOptions);\n    },\n    async findOrCreate_(data, findOptions, connOptions) {\n        // eslint-disable-next-line valid-typeof\n        assert(!(Array.isArray ? Array.isArray(data) : ((typeof data) === '[object Array]')), 'Data can not be array.');\n        assert((data !== null) && ((typeof data) === 'object') && Object.keys(data).length, 'Data can not be empty.');\n\n        // eslint-disable-next-line valid-typeof\n        assert(!(Array.isArray ? Array.isArray(findOptions) : ((typeof findOptions) === '[object Array]')), 'FindOptions can not be array.');\n        assert((findOptions !== null) && ((typeof findOptions) === 'object') && Object.keys(findOptions).length, 'FindOptions can not be empty.');\n\n        assert((findOptions.$query !== null) && ((typeof findOptions.$query) === 'object') && Object.keys(findOptions.$query).length, 'FindOptions $query can not be empty.');\n\n        Object.keys(findOptions.$query).forEach(key => {\n            if (!data[key]) {\n                data[key] = findOptions.$query[key]\n            }\n        });\n\n        let result = await this.findOne_(findOptions, connOptions);\n        if (result) {\n            return { created: false, result };\n        } else {\n            result = await this.create_(data, null, connOptions);\n            return { created: true, result };\n        }\n    }\n}"],"mappings":"AAAA;;;;AACA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,qBAAD,CAApB;;AAEA,eAAeE,SAAf,CAAyBC,KAAzB,EAAgCC,IAAhC,EAAsCC,MAAtC,EAA8CC,KAA9C,EAAqDC,WAArD,EAAkEC,WAAlE,EAA+E;EAC3E,MAAMC,UAAU,GAAG;IACfC,IAAI,EAAE,UADS;IAEfN,IAFe;IAGfO,IAAI,EAAE,CAACN,MAAM,IAAI,GAAX,CAHS;IAIfC,KAAK,EAAEA,KAAK,IAAIF,IAAI,CAACQ,WAAL;EAJD,CAAnB;;EAOA,IAAIL,WAAJ,EAAiB;IACb,IAAIA,WAAW,CAACM,WAAhB,EAA6B;MACzBN,WAAW,CAACM,WAAZ,CAAwBC,IAAxB,CAA6BL,UAA7B;IACH,CAFD,MAEO;MACHF,WAAW,CAACM,WAAZ,GAA0B,CAACJ,UAAD,CAA1B;IACH;EACJ,CAND,MAMO;IACHF,WAAW,GAAG;MACVM,WAAW,EAAE,CAACJ,UAAD;IADH,CAAd;EAGH;;EAED,MAAMM,IAAI,GAAG,MAAMZ,KAAK,CAACa,QAAN,CAAeT,WAAf,EAA4BC,WAA5B,CAAnB;EACA,OAAOO,IAAI,CAAC,CAAD,CAAX;AACH;;AAED,eAAeE,UAAf,CAA0Bd,KAA1B,EAAiCe,MAAjC,EAAyCb,MAAzC,EAAiDc,KAAjD,EAAwDC,aAAxD,EAAuEZ,WAAvE,EAAoF;EAChFT,MAAM,CAACM,MAAD,EAAS,0BAAT,CAAN;EACAN,MAAM,CAAG,OAAOoB,KAAR,KAAmB,QAAnB,IAA+B,CAACE,MAAM,CAACC,KAAP,CAAaH,KAAb,CAAlC,EAAwD,uBAAxD,CAAN;EAEAA,KAAK,GAAGA,KAAK,IAAI,CAAjB;EAEA,MAAMJ,IAAI,GAAG,EAAb;EACAA,IAAI,CAACV,MAAD,CAAJ,GAAea,MAAM,KAAK,WAAX,GAAyBjB,IAAI,CAACsB,IAAL,CAAUlB,MAAV,EAAkBc,KAAlB,CAAzB,GAAoDlB,IAAI,CAACuB,IAAL,CAAUnB,MAAV,EAAkBc,KAAlB,CAAnE;EACA,OAAO,MAAMhB,KAAK,CAACsB,UAAN,CAAiBV,IAAjB,EAAuBK,aAAvB,EAAsCZ,WAAtC,CAAb;AACH;;AAEDkB,MAAM,CAACC,OAAP,GAAiB;EACb,MAAMC,MAAN,CAAavB,MAAb,EAAqBC,KAArB,EAA4BC,WAA5B,EAAyCC,WAAzC,EAAsD;IAClD,OAAON,SAAS,CAAC,IAAD,EAAO,OAAP,EAAgBG,MAAhB,EAAwBC,KAAxB,EAA+BC,WAA/B,EAA4CC,WAA5C,CAAhB;EACH,CAHY;;EAIb,MAAMqB,IAAN,CAAWxB,MAAX,EAAmBC,KAAnB,EAA0BC,WAA1B,EAAuCC,WAAvC,EAAoD;IAChDT,MAAM,CAACM,MAAD,EAAS,0BAAT,CAAN;IAEA,OAAOH,SAAS,CAAC,IAAD,EAAO,KAAP,EAAcG,MAAd,EAAsBC,KAAtB,EAA6BC,WAA7B,EAA0CC,WAA1C,CAAhB;EACH,CARY;;EASb,MAAMsB,IAAN,CAAWzB,MAAX,EAAmBC,KAAnB,EAA0BC,WAA1B,EAAuCC,WAAvC,EAAoD;IAChDT,MAAM,CAACM,MAAD,EAAS,0BAAT,CAAN;IAEA,OAAOH,SAAS,CAAC,IAAD,EAAO,KAAP,EAAcG,MAAd,EAAsBC,KAAtB,EAA6BC,WAA7B,EAA0CC,WAA1C,CAAhB;EACH,CAbY;;EAcb,MAAMuB,IAAN,CAAW1B,MAAX,EAAmBC,KAAnB,EAA0BC,WAA1B,EAAuCC,WAAvC,EAAoD;IAChDT,MAAM,CAACM,MAAD,EAAS,0BAAT,CAAN;IAEA,OAAOH,SAAS,CAAC,IAAD,EAAO,KAAP,EAAcG,MAAd,EAAsBC,KAAtB,EAA6BC,WAA7B,EAA0CC,WAA1C,CAAhB;EACH,CAlBY;;EAmBb,MAAMwB,UAAN,CAAiB3B,MAAjB,EAAyBc,KAAzB,EAAgCC,aAAhC,EAA+CZ,WAA/C,EAA4D;IACxD,OAAOS,UAAU,CAAC,IAAD,EAAO,WAAP,EAAoBZ,MAApB,EAA4Bc,KAA5B,EAAmCC,aAAnC,EAAkDZ,WAAlD,CAAjB;EACH,CArBY;;EAsBb,MAAMyB,UAAN,CAAiB5B,MAAjB,EAAyBc,KAAzB,EAAgCC,aAAhC,EAA+CZ,WAA/C,EAA4D;IACxD,OAAOS,UAAU,CAAC,IAAD,EAAO,WAAP,EAAoBZ,MAApB,EAA4Bc,KAA5B,EAAmCC,aAAnC,EAAkDZ,WAAlD,CAAjB;EACH,CAxBY;;EAyBb,MAAM0B,aAAN,CAAoBnB,IAApB,EAA0BR,WAA1B,EAAuCC,WAAvC,EAAoD;IAEhDT,MAAM,CAAC,EAAEoC,KAAK,CAACC,OAAN,GAAgBD,KAAK,CAACC,OAAN,CAAcrB,IAAd,CAAhB,GAAwC,OAAOA,IAAR,KAAkB,gBAA3D,CAAD,EAAgF,wBAAhF,CAAN;IACAhB,MAAM,CAAEgB,IAAI,KAAK,IAAV,IAAqB,OAAOA,IAAR,KAAkB,QAAtC,IAAmDsB,MAAM,CAACC,IAAP,CAAYvB,IAAZ,EAAkBwB,MAAtE,EAA8E,wBAA9E,CAAN;IAGAxC,MAAM,CAAC,EAAEoC,KAAK,CAACC,OAAN,GAAgBD,KAAK,CAACC,OAAN,CAAc7B,WAAd,CAAhB,GAA+C,OAAOA,WAAR,KAAyB,gBAAzE,CAAD,EAA8F,+BAA9F,CAAN;IACAR,MAAM,CAAEQ,WAAW,KAAK,IAAjB,IAA4B,OAAOA,WAAR,KAAyB,QAApD,IAAiE8B,MAAM,CAACC,IAAP,CAAY/B,WAAZ,EAAyBgC,MAA3F,EAAmG,+BAAnG,CAAN;IAEAxC,MAAM,CAAEQ,WAAW,CAACiC,MAAZ,KAAuB,IAAxB,IAAmC,OAAOjC,WAAW,CAACiC,MAApB,KAAgC,QAAlE,IAA+EH,MAAM,CAACC,IAAP,CAAY/B,WAAW,CAACiC,MAAxB,EAAgCD,MAAhH,EAAwH,sCAAxH,CAAN;IAEAF,MAAM,CAACC,IAAP,CAAY/B,WAAW,CAACiC,MAAxB,EAAgCC,OAAhC,CAAwCC,GAAG,IAAI;MAC3C,IAAI,CAAC3B,IAAI,CAAC2B,GAAD,CAAT,EAAgB;QACZ3B,IAAI,CAAC2B,GAAD,CAAJ,GAAYnC,WAAW,CAACiC,MAAZ,CAAmBE,GAAnB,CAAZ;MACH;IACJ,CAJD;IAMA,IAAIC,MAAM,GAAG,MAAM,KAAKC,QAAL,CAAcrC,WAAd,EAA2BC,WAA3B,CAAnB;;IACA,IAAImC,MAAJ,EAAY;MACR,OAAO;QAAEE,OAAO,EAAE,KAAX;QAAkBF;MAAlB,CAAP;IACH,CAFD,MAEO;MACHA,MAAM,GAAG,MAAM,KAAKG,OAAL,CAAa/B,IAAb,EAAmB,IAAnB,EAAyBP,WAAzB,CAAf;MACA,OAAO;QAAEqC,OAAO,EAAE,IAAX;QAAiBF;MAAjB,CAAP;IACH;EACJ;;AAjDY,CAAjB"}