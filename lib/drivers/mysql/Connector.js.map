{"version":3,"file":"Connector.js","names":["_","require","tryRequire","mysql","Connector","ApplicationError","InvalidArgument","isQuoted","ntol","connSym","Symbol","for","MySQLConnector","typeCast","value","t","isLuxonDateTime","toISO","includeOffset","constructor","connectionString","options","escape","escapeId","format","raw","queryCount","alias","fieldName","type","name","args","$call","$as","nullOrIs","$exists","$eq","updatedCount","context","result","affectedRows","deletedCount","insertOne_","create_","updateOne_","update_","relational","acitveConnections","Set","executedCount","end_","size","conn","disconnect_","pool","end","log","connect_","connProps","createDatabase","database","multipleStatements","csKey","isEmpty","makeNewConnectionString","createConnection","getConnectionStringWithoutCredential","createPool","getConnection","add","has","delete","release","beginTransaction_","isolationLevel","find","IsolationLevels","key","query","ret","$$autocommit","commit_","rollback_","execute_","sql","params","_getConnection_","usePreparedStatement","logStatement","rowsAsArray","execute","rows1","rows2","err","info","truncate","length","_releaseConnection_","ping_","ping","model","data","insertIgnore","restOptions","push","upsertOne_","uniqueKeys","dataOnInsert","dataWithoutUK","omit","insertData","upsert","upsertMany_","fieldsOnInsert","dataArrayOnInsert","dataExprOnUpdate","Array","isArray","map","f","join","insertMany_","fields","queryOptions","connOptions","aliasMap","joinings","hasJoining","joiningParams","$relationships","_joinAssociations","forEach","p","$requireSplitColumns","_splitColumnsAsInput","hasWhere","whereClause","_joinCondition","returnUpdated","connection","keyField","isInteger","$limit","_1","_result","_changedKeys","separator","quotedSeparator","toString","split","replace_","delete_","deleteOptions","find_","condition","sqlInfo","buildQuery","totalCount","countSql","countResult","count","reverseAliasMap","reduce","nodePath","slice","concat","$skipOrm","$projection","$query","$groupBy","$orderBy","$offset","$totalCount","fromTable","withTables","subSql","selectColomns","_buildColumns","_buildGroupBy","_buildOrderBy","countSubject","_escapeIdWithAlias","getInsertedId","insertId","undefined","getNumOfAffectedRows","_generateAlias","index","anchor","verboseAlias","snakeCase","toUpperCase","associations","parentAliasKey","startId","each","assocInfo","joinType","on","output","entity","subAssocs","aliasKey","subJoinings","joinOperator","c","isPlainObject","oorType","_packValue","startsWith","Error","left","right","op","_wrapCondition","JSON","stringify","_replaceFieldNameWithAlias","mainEntity","parts","actualFieldName","pop","v","_packArray","array","statement","inject","isNil","$in","hasOperator","Object","keys","k","indexOf","columns","castArray","col","_buildColumn","lastDotIndex","lastIndexOf","substr","fullPath","aliasPrefix","windowFunctions","over","windowableFunctions","funcClause","prefix","$partitionBy","_buildPartitionBy","expr","groupBy","by","having","groupByClause","havingCluse","partitionBy","orderBy","asc","freeze","RepeatableRead","ReadCommitted","ReadUncommitted","Rerializable","driverLib","module","exports"],"sources":["../../../src/drivers/mysql/Connector.js"],"sourcesContent":["const { _ } = require('@genx/july');\nconst { tryRequire } = require('@genx/sys');\nconst mysql = tryRequire('mysql2/promise');\nconst Connector = require('../../Connector');\nconst { ApplicationError, InvalidArgument } = require('../../utils/Errors');\nconst { isQuoted } = require('../../utils/lang');\nconst ntol = require('number-to-letter');\n\nconst connSym = Symbol.for('conn');\n\n/**\n * MySQL data storage connector.\n * @class\n * @extends Connector\n */\nclass MySQLConnector extends Connector {\n    /**\n     * Transaction isolation level\n     * {@link https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html}\n     * @member {object}\n     */\n    static IsolationLevels = Object.freeze({\n        RepeatableRead: 'REPEATABLE READ',\n        ReadCommitted: 'READ COMMITTED',\n        ReadUncommitted: 'READ UNCOMMITTED',\n        Rerializable: 'SERIALIZABLE',\n    });\n\n    static windowFunctions = new Set([\n        'CUME_DIST',\n        'DENSE_RANK',\n        'FIRST_VALUE',\n        'LAG',\n        'LAST_VALUE',\n        'LEAD',\n        'NTH_VALUE',\n        'NTILE',\n        'PERCENT_RANK',\n        'RANK',\n        'ROW_NUMBER',\n    ]);\n\n    static windowableFunctions = new Set([\n        'AVG',\n        'BIT_AND',\n        'BIT_OR',\n        'BIT_XOR',\n        'COUNT',\n        'JSON_ARRAYAGG',\n        'JSON_OBJECTAGG',\n        'MAX',\n        'MIN',\n        'STDDEV_POP',\n        'STDDEV',\n        'STD',\n        'STDDEV_SAMP',\n        'SUM',\n        'VAR_POP',\n        'VARIANCE',\n        'VAR_SAMP',\n    ]);\n\n    escape = mysql.escape;\n    escapeId = mysql.escapeId;\n    format = mysql.format;\n    raw = mysql.raw;\n    queryCount = (alias, fieldName) => ({\n        type: 'function',\n        name: 'COUNT',\n        args: [fieldName || '*'],\n        alias: alias || 'count',\n    });\n\n    $call = (name, alias, args) => ({ type: 'function', name, alias, args });\n    $as = (name, alias) => ({ type: 'column', name, alias });\n\n    // in mysql, null value comparison will never return true, even null != 1\n    nullOrIs = (fieldName, value) => [\n        { [fieldName]: { $exists: false } },\n        { [fieldName]: { $eq: value } },\n    ];\n\n    updatedCount = (context) => context.result.affectedRows;\n    deletedCount = (context) => context.result.affectedRows;\n\n    typeCast(value) {\n        const t = typeof value;\n\n        if (t === 'boolean') return value ? 1 : 0;\n\n        if (t === 'object') {\n            if (value != null && value.isLuxonDateTime) {\n                return value.toISO({ includeOffset: false });\n            }\n        }\n\n        return value;\n    }\n\n    /**\n     * @param {string} name\n     * @param {object} options\n     * @property {boolean} [options.usePreparedStatement] - Flat to use prepared statement to improve query performance.\n     * @property {boolean} [options.logStatement] - Flag to log executed SQL statement.\n     */\n    constructor(connectionString, options) {\n        super('mysql', connectionString, options);\n\n        this.relational = true;\n        this.acitveConnections = new Set();\n        this.executedCount = 0;\n    }\n\n    /**\n     * Close all connection initiated by this connector.\n     */\n    async end_() {\n        if (this.acitveConnections.size > 0) {\n            for (const conn of this.acitveConnections) {\n                await this.disconnect_(conn);\n            }\n        }\n\n        if (this.pool) {\n            await this.pool.end();\n            this.log(\n                'verbose',\n                `Close connection pool \"${this.pool[connSym]}\".`\n            );\n            delete this.pool;\n        }\n    }\n\n    /**\n     * Create a database connection based on the default connection string of the connector and given options.\n     * @param {Object} [options] - Extra options for the connection, optional.\n     * @property {bool} [options.multipleStatements=false] - Allow running multiple statements at a time.\n     * @property {bool} [options.createDatabase=false] - Flag to used when creating a database.\n     * @returns {Promise.<MySQLConnection>}\n     */\n    async connect_(options) {\n        if (options) {\n            const connProps = {};\n\n            if (options.createDatabase) {\n                // remove the database from connection\n                connProps.database = '';\n            }\n\n            if (options.multipleStatements) {\n                connProps.options = { multipleStatements: true };\n            }\n\n            const csKey = _.isEmpty(connProps)\n                ? null\n                : this.makeNewConnectionString(connProps);\n\n            if (csKey && csKey !== this.connectionString) {\n                // create standalone connection\n                const conn = await mysql.createConnection(csKey);\n                conn[connSym] =\n                    this.getConnectionStringWithoutCredential(csKey);\n                this.log(\n                    'verbose',\n                    `Create non-pool connection to \"${conn[connSym]}\".`\n                );\n\n                return conn;\n            }\n        }\n\n        if (!this.pool) {\n            this.pool = mysql.createPool(this.connectionString);\n            this.pool[connSym] = this.getConnectionStringWithoutCredential();\n            this.log(\n                'verbose',\n                `Create connection pool to \"${this.pool[connSym]}\".`\n            );\n        }\n\n        const conn = await this.pool.getConnection();\n        this.acitveConnections.add(conn);\n\n        this.log('debug', `Get connection from pool \"${this.pool[connSym]}\".`);\n\n        return conn;\n    }\n\n    /**\n     * Close a database connection.\n     * @param {MySQLConnection} conn - MySQL connection.\n     */\n    async disconnect_(conn) {\n        if (this.acitveConnections.has(conn)) {\n            this.log(\n                'debug',\n                `Release connection to pool \"${this.pool[connSym]}\".`\n            );\n            this.acitveConnections.delete(conn);\n            return conn.release();\n        } else {\n            this.log(\n                'verbose',\n                `Disconnect non-pool connection from \"${conn[connSym]}\".`\n            );\n            // not created by pool\n            return conn.end();\n        }\n    }\n\n    /**\n     * Start a transaction.\n     * @param {object} options - Options\n     * @property {string} [options.isolationLevel]\n     */\n    async beginTransaction_(options) {\n        const conn = await this.connect_();\n\n        if (options && options.isolationLevel) {\n            // only allow valid option value to avoid injection attach\n            const isolationLevel = _.find(\n                MySQLConnector.IsolationLevels,\n                (value, key) =>\n                    options.isolationLevel === key ||\n                    options.isolationLevel === value\n            );\n            if (!isolationLevel) {\n                throw new ApplicationError(\n                    `Invalid isolation level: \"${isolationLevel}\"!\"`\n                );\n            }\n\n            await conn.query(\n                'SET SESSION TRANSACTION ISOLATION LEVEL ' + isolationLevel\n            );\n        }\n\n        const [ret] = await conn.query('SELECT @@autocommit;');\n        conn.$$autocommit = ret[0]['@@autocommit'];\n\n        await conn.query('SET SESSION autocommit=0;');\n        await conn.query('START TRANSACTION;');\n\n        this.log('verbose', 'Begins a new transaction.');\n        return conn;\n    }\n\n    /**\n     * Commit a transaction.\n     * @param {MySQLConnection} conn - MySQL connection.\n     */\n    async commit_(conn) {\n        await conn.query('COMMIT;');\n        this.log(\n            'verbose',\n            `Commits a transaction. Previous autocommit=${conn.$$autocommit}`\n        );\n        if (conn.$$autocommit) {\n            await conn.query('SET SESSION autocommit=1;');\n            delete conn.$$autocommit;\n        }\n\n        return this.disconnect_(conn);\n    }\n\n    /**\n     * Rollback a transaction.\n     * @param {MySQLConnection} conn - MySQL connection.\n     */\n    async rollback_(conn) {\n        await conn.query('ROLLBACK;');\n        this.log(\n            'verbose',\n            `Rollbacks a transaction. Previous autocommit=${conn.$$autocommit}`\n        );\n        if (conn.$$autocommit) {\n            await conn.query('SET SESSION autocommit=1;');\n            delete conn.$$autocommit;\n        }\n\n        return this.disconnect_(conn);\n    }\n\n    /**\n     * Execute the sql statement.\n     *\n     * @param {String} sql - The SQL statement to execute.\n     * @param {object} params - Parameters to be placed into the SQL statement.\n     * @param {object} [options] - Execution options.\n     * @property {boolean} [options.usePreparedStatement] - Whether to use prepared statement which is cached and re-used by connection.\n     * @property {boolean} [options.rowsAsArray] - To receive rows as array of columns instead of hash with column name as key.\n     * @property {MySQLConnection} [options.connection] - Existing connection.\n     */\n    async execute_(sql, params, options) {\n        let conn;\n\n        try {\n            conn = await this._getConnection_(options);\n\n            if (\n                this.options.usePreparedStatement ||\n                (options && options.usePreparedStatement)\n            ) {\n                if (this.options.logStatement) {\n                    this.log('verbose', conn.format(sql, params));\n                }\n\n                if (options && options.rowsAsArray) {\n                    return await conn.execute(\n                        { sql, rowsAsArray: true },\n                        params\n                    );\n                }\n\n                const [rows1] = await conn.execute(sql, params);\n                this.executedCount++;\n\n                return rows1;\n            }\n\n            if (this.options.logStatement) {\n                this.log('verbose', conn.format(sql, params));\n            }\n\n            if (options && options.rowsAsArray) {\n                const result = await conn.query(\n                    { sql, rowsAsArray: true },\n                    params\n                );\n                this.executedCount++;\n                return result;\n            }\n\n            const [rows2] = await conn.query(sql, params);\n            this.executedCount++;\n\n            return rows2;\n        } catch (err) {\n            err.info || (err.info = {});\n            err.info.sql = _.truncate(sql, { length: 200 });\n            err.info.params = params;\n\n            throw err;\n        } finally {\n            conn && (await this._releaseConnection_(conn, options));\n        }\n    }\n\n    async ping_() {\n        const [ping] = await this.execute_('SELECT 1 AS result');\n        return ping && ping.result === 1;\n    }\n\n    /**\n     * Create a new entity.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} options\n     */\n    async create_(model, data, options) {\n        if (!data || _.isEmpty(data)) {\n            throw new ApplicationError(`Creating with empty \"${model}\" data.`);\n        }\n\n        const { insertIgnore, ...restOptions } = options || {};\n\n        const sql = `INSERT ${insertIgnore ? 'IGNORE ' : ''}INTO ?? SET ?`;\n        const params = [model];\n        params.push(data);\n\n        return this.execute_(sql, params, restOptions);\n    }\n\n    /**\n     * Create a new entity or update the old one if duplicate key found.\n     * @param {*} model\n     * @param {*} data\n     * @param {*} uniqueKeys\n     * @param {*} options\n     * @param {object} dataOnInsert - When no duplicate record exists, extra data for inserting\n     * @returns\n     */\n    async upsertOne_(model, data, uniqueKeys, options, dataOnInsert) {\n        if (!data || _.isEmpty(data)) {\n            throw new ApplicationError(`Creating with empty \"${model}\" data.`);\n        }\n\n        const dataWithoutUK = _.omit(data, uniqueKeys);\n        const insertData = { ...data, ...dataOnInsert };\n\n        if (_.isEmpty(dataWithoutUK)) {\n            // if dupliate, dont need to update\n            return this.create_(model, insertData, {\n                ...options,\n                insertIgnore: true,\n            });\n        }\n\n        const sql = `INSERT INTO ?? SET ? ON DUPLICATE KEY UPDATE ?`;\n        const params = [model];\n        params.push(insertData);\n        params.push(dataWithoutUK);\n\n        const result = await this.execute_(sql, params, options);\n\n        return {\n            upsert: true,\n            ...result,\n        };\n    }\n\n    /**\n     * Insert many records or update existings if duplicate key found.\n     * @param {*} model\n     * @param {array} dataArrayOnInsert\n     * @param {*} uniqueKeys\n     * @param {*} options\n     * @param {object} dataExprOnUpdate - When duplicate record exists, the actual data used for updating\n     * @returns\n     */\n    async upsertMany_(\n        model,\n        fieldsOnInsert,\n        dataArrayOnInsert,\n        dataExprOnUpdate,\n        options\n    ) {\n        if (!dataArrayOnInsert || _.isEmpty(dataArrayOnInsert)) {\n            throw new ApplicationError(\n                `Upserting with empty \"${model}\" insert data.`\n            );\n        }\n\n        if (!Array.isArray(dataArrayOnInsert)) {\n            throw new ApplicationError(\n                '\"data\" to bulk upsert should be an array of records.'\n            );\n        }\n\n        if (!dataExprOnUpdate || _.isEmpty(dataExprOnUpdate)) {\n            throw new ApplicationError(\n                `Upserting with empty \"${model}\" update data.`\n            );\n        }\n\n        if (!Array.isArray(fieldsOnInsert)) {\n            throw new ApplicationError(\n                '\"fields\" to bulk upsert should be an array of field names.'\n            );\n        }\n\n        const sql = `INSERT INTO ?? (${fieldsOnInsert\n            .map((f) => this.escapeId(f))\n            .join(', ')}) VALUES ? ON DUPLICATE KEY UPDATE ?`;\n        const params = [model];\n        params.push(dataArrayOnInsert);\n        params.push(dataExprOnUpdate);\n\n        return this.execute_(sql, params, options);\n    }\n\n    /**\n     * Insert many records in one SQL\n     * @param {*} model\n     * @param {*} fields\n     * @param {*} data\n     * @param {*} options\n     * @returns\n     */\n    async insertMany_(model, fields, data, options) {\n        if (!data || _.isEmpty(data)) {\n            throw new ApplicationError(`Creating with empty \"${model}\" data.`);\n        }\n\n        if (!Array.isArray(data)) {\n            throw new ApplicationError(\n                '\"data\" to bulk insert should be an array of records.'\n            );\n        }\n\n        if (!Array.isArray(fields)) {\n            throw new ApplicationError(\n                '\"fields\" to bulk insert should be an array of field names.'\n            );\n        }\n\n        const { insertIgnore, ...restOptions } = options || {};\n\n        const sql = `INSERT ${insertIgnore ? 'IGNORE ' : ''}INTO ?? (${fields\n            .map((f) => this.escapeId(f))\n            .join(', ')}) VALUES ?`;\n        const params = [model];\n        params.push(data);\n\n        return this.execute_(sql, params, restOptions);\n    }\n\n    insertOne_ = this.create_;\n\n    /**\n     * Update an existing entity.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} query\n     * @param {*} queryOptions\n     * @property {object} [queryOptions.$relationships] - Parsed relatinships\n     * @property {boolean} [queryOptions.$requireSplitColumn] - Whether to use set field=value\n     * @property {integer} [queryOptions.$limit]\n     * @param {*} connOptions\n     */\n    async update_(model, data, query, queryOptions, connOptions) {\n        if (_.isEmpty(data)) {\n            throw new InvalidArgument('Data record is empty.', {\n                model,\n                query,\n            });\n        }\n\n        const params = [];\n        const aliasMap = { [model]: 'A' };\n        let joinings;\n        let hasJoining = false;\n        const joiningParams = [];\n\n        if (queryOptions && queryOptions.$relationships) {\n            joinings = this._joinAssociations(\n                queryOptions.$relationships,\n                model,\n                aliasMap,\n                1,\n                joiningParams\n            );\n            hasJoining = model;\n        }\n\n        let sql = 'UPDATE ' + mysql.escapeId(model);\n\n        if (hasJoining) {\n            joiningParams.forEach((p) => params.push(p));\n            sql += ' A ' + joinings.join(' ');\n        }\n\n        if ((queryOptions && queryOptions.$requireSplitColumns) || hasJoining) {\n            sql +=\n                ' SET ' +\n                this._splitColumnsAsInput(\n                    data,\n                    params,\n                    hasJoining,\n                    aliasMap\n                ).join(',');\n        } else {\n            params.push(data);\n            sql += ' SET ?';\n        }\n\n        let hasWhere = false;\n\n        if (query) {\n            const whereClause = this._joinCondition(\n                query,\n                params,\n                null,\n                hasJoining,\n                aliasMap\n            );\n            if (whereClause) {\n                sql += ' WHERE ' + whereClause;\n                hasWhere = true;\n            }\n        }\n\n        if (!hasWhere) {\n            throw new ApplicationError(\n                'Update without where clause is not allowed.'\n            );\n        }\n\n        if (connOptions && connOptions.returnUpdated) {\n            if (connOptions.connection) {\n                throw new ApplicationError(\n                    'Since \"returnUpdated\" will create a new connection with \"multipleStatements\" enabled, it cannot be used within a transaction.'\n                );\n            }\n\n            connOptions = { ...connOptions, multipleStatements: 1 };\n\n            let { keyField } = connOptions.returnUpdated;\n            keyField = this.escapeId(keyField);\n\n            if (queryOptions && _.isInteger(queryOptions.$limit)) {\n                sql += ` AND (SELECT @key := ${keyField})`;\n                sql += ` LIMIT ${queryOptions.$limit}`;\n                sql = `SET @key := null; ${sql}; SELECT @key;`;\n\n                const [_1, _result, [_changedKeys]] = await this.execute_(\n                    sql,\n                    params,\n                    connOptions\n                );\n\n                return [_result, _changedKeys['@key']];\n            }\n\n            const { separator = ',' } = connOptions.returnUpdated;\n            const quotedSeparator = this.escape(separator);\n\n            sql += ` AND (SELECT find_in_set(${keyField}, @keys := CONCAT_WS(${quotedSeparator}, ${keyField}, @keys)))`;\n            sql = `SET @keys := null; ${sql}; SELECT @keys;`;\n\n            const [_1, _result, [_changedKeys]] = await this.execute_(\n                sql,\n                params,\n                connOptions\n            );\n\n            return [\n                _result,\n                _changedKeys['@keys']\n                    ? _changedKeys['@keys'].toString().split(separator)\n                    : [],\n            ];\n        }\n\n        if (queryOptions && _.isInteger(queryOptions.$limit)) {\n            sql += ` LIMIT ${queryOptions.$limit}`;\n        }\n\n        return this.execute_(sql, params, connOptions);\n    }\n\n    updateOne_ = this.update_;\n\n    /**\n     * Replace an existing entity or create a new one.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} options\n     */\n    async replace_(model, data, options) {\n        const params = [model, data];\n\n        const sql = 'REPLACE ?? SET ?';\n\n        return this.execute_(sql, params, options);\n    }\n\n    /**\n     * Remove an existing entity.\n     * @param {string} model\n     * @param {*} query\n     * @param {*} deleteOptions\n     * @param {*} options\n     */\n    async delete_(model, query, deleteOptions, options) {\n        const params = [model];\n        const aliasMap = { [model]: 'A' };\n        let joinings;\n        let hasJoining = false;\n        const joiningParams = [];\n\n        if (deleteOptions && deleteOptions.$relationships) {\n            joinings = this._joinAssociations(\n                deleteOptions.$relationships,\n                model,\n                aliasMap,\n                1,\n                joiningParams\n            );\n            hasJoining = model;\n        }\n\n        let sql;\n\n        if (hasJoining) {\n            joiningParams.forEach((p) => params.push(p));\n            sql = 'DELETE A FROM ?? A ' + joinings.join(' ');\n        } else {\n            sql = 'DELETE FROM ??';\n        }\n\n        const whereClause = this._joinCondition(\n            query,\n            params,\n            null,\n            hasJoining,\n            aliasMap\n        );\n        if (whereClause) {\n            sql += ' WHERE ' + whereClause;\n        }\n\n        return this.execute_(sql, params, options);\n    }\n\n    /**\n     * Perform select operation.\n     * @param {*} model\n     * @param {*} condition\n     * @param {*} connOptions\n     */\n    async find_(model, condition, connOptions) {\n        const sqlInfo = this.buildQuery(model, condition);\n\n        let result, totalCount;\n\n        if (sqlInfo.countSql) {\n            const [countResult] = await this.execute_(\n                sqlInfo.countSql,\n                sqlInfo.params,\n                connOptions\n            );\n            totalCount = countResult.count;\n        }\n\n        if (sqlInfo.hasJoining) {\n            connOptions = { ...connOptions, rowsAsArray: true };\n            result = await this.execute_(\n                sqlInfo.sql,\n                sqlInfo.params,\n                connOptions\n            );\n\n            const reverseAliasMap = _.reduce(\n                sqlInfo.aliasMap,\n                (result, alias, nodePath) => {\n                    result[alias] = nodePath\n                        .split('.')\n                        .slice(\n                            1\n                        ) /* .map(n => ':' + n) changed to be padding by orm and can be customized with other key getter */;\n                    return result;\n                },\n                {}\n            );\n\n            if (sqlInfo.countSql) {\n                return result.concat(reverseAliasMap, totalCount);\n            }\n\n            return result.concat(reverseAliasMap);\n        } else if (condition.$skipOrm) {\n            connOptions = { ...connOptions, rowsAsArray: true };\n        }\n\n        result = await this.execute_(sqlInfo.sql, sqlInfo.params, connOptions);\n\n        if (sqlInfo.countSql) {\n            return [result, totalCount];\n        }\n\n        return result;\n    }\n\n    /**\n     * Build sql statement.\n     * @param {*} model\n     * @param {*} condition\n     */\n    buildQuery(\n        model,\n        {\n            $relationships,\n            $projection,\n            $query,\n            $groupBy,\n            $orderBy,\n            $offset,\n            $limit,\n            $totalCount,\n        }\n    ) {\n        let fromTable = mysql.escapeId(model);\n        let withTables = '';\n\n        if (typeof model === 'object') {\n            const { sql: subSql, alias } = model;\n\n            model = alias;\n            fromTable = alias;\n            withTables = `WITH ${alias} AS (${subSql}) `;\n        }\n\n        const params = [];\n        const aliasMap = { [model]: 'A' };\n        let joinings;\n        let hasJoining = false;\n        const joiningParams = [];\n\n        // build alias map first\n        // cache params\n        if ($relationships) {\n            joinings = this._joinAssociations(\n                $relationships,\n                model,\n                aliasMap,\n                1,\n                joiningParams\n            );\n            hasJoining = model;\n        }\n\n        const selectColomns = $projection\n            ? this._buildColumns($projection, params, hasJoining, aliasMap)\n            : '*';\n\n        let sql = ' FROM ' + fromTable;\n\n        // move cached joining params into params\n        // should according to the place of clause in a sql\n\n        if (hasJoining) {\n            joiningParams.forEach((p) => params.push(p));\n            sql += ' A ' + joinings.join(' ');\n        }\n\n        if ($query) {\n            const whereClause = this._joinCondition(\n                $query,\n                params,\n                null,\n                hasJoining,\n                aliasMap\n            );\n            if (whereClause) {\n                sql += ' WHERE ' + whereClause;\n            }\n        }\n\n        if ($groupBy) {\n            sql +=\n                ' ' +\n                this._buildGroupBy($groupBy, params, hasJoining, aliasMap);\n        }\n\n        if ($orderBy) {\n            sql += ' ' + this._buildOrderBy($orderBy, hasJoining, aliasMap);\n        }\n\n        const result = { params, hasJoining, aliasMap };\n\n        if ($totalCount) {\n            let countSubject;\n\n            if (typeof $totalCount === 'string') {\n                countSubject =\n                    'DISTINCT(' +\n                    this._escapeIdWithAlias($totalCount, hasJoining, aliasMap) +\n                    ')';\n            } else {\n                countSubject = '*';\n            }\n\n            result.countSql =\n                withTables + `SELECT COUNT(${countSubject}) AS count` + sql;\n        }\n\n        sql = withTables + 'SELECT ' + selectColomns + sql;\n\n        if (_.isInteger($limit) && $limit > 0) {\n            if (_.isInteger($offset) && $offset > 0) {\n                sql += ' LIMIT ?, ?';\n                params.push($offset);\n                params.push($limit);\n            } else {\n                sql += ' LIMIT ?';\n                params.push($limit);\n            }\n        } else if (_.isInteger($offset) && $offset > 0) {\n            sql += ' LIMIT ?, 1000';\n            params.push($offset);\n        }\n\n        result.sql = sql;\n\n        return result;\n    }\n\n    getInsertedId(result) {\n        return result && typeof result.insertId === 'number'\n            ? result.insertId\n            : undefined;\n    }\n\n    getNumOfAffectedRows(result) {\n        return result && typeof result.affectedRows === 'number'\n            ? result.affectedRows\n            : undefined;\n    }\n\n    _generateAlias(index, anchor) {\n        const alias = ntol(index);\n\n        if (this.options.verboseAlias) {\n            return _.snakeCase(anchor).toUpperCase() + '_' + alias;\n        }\n\n        return alias;\n    }\n\n    /**\n     * Extract associations into joining clauses.\n     *  {\n     *      entity: <remote entity>\n     *      joinType: 'LEFT JOIN|INNER JOIN|FULL OUTER JOIN'\n     *      anchor: 'local property to place the remote entity'\n     *      localField: <local field to join>\n     *      remoteField: <remote field to join>\n     *      subAssociations: { ... }\n     *  }\n     *\n     * @param {*} associations\n     * @param {*} parentAliasKey\n     * @param {*} aliasMap\n     * @param {*} params\n     * @param {*} startId\n     * @param {*} params\n     * @returns\n     */\n    _joinAssociations(associations, parentAliasKey, aliasMap, startId, params) {\n        let joinings = [];\n\n        _.each(associations, (assocInfo, anchor) => {\n            const alias =\n                assocInfo.alias || this._generateAlias(startId++, anchor);\n            let { joinType, on } = assocInfo;\n\n            joinType || (joinType = 'LEFT JOIN');\n\n            if (assocInfo.sql) {\n                if (assocInfo.output) {\n                    aliasMap[parentAliasKey + '.' + alias] = alias;\n                }\n\n                assocInfo.params.forEach((p) => params.push(p));\n                joinings.push(\n                    `${joinType} (${\n                        assocInfo.sql\n                    }) ${alias} ON ${this._joinCondition(\n                        on,\n                        params,\n                        null,\n                        parentAliasKey,\n                        aliasMap\n                    )}`\n                );\n\n                return;\n            }\n\n            const { entity, subAssocs } = assocInfo;\n            const aliasKey = parentAliasKey + '.' + anchor;\n            aliasMap[aliasKey] = alias;\n\n            if (subAssocs) {\n                const subJoinings = this._joinAssociations(\n                    subAssocs,\n                    aliasKey,\n                    aliasMap,\n                    startId,\n                    params\n                );\n                startId += subJoinings.length;\n\n                joinings.push(\n                    `${joinType} ${mysql.escapeId(\n                        entity\n                    )} ${alias} ON ${this._joinCondition(\n                        on,\n                        params,\n                        null,\n                        parentAliasKey,\n                        aliasMap\n                    )}`\n                );\n                joinings = joinings.concat(subJoinings);\n            } else {\n                joinings.push(\n                    `${joinType} ${mysql.escapeId(\n                        entity\n                    )} ${alias} ON ${this._joinCondition(\n                        on,\n                        params,\n                        null,\n                        parentAliasKey,\n                        aliasMap\n                    )}`\n                );\n            }\n        });\n\n        return joinings;\n    }\n\n    /**\n     * SQL condition representation\n     *   Rules:\n     *     default:\n     *        array: OR\n     *        kv-pair: AND\n     *     $all:\n     *        array: AND\n     *     $any:\n     *        kv-pair: OR\n     *     $not:\n     *        array: not ( or )\n     *        kv-pair: not ( and )\n     * @param {object} condition\n     * @param {array} params\n     */\n    _joinCondition(condition, params, joinOperator, hasJoining, aliasMap) {\n        if (Array.isArray(condition)) {\n            if (!joinOperator) {\n                joinOperator = 'OR';\n            }\n            return condition\n                .map(\n                    (c) =>\n                        '(' +\n                        this._joinCondition(\n                            c,\n                            params,\n                            null,\n                            hasJoining,\n                            aliasMap\n                        ) +\n                        ')'\n                )\n                .join(` ${joinOperator} `);\n        }\n\n        if (_.isPlainObject(condition)) {\n            if (condition.oorType) {\n                return this._packValue(condition, params, hasJoining, aliasMap);\n            }\n\n            if (!joinOperator) {\n                joinOperator = 'AND';\n            }\n\n            return _.map(condition, (value, key) => {\n                if (\n                    key === '$all' ||\n                    key === '$and' ||\n                    key.startsWith('$and_')\n                ) {\n                    // for avoiding duplicate, $or_1, $or_2 is valid\n                    if (!Array.isArray(value) && !_.isPlainObject(value)) {\n                        throw new Error(\n                            '\"$and\" operator value should be an array or plain object.'\n                        );\n                    }\n\n                    return (\n                        '(' +\n                        this._joinCondition(\n                            value,\n                            params,\n                            'AND',\n                            hasJoining,\n                            aliasMap\n                        ) +\n                        ')'\n                    );\n                }\n\n                if (key === '$any' || key === '$or' || key.startsWith('$or_')) {\n                    // for avoiding dupliate, $or_1, $or_2 is valid\n                    if (!Array.isArray(value) && !_.isPlainObject(value)) {\n                        throw new Error(\n                            '\"$or\" operator value should be an array or plain object.'\n                        );\n                    }\n\n                    return (\n                        '(' +\n                        this._joinCondition(\n                            value,\n                            params,\n                            'OR',\n                            hasJoining,\n                            aliasMap\n                        ) +\n                        ')'\n                    );\n                }\n\n                if (key === '$not') {\n                    if (Array.isArray(value)) {\n                        if (value.length === 0) {\n                            throw new Error(\n                                '\"$not\" operator value should be non-empty.'\n                            );\n                        }\n\n                        return (\n                            'NOT (' +\n                            this._joinCondition(\n                                value,\n                                params,\n                                null,\n                                hasJoining,\n                                aliasMap\n                            ) +\n                            ')'\n                        );\n                    }\n\n                    if (_.isPlainObject(value)) {\n                        if (_.isEmpty(value)) {\n                            throw new Error(\n                                '\"$not\" operator value should be non-empty.'\n                            );\n                        }\n\n                        return (\n                            'NOT (' +\n                            this._joinCondition(\n                                value,\n                                params,\n                                null,\n                                hasJoining,\n                                aliasMap\n                            ) +\n                            ')'\n                        );\n                    }\n\n                    if (typeof value !== 'string') {\n                        throw new Error('Unsupported condition!');\n                    }\n\n                    return 'NOT (' + condition + ')';\n                }\n\n                if (\n                    (key === '$expr' || key.startsWith('$expr_')) &&\n                    value.oorType &&\n                    value.oorType === 'BinaryExpression'\n                ) {\n                    const left = this._packValue(\n                        value.left,\n                        params,\n                        hasJoining,\n                        aliasMap\n                    );\n                    const right = this._packValue(\n                        value.right,\n                        params,\n                        hasJoining,\n                        aliasMap\n                    );\n                    return left + ` ${value.op} ` + right;\n                }\n\n                return this._wrapCondition(\n                    key,\n                    value,\n                    params,\n                    hasJoining,\n                    aliasMap\n                );\n            }).join(` ${joinOperator} `);\n        }\n\n        if (typeof condition !== 'string') {\n            throw new Error(\n                'Unsupported condition!\\n Value: ' + JSON.stringify(condition)\n            );\n        }\n\n        return condition;\n    }\n\n    _replaceFieldNameWithAlias(fieldName, mainEntity, aliasMap) {\n        const parts = fieldName.split('.');\n        if (parts.length > 1) {\n            const actualFieldName = parts.pop();\n            const aliasKey = mainEntity + '.' + parts.join('.');\n            const alias = aliasMap[aliasKey];\n            if (!alias) {\n                throw new InvalidArgument(\n                    `Column reference \"${fieldName}\" not found in populated associations.`,\n                    {\n                        entity: mainEntity,\n                        alias: aliasKey,\n                        aliasMap,\n                    }\n                );\n            }\n\n            return (\n                alias +\n                '.' +\n                (actualFieldName === '*'\n                    ? '*'\n                    : mysql.escapeId(actualFieldName))\n            );\n        }\n\n        if (aliasMap[fieldName] === fieldName) {\n            return mysql.escapeId(fieldName);\n        }\n\n        return (\n            aliasMap[mainEntity] +\n            '.' +\n            (fieldName === '*' ? '*' : mysql.escapeId(fieldName))\n        );\n    }\n\n    _escapeIdWithAlias(fieldName, mainEntity, aliasMap) {\n        if (mainEntity) {\n            return this._replaceFieldNameWithAlias(\n                fieldName,\n                mainEntity,\n                aliasMap\n            );\n        }\n\n        return fieldName === '*' ? fieldName : mysql.escapeId(fieldName);\n    }\n\n    _splitColumnsAsInput(data, params, hasJoining, aliasMap) {\n        return _.map(data, (v, fieldName) => {\n            return (\n                this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) +\n                '=' +\n                this._packValue(v, params, hasJoining, aliasMap)\n            );\n        });\n    }\n\n    _packArray(array, params, hasJoining, aliasMap) {\n        return array\n            .map((value) =>\n                this._packValue(value, params, hasJoining, aliasMap)\n            )\n            .join(',');\n    }\n\n    _packValue(value, params, hasJoining, aliasMap) {\n        if (_.isPlainObject(value)) {\n            if (value.oorType) {\n                switch (value.oorType) {\n                    case 'ColumnReference':\n                        return this._escapeIdWithAlias(\n                            value.name,\n                            hasJoining,\n                            aliasMap\n                        );\n\n                    case 'Function':\n                        return (\n                            value.name +\n                            '(' +\n                            (value.args\n                                ? this._packArray(\n                                      value.args,\n                                      params,\n                                      hasJoining,\n                                      aliasMap\n                                  )\n                                : '') +\n                            ')'\n                        );\n\n                    case 'Raw':\n                        return value.statement;\n\n                    case 'Query':\n                        return this._joinCondition(\n                            value.query,\n                            params,\n                            null,\n                            hasJoining,\n                            aliasMap\n                        );\n\n                    case 'BinaryExpression': {\n                        const left = this._packValue(\n                            value.left,\n                            params,\n                            hasJoining,\n                            aliasMap\n                        );\n                        const right = this._packValue(\n                            value.right,\n                            params,\n                            hasJoining,\n                            aliasMap\n                        );\n                        return left + ` ${value.op} ` + right;\n                    }\n\n                    default:\n                        throw new Error(`Unknown oor type: ${value.oorType}`);\n                }\n            }\n\n            value = JSON.stringify(value);\n        }\n\n        params.push(value);\n        return '?';\n    }\n\n    /**\n     * Wrap a condition clause\n     *\n     * Value can be a literal or a plain condition object.\n     *   1. fieldName, <literal>\n     *   2. fieldName, { normal object }\n     *\n     * @param {string} fieldName\n     * @param {*} value\n     * @param {array} params\n     */\n    _wrapCondition(fieldName, value, params, hasJoining, aliasMap, inject) {\n        if (_.isNil(value)) {\n            return (\n                this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) +\n                ' IS NULL'\n            );\n        }\n\n        if (Array.isArray(value)) {\n            return this._wrapCondition(\n                fieldName,\n                { $in: value },\n                params,\n                hasJoining,\n                aliasMap,\n                inject\n            );\n        }\n\n        if (_.isPlainObject(value)) {\n            if (value.oorType) {\n                return (\n                    this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) +\n                    ' = ' +\n                    this._packValue(value, params, hasJoining, aliasMap)\n                );\n            }\n\n            const hasOperator = _.find(\n                Object.keys(value),\n                (k) => k && k[0] === '$'\n            );\n\n            if (hasOperator) {\n                return _.map(value, (v, k) => {\n                    if (k && k[0] === '$') {\n                        // operator\n                        switch (k) {\n                            case '$exist':\n                            case '$exists':\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) + (v ? ' IS NOT NULL' : 'IS NULL')\n                                );\n\n                            case '$eq':\n                            case '$equal':\n                                return this._wrapCondition(\n                                    fieldName,\n                                    v,\n                                    params,\n                                    hasJoining,\n                                    aliasMap,\n                                    inject\n                                );\n\n                            case '$ne':\n                            case '$neq':\n                            case '$notEqual':\n                                if (_.isNil(v)) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) + ' IS NOT NULL'\n                                    );\n                                }\n\n                                v = this.typeCast(v);\n\n                                if (inject) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) +\n                                        ' <> ' +\n                                        v\n                                    );\n                                }\n\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) +\n                                    ` <> ${this._packValue(\n                                        v,\n                                        params,\n                                        hasJoining,\n                                        aliasMap\n                                    )}`\n                                );\n\n                            case '$>':\n                            case '$gt':\n                            case '$greaterThan':\n                                v = this.typeCast(v);\n\n                                if (inject) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) +\n                                        ' > ' +\n                                        v\n                                    );\n                                }\n\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) +\n                                    ` > ${this._packValue(\n                                        v,\n                                        params,\n                                        hasJoining,\n                                        aliasMap\n                                    )}`\n                                );\n\n                            case '$>=':\n                            case '$gte':\n                            case '$greaterThanOrEqual':\n                                v = this.typeCast(v);\n\n                                if (inject) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) +\n                                        ' >= ' +\n                                        v\n                                    );\n                                }\n\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) +\n                                    ` >= ${this._packValue(\n                                        v,\n                                        params,\n                                        hasJoining,\n                                        aliasMap\n                                    )}`\n                                );\n\n                            case '$<':\n                            case '$lt':\n                            case '$lessThan':\n                                v = this.typeCast(v);\n\n                                if (inject) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) +\n                                        ' < ' +\n                                        v\n                                    );\n                                }\n\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) +\n                                    ` < ${this._packValue(\n                                        v,\n                                        params,\n                                        hasJoining,\n                                        aliasMap\n                                    )}`\n                                );\n\n                            case '$<=':\n                            case '$lte':\n                            case '$lessThanOrEqual':\n                                v = this.typeCast(v);\n\n                                if (inject) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) +\n                                        ' <= ' +\n                                        v\n                                    );\n                                }\n\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) +\n                                    ` <= ${this._packValue(\n                                        v,\n                                        params,\n                                        hasJoining,\n                                        aliasMap\n                                    )}`\n                                );\n\n                            case '$in':\n                                if (\n                                    _.isPlainObject(v) &&\n                                    v.oorType === 'DataSet'\n                                ) {\n                                    const sqlInfo = this.buildQuery(\n                                        v.model,\n                                        v.query\n                                    );\n                                    sqlInfo.params &&\n                                        sqlInfo.params.forEach((p) =>\n                                            params.push(p)\n                                        );\n\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) + ` IN (${sqlInfo.sql})`\n                                    );\n                                } else {\n                                    if (!Array.isArray(v)) {\n                                        throw new Error(\n                                            'The value should be an array when using \"$in\" operator.'\n                                        );\n                                    }\n\n                                    if (inject) {\n                                        return (\n                                            this._escapeIdWithAlias(\n                                                fieldName,\n                                                hasJoining,\n                                                aliasMap\n                                            ) + ` IN (${v})`\n                                        );\n                                    }\n\n                                    params.push(v);\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) + ' IN (?)'\n                                    );\n                                }\n\n                            case '$nin':\n                            case '$notIn':\n                                if (\n                                    _.isPlainObject(v) &&\n                                    v.oorType === 'DataSet'\n                                ) {\n                                    const sqlInfo = this.buildQuery(\n                                        v.model,\n                                        v.query\n                                    );\n                                    sqlInfo.params &&\n                                        sqlInfo.params.forEach((p) =>\n                                            params.push(p)\n                                        );\n\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) + ` NOT IN (${sqlInfo.sql})`\n                                    );\n                                } else {\n                                    if (!Array.isArray(v)) {\n                                        throw new Error(\n                                            'The value should be an array when using \"$in\" operator.'\n                                        );\n                                    }\n\n                                    if (inject) {\n                                        return (\n                                            this._escapeIdWithAlias(\n                                                fieldName,\n                                                hasJoining,\n                                                aliasMap\n                                            ) + ` NOT IN (${v})`\n                                        );\n                                    }\n\n                                    params.push(v);\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) + ' NOT IN (?)'\n                                    );\n                                }\n\n                            case '$startWith':\n                            case '$startsWith':\n                                if (typeof v !== 'string') {\n                                    throw new Error(\n                                        'The value should be a string when using \"$startWith\" operator.'\n                                    );\n                                }\n\n                                params.push(`${v}%`);\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) + ' LIKE ?'\n                                );\n\n                            case '$endWith':\n                            case '$endsWith':\n                                if (typeof v !== 'string') {\n                                    throw new Error(\n                                        'The value should be a string when using \"$endWith\" operator.'\n                                    );\n                                }\n\n                                params.push(`%${v}`);\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) + ' LIKE ?'\n                                );\n\n                            case '$like':\n                            case '$likes':\n                                if (typeof v !== 'string') {\n                                    throw new Error(\n                                        'The value should be a string when using \"$like\" operator.'\n                                    );\n                                }\n\n                                params.push(`%${v}%`);\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) + ' LIKE ?'\n                                );\n\n                            case '$has':\n                                if (\n                                    typeof v !== 'string' ||\n                                    v.indexOf(',') >= 0\n                                ) {\n                                    throw new Error(\n                                        'The value should be a string without \",\" when using \"$has\" operator.'\n                                    );\n                                }\n\n                                params.push(v);\n                                return `FIND_IN_SET(?, ${this._escapeIdWithAlias(\n                                    fieldName,\n                                    hasJoining,\n                                    aliasMap\n                                )}) > 0`;\n\n                            default:\n                                throw new Error(\n                                    `Unsupported condition operator: \"${k}\"!`\n                                );\n                        }\n                    } else {\n                        throw new Error(\n                            'Operator should not be mixed with condition value.'\n                        );\n                    }\n                }).join(' AND ');\n            }\n\n            params.push(JSON.stringify(value));\n            return (\n                this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) +\n                ' = ?'\n            );\n        }\n\n        value = this.typeCast(value);\n\n        if (inject) {\n            return (\n                this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) +\n                ' = ' +\n                value\n            );\n        }\n\n        params.push(value);\n        return (\n            this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) + ' = ?'\n        );\n    }\n\n    _buildColumns(columns, params, hasJoining, aliasMap) {\n        return _.map(_.castArray(columns), (col) =>\n            this._buildColumn(col, params, hasJoining, aliasMap)\n        ).join(', ');\n    }\n\n    _buildColumn(col, params, hasJoining, aliasMap) {\n        if (typeof col === 'string') {\n            // it's a string if it's quoted when passed in\n            return isQuoted(col)\n                ? col\n                : this._escapeIdWithAlias(col, hasJoining, aliasMap);\n        }\n\n        if (typeof col === 'number') {\n            return col;\n        }\n\n        if (_.isPlainObject(col)) {\n            if (col.alias) {\n                const lastDotIndex = col.alias.lastIndexOf('.');\n                let alias =\n                    lastDotIndex > 0\n                        ? col.alias.substr(lastDotIndex + 1)\n                        : col.alias;\n\n                if (lastDotIndex > 0) {\n                    if (!hasJoining) {\n                        throw new InvalidArgument(\n                            'Cascade alias is not allowed when the query has no associated entity populated.',\n                            {\n                                alias: col.alias,\n                            }\n                        );\n                    }\n\n                    const fullPath =\n                        hasJoining + '.' + col.alias.substr(0, lastDotIndex);\n                    const aliasPrefix = aliasMap[fullPath];\n                    if (!aliasPrefix) {\n                        throw new InvalidArgument(\n                            `Invalid cascade alias. \"${fullPath}\" not found in associations.`,\n                            {\n                                alias: col.alias,\n                            }\n                        );\n                    }\n\n                    alias = aliasPrefix + '$' + alias;\n                }\n\n                aliasMap[alias] = alias;\n\n                return (\n                    this._buildColumn(\n                        _.omit(col, ['alias']),\n                        params,\n                        hasJoining,\n                        aliasMap\n                    ) +\n                    ' AS ' +\n                    mysql.escapeId(alias)\n                );\n            }\n\n            if (col.type === 'function') {\n                const name = col.name.toUpperCase();\n                if (\n                    name === 'COUNT' &&\n                    col.args.length === 1 &&\n                    col.args[0] === '*'\n                ) {\n                    return 'COUNT(*)';\n                }\n\n                if (MySQLConnector.windowFunctions.has(name)) {\n                    if (!col.over) {\n                        throw new InvalidArgument(`\"${name}\" function requires over clause.`);\n                    }\n                } else if (!MySQLConnector.windowableFunctions.has(name) && col.over) {\n                    throw new InvalidArgument(`\"${name}\" function does not support over clause.`);\n                }\n\n                let funcClause = (\n                    name +\n                    '(' +\n                    (col.prefix ? `${col.prefix.toUpperCase()} ` : '') +\n                    (col.args\n                        ? this._buildColumns(\n                              col.args,\n                              params,\n                              hasJoining,\n                              aliasMap\n                          )\n                        : '') +\n                    ')'\n                );\n\n                if (col.over) {\n                    funcClause += ' OVER(';\n                    if (col.over.$partitionBy) {\n                        funcClause += this._buildPartitionBy(col.over.$partitionBy, hasJoining, aliasMap);\n                    }\n\n                    if (col.over.$orderBy) {\n                        funcClause += this._buildOrderBy(col.over.$orderBy, hasJoining, aliasMap);\n                    }\n                    funcClause += \")\";\n                }\n\n                return funcClause;\n            }\n\n            if (col.type === 'expression') {\n                return this._joinCondition(\n                    col.expr,\n                    params,\n                    null,\n                    hasJoining,\n                    aliasMap\n                );\n            }\n\n            if (col.type === 'column') {\n                return this._escapeIdWithAlias(col.name, hasJoining, aliasMap);\n            }\n        }\n\n        throw new ApplicationError(\n            `Unknow column syntax: ${JSON.stringify(col)}`\n        );\n    }\n\n    _buildGroupBy(groupBy, params, hasJoining, aliasMap) {\n        if (typeof groupBy === 'string')\n            return (\n                'GROUP BY ' +\n                this._escapeIdWithAlias(groupBy, hasJoining, aliasMap)\n            );\n\n        if (Array.isArray(groupBy))\n            return (\n                'GROUP BY ' +\n                groupBy\n                    .map((by) =>\n                        this._escapeIdWithAlias(by, hasJoining, aliasMap)\n                    )\n                    .join(', ')\n            );\n\n        if (_.isPlainObject(groupBy)) {\n            const { columns, having } = groupBy;\n\n            if (!columns || !Array.isArray(columns)) {\n                throw new ApplicationError(\n                    `Invalid group by syntax: ${JSON.stringify(groupBy)}`\n                );\n            }\n\n            let groupByClause = this._buildGroupBy(columns);\n            const havingCluse =\n                having &&\n                this._joinCondition(having, params, null, hasJoining, aliasMap);\n            if (havingCluse) {\n                groupByClause += ' HAVING ' + havingCluse;\n            }\n\n            return groupByClause;\n        }\n\n        throw new ApplicationError(\n            `Unknown GROUP BY syntax: ${JSON.stringify(groupBy)}`\n        );\n    }\n\n    _buildPartitionBy(partitionBy, hasJoining, aliasMap) {\n        if (typeof partitionBy === 'string') {\n            return (\n                'PARTITION BY ' +\n                this._escapeIdWithAlias(partitionBy, hasJoining, aliasMap)\n            );\n        }\n\n        if (Array.isArray(partitionBy)) {\n            return (\n                'PARTITION BY ' +\n                partitionBy\n                    .map((by) =>\n                        this._escapeIdWithAlias(by, hasJoining, aliasMap)\n                    )\n                    .join(', ')\n            );\n        }\n\n        throw new ApplicationError(\n            `Unknown PARTITION BY syntax: ${JSON.stringify(partitionBy)}`\n        );\n    }\n\n    _buildOrderBy(orderBy, hasJoining, aliasMap) {\n        if (typeof orderBy === 'string')\n            return (\n                'ORDER BY ' +\n                this._escapeIdWithAlias(orderBy, hasJoining, aliasMap)\n            );\n\n        if (Array.isArray(orderBy))\n            return (\n                'ORDER BY ' +\n                orderBy\n                    .map((by) =>\n                        this._escapeIdWithAlias(by, hasJoining, aliasMap)\n                    )\n                    .join(', ')\n            );\n\n        if (_.isPlainObject(orderBy)) {\n            return (\n                'ORDER BY ' +\n                _.map(\n                    orderBy,\n                    (asc, col) =>\n                        this._escapeIdWithAlias(col, hasJoining, aliasMap) +\n                        (asc === false || asc === -1 ? ' DESC' : '')\n                ).join(', ')\n            );\n        }\n\n        throw new ApplicationError(\n            `Unknown ORDER BY syntax: ${JSON.stringify(orderBy)}`\n        );\n    }\n\n    async _getConnection_(options) {\n        return options && options.connection\n            ? options.connection\n            : this.connect_(options);\n    }\n\n    async _releaseConnection_(conn, options) {\n        if (!options || !options.connection) {\n            return this.disconnect_(conn);\n        }\n    }\n}\n\nMySQLConnector.driverLib = mysql;\n\nmodule.exports = MySQLConnector;\n"],"mappings":"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"}