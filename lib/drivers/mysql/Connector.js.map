{"version":3,"file":"Connector.js","names":["_","require","tryRequire","mysql","Connector","ApplicationError","InvalidArgument","isQuoted","ntol","assert","validator","connSym","Symbol","for","MySQLConnector","typeCast","value","t","isLuxonDateTime","toISO","includeOffset","constructor","connectionString","options","host","user","password","database","port","escape","escapeId","format","raw","queryCount","alias","fieldName","type","name","args","$call","extra","$as","nullOrIs","$exists","$eq","updatedCount","context","result","affectedRows","deletedCount","insertOne_","create_","updateOne_","update_","relational","acitveConnections","Set","executedCount","end_","size","conn","disconnect_","pool","end","log","connect_","connProps","createDatabase","multipleStatements","csKey","isEmpty","makeNewConnectionString","createConnection","getConnectionStringWithoutCredential","createPool","getConnection","add","has","delete","release","beginTransaction_","isolationLevel","find","IsolationLevels","key","query","ret","$$autocommit","commit_","rollback_","execute_","sql","params","_getConnection_","usePreparedStatement","logStatement","rowsAsArray","rows","execute","rows1","rows2","err","info","truncate","length","_releaseConnection_","ping_","ping","model","data","insertIgnore","restOptions","push","upsertOne_","uniqueKeys","dataOnInsert","dataWithoutUK","omit","insertData","upsert","upsertMany_","fieldsOnInsert","dataArrayOnInsert","dataExprOnUpdate","Array","isArray","map","f","join","insertMany_","fields","queryOptions","connOptions","aliasMap","joinings","hasJoining","joiningParams","$relationships","_joinAssociations","forEach","p","$requireSplitColumns","_splitColumnsAsInput","hasWhere","whereClause","_joinCondition","returnUpdated","connection","keyField","isInteger","$limit","_1","_result","_changedKeys","separator","quotedSeparator","toString","split","replace_","delete_","deleteOptions","find_","condition","sqlInfo","buildQuery","_executeQuery_","aggregate_","pipeline","startingQuery","_pipeline","stage","i","_params","concat","_buildCTEHeader","fromTable","withTables","subSql","$projection","$query","$groupBy","$orderBy","$offset","$totalCount","$key","hasTotalCount","needDistinctForLimit","_model","countParams","selectParams","selectColomns","_buildColumns","fromClause","fromAndJoin","whereParams","groupByClause","groupByParams","_buildGroupBy","orderByClause","_buildOrderBy","limitOffetParams","limitOffset","_buildLimitOffset","distinctField","_escapeIdWithAlias","countSubject","countSql","distinctFieldWithAlias","keysSql","keySqlAliasIndex","Object","keys","keySqlAnchor","_joinAssociation","joinType","on","oorType","output","Number","MAX_SAFE_INTEGER","getInsertedId","insertId","undefined","getNumOfAffectedRows","totalCount","countResult","count","reverseAliasMap","reduce","nodePath","slice","$skipOrm","_generateAlias","index","anchor","verboseAlias","snakeCase","toUpperCase","associations","parentAliasKey","startId","each","assocInfo","entity","subAssocs","aliasKey","subJoinings","sj","joinOperator","c","isPlainObject","_packValue","startsWith","Error","left","right","op","_wrapCondition","JSON","stringify","_replaceFieldNameWithAlias","mainEntity","substring","parts","actualFieldName","pop","v","_packArray","array","statement","inject","isNil","$in","hasOperator","k","indexOf","columns","castArray","col","_buildColumn","lastDotIndex","lastIndexOf","substr","fullPath","aliasPrefix","windowFunctions","over","windowableFunctions","funcClause","prefix","$partitionBy","_buildPartitionBy","endsWith","expr","_buildGroupByColumn","groupBy","_buildGroupByList","by","having","havingCluse","partitionBy","orderBy","asc","freeze","RepeatableRead","ReadCommitted","ReadUncommitted","Rerializable","driverLib","module","exports"],"sources":["../../../src/drivers/mysql/Connector.js"],"sourcesContent":["const { _ } = require('@genx/july');\nconst { tryRequire } = require('@genx/sys');\nconst mysql = tryRequire('mysql2/promise');\nconst Connector = require('../../Connector');\nconst { ApplicationError, InvalidArgument } = require('../../utils/Errors');\nconst { isQuoted } = require('../../utils/lang');\nconst ntol = require('number-to-letter');\nconst assert = require('assert');\nconst validator = require('../../Validators');\n\nconst connSym = Symbol.for('conn');\n\n/**\n * SQL execution sequence\n * FROM clause\n * WHERE clause\n * GROUP BY clause\n * HAVING clause\n * SELECT clause\n * ORDER BY clause\n */\n\n/**\n * MySQL data storage connector.\n * @class\n * @extends Connector\n */\nclass MySQLConnector extends Connector {\n    /**\n     * Transaction isolation level\n     * {@link https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html}\n     * @member {object}\n     */\n    static IsolationLevels = Object.freeze({\n        RepeatableRead: 'REPEATABLE READ',\n        ReadCommitted: 'READ COMMITTED',\n        ReadUncommitted: 'READ UNCOMMITTED',\n        Rerializable: 'SERIALIZABLE',\n    });\n\n    static windowFunctions = new Set([\n        'CUME_DIST',\n        'DENSE_RANK',\n        'FIRST_VALUE',\n        'LAG',\n        'LAST_VALUE',\n        'LEAD',\n        'NTH_VALUE',\n        'NTILE',\n        'PERCENT_RANK',\n        'RANK',\n        'ROW_NUMBER',\n    ]);\n\n    static windowableFunctions = new Set([\n        'AVG',\n        'BIT_AND',\n        'BIT_OR',\n        'BIT_XOR',\n        'COUNT',\n        'JSON_ARRAYAGG',\n        'JSON_OBJECTAGG',\n        'MAX',\n        'MIN',\n        'STDDEV_POP',\n        'STDDEV',\n        'STD',\n        'STDDEV_SAMP',\n        'SUM',\n        'VAR_POP',\n        'VARIANCE',\n        'VAR_SAMP',\n    ]);\n\n    escape = mysql.escape;\n    escapeId = mysql.escapeId;\n    format = mysql.format;\n    raw = mysql.raw;\n    queryCount = (alias, fieldName) => ({\n        type: 'function',\n        name: 'COUNT',\n        args: [fieldName || '*'],\n        alias: alias || 'count',\n    });\n\n    $call = (name, alias, args, extra) => ({\n        ...extra,\n        type: 'function',\n        name,\n        alias,\n        args,\n    });\n    $as = (name, alias) => ({ type: 'column', name, alias });\n\n    // in mysql, null value comparison will never return true, even null != 1\n    nullOrIs = (fieldName, value) => [\n        { [fieldName]: { $exists: false } },\n        { [fieldName]: { $eq: value } },\n    ];\n\n    updatedCount = (context) => context.result.affectedRows;\n    deletedCount = (context) => context.result.affectedRows;\n\n    typeCast(value) {\n        const t = typeof value;\n\n        if (t === 'boolean') return value ? 1 : 0;\n\n        if (t === 'object') {\n            if (value != null && value.isLuxonDateTime) {\n                return value.toISO({ includeOffset: false });\n            }\n        }\n\n        return value;\n    }\n\n    /**\n     * @param {string} name\n     * @param {object} options\n     * @property {boolean} [options.usePreparedStatement] - Flat to use prepared statement to improve query performance.\n     * @property {boolean} [options.logStatement] - Flag to log executed SQL statement.\n     */\n    constructor(connectionString, options) {\n        if(typeof connectionString === 'object'){\n            assert(connectionString.host,'Connection host is required.');\n            assert(connectionString.user,'Connection username is required.');\n            assert(connectionString.password,'Connection password is required.');\n            assert(connectionString.database,'Connection database name is required.');\n\n            if(!connectionString.port) connectionString.port = 3306;\n        }\n        \n        super('mysql', connectionString, options);\n\n        this.relational = true;\n        this.acitveConnections = new Set();\n        this.executedCount = 0;\n    }\n\n    /**\n     * Close all connection initiated by this connector.\n     */\n    async end_() {\n        if (this.acitveConnections.size > 0) {\n            for (const conn of this.acitveConnections) {\n                await this.disconnect_(conn);\n            }\n        }\n\n        if (this.pool) {\n            await this.pool.end();\n            this.log(\n                'verbose',\n                `Close connection pool \"${this.pool[connSym]}\".`\n            );\n            delete this.pool;\n        }\n    }\n\n    /**\n     * Create a database connection based on the default connection string of the connector and given options.\n     * @param {Object} [options] - Extra options for the connection, optional.\n     * @property {bool} [options.multipleStatements=false] - Allow running multiple statements at a time.\n     * @property {bool} [options.createDatabase=false] - Flag to used when creating a database.\n     * @returns {Promise.<MySQLConnection>}\n     */\n    async connect_(options) {\n        if (options) {\n            const connProps = {};\n\n            if (options.createDatabase) {\n                // remove the database from connection\n                connProps.database = '';\n            }\n\n            if (options.multipleStatements) {\n                connProps.options = { multipleStatements: true };\n            }\n\n            const csKey = _.isEmpty(connProps)\n                ? null\n                : this.makeNewConnectionString(connProps);\n\n            if (csKey && csKey !== this.connectionString) {\n                // create standalone connection\n                const conn = await mysql.createConnection(csKey);\n\n                conn[connSym] =\n                    this.getConnectionStringWithoutCredential(csKey);\n                this.log(\n                    'verbose',\n                    `Create non-pool connection to \"${conn[connSym]}\".`\n                );\n\n                return conn;\n            }\n        }\n\n        if (!this.pool) {\n            this.pool = mysql.createPool(this.connectionString);\n            this.pool[connSym] = this.getConnectionStringWithoutCredential();\n            this.log(\n                'verbose',\n                `Create connection pool to \"${this.pool[connSym]}\".`\n            );\n        }\n\n        const conn = await this.pool.getConnection();\n        this.acitveConnections.add(conn);\n\n        this.log('debug', `Get connection from pool \"${this.pool[connSym]}\".`);\n\n        return conn;\n    }\n\n    /**\n     * Close a database connection.\n     * @param {MySQLConnection} conn - MySQL connection.\n     */\n    async disconnect_(conn) {\n        if (this.acitveConnections.has(conn)) {\n            this.log(\n                'debug',\n                `Release connection to pool \"${this.pool[connSym]}\".`\n            );\n            this.acitveConnections.delete(conn);\n            return conn.release();\n        } else {\n            this.log(\n                'verbose',\n                `Disconnect non-pool connection from \"${conn[connSym]}\".`\n            );\n            // not created by pool\n            return conn.end();\n        }\n    }\n\n    /**\n     * Start a transaction.\n     * @param {object} options - Options\n     * @property {string} [options.isolationLevel]\n     */\n    async beginTransaction_(options) {\n        const conn = await this.connect_();\n\n        if (options && options.isolationLevel) {\n            // only allow valid option value to avoid injection attach\n            const isolationLevel = _.find(\n                MySQLConnector.IsolationLevels,\n                (value, key) =>\n                    options.isolationLevel === key ||\n                    options.isolationLevel === value\n            );\n            if (!isolationLevel) {\n                throw new ApplicationError(\n                    `Invalid isolation level: \"${isolationLevel}\"!\"`\n                );\n            }\n\n            await conn.query(\n                'SET SESSION TRANSACTION ISOLATION LEVEL ' + isolationLevel\n            );\n\n            this.log('verbose', `Change isolation level to: ${isolationLevel}`);\n        }\n\n        const [ret] = await conn.query('SELECT @@autocommit;');\n        conn.$$autocommit = ret[0]['@@autocommit'];\n\n        await conn.query('SET SESSION autocommit=0;');\n        await conn.query('START TRANSACTION;');\n\n        this.log('verbose', 'Begins a new transaction.');\n        return conn;\n    }\n\n    /**\n     * Commit a transaction.\n     * @param {MySQLConnection} conn - MySQL connection.\n     */\n    async commit_(conn) {\n        await conn.query('COMMIT;');\n        this.log(\n            'verbose',\n            `Commits a transaction. Previous autocommit=${conn.$$autocommit}`\n        );\n        if (conn.$$autocommit) {\n            await conn.query('SET SESSION autocommit=1;');\n            delete conn.$$autocommit;\n        }\n\n        return this.disconnect_(conn);\n    }\n\n    /**\n     * Rollback a transaction.\n     * @param {MySQLConnection} conn - MySQL connection.\n     */\n    async rollback_(conn) {\n        await conn.query('ROLLBACK;');\n        this.log(\n            'verbose',\n            `Rollbacks a transaction. Previous autocommit=${conn.$$autocommit}`\n        );\n        if (conn.$$autocommit) {\n            await conn.query('SET SESSION autocommit=1;');\n            delete conn.$$autocommit;\n        }\n\n        return this.disconnect_(conn);\n    }\n\n    /**\n     * Execute the sql statement.\n     *\n     * @param {String} sql - The SQL statement to execute.\n     * @param {object} params - Parameters to be placed into the SQL statement.\n     * @param {object} [options] - Execution options.\n     * @property {boolean} [options.usePreparedStatement] - Whether to use prepared statement which is cached and re-used by connection.\n     * @property {boolean} [options.rowsAsArray] - To receive rows as array of columns instead of hash with column name as key.\n     * @property {MySQLConnection} [options.connection] - Existing connection.\n     */\n    async execute_(sql, params, options) {\n        let conn;\n\n        try {\n            conn = await this._getConnection_(options);\n\n            if (\n                this.options.usePreparedStatement ||\n                (options && options.usePreparedStatement)\n            ) {\n                if (this.options.logStatement) {\n                    this.log('verbose', conn.format(sql, params));\n                }\n\n                if (options && options.rowsAsArray) {\n                    const rows = await conn.execute(\n                        { sql, rowsAsArray: true },\n                        params\n                    );\n\n                    this.executedCount++;\n                    return rows;\n                }\n\n                const [rows1] = await conn.execute(sql, params);\n                this.executedCount++;\n\n                return rows1;\n            }\n\n            if (this.options.logStatement) {\n                this.log('verbose', conn.format(sql, params));\n            }\n\n            if (options && options.rowsAsArray) {\n                const result = await conn.query(\n                    { sql, rowsAsArray: true },\n                    params\n                );\n                this.executedCount++;\n                return result;\n            }\n\n            const [rows2] = await conn.query(sql, params);\n            this.executedCount++;\n\n            return rows2;\n        } catch (err) {\n            err.info || (err.info = {});\n            err.info.sql = _.truncate(sql, { length: 200 });\n            err.info.params = params;\n\n            throw err;\n        } finally {\n            conn && (await this._releaseConnection_(conn, options));\n        }\n    }\n\n    async ping_() {\n        const [ping] = await this.execute_('SELECT 1 AS result');\n        return ping && ping.result === 1;\n    }\n\n    /**\n     * Create a new entity.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} options\n     */\n    async create_(model, data, options) {\n        if (!data || _.isEmpty(data)) {\n            throw new ApplicationError(`Creating with empty \"${model}\" data.`);\n        }\n\n        const { insertIgnore, ...restOptions } = options || {};\n\n        const sql = `INSERT ${insertIgnore ? 'IGNORE ' : ''}INTO ?? SET ?`;\n        const params = [model];\n        params.push(data);\n\n        return this.execute_(sql, params, restOptions);\n    }\n\n    /**\n     * Create a new entity or update the old one if duplicate key found.\n     * @param {*} model\n     * @param {*} data\n     * @param {*} uniqueKeys\n     * @param {*} options\n     * @param {object} dataOnInsert - When no duplicate record exists, extra data for inserting\n     * @returns {object}\n     */\n    async upsertOne_(model, data, uniqueKeys, options, dataOnInsert) {\n        if (!data || _.isEmpty(data)) {\n            throw new ApplicationError(`Creating with empty \"${model}\" data.`);\n        }\n\n        const dataWithoutUK = _.omit(data, uniqueKeys);\n        const insertData = { ...data, ...dataOnInsert };\n\n        if (_.isEmpty(dataWithoutUK)) {\n            // if dupliate, dont need to update\n            return this.create_(model, insertData, {\n                ...options,\n                insertIgnore: true,\n            });\n        }\n\n        const sql = `INSERT INTO ?? SET ? ON DUPLICATE KEY UPDATE ?`;\n        const params = [model];\n        params.push(insertData);\n        params.push(dataWithoutUK);\n\n        const result = await this.execute_(sql, params, options);\n\n        return {\n            upsert: true,\n            ...result,\n        };\n    }\n\n    /**\n     * Insert many records or update existings if duplicate key found.\n     * @param {*} model\n     * @param {array} dataArrayOnInsert\n     * @param {*} uniqueKeys\n     * @param {*} options\n     * @param {object} dataExprOnUpdate - When duplicate record exists, the actual data used for updating\n     * @returns {object}\n     */\n    async upsertMany_(\n        model,\n        fieldsOnInsert,\n        dataArrayOnInsert,\n        dataExprOnUpdate,\n        options\n    ) {\n        if (!dataArrayOnInsert || _.isEmpty(dataArrayOnInsert)) {\n            throw new ApplicationError(\n                `Upserting with empty \"${model}\" insert data.`\n            );\n        }\n\n        if (!Array.isArray(dataArrayOnInsert)) {\n            throw new ApplicationError(\n                '\"data\" to bulk upsert should be an array of records.'\n            );\n        }\n\n        if (!dataExprOnUpdate || _.isEmpty(dataExprOnUpdate)) {\n            throw new ApplicationError(\n                `Upserting with empty \"${model}\" update data.`\n            );\n        }\n\n        if (!Array.isArray(fieldsOnInsert)) {\n            throw new ApplicationError(\n                '\"fields\" to bulk upsert should be an array of field names.'\n            );\n        }\n\n        const sql = `INSERT INTO ?? (${fieldsOnInsert\n            .map((f) => this.escapeId(f))\n            .join(', ')}) VALUES ? ON DUPLICATE KEY UPDATE ?`;\n        const params = [model];\n        params.push(dataArrayOnInsert);\n        params.push(dataExprOnUpdate);\n\n        return this.execute_(sql, params, options);\n    }\n\n    /**\n     * Insert many records in one SQL\n     * @param {*} model\n     * @param {*} fields\n     * @param {*} data\n     * @param {*} options\n     * @returns {object}\n     */\n    async insertMany_(model, fields, data, options) {\n        if (!data || _.isEmpty(data)) {\n            throw new ApplicationError(`Creating with empty \"${model}\" data.`);\n        }\n\n        if (!Array.isArray(data)) {\n            throw new ApplicationError(\n                '\"data\" to bulk insert should be an array of records.'\n            );\n        }\n\n        if (!Array.isArray(fields)) {\n            throw new ApplicationError(\n                '\"fields\" to bulk insert should be an array of field names.'\n            );\n        }\n\n        const { insertIgnore, ...restOptions } = options || {};\n\n        const sql = `INSERT ${insertIgnore ? 'IGNORE ' : ''}INTO ?? (${fields\n            .map((f) => this.escapeId(f))\n            .join(', ')}) VALUES ?`;\n        const params = [model];\n        params.push(data);\n\n        return this.execute_(sql, params, restOptions);\n    }\n\n    insertOne_ = this.create_;\n\n    /**\n     * Update an existing entity.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} query\n     * @param {*} queryOptions\n     * @property {object} [queryOptions.$relationships] - Parsed relatinships\n     * @property {boolean} [queryOptions.$requireSplitColumn] - Whether to use set field=value\n     * @property {integer} [queryOptions.$limit]\n     * @param {*} connOptions\n     * @return {object}\n     */\n    async update_(model, data, query, queryOptions, connOptions) {\n        if (_.isEmpty(data)) {\n            throw new InvalidArgument('Data record is empty.', {\n                model,\n                query,\n            });\n        }\n\n        const params = [];\n        const aliasMap = { [model]: 'A' };\n        let joinings;\n        let hasJoining = false;\n        const joiningParams = [];\n\n        if (queryOptions && queryOptions.$relationships) {\n            joinings = this._joinAssociations(\n                queryOptions.$relationships,\n                model,\n                aliasMap,\n                1,\n                joiningParams\n            );\n            hasJoining = model;\n        }\n\n        let sql = 'UPDATE ' + mysql.escapeId(model);\n\n        if (hasJoining) {\n            joiningParams.forEach((p) => params.push(p));\n            sql += ' A ' + joinings.join(' ');\n        }\n\n        if ((queryOptions && queryOptions.$requireSplitColumns) || hasJoining) {\n            sql +=\n                ' SET ' +\n                this._splitColumnsAsInput(\n                    data,\n                    params,\n                    hasJoining,\n                    aliasMap\n                ).join(',');\n        } else {\n            params.push(data);\n            sql += ' SET ?';\n        }\n\n        let hasWhere = false;\n\n        if (query) {\n            const whereClause = this._joinCondition(\n                query,\n                params,\n                null,\n                hasJoining,\n                aliasMap\n            );\n            if (whereClause) {\n                sql += ' WHERE ' + whereClause;\n                hasWhere = true;\n            }\n        }\n\n        if (!hasWhere) {\n            throw new ApplicationError(\n                'Update without where clause is not allowed.'\n            );\n        }\n\n        if (connOptions && connOptions.returnUpdated) {\n            if (connOptions.connection) {\n                throw new ApplicationError(\n                    'Since \"returnUpdated\" will create a new connection with \"multipleStatements\" enabled, it cannot be used within a transaction.'\n                );\n            }\n\n            connOptions = { ...connOptions, multipleStatements: 1 };\n\n            let { keyField } = connOptions.returnUpdated;\n            keyField = this.escapeId(keyField);\n\n            if (queryOptions && _.isInteger(queryOptions.$limit)) {\n                sql += ` AND (SELECT @key := ${keyField})`;\n                sql += ` LIMIT ${queryOptions.$limit}`;\n                sql = `SET @key := null; ${sql}; SELECT @key;`;\n\n                const [_1, _result, [_changedKeys]] = await this.execute_(\n                    sql,\n                    params,\n                    connOptions\n                );\n\n                return [_result, _changedKeys['@key']];\n            }\n\n            const { separator = ',' } = connOptions.returnUpdated;\n            const quotedSeparator = this.escape(separator);\n\n            sql += ` AND (SELECT find_in_set(${keyField}, @keys := CONCAT_WS(${quotedSeparator}, ${keyField}, @keys)))`;\n            sql = `SET @keys := null; ${sql}; SELECT @keys;`;\n\n            const [_1, _result, [_changedKeys]] = await this.execute_(\n                sql,\n                params,\n                connOptions\n            );\n\n            return [\n                _result,\n                _changedKeys['@keys']\n                    ? _changedKeys['@keys'].toString().split(separator)\n                    : [],\n            ];\n        }\n\n        if (queryOptions && _.isInteger(queryOptions.$limit)) {\n            sql += ` LIMIT ${queryOptions.$limit}`;\n        }\n\n        return this.execute_(sql, params, connOptions);\n    }\n\n    updateOne_ = this.update_;\n\n    /**\n     * Replace an existing entity or create a new one.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} options\n     */\n    async replace_(model, data, options) {\n        const params = [model, data];\n\n        const sql = 'REPLACE ?? SET ?';\n\n        return this.execute_(sql, params, options);\n    }\n\n    /**\n     * Remove an existing entity.\n     * @param {string} model\n     * @param {*} query\n     * @param {*} deleteOptions\n     * @param {*} options\n     */\n    async delete_(model, query, deleteOptions, options) {\n        const params = [model];\n        const aliasMap = { [model]: 'A' };\n        let joinings;\n        let hasJoining = false;\n        const joiningParams = [];\n\n        if (deleteOptions && deleteOptions.$relationships) {\n            joinings = this._joinAssociations(\n                deleteOptions.$relationships,\n                model,\n                aliasMap,\n                1,\n                joiningParams\n            );\n            hasJoining = model;\n        }\n\n        let sql;\n\n        if (hasJoining) {\n            joiningParams.forEach((p) => params.push(p));\n            sql = 'DELETE A FROM ?? A ' + joinings.join(' ');\n        } else {\n            sql = 'DELETE FROM ??';\n        }\n\n        const whereClause = this._joinCondition(\n            query,\n            params,\n            null,\n            hasJoining,\n            aliasMap\n        );\n        if (whereClause) {\n            sql += ' WHERE ' + whereClause;\n        }\n\n        return this.execute_(sql, params, options);\n    }\n\n    /**\n     * Perform select operation.\n     * @param {*} model\n     * @param {*} condition\n     * @param {*} connOptions\n     */\n    async find_(model, condition, connOptions) {\n        const sqlInfo = this.buildQuery(model, condition);\n        return this._executeQuery_(sqlInfo, condition, connOptions);\n    }\n\n    /**\n     * Run aggregate pipeline\n     * @param {string} model\n     * @param {array} pipeline\n     * @param {object} [connOptions]\n     * @returns {*}\n     */\n    async aggregate_(model, pipeline, connOptions) {\n        if (!Array.isArray(pipeline) || pipeline.length === 0) {\n            throw new InvalidArgument('\"pipeline\" should be an unempty array.');\n        }\n\n        const [startingQuery, ..._pipeline] = pipeline;\n\n        let query = this.buildQuery(model, startingQuery);\n\n        _pipeline.forEach((stage, i) => {\n            let _params = query.params;\n\n            query = this.buildQuery(\n                {\n                    sql: query.sql,\n                    alias: `_STAGE_${i}`,\n                },\n                stage\n            );\n\n            query.params = _params.concat(query.params);\n        });\n\n        return this._executeQuery_(query, null, connOptions);\n    }\n\n    /**\n     * Build CTE header and return the select from target and CTE header\n     * @param {*} model\n     * @returns {object} { fromTable, withTables }\n     */\n    _buildCTEHeader(model) {\n        let fromTable = mysql.escapeId(model);\n        let withTables = '';\n\n        // CTE, used by aggregation\n        if (typeof model === 'object') {\n            const { sql: subSql, alias } = model;\n\n            model = alias;\n            fromTable = alias;\n            withTables = `WITH ${alias} AS (${subSql}) `;\n        }\n\n        return { fromTable, withTables, model };\n    }\n\n    /**\n     * Build sql statement\n     * @param {*} model\n     * @param {*} condition\n     */\n    buildQuery(\n        model,\n        {\n            $relationships,\n            $projection,\n            $query,\n            $groupBy,\n            $orderBy,\n            $offset,\n            $limit,\n            $totalCount,\n            $key,\n        }\n    ) {\n        const hasTotalCount = $totalCount;\n        let needDistinctForLimit =\n            ($limit != null && $limit > 0) || ($offset != null && $offset > 0);\n\n        const {\n            fromTable,\n            withTables,\n            model: _model,\n        } = this._buildCTEHeader(model);\n        model = _model;\n\n        const aliasMap = { [model]: 'A' };\n\n        let joinings;\n        let hasJoining = false;\n        const joiningParams = [];\n\n        // build alias map first\n        // cache params\n        if ($relationships) {\n            joinings = this._joinAssociations(\n                $relationships,\n                model,\n                aliasMap,\n                1,\n                joiningParams\n            );\n            hasJoining = model;\n        }\n\n        // !!!limit or offset with mutiple joining requires group by distinct field to calculate the correct number of records\n        needDistinctForLimit &&= hasJoining && _.isEmpty($groupBy);\n\n        // count does not require selectParams\n        const countParams = hasTotalCount ? joiningParams.concat() : null;\n\n        // Build select columns\n        const selectParams = [];\n        const selectColomns = $projection\n            ? this._buildColumns(\n                  $projection,\n                  selectParams,\n                  hasJoining,\n                  aliasMap\n              )\n            : '*';\n\n        // Build from clause\n        let fromClause = ' FROM ' + fromTable;\n        let fromAndJoin = fromClause;\n        if (joinings) {\n            fromAndJoin += ' A ' + joinings.join(' ');\n        }\n\n        // Build where clause\n        let whereClause = '';\n        const whereParams = [];\n\n        if ($query) {\n            whereClause = this._joinCondition(\n                $query,\n                whereParams,\n                null,\n                hasJoining,\n                aliasMap\n            );\n\n            if (whereClause) {\n                whereClause = ' WHERE ' + whereClause;\n                if (countParams) {\n                    whereParams.forEach((p) => {\n                        countParams.push(p);\n                    });\n                }\n            }\n        }\n\n        // Build group by clause\n        let groupByClause = '';\n        const groupByParams = [];\n\n        if ($groupBy) {\n            groupByClause +=\n                ' ' +\n                this._buildGroupBy(\n                    $groupBy,\n                    groupByParams,\n                    hasJoining,\n                    aliasMap\n                );\n            if (countParams) {\n                groupByParams.forEach((p) => {\n                    countParams.push(p);\n                });\n            }\n        }\n\n        // Build order by clause\n        let orderByClause = '';\n        if ($orderBy) {\n            orderByClause +=\n                ' ' + this._buildOrderBy($orderBy, hasJoining, aliasMap);\n        }\n\n        // Build limit & offset clause\n        const limitOffetParams = [];\n        let limitOffset = this._buildLimitOffset(\n            $limit,\n            $offset,\n            limitOffetParams\n        );\n\n        const result = { hasJoining, aliasMap };\n\n        // The field used as the key of counting or pagination\n        let distinctField;\n\n        if (hasTotalCount || needDistinctForLimit) {\n            distinctField = this._escapeIdWithAlias(\n                typeof $totalCount === 'string' ? $totalCount : $key,\n                hasJoining,\n                aliasMap\n            );\n        }\n\n        if (hasTotalCount) {\n            const countSubject = 'DISTINCT(' + distinctField + ')';\n\n            result.countSql =\n                withTables +\n                `SELECT COUNT(${countSubject}) AS count` +\n                fromAndJoin +\n                whereClause +\n                groupByClause;\n            result.countParams = countParams;\n        }\n\n        if (needDistinctForLimit) {\n            const distinctFieldWithAlias = `${distinctField} AS key_`;\n            const keysSql = orderByClause\n                ? `WITH records_ AS (SELECT ${distinctFieldWithAlias}, ROW_NUMBER() OVER(${orderByClause}) AS row_${fromAndJoin}${whereClause}${groupByClause}) SELECT key_ FROM records_ GROUP BY key_ ORDER BY row_${limitOffset}`\n                : `WITH records_ AS (SELECT ${distinctFieldWithAlias}${fromAndJoin}${whereClause}${groupByClause}) SELECT key_ FROM records_ GROUP BY key_${limitOffset}`;\n\n            const keySqlAliasIndex = Object.keys(aliasMap).length;\n            const keySqlAnchor = ntol(keySqlAliasIndex);\n\n            this._joinAssociation(\n                {\n                    sql: keysSql,\n                    params: joiningParams.concat(\n                        whereParams,\n                        groupByParams,\n                        limitOffetParams\n                    ),\n                    joinType: 'INNER JOIN',\n                    on: {\n                        [$key]: {\n                            oorType: 'ColumnReference',\n                            name: `${keySqlAnchor}.key_`,\n                        },\n                    },\n                    output: true,\n                },\n                keySqlAnchor,\n                joinings,\n                model,\n                aliasMap,\n                keySqlAliasIndex,\n                joiningParams\n            );\n\n            fromAndJoin = fromClause + ' A ' + joinings.join(' ');\n\n            result.sql =\n                withTables +\n                'SELECT ' +\n                selectColomns +\n                fromAndJoin +\n                whereClause +\n                groupByClause +\n                orderByClause;\n            result.params = selectParams.concat(\n                joiningParams,\n                whereParams,\n                groupByParams\n            );\n        } else {\n            result.sql =\n                withTables +\n                'SELECT ' +\n                selectColomns +\n                fromAndJoin +\n                whereClause +\n                groupByClause +\n                orderByClause +\n                limitOffset;\n\n            result.params = selectParams.concat(\n                joiningParams,\n                whereParams,\n                groupByParams,\n                limitOffetParams\n            );\n        }\n\n        return result;\n    }\n\n    /**\n     * Build limit and offset clause\n     * @param {*} $limit\n     * @param {*} $offset\n     * @param {*} params\n     * @returns {string} '' or ' LIMIT X, Y'\n     */\n    _buildLimitOffset($limit, $offset, params) {\n        let sql = '';\n\n        if (_.isInteger($limit) && $limit > 0) {\n            if (_.isInteger($offset) && $offset > 0) {\n                sql = ' LIMIT ?, ?';\n                params.push($offset);\n                params.push($limit);\n            } else {\n                sql = ' LIMIT ?';\n                params.push($limit);\n            }\n        } else if (_.isInteger($offset) && $offset > 0) {\n            sql = ` LIMIT ?, ${Number.MAX_SAFE_INTEGER}`;\n            params.push($offset);\n        }\n\n        return sql;\n    }\n\n    getInsertedId(result) {\n        return result && typeof result.insertId === 'number'\n            ? result.insertId\n            : undefined;\n    }\n\n    getNumOfAffectedRows(result) {\n        return result && typeof result.affectedRows === 'number'\n            ? result.affectedRows\n            : undefined;\n    }\n\n    async _executeQuery_(query, queryOptions, connOptions) {\n        let result, totalCount;\n\n        if (query.countSql) {\n            const [countResult] = await this.execute_(\n                query.countSql,\n                query.countParams,\n                connOptions\n            );\n            totalCount = countResult.count;\n        }\n\n        if (query.hasJoining) {\n            connOptions = { ...connOptions, rowsAsArray: true };\n            result = await this.execute_(query.sql, query.params, connOptions);\n\n            const reverseAliasMap = _.reduce(\n                query.aliasMap,\n                (result, alias, nodePath) => {\n                    result[alias] = nodePath\n                        .split('.')\n                        .slice(\n                            1\n                        ) /* .map(n => ':' + n) changed to be padding by orm and can be customized with other key getter */;\n                    return result;\n                },\n                {}\n            );\n\n            if (query.countSql) {\n                return result.concat([reverseAliasMap, totalCount]);\n            }\n\n            return result.concat([reverseAliasMap]);\n        } else if (queryOptions?.$skipOrm) {\n            connOptions = { ...connOptions, rowsAsArray: true };\n        }\n\n        result = await this.execute_(query.sql, query.params, connOptions);\n\n        if (query.countSql) {\n            return [result, totalCount];\n        }\n\n        return result;\n    }\n\n    _generateAlias(index, anchor) {\n        if (this.options.verboseAlias) {\n            return `${_.snakeCase(anchor).toUpperCase()}${index}`;\n        }\n\n        return ntol(index);\n    }\n\n    /**\n     * Extract associations into joining clauses.\n     *  {\n     *      entity: <remote entity>\n     *      joinType: 'LEFT JOIN|INNER JOIN|FULL OUTER JOIN'\n     *      anchor: 'local property to place the remote entity'\n     *      localField: <local field to join>\n     *      remoteField: <remote field to join>\n     *      subAssociations: { ... }\n     *  }\n     *\n     * @param {*} associations\n     * @param {*} parentAliasKey\n     * @param {*} aliasMap\n     * @param {*} params\n     * @param {*} startId\n     * @param {*} params\n     * @returns {object}\n     */\n    _joinAssociations(associations, parentAliasKey, aliasMap, startId, params) {\n        let joinings = [];\n\n        _.each(associations, (assocInfo, anchor) => {\n            startId = this._joinAssociation(\n                assocInfo,\n                anchor,\n                joinings,\n                parentAliasKey,\n                aliasMap,\n                startId,\n                params\n            );\n        });\n\n        return joinings;\n    }\n\n    _joinAssociation(\n        assocInfo,\n        anchor,\n        joinings,\n        parentAliasKey,\n        aliasMap,\n        startId,\n        params\n    ) {\n        const alias = assocInfo.alias || this._generateAlias(startId++, anchor);\n        let { joinType, on } = assocInfo;\n\n        joinType || (joinType = 'LEFT JOIN');\n\n        if (assocInfo.sql) {\n            if (assocInfo.output) {\n                aliasMap[parentAliasKey + '.' + alias] = alias;\n            }\n\n            assocInfo.params.forEach((p) => params.push(p));\n            joinings.push(\n                `${joinType} (${\n                    assocInfo.sql\n                }) ${alias} ON ${this._joinCondition(\n                    on,\n                    params,\n                    null,\n                    parentAliasKey,\n                    aliasMap\n                )}`\n            );\n\n            return startId;\n        }\n\n        const { entity, subAssocs } = assocInfo;\n        const aliasKey = parentAliasKey + '.' + anchor;\n        aliasMap[aliasKey] = alias;\n\n        if (subAssocs) {\n            const subJoinings = this._joinAssociations(\n                subAssocs,\n                aliasKey,\n                aliasMap,\n                startId,\n                params\n            );\n            startId += subJoinings.length;\n\n            joinings.push(\n                `${joinType} ${mysql.escapeId(\n                    entity\n                )} ${alias} ON ${this._joinCondition(\n                    on,\n                    params,\n                    null,\n                    parentAliasKey,\n                    aliasMap\n                )}`\n            );\n            subJoinings.forEach((sj) => joinings.push(sj));\n        } else {\n            joinings.push(\n                `${joinType} ${mysql.escapeId(\n                    entity\n                )} ${alias} ON ${this._joinCondition(\n                    on,\n                    params,\n                    null,\n                    parentAliasKey,\n                    aliasMap\n                )}`\n            );\n        }\n\n        return startId;\n    }\n\n    /**\n     * SQL condition representation\n     *   Rules:\n     *     default:\n     *        array: OR\n     *        kv-pair: AND\n     *     $all:\n     *        array: AND\n     *     $any:\n     *        kv-pair: OR\n     *     $not:\n     *        array: not ( or )\n     *        kv-pair: not ( and )\n     * @param {object} condition\n     * @param {array} params\n     */\n    _joinCondition(condition, params, joinOperator, hasJoining, aliasMap) {\n        if (Array.isArray(condition)) {\n            if (!joinOperator) {\n                joinOperator = 'OR';\n            }\n            return condition\n                .map(\n                    (c) =>\n                        '(' +\n                        this._joinCondition(\n                            c,\n                            params,\n                            null,\n                            hasJoining,\n                            aliasMap\n                        ) +\n                        ')'\n                )\n                .join(` ${joinOperator} `);\n        }\n\n        if (_.isPlainObject(condition)) {\n            if (condition.oorType) {\n                return this._packValue(condition, params, hasJoining, aliasMap);\n            }\n\n            if (!joinOperator) {\n                joinOperator = 'AND';\n            }\n\n            return _.map(condition, (value, key) => {\n                if (\n                    key === '$all' ||\n                    key === '$and' ||\n                    key.startsWith('$and_')\n                ) {\n                    // for avoiding duplicate, $or_1, $or_2 is valid\n                    if (!Array.isArray(value) && !_.isPlainObject(value)) {\n                        throw new Error(\n                            '\"$and\" operator value should be an array or plain object.'\n                        );\n                    }\n\n                    return (\n                        '(' +\n                        this._joinCondition(\n                            value,\n                            params,\n                            'AND',\n                            hasJoining,\n                            aliasMap\n                        ) +\n                        ')'\n                    );\n                }\n\n                if (key === '$any' || key === '$or' || key.startsWith('$or_')) {\n                    // for avoiding dupliate, $or_1, $or_2 is valid\n                    if (!Array.isArray(value) && !_.isPlainObject(value)) {\n                        throw new Error(\n                            '\"$or\" operator value should be an array or plain object.'\n                        );\n                    }\n\n                    return (\n                        '(' +\n                        this._joinCondition(\n                            value,\n                            params,\n                            'OR',\n                            hasJoining,\n                            aliasMap\n                        ) +\n                        ')'\n                    );\n                }\n\n                if (key === '$not') {\n                    if (Array.isArray(value)) {\n                        if (value.length === 0) {\n                            throw new Error(\n                                '\"$not\" operator value should be non-empty.'\n                            );\n                        }\n\n                        return (\n                            'NOT (' +\n                            this._joinCondition(\n                                value,\n                                params,\n                                null,\n                                hasJoining,\n                                aliasMap\n                            ) +\n                            ')'\n                        );\n                    }\n\n                    if (_.isPlainObject(value)) {\n                        if (_.isEmpty(value)) {\n                            throw new Error(\n                                '\"$not\" operator value should be non-empty.'\n                            );\n                        }\n\n                        return (\n                            'NOT (' +\n                            this._joinCondition(\n                                value,\n                                params,\n                                null,\n                                hasJoining,\n                                aliasMap\n                            ) +\n                            ')'\n                        );\n                    }\n\n                    if (typeof value !== 'string') {\n                        throw new Error('Unsupported condition!');\n                    }\n\n                    return 'NOT (' + condition + ')';\n                }\n\n                if (\n                    (key === '$expr' || key.startsWith('$expr_')) &&\n                    value.oorType &&\n                    value.oorType === 'BinaryExpression'\n                ) {\n                    const left = this._packValue(\n                        value.left,\n                        params,\n                        hasJoining,\n                        aliasMap\n                    );\n                    const right = this._packValue(\n                        value.right,\n                        params,\n                        hasJoining,\n                        aliasMap\n                    );\n                    return left + ` ${value.op} ` + right;\n                }\n\n                return this._wrapCondition(\n                    key,\n                    value,\n                    params,\n                    hasJoining,\n                    aliasMap\n                );\n            }).join(` ${joinOperator} `);\n        }\n\n        if (typeof condition !== 'string') {\n            throw new Error(\n                'Unsupported condition!\\n Value: ' + JSON.stringify(condition)\n            );\n        }\n\n        return condition;\n    }\n\n    _replaceFieldNameWithAlias(fieldName, mainEntity, aliasMap) {\n        if (fieldName.startsWith('::')) {\n            // ::fieldName for skipping alias padding\n            return mysql.escapeId(fieldName.substring(2));\n        }\n\n        const parts = fieldName.split('.');\n        if (parts.length > 1) {\n            const actualFieldName = parts.pop();\n            const aliasKey = mainEntity + '.' + parts.join('.');\n            const alias = aliasMap[aliasKey];\n            if (!alias) {\n                throw new InvalidArgument(\n                    `Column reference \"${fieldName}\" not found in populated associations.`,\n                    {\n                        entity: mainEntity,\n                        alias: aliasKey,\n                        aliasMap,\n                    }\n                );\n            }\n\n            return (\n                alias +\n                '.' +\n                (actualFieldName === '*'\n                    ? '*'\n                    : mysql.escapeId(actualFieldName))\n            );\n        }\n\n        if (aliasMap[fieldName] === fieldName) {\n            return mysql.escapeId(fieldName);\n        }\n\n        return (\n            aliasMap[mainEntity] +\n            '.' +\n            (fieldName === '*' ? '*' : mysql.escapeId(fieldName))\n        );\n    }\n\n    _escapeIdWithAlias(fieldName, mainEntity, aliasMap) {\n        if (mainEntity) {\n            return this._replaceFieldNameWithAlias(\n                fieldName,\n                mainEntity,\n                aliasMap\n            );\n        }\n\n        return fieldName === '*' ? fieldName : mysql.escapeId(fieldName);\n    }\n\n    _splitColumnsAsInput(data, params, hasJoining, aliasMap) {\n        return _.map(data, (v, fieldName) => {\n            return (\n                this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) +\n                '=' +\n                this._packValue(v, params, hasJoining, aliasMap)\n            );\n        });\n    }\n\n    _packArray(array, params, hasJoining, aliasMap) {\n        return array\n            .map((value) =>\n                this._packValue(value, params, hasJoining, aliasMap)\n            )\n            .join(',');\n    }\n\n    _packValue(value, params, hasJoining, aliasMap) {\n        if (_.isPlainObject(value)) {\n            if (value.oorType) {\n                switch (value.oorType) {\n                    case 'ColumnReference':\n                        return this._escapeIdWithAlias(\n                            value.name,\n                            hasJoining,\n                            aliasMap\n                        );\n\n                    case 'Function':\n                        return (\n                            value.name +\n                            '(' +\n                            (value.args\n                                ? this._packArray(\n                                      value.args,\n                                      params,\n                                      hasJoining,\n                                      aliasMap\n                                  )\n                                : '') +\n                            ')'\n                        );\n\n                    case 'Raw':\n                        return value.statement;\n\n                    case 'Query':\n                        return this._joinCondition(\n                            value.query,\n                            params,\n                            null,\n                            hasJoining,\n                            aliasMap\n                        );\n\n                    case 'BinaryExpression': {\n                        const left = this._packValue(\n                            value.left,\n                            params,\n                            hasJoining,\n                            aliasMap\n                        );\n                        const right = this._packValue(\n                            value.right,\n                            params,\n                            hasJoining,\n                            aliasMap\n                        );\n                        return left + ` ${value.op} ` + right;\n                    }\n\n                    default:\n                        throw new Error(`Unknown oor type: ${value.oorType}`);\n                }\n            }\n\n            value = JSON.stringify(value);\n        }\n\n        params.push(value);\n        return '?';\n    }\n\n    /**\n     * Wrap a condition clause\n     *\n     * Value can be a literal or a plain condition object.\n     *   1. fieldName, <literal>\n     *   2. fieldName, { normal object }\n     *\n     * @param {string} fieldName\n     * @param {*} value\n     * @param {array} params\n     */\n    _wrapCondition(fieldName, value, params, hasJoining, aliasMap, inject) {\n        if (_.isNil(value)) {\n            return (\n                this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) +\n                ' IS NULL'\n            );\n        }\n\n        if (Array.isArray(value)) {\n            return this._wrapCondition(\n                fieldName,\n                { $in: value },\n                params,\n                hasJoining,\n                aliasMap,\n                inject\n            );\n        }\n\n        if (_.isPlainObject(value)) {\n            if (value.oorType) {\n                return (\n                    this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) +\n                    ' = ' +\n                    this._packValue(value, params, hasJoining, aliasMap)\n                );\n            }\n\n            const hasOperator = _.find(\n                Object.keys(value),\n                (k) => k && k[0] === '$'\n            );\n\n            if (hasOperator) {\n                return _.map(value, (v, k) => {\n                    if (k && k[0] === '$') {\n                        // operator\n                        switch (k) {\n                            case '$exist':\n                            case '$exists':\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) + (v ? ' IS NOT NULL' : 'IS NULL')\n                                );\n\n                            case '$eq':\n                            case '$equal':\n                                return this._wrapCondition(\n                                    fieldName,\n                                    v,\n                                    params,\n                                    hasJoining,\n                                    aliasMap,\n                                    inject\n                                );\n\n                            case '$ne':\n                            case '$neq':\n                            case '$notEqual':\n                                if (_.isNil(v)) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) + ' IS NOT NULL'\n                                    );\n                                }\n\n                                v = this.typeCast(v);\n\n                                if (inject) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) +\n                                        ' <> ' +\n                                        v\n                                    );\n                                }\n\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) +\n                                    ` <> ${this._packValue(\n                                        v,\n                                        params,\n                                        hasJoining,\n                                        aliasMap\n                                    )}`\n                                );\n\n                            case '$>':\n                            case '$gt':\n                            case '$greaterThan':\n                                v = this.typeCast(v);\n\n                                if (inject) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) +\n                                        ' > ' +\n                                        v\n                                    );\n                                }\n\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) +\n                                    ` > ${this._packValue(\n                                        v,\n                                        params,\n                                        hasJoining,\n                                        aliasMap\n                                    )}`\n                                );\n\n                            case '$>=':\n                            case '$gte':\n                            case '$greaterThanOrEqual':\n                                v = this.typeCast(v);\n\n                                if (inject) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) +\n                                        ' >= ' +\n                                        v\n                                    );\n                                }\n\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) +\n                                    ` >= ${this._packValue(\n                                        v,\n                                        params,\n                                        hasJoining,\n                                        aliasMap\n                                    )}`\n                                );\n\n                            case '$<':\n                            case '$lt':\n                            case '$lessThan':\n                                v = this.typeCast(v);\n\n                                if (inject) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) +\n                                        ' < ' +\n                                        v\n                                    );\n                                }\n\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) +\n                                    ` < ${this._packValue(\n                                        v,\n                                        params,\n                                        hasJoining,\n                                        aliasMap\n                                    )}`\n                                );\n\n                            case '$<=':\n                            case '$lte':\n                            case '$lessThanOrEqual':\n                                v = this.typeCast(v);\n\n                                if (inject) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) +\n                                        ' <= ' +\n                                        v\n                                    );\n                                }\n\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) +\n                                    ` <= ${this._packValue(\n                                        v,\n                                        params,\n                                        hasJoining,\n                                        aliasMap\n                                    )}`\n                                );\n\n                            case '$in':\n                                if (\n                                    _.isPlainObject(v) &&\n                                    v.oorType === 'DataSet'\n                                ) {\n                                    const sqlInfo = this.buildQuery(\n                                        v.model,\n                                        v.query\n                                    );\n                                    sqlInfo.params &&\n                                        sqlInfo.params.forEach((p) =>\n                                            params.push(p)\n                                        );\n\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) + ` IN (${sqlInfo.sql})`\n                                    );\n                                } else {\n                                    if (!Array.isArray(v)) {\n                                        throw new Error(\n                                            'The value should be an array when using \"$in\" operator.'\n                                        );\n                                    }\n\n                                    if (inject) {\n                                        return (\n                                            this._escapeIdWithAlias(\n                                                fieldName,\n                                                hasJoining,\n                                                aliasMap\n                                            ) + ` IN (${v})`\n                                        );\n                                    }\n\n                                    params.push(v);\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) + ' IN (?)'\n                                    );\n                                }\n\n                            case '$nin':\n                            case '$notIn':\n                                if (\n                                    _.isPlainObject(v) &&\n                                    v.oorType === 'DataSet'\n                                ) {\n                                    const sqlInfo = this.buildQuery(\n                                        v.model,\n                                        v.query\n                                    );\n                                    sqlInfo.params &&\n                                        sqlInfo.params.forEach((p) =>\n                                            params.push(p)\n                                        );\n\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) + ` NOT IN (${sqlInfo.sql})`\n                                    );\n                                } else {\n                                    if (!Array.isArray(v)) {\n                                        throw new Error(\n                                            'The value should be an array when using \"$in\" operator.'\n                                        );\n                                    }\n\n                                    if (inject) {\n                                        return (\n                                            this._escapeIdWithAlias(\n                                                fieldName,\n                                                hasJoining,\n                                                aliasMap\n                                            ) + ` NOT IN (${v})`\n                                        );\n                                    }\n\n                                    params.push(v);\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) + ' NOT IN (?)'\n                                    );\n                                }\n\n                            case '$startWith':\n                            case '$startsWith':\n                                if (typeof v !== 'string') {\n                                    throw new Error(\n                                        'The value should be a string when using \"$startWith\" operator.'\n                                    );\n                                }\n\n                                params.push(`${v}%`);\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) + ' LIKE ?'\n                                );\n\n                            case '$endWith':\n                            case '$endsWith':\n                                if (typeof v !== 'string') {\n                                    throw new Error(\n                                        'The value should be a string when using \"$endWith\" operator.'\n                                    );\n                                }\n\n                                params.push(`%${v}`);\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) + ' LIKE ?'\n                                );\n\n                            case '$like':\n                            case '$likes':\n                                if (typeof v !== 'string') {\n                                    throw new Error(\n                                        'The value should be a string when using \"$like\" operator.'\n                                    );\n                                }\n\n                                params.push(`%${v}%`);\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) + ' LIKE ?'\n                                );\n\n                            case '$has':\n                                if (\n                                    typeof v !== 'string' ||\n                                    v.indexOf(',') >= 0\n                                ) {\n                                    throw new Error(\n                                        'The value should be a string without \",\" when using \"$has\" operator.'\n                                    );\n                                }\n\n                                params.push(v);\n                                return `FIND_IN_SET(?, ${this._escapeIdWithAlias(\n                                    fieldName,\n                                    hasJoining,\n                                    aliasMap\n                                )}) > 0`;\n\n                            default:\n                                throw new Error(\n                                    `Unsupported condition operator: \"${k}\"!`\n                                );\n                        }\n                    } else {\n                        throw new Error(\n                            'Operator should not be mixed with condition value.'\n                        );\n                    }\n                }).join(' AND ');\n            }\n\n            params.push(JSON.stringify(value));\n            return (\n                this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) +\n                ' = ?'\n            );\n        }\n\n        value = this.typeCast(value);\n\n        if (inject) {\n            return (\n                this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) +\n                ' = ' +\n                value\n            );\n        }\n\n        params.push(value);\n        return (\n            this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) + ' = ?'\n        );\n    }\n\n    _buildColumns(columns, params, hasJoining, aliasMap) {\n        return _.map(_.castArray(columns), (col) =>\n            this._buildColumn(col, params, hasJoining, aliasMap)\n        ).join(', ');\n    }\n\n    _buildColumn(col, params, hasJoining, aliasMap) {\n        if (typeof col === 'string') {\n            // it's a string if it's quoted when passed in\n            return isQuoted(col)\n                ? col\n                : this._escapeIdWithAlias(col, hasJoining, aliasMap);\n        }\n\n        if (typeof col === 'number') {\n            return col;\n        }\n\n        if (_.isPlainObject(col)) {\n            if (col.alias) {\n                const lastDotIndex = col.alias.lastIndexOf('.');\n                let alias =\n                    lastDotIndex > 0\n                        ? col.alias.substr(lastDotIndex + 1)\n                        : col.alias;\n\n                if (lastDotIndex > 0) {\n                    if (!hasJoining) {\n                        throw new InvalidArgument(\n                            'Cascade alias is not allowed when the query has no associated entity populated.',\n                            {\n                                alias: col.alias,\n                            }\n                        );\n                    }\n\n                    const fullPath =\n                        hasJoining + '.' + col.alias.substr(0, lastDotIndex);\n                    const aliasPrefix = aliasMap[fullPath];\n                    if (!aliasPrefix) {\n                        throw new InvalidArgument(\n                            `Invalid cascade alias. \"${fullPath}\" not found in associations.`,\n                            {\n                                alias: col.alias,\n                            }\n                        );\n                    }\n\n                    alias = aliasPrefix + '$' + alias;\n                }\n\n                aliasMap[alias] = alias;\n\n                return (\n                    this._buildColumn(\n                        _.omit(col, ['alias']),\n                        params,\n                        hasJoining,\n                        aliasMap\n                    ) +\n                    ' AS ' +\n                    mysql.escapeId(alias)\n                );\n            }\n\n            if (col.type === 'function') {\n                const name = col.name.toUpperCase();\n                if (\n                    name === 'COUNT' &&\n                    col.args.length === 1 &&\n                    col.args[0] === '*'\n                ) {\n                    return 'COUNT(*)';\n                }\n\n                if (MySQLConnector.windowFunctions.has(name)) {\n                    if (!col.over) {\n                        throw new InvalidArgument(\n                            `\"${name}\" function requires over clause.`\n                        );\n                    }\n                } else if (\n                    !MySQLConnector.windowableFunctions.has(name) &&\n                    col.over\n                ) {\n                    throw new InvalidArgument(\n                        `\"${name}\" function does not support over clause.`\n                    );\n                }\n\n                let funcClause =\n                    name +\n                    '(' +\n                    (col.prefix ? `${col.prefix.toUpperCase()} ` : '') +\n                    (col.args\n                        ? this._buildColumns(\n                              col.args,\n                              params,\n                              hasJoining,\n                              aliasMap\n                          )\n                        : '') +\n                    ')';\n\n                if (col.over) {\n                    funcClause += ' OVER(';\n                    if (col.over.$partitionBy) {\n                        funcClause += this._buildPartitionBy(\n                            col.over.$partitionBy,\n                            hasJoining,\n                            aliasMap\n                        );\n                    }\n\n                    if (col.over.$orderBy) {\n                        if (!funcClause.endsWith('(')) {\n                            funcClause += ' ';\n                        }\n                        funcClause += this._buildOrderBy(\n                            col.over.$orderBy,\n                            hasJoining,\n                            aliasMap\n                        );\n                    }\n                    funcClause += ')';\n                }\n\n                return funcClause;\n            }\n\n            if (col.type === 'expression') {\n                return this._joinCondition(\n                    col.expr,\n                    params,\n                    null,\n                    hasJoining,\n                    aliasMap\n                );\n            }\n\n            if (col.type === 'column') {\n                return this._escapeIdWithAlias(col.name, hasJoining, aliasMap);\n            }\n        }\n\n        throw new ApplicationError(\n            `Unknow column syntax: ${JSON.stringify(col)}`\n        );\n    }\n\n    _buildGroupByColumn(groupBy, hasJoining, aliasMap) {\n        if (typeof groupBy === 'string') {\n            return isQuoted(groupBy)\n                ? groupBy\n                : this._escapeIdWithAlias(groupBy, hasJoining, aliasMap);\n        }\n\n        if (typeof groupBy === 'object') {\n            if (groupBy.alias) {\n                return this._escapeIdWithAlias(\n                    groupBy.alias,\n                    hasJoining,\n                    aliasMap\n                );\n            }\n        }\n\n        throw new ApplicationError(\n            `Unknown GROUP BY syntax: ${JSON.stringify(groupBy)}`\n        );\n    }\n\n    _buildGroupByList(groupBy, hasJoining, aliasMap) {\n        if (Array.isArray(groupBy)) {\n            return (\n                'GROUP BY ' +\n                groupBy\n                    .map((by) =>\n                        this._buildGroupByColumn(by, hasJoining, aliasMap)\n                    )\n                    .join(', ')\n            );\n        }\n\n        return (\n            'GROUP BY ' +\n            this._buildGroupByColumn(groupBy, hasJoining, aliasMap)\n        );\n    }\n\n    _buildGroupBy(groupBy, params, hasJoining, aliasMap) {\n        if (_.isPlainObject(groupBy)) {\n            const { columns, having } = groupBy;\n\n            if (!columns || !Array.isArray(columns)) {\n                throw new ApplicationError(\n                    `Invalid group by syntax: ${JSON.stringify(groupBy)}`\n                );\n            }\n\n            let groupByClause = this._buildGroupByList(\n                columns,\n                hasJoining,\n                aliasMap\n            );\n            const havingCluse =\n                having &&\n                this._joinCondition(having, params, null, hasJoining, aliasMap);\n            if (havingCluse) {\n                groupByClause += ' HAVING ' + havingCluse;\n            }\n\n            return groupByClause;\n        }\n\n        return this._buildGroupByList(groupBy, hasJoining, aliasMap);\n    }\n\n    _buildPartitionBy(partitionBy, hasJoining, aliasMap) {\n        if (typeof partitionBy === 'string') {\n            return (\n                'PARTITION BY ' +\n                this._escapeIdWithAlias(partitionBy, hasJoining, aliasMap)\n            );\n        }\n\n        if (Array.isArray(partitionBy)) {\n            return (\n                'PARTITION BY ' +\n                partitionBy\n                    .map((by) =>\n                        this._escapeIdWithAlias(by, hasJoining, aliasMap)\n                    )\n                    .join(', ')\n            );\n        }\n\n        throw new ApplicationError(\n            `Unknown PARTITION BY syntax: ${JSON.stringify(partitionBy)}`\n        );\n    }\n\n    _buildOrderBy(orderBy, hasJoining, aliasMap) {\n        if (typeof orderBy === 'string') {\n            return (\n                'ORDER BY ' +\n                this._escapeIdWithAlias(orderBy, hasJoining, aliasMap)\n            );\n        }\n\n        if (Array.isArray(orderBy))\n            return (\n                'ORDER BY ' +\n                orderBy\n                    .map((by) =>\n                        this._escapeIdWithAlias(by, hasJoining, aliasMap)\n                    )\n                    .join(', ')\n            );\n\n        if (_.isPlainObject(orderBy)) {\n            return (\n                'ORDER BY ' +\n                _.map(\n                    orderBy,\n                    (asc, col) =>\n                        this._escapeIdWithAlias(col, hasJoining, aliasMap) +\n                        (asc === false || asc === -1 ? ' DESC' : '')\n                ).join(', ')\n            );\n        }\n\n        throw new ApplicationError(\n            `Unknown ORDER BY syntax: ${JSON.stringify(orderBy)}`\n        );\n    }\n\n    async _getConnection_(options) {\n        return options && options.connection\n            ? options.connection\n            : this.connect_(options);\n    }\n\n    async _releaseConnection_(conn, options) {\n        if (!options || !options.connection) {\n            return this.disconnect_(conn);\n        }\n    }\n}\n\nMySQLConnector.driverLib = mysql;\n\nmodule.exports = MySQLConnector;\n"],"mappings":"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"}