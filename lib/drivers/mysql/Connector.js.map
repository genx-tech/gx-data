{"version":3,"sources":["../../../src/drivers/mysql/Connector.js"],"names":["_","require","tryRequire","mysql","Connector","ApplicationError","InvalidArgument","isQuoted","ntol","MySQLConnector","typeCast","value","t","isLuxonDateTime","toISO","includeOffset","constructor","connectionString","options","escape","escapeId","format","raw","alias","fieldName","type","name","args","$exists","$eq","context","result","affectedRows","create_","update_","relational","acitveConnections","Set","end_","size","conn","disconnect_","assert","pool","log","currentConnectionString","end","connect_","csKey","connProps","createDatabase","database","pick","makeNewConnectionString","createPool","getConnection","add","delete","release","beginTransaction_","isolationLevel","find","IsolationLevels","key","query","ret","$$autocommit","commit_","rollback_","execute_","sql","params","_getConnection_","usePreparedStatement","logStatement","rowsAsArray","execute","rows1","rows2","err","info","truncate","length","_releaseConnection_","ping_","ping","model","data","isEmpty","insertIgnore","restOptions","push","upsertOne_","uniqueKeys","dataOnInsert","dataWithoutUK","omit","insertData","insertMany_","fields","Array","isArray","dev","forEach","row","map","f","join","queryOptions","connOptions","aliasMap","joinings","hasJoining","joiningParams","$relationships","_joinAssociations","p","$requireSplitColumns","_splitColumnsAsInput","whereClause","_joinCondition","replace_","delete_","deleteOptions","find_","condition","sqlInfo","buildQuery","totalCount","countSql","countResult","reverseAliasMap","reduce","nodePath","split","slice","concat","$skipOrm","$projection","$query","$groupBy","$orderBy","$offset","$limit","$totalCount","selectColomns","_buildColumns","_buildGroupBy","_buildOrderBy","countSubject","_escapeIdWithAlias","isInteger","getInsertedId","insertId","undefined","getNumOfAffectedRows","_generateAlias","index","anchor","verboseAlias","snakeCase","toUpperCase","associations","parentAliasKey","parentAlias","startId","each","assocInfo","joinType","on","output","entity","subAssocs","aliasKey","subJoinings","joinOperator","c","isPlainObject","startsWith","numOfElement","Object","keys","oorType","left","_packValue","right","op","_wrapCondition","Error","JSON","stringify","_replaceFieldNameWithAlias","mainEntity","parts","actualFieldName","pop","v","indexOf","_packArray","array","inject","isNil","$in","hasOperator","k","columns","castArray","col","_buildColumn","lastDotIndex","lastIndexOf","substr","fullPath","aliasPrefix","prefix","expr","groupBy","by","having","groupByClause","havingCluse","orderBy","asc","connection","freeze","RepeatableRead","ReadCommitted","ReadUncommitted","Rerializable","driverLib","module","exports"],"mappings":"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","sourcesContent":["const { _ } = require('@genx/july');\nconst { tryRequire } = require('@genx/sys');\nconst mysql = tryRequire('mysql2/promise');\nconst Connector = require('../../Connector');\nconst { ApplicationError, InvalidArgument } = require('../../utils/Errors');\nconst { isQuoted } = require('../../utils/lang');\nconst ntol = require('number-to-letter');\n\n/**\n * MySQL data storage connector.\n * @class\n * @extends Connector\n */\nclass MySQLConnector extends Connector {\n    /**\n     * Transaction isolation level\n     * {@link https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html}\n     * @member {object}\n     */\n    static IsolationLevels = Object.freeze({\n        RepeatableRead: 'REPEATABLE READ',\n        ReadCommitted: 'READ COMMITTED',\n        ReadUncommitted: 'READ UNCOMMITTED',\n        Rerializable: 'SERIALIZABLE',\n    });\n\n    escape = mysql.escape;\n    escapeId = mysql.escapeId;\n    format = mysql.format;\n    raw = mysql.raw;\n    queryCount = (alias, fieldName) => ({\n        type: 'function',\n        name: 'COUNT',\n        args: [fieldName || '*'],\n        alias: alias || 'count',\n    });\n\n    $call = (name, alias, args) => ({ type: 'function', name, alias, args });\n    $as = (name, alias) => ({ type: 'column', name, alias });\n\n    //in mysql, null value comparison will never return true, even null != 1\n    nullOrIs = (fieldName, value) => [\n        { [fieldName]: { $exists: false } },\n        { [fieldName]: { $eq: value } },\n    ];\n\n    updatedCount = (context) => context.result.affectedRows;\n    deletedCount = (context) => context.result.affectedRows;\n\n    typeCast(value) {\n        const t = typeof value;\n\n        if (t === 'boolean') return value ? 1 : 0;\n\n        if (t === 'object') {\n            if (value != null && value.isLuxonDateTime) {\n                return value.toISO({ includeOffset: false });\n            }\n        }\n\n        return value;\n    }\n\n    /**\n     * @param {string} name\n     * @param {object} options\n     * @property {boolean} [options.usePreparedStatement] - Flat to use prepared statement to improve query performance.\n     * @property {boolean} [options.logStatement] - Flag to log executed SQL statement.\n     */\n    constructor(connectionString, options) {\n        super('mysql', connectionString, options);\n\n        this.relational = true;\n        this.acitveConnections = new Set();\n    }\n\n    /**\n     * Close all connection initiated by this connector.\n     */\n    async end_() {\n        if (this.acitveConnections.size > 0) {\n            for (let conn of this.acitveConnections) {\n                await this.disconnect_(conn);\n            }\n            assert: this.acitveConnections.size === 0;\n        }\n\n        if (this.pool) {\n            this.log(\n                'debug',\n                `Close connection pool to ${this.currentConnectionString}`\n            );\n            await this.pool.end();\n            delete this.pool;\n        }\n    }\n\n    /**\n     * Create a database connection based on the default connection string of the connector and given options.\n     * @param {Object} [options] - Extra options for the connection, optional.\n     * @property {bool} [options.multipleStatements=false] - Allow running multiple statements at a time.\n     * @property {bool} [options.createDatabase=false] - Flag to used when creating a database.\n     * @returns {Promise.<MySQLConnection>}\n     */\n    async connect_(options) {\n        let csKey = this.connectionString;\n        if (!this.currentConnectionString) {\n            this.currentConnectionString = csKey;\n        }\n\n        if (options) {\n            let connProps = {};\n\n            if (options.createDatabase) {\n                //remove the database from connection\n                connProps.database = '';\n            }\n\n            connProps.options = _.pick(options, ['multipleStatements']);\n\n            csKey = this.makeNewConnectionString(connProps);\n        }\n\n        if (csKey !== this.currentConnectionString) {\n            await this.end_();\n            this.currentConnectionString = csKey;\n        }\n\n        if (!this.pool) {\n            this.log('debug', `Create connection pool to ${csKey}`);\n            this.pool = mysql.createPool(csKey);\n        }\n\n        let conn = await this.pool.getConnection();\n        this.acitveConnections.add(conn);\n\n        this.log('debug', `Connect to ${csKey}`);\n\n        return conn;\n    }\n\n    /**\n     * Close a database connection.\n     * @param {MySQLConnection} conn - MySQL connection.\n     */\n    async disconnect_(conn) {\n        this.log('debug', `Disconnect from ${this.currentConnectionString}`);\n        this.acitveConnections.delete(conn);\n        return conn.release();\n    }\n\n    /**\n     * Start a transaction.\n     * @param {object} options - Options\n     * @property {string} [options.isolationLevel]\n     */\n    async beginTransaction_(options) {\n        const conn = await this.connect_();\n\n        if (options && options.isolationLevel) {\n            //only allow valid option value to avoid injection attach\n            const isolationLevel = _.find(\n                MySQLConnector.IsolationLevels,\n                (value, key) =>\n                    options.isolationLevel === key ||\n                    options.isolationLevel === value\n            );\n            if (!isolationLevel) {\n                throw new ApplicationError(\n                    `Invalid isolation level: \"${isolationLevel}\"!\"`\n                );\n            }\n\n            await conn.query(\n                'SET SESSION TRANSACTION ISOLATION LEVEL ' + isolationLevel\n            );\n        }\n\n        const [ret] = await conn.query('SELECT @@autocommit;');\n        conn.$$autocommit = ret[0]['@@autocommit'];\n\n        await conn.query('SET SESSION autocommit=0;');\n        await conn.query('START TRANSACTION;');\n\n        this.log('verbose', 'Begins a new transaction.');\n        return conn;\n    }\n\n    /**\n     * Commit a transaction.\n     * @param {MySQLConnection} conn - MySQL connection.\n     */\n    async commit_(conn) {\n        await conn.query('COMMIT;');\n        this.log(\n            'verbose',\n            `Commits a transaction. Previous autocommit=${conn.$$autocommit}`\n        );\n        if (conn.$$autocommit) {\n            await conn.query('SET SESSION autocommit=1;');\n            delete conn.$$autocommit;\n        }\n\n        return this.disconnect_(conn);\n    }\n\n    /**\n     * Rollback a transaction.\n     * @param {MySQLConnection} conn - MySQL connection.\n     */\n    async rollback_(conn) {\n        await conn.query('ROLLBACK;');\n        this.log(\n            'verbose',\n            `Rollbacks a transaction. Previous autocommit=${conn.$$autocommit}`\n        );\n        if (conn.$$autocommit) {\n            await conn.query('SET SESSION autocommit=1;');\n            delete conn.$$autocommit;\n        }\n\n        return this.disconnect_(conn);\n    }\n\n    /**\n     * Execute the sql statement.\n     *\n     * @param {String} sql - The SQL statement to execute.\n     * @param {object} params - Parameters to be placed into the SQL statement.\n     * @param {object} [options] - Execution options.\n     * @property {boolean} [options.usePreparedStatement] - Whether to use prepared statement which is cached and re-used by connection.\n     * @property {boolean} [options.rowsAsArray] - To receive rows as array of columns instead of hash with column name as key.\n     * @property {MySQLConnection} [options.connection] - Existing connection.\n     */\n    async execute_(sql, params, options) {\n        let conn;\n\n        try {\n            conn = await this._getConnection_(options);\n\n            if (\n                this.options.usePreparedStatement ||\n                (options && options.usePreparedStatement)\n            ) {\n                if (this.options.logStatement) {\n                    this.log('verbose', conn.format(sql, params));\n                }\n\n                if (options && options.rowsAsArray) {\n                    return await conn.execute(\n                        { sql, rowsAsArray: true },\n                        params\n                    );\n                }\n\n                let [rows1] = await conn.execute(sql, params);\n\n                return rows1;\n            }\n\n            if (this.options.logStatement) {\n                this.log('verbose', conn.format(sql, params));\n            }\n\n            if (options && options.rowsAsArray) {\n                return await conn.query({ sql, rowsAsArray: true }, params);\n            }\n\n            let [rows2] = await conn.query(sql, params);\n\n            return rows2;\n        } catch (err) {\n            err.info || (err.info = {});\n            err.info.sql = _.truncate(sql, { length: 200 });\n            err.info.params = params;\n\n            throw err;\n        } finally {\n            conn && (await this._releaseConnection_(conn, options));\n        }\n    }\n\n    async ping_() {\n        let [ping] = await this.execute_('SELECT 1 AS result');\n        return ping && ping.result === 1;\n    }\n\n    /**\n     * Create a new entity.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} options\n     */\n    async create_(model, data, options) {\n        if (!data || _.isEmpty(data)) {\n            throw new ApplicationError(`Creating with empty \"${model}\" data.`);\n        }\n\n        const { insertIgnore, ...restOptions } = options || {};\n\n        let sql = `INSERT ${insertIgnore ? 'IGNORE ' : ''}INTO ?? SET ?`;\n        let params = [model];\n        params.push(data);\n\n        return this.execute_(sql, params, restOptions);\n    }\n\n    /**\n     * Create a new entity or update the old one if duplicate key found.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} options\n     */\n    async upsertOne_(model, data, uniqueKeys, options, dataOnInsert) {\n        if (!data || _.isEmpty(data)) {\n            throw new ApplicationError(`Creating with empty \"${model}\" data.`);\n        }\n\n        let dataWithoutUK = _.omit(data, uniqueKeys);\n        let insertData = { ...data, ...dataOnInsert };\n\n        if (_.isEmpty(dataWithoutUK)) {\n            //if dupliate, dont need to update\n            return this.create_(model, insertData, {\n                ...options,\n                insertIgnore: true,\n            });\n        }\n\n        let sql = `INSERT INTO ?? SET ? ON DUPLICATE KEY UPDATE ?`;\n        let params = [model];\n        params.push(insertData);\n        params.push(dataWithoutUK);\n\n        return this.execute_(sql, params, options);\n    }\n\n    async insertMany_(model, fields, data, options) {\n        if (!data || _.isEmpty(data)) {\n            throw new ApplicationError(`Creating with empty \"${model}\" data.`);\n        }\n\n        if (!Array.isArray(data)) {\n            throw new ApplicationError(\n                '\"data\" to bulk insert should be an array of records.'\n            );\n        }\n\n        if (!Array.isArray(fields)) {\n            throw new ApplicationError(\n                '\"fields\" to bulk insert should be an array of field names.'\n            );\n        }\n\n        dev: {\n            data.forEach((row) => {\n                if (!Array.isArray(row)) {\n                    throw new ApplicationError(\n                        'Element of \"data\" array to bulk insert should be an array of record values.'\n                    );\n                }\n            });\n        }\n\n        const { insertIgnore, ...restOptions } = options || {};\n\n        let sql = `INSERT ${insertIgnore ? 'IGNORE ' : ''}INTO ?? (${fields\n            .map((f) => this.escapeId(f))\n            .join(', ')}) VALUES ?`;\n        let params = [model];\n        params.push(data);\n\n        return this.execute_(sql, params, restOptions);\n    }\n\n    insertOne_ = this.create_;\n\n    /**\n     * Update an existing entity.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} query\n     * @param {*} queryOptions\n     * @param {*} connOptions\n     */\n    async update_(model, data, query, queryOptions, connOptions) {\n        if (_.isEmpty(data)) {\n            throw new InvalidArgument('Data record is empty.', {\n                model,\n                query,\n            });\n        }\n\n        let params = [],\n            aliasMap = { [model]: 'A' },\n            joinings,\n            hasJoining = false,\n            joiningParams = [];\n\n        if (queryOptions && queryOptions.$relationships) {\n            joinings = this._joinAssociations(\n                queryOptions.$relationships,\n                model,\n                'A',\n                aliasMap,\n                1,\n                joiningParams\n            );\n            hasJoining = model;\n        }\n\n        let sql = 'UPDATE ' + mysql.escapeId(model);\n\n        if (hasJoining) {\n            joiningParams.forEach((p) => params.push(p));\n            sql += ' A ' + joinings.join(' ');\n        }\n\n        if ((queryOptions && queryOptions.$requireSplitColumns) || hasJoining) {\n            sql +=\n                ' SET ' +\n                this._splitColumnsAsInput(\n                    data,\n                    params,\n                    hasJoining,\n                    aliasMap\n                ).join(',');\n        } else {\n            params.push(data);\n            sql += ' SET ?';\n        }\n\n        if (query) {\n            let whereClause = this._joinCondition(\n                query,\n                params,\n                null,\n                hasJoining,\n                aliasMap\n            );\n            if (whereClause) {\n                sql += ' WHERE ' + whereClause;\n            }\n        }\n\n        return this.execute_(sql, params, connOptions);\n    }\n\n    updateOne_ = this.update_;\n\n    /**\n     * Replace an existing entity or create a new one.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} options\n     */\n    async replace_(model, data, options) {\n        let params = [model, data];\n\n        let sql = 'REPLACE ?? SET ?';\n\n        return this.execute_(sql, params, options);\n    }\n\n    /**\n     * Remove an existing entity.\n     * @param {string} model\n     * @param {*} query\n     * @param {*} deleteOptions\n     * @param {*} options\n     */\n    async delete_(model, query, deleteOptions, options) {\n        let params = [model],\n            aliasMap = { [model]: 'A' },\n            joinings,\n            hasJoining = false,\n            joiningParams = [];\n\n        if (deleteOptions && deleteOptions.$relationships) {\n            joinings = this._joinAssociations(\n                deleteOptions.$relationships,\n                model,\n                'A',\n                aliasMap,\n                1,\n                joiningParams\n            );\n            hasJoining = model;\n        }\n\n        let sql;\n\n        if (hasJoining) {\n            joiningParams.forEach((p) => params.push(p));\n            sql = 'DELETE A FROM ?? A ' + joinings.join(' ');\n        } else {\n            sql = 'DELETE FROM ??';\n        }\n\n        let whereClause = this._joinCondition(\n            query,\n            params,\n            null,\n            hasJoining,\n            aliasMap\n        );\n        if (whereClause) {\n            sql += ' WHERE ' + whereClause;\n        }\n\n        return this.execute_(sql, params, options);\n    }\n\n    /**\n     * Perform select operation.\n     * @param {*} model\n     * @param {*} condition\n     * @param {*} connOptions\n     */\n    async find_(model, condition, connOptions) {\n        let sqlInfo = this.buildQuery(model, condition);\n\n        let result, totalCount;\n\n        if (sqlInfo.countSql) {\n            let [countResult] = await this.execute_(\n                sqlInfo.countSql,\n                sqlInfo.params,\n                connOptions\n            );\n            totalCount = countResult['count'];\n        }\n\n        if (sqlInfo.hasJoining) {\n            connOptions = { ...connOptions, rowsAsArray: true };\n            result = await this.execute_(\n                sqlInfo.sql,\n                sqlInfo.params,\n                connOptions\n            );\n\n            let reverseAliasMap = _.reduce(\n                sqlInfo.aliasMap,\n                (result, alias, nodePath) => {\n                    result[alias] = nodePath\n                        .split('.')\n                        .slice(\n                            1\n                        ) /*.map(n => ':' + n) changed to be padding by orm and can be customized with other key getter */;\n                    return result;\n                },\n                {}\n            );\n\n            if (sqlInfo.countSql) {\n                return result.concat(reverseAliasMap, totalCount);\n            }\n\n            return result.concat(reverseAliasMap);\n        } else if (condition.$skipOrm) {\n            connOptions = { ...connOptions, rowsAsArray: true };\n        }\n\n        result = await this.execute_(sqlInfo.sql, sqlInfo.params, connOptions);\n\n        if (sqlInfo.countSql) {\n            return [result, totalCount];\n        }\n\n        return result;\n    }\n\n    /**\n     * Build sql statement.\n     * @param {*} model\n     * @param {*} condition\n     */\n    buildQuery(\n        model,\n        {\n            $relationships,\n            $projection,\n            $query,\n            $groupBy,\n            $orderBy,\n            $offset,\n            $limit,\n            $totalCount,\n        }\n    ) {\n        let params = [],\n            aliasMap = { [model]: 'A' },\n            joinings,\n            hasJoining = false,\n            joiningParams = [];\n\n        // build alias map first\n        // cache params\n        if ($relationships) {\n            joinings = this._joinAssociations(\n                $relationships,\n                model,\n                'A',\n                aliasMap,\n                1,\n                joiningParams\n            );\n            hasJoining = model;\n        }\n\n        let selectColomns = $projection\n            ? this._buildColumns($projection, params, hasJoining, aliasMap)\n            : '*';\n\n        let sql = ' FROM ' + mysql.escapeId(model);\n\n        // move cached joining params into params\n        // should according to the place of clause in a sql\n\n        if (hasJoining) {\n            joiningParams.forEach((p) => params.push(p));\n            sql += ' A ' + joinings.join(' ');\n        }\n\n        if ($query) {\n            let whereClause = this._joinCondition(\n                $query,\n                params,\n                null,\n                hasJoining,\n                aliasMap\n            );\n            if (whereClause) {\n                sql += ' WHERE ' + whereClause;\n            }\n        }\n\n        if ($groupBy) {\n            sql +=\n                ' ' +\n                this._buildGroupBy($groupBy, params, hasJoining, aliasMap);\n        }\n\n        if ($orderBy) {\n            sql += ' ' + this._buildOrderBy($orderBy, hasJoining, aliasMap);\n        }\n\n        let result = { params, hasJoining, aliasMap };\n\n        if ($totalCount) {\n            let countSubject;\n\n            if (typeof $totalCount === 'string') {\n                countSubject =\n                    'DISTINCT(' +\n                    this._escapeIdWithAlias($totalCount, hasJoining, aliasMap) +\n                    ')';\n            } else {\n                countSubject = '*';\n            }\n\n            result.countSql = `SELECT COUNT(${countSubject}) AS count` + sql;\n        }\n\n        sql = 'SELECT ' + selectColomns + sql;\n\n        if (_.isInteger($limit) && $limit > 0) {\n            if (_.isInteger($offset) && $offset > 0) {\n                sql += ' LIMIT ?, ?';\n                params.push($offset);\n                params.push($limit);\n            } else {\n                sql += ' LIMIT ?';\n                params.push($limit);\n            }\n        } else if (_.isInteger($offset) && $offset > 0) {\n            sql += ' LIMIT ?, 1000';\n            params.push($offset);\n        }\n\n        result.sql = sql;\n\n        return result;\n    }\n\n    getInsertedId(result) {\n        return result && typeof result.insertId === 'number'\n            ? result.insertId\n            : undefined;\n    }\n\n    getNumOfAffectedRows(result) {\n        return result && typeof result.affectedRows === 'number'\n            ? result.affectedRows\n            : undefined;\n    }\n\n    _generateAlias(index, anchor) {\n        let alias = ntol(index);\n\n        if (this.options.verboseAlias) {\n            return _.snakeCase(anchor).toUpperCase() + '_' + alias;\n        }\n\n        return alias;\n    }\n\n    /**\n     * Extract associations into joining clauses.\n     *  {\n     *      entity: <remote entity>\n     *      joinType: 'LEFT JOIN|INNER JOIN|FULL OUTER JOIN'\n     *      anchor: 'local property to place the remote entity'\n     *      localField: <local field to join>\n     *      remoteField: <remote field to join>\n     *      subAssociations: { ... }\n     *  }\n     *\n     * @param {*} associations\n     * @param {*} parentAliasKey\n     * @param {*} parentAlias\n     * @param {*} aliasMap\n     * @param {*} params\n     */\n    _joinAssociations(\n        associations,\n        parentAliasKey,\n        parentAlias,\n        aliasMap,\n        startId,\n        params\n    ) {\n        let joinings = [];\n\n        _.each(associations, (assocInfo, anchor) => {\n            let alias =\n                assocInfo.alias || this._generateAlias(startId++, anchor);\n            let { joinType, on } = assocInfo;\n\n            joinType || (joinType = 'LEFT JOIN');\n\n            if (assocInfo.sql) {\n                if (assocInfo.output) {\n                    aliasMap[parentAliasKey + '.' + alias] = alias;\n                }\n\n                assocInfo.params.forEach((p) => params.push(p));\n                joinings.push(\n                    `${joinType} (${\n                        assocInfo.sql\n                    }) ${alias} ON ${this._joinCondition(\n                        on,\n                        params,\n                        null,\n                        parentAliasKey,\n                        aliasMap\n                    )}`\n                );\n\n                return;\n            }\n\n            let { entity, subAssocs } = assocInfo;\n            let aliasKey = parentAliasKey + '.' + anchor;\n            aliasMap[aliasKey] = alias;\n\n            if (subAssocs) {\n                let subJoinings = this._joinAssociations(\n                    subAssocs,\n                    aliasKey,\n                    alias,\n                    aliasMap,\n                    startId,\n                    params\n                );\n                startId += subJoinings.length;\n\n                joinings.push(\n                    `${joinType} ${mysql.escapeId(\n                        entity\n                    )} ${alias} ON ${this._joinCondition(\n                        on,\n                        params,\n                        null,\n                        parentAliasKey,\n                        aliasMap\n                    )}`\n                );\n                joinings = joinings.concat(subJoinings);\n            } else {\n                joinings.push(\n                    `${joinType} ${mysql.escapeId(\n                        entity\n                    )} ${alias} ON ${this._joinCondition(\n                        on,\n                        params,\n                        null,\n                        parentAliasKey,\n                        aliasMap\n                    )}`\n                );\n            }\n        });\n\n        return joinings;\n    }\n\n    /**\n     * SQL condition representation\n     *   Rules:\n     *     default:\n     *        array: OR\n     *        kv-pair: AND\n     *     $all:\n     *        array: AND\n     *     $any:\n     *        kv-pair: OR\n     *     $not:\n     *        array: not ( or )\n     *        kv-pair: not ( and )\n     * @param {object} condition\n     * @param {array} params\n     */\n    _joinCondition(condition, params, joinOperator, hasJoining, aliasMap) {\n        if (Array.isArray(condition)) {\n            if (!joinOperator) {\n                joinOperator = 'OR';\n            }\n            return condition\n                .map(\n                    (c) =>\n                        '(' +\n                        this._joinCondition(\n                            c,\n                            params,\n                            null,\n                            hasJoining,\n                            aliasMap\n                        ) +\n                        ')'\n                )\n                .join(` ${joinOperator} `);\n        }\n\n        if (_.isPlainObject(condition)) {\n            if (!joinOperator) {\n                joinOperator = 'AND';\n            }\n\n            return _.map(condition, (value, key) => {\n                if (\n                    key === '$all' ||\n                    key === '$and' ||\n                    key.startsWith('$and_')\n                ) {\n                    // for avoiding dupliate, $or_1, $or_2 is valid\n                    assert: Array.isArray(value) || _.isPlainObject(value),\n                        '\"$and\" operator value should be an array or plain object.';\n\n                    return (\n                        '(' +\n                        this._joinCondition(\n                            value,\n                            params,\n                            'AND',\n                            hasJoining,\n                            aliasMap\n                        ) +\n                        ')'\n                    );\n                }\n\n                if (key === '$any' || key === '$or' || key.startsWith('$or_')) {\n                    // for avoiding dupliate, $or_1, $or_2 is valid\n                    assert: Array.isArray(value) || _.isPlainObject(value),\n                        '\"$or\" operator value should be an array or plain object.';\n\n                    return (\n                        '(' +\n                        this._joinCondition(\n                            value,\n                            params,\n                            'OR',\n                            hasJoining,\n                            aliasMap\n                        ) +\n                        ')'\n                    );\n                }\n\n                if (key === '$not') {\n                    if (Array.isArray(value)) {\n                        assert: value.length > 0,\n                            '\"$not\" operator value should be non-empty.';\n\n                        return (\n                            'NOT (' +\n                            this._joinCondition(\n                                value,\n                                params,\n                                null,\n                                hasJoining,\n                                aliasMap\n                            ) +\n                            ')'\n                        );\n                    }\n\n                    if (_.isPlainObject(value)) {\n                        let numOfElement = Object.keys(value).length;\n                        assert: numOfElement > 0,\n                            '\"$not\" operator value should be non-empty.';\n\n                        return (\n                            'NOT (' +\n                            this._joinCondition(\n                                value,\n                                params,\n                                null,\n                                hasJoining,\n                                aliasMap\n                            ) +\n                            ')'\n                        );\n                    }\n\n                    assert: typeof value === 'string', 'Unsupported condition!';\n\n                    return 'NOT (' + condition + ')';\n                }\n\n                if (\n                    (key === '$expr' || key.startsWith('$expr_')) &&\n                    value.oorType &&\n                    value.oorType === 'BinaryExpression'\n                ) {\n                    let left = this._packValue(\n                        value.left,\n                        params,\n                        hasJoining,\n                        aliasMap\n                    );\n                    let right = this._packValue(\n                        value.right,\n                        params,\n                        hasJoining,\n                        aliasMap\n                    );\n                    return left + ` ${value.op} ` + right;\n                }\n\n                return this._wrapCondition(\n                    key,\n                    value,\n                    params,\n                    hasJoining,\n                    aliasMap\n                );\n            }).join(` ${joinOperator} `);\n        }\n\n        if (typeof condition !== 'string') {\n            throw new Error(\n                'Unsupported condition!\\n Value: ' + JSON.stringify(condition)\n            );\n        }\n\n        return condition;\n    }\n\n    _replaceFieldNameWithAlias(fieldName, mainEntity, aliasMap) {\n        let parts = fieldName.split('.');\n        if (parts.length > 1) {\n            let actualFieldName = parts.pop();\n            let aliasKey = mainEntity + '.' + parts.join('.');\n            let alias = aliasMap[aliasKey];\n            if (!alias) {\n                throw new InvalidArgument(\n                    `Column reference \"${fieldName}\" not found in populated associations.`,\n                    {\n                        entity: mainEntity,\n                        alias: aliasKey,\n                        aliasMap,\n                    }\n                );\n            }\n\n            return (\n                alias +\n                '.' +\n                (actualFieldName === '*'\n                    ? '*'\n                    : mysql.escapeId(actualFieldName))\n            );\n        }\n\n        return (\n            aliasMap[mainEntity] +\n            '.' +\n            (fieldName === '*' ? '*' : mysql.escapeId(fieldName))\n        );\n    }\n\n    _escapeIdWithAlias(fieldName, mainEntity, aliasMap) {\n        if (mainEntity) {\n            return this._replaceFieldNameWithAlias(\n                fieldName,\n                mainEntity,\n                aliasMap\n            );\n        }\n\n        return fieldName === '*' ? fieldName : mysql.escapeId(fieldName);\n    }\n\n    _splitColumnsAsInput(data, params, hasJoining, aliasMap) {\n        return _.map(data, (v, fieldName) => {\n            assert: fieldName.indexOf('.') === -1,\n                'Column of direct input data cannot be a dot-separated name.';\n\n            return (\n                this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) +\n                '=' +\n                this._packValue(v, params, hasJoining, aliasMap)\n            );\n        });\n    }\n\n    _packArray(array, params, hasJoining, aliasMap) {\n        return array\n            .map((value) =>\n                this._packValue(value, params, hasJoining, aliasMap)\n            )\n            .join(',');\n    }\n\n    _packValue(value, params, hasJoining, aliasMap) {\n        if (_.isPlainObject(value)) {\n            if (value.oorType) {\n                switch (value.oorType) {\n                    case 'ColumnReference':\n                        return this._escapeIdWithAlias(\n                            value.name,\n                            hasJoining,\n                            aliasMap\n                        );\n\n                    case 'Function':\n                        return (\n                            value.name +\n                            '(' +\n                            (value.args\n                                ? this._packArray(\n                                      value.args,\n                                      params,\n                                      hasJoining,\n                                      aliasMap\n                                  )\n                                : '') +\n                            ')'\n                        );\n\n                    case 'BinaryExpression':\n                        let left = this._packValue(\n                            value.left,\n                            params,\n                            hasJoining,\n                            aliasMap\n                        );\n                        let right = this._packValue(\n                            value.right,\n                            params,\n                            hasJoining,\n                            aliasMap\n                        );\n                        return left + ` ${value.op} ` + right;\n\n                    default:\n                        throw new Error(`Unknown oor type: ${value.oorType}`);\n                }\n            }\n\n            value = JSON.stringify(value);\n        }\n\n        params.push(value);\n        return '?';\n    }\n\n    /**\n     * Wrap a condition clause\n     *\n     * Value can be a literal or a plain condition object.\n     *   1. fieldName, <literal>\n     *   2. fieldName, { normal object }\n     *\n     * @param {string} fieldName\n     * @param {*} value\n     * @param {array} params\n     */\n    _wrapCondition(fieldName, value, params, hasJoining, aliasMap, inject) {\n        if (_.isNil(value)) {\n            return (\n                this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) +\n                ' IS NULL'\n            );\n        }\n\n        if (Array.isArray(value)) {\n            return this._wrapCondition(\n                fieldName,\n                { $in: value },\n                params,\n                hasJoining,\n                aliasMap,\n                inject\n            );\n        }\n\n        if (_.isPlainObject(value)) {\n            if (value.oorType) {\n                return (\n                    this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) +\n                    ' = ' +\n                    this._packValue(value, params, hasJoining, aliasMap)\n                );\n            }\n\n            let hasOperator = _.find(\n                Object.keys(value),\n                (k) => k && k[0] === '$'\n            );\n\n            if (hasOperator) {\n                return _.map(value, (v, k) => {\n                    if (k && k[0] === '$') {\n                        // operator\n                        switch (k) {\n                            case '$exist':\n                            case '$exists':\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) + (v ? ' IS NOT NULL' : 'IS NULL')\n                                );\n\n                            case '$eq':\n                            case '$equal':\n                                return this._wrapCondition(\n                                    fieldName,\n                                    v,\n                                    params,\n                                    hasJoining,\n                                    aliasMap,\n                                    inject\n                                );\n\n                            case '$ne':\n                            case '$neq':\n                            case '$notEqual':\n                                if (_.isNil(v)) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) + ' IS NOT NULL'\n                                    );\n                                }\n\n                                v = this.typeCast(v);\n\n                                if (inject) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) +\n                                        ' <> ' +\n                                        v\n                                    );\n                                }\n\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) +\n                                    ` <> ${this._packValue(\n                                        v,\n                                        params,\n                                        hasJoining,\n                                        aliasMap\n                                    )}`\n                                );\n\n                            case '$>':\n                            case '$gt':\n                            case '$greaterThan':\n                                v = this.typeCast(v);\n\n                                if (inject) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) +\n                                        ' > ' +\n                                        v\n                                    );\n                                }\n\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) +\n                                    ` > ${this._packValue(\n                                        v,\n                                        params,\n                                        hasJoining,\n                                        aliasMap\n                                    )}`\n                                );\n\n                            case '$>=':\n                            case '$gte':\n                            case '$greaterThanOrEqual':\n                                v = this.typeCast(v);\n\n                                if (inject) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) +\n                                        ' >= ' +\n                                        v\n                                    );\n                                }\n\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) +\n                                    ` >= ${this._packValue(\n                                        v,\n                                        params,\n                                        hasJoining,\n                                        aliasMap\n                                    )}`\n                                );\n\n                            case '$<':\n                            case '$lt':\n                            case '$lessThan':\n                                v = this.typeCast(v);\n\n                                if (inject) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) +\n                                        ' < ' +\n                                        v\n                                    );\n                                }\n\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) +\n                                    ` < ${this._packValue(\n                                        v,\n                                        params,\n                                        hasJoining,\n                                        aliasMap\n                                    )}`\n                                );\n\n                            case '$<=':\n                            case '$lte':\n                            case '$lessThanOrEqual':\n                                v = this.typeCast(v);\n\n                                if (inject) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) +\n                                        ' <= ' +\n                                        v\n                                    );\n                                }\n\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) +\n                                    ` <= ${this._packValue(\n                                        v,\n                                        params,\n                                        hasJoining,\n                                        aliasMap\n                                    )}`\n                                );\n\n                            case '$in':\n                                if (\n                                    _.isPlainObject(v) &&\n                                    v.oorType === 'DataSet'\n                                ) {\n                                    const sqlInfo = this.buildQuery(\n                                        v.model,\n                                        v.query\n                                    );\n                                    sqlInfo.params &&\n                                        sqlInfo.params.forEach((p) =>\n                                            params.push(p)\n                                        );\n\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) + ` IN (${sqlInfo.sql})`\n                                    );\n                                } else {\n                                    if (!Array.isArray(v)) {\n                                        throw new Error(\n                                            'The value should be an array when using \"$in\" operator.'\n                                        );\n                                    }\n\n                                    if (inject) {\n                                        return (\n                                            this._escapeIdWithAlias(\n                                                fieldName,\n                                                hasJoining,\n                                                aliasMap\n                                            ) + ` IN (${v})`\n                                        );\n                                    }\n\n                                    params.push(v);\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) + ' IN (?)'\n                                    );\n                                }\n\n                            case '$nin':\n                            case '$notIn':\n                                if (\n                                    _.isPlainObject(v) &&\n                                    v.oorType === 'DataSet'\n                                ) {\n                                    const sqlInfo = this.buildQuery(\n                                        v.model,\n                                        v.query\n                                    );\n                                    sqlInfo.params &&\n                                        sqlInfo.params.forEach((p) =>\n                                            params.push(p)\n                                        );\n\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) + ` NOT IN (${sqlInfo.sql})`\n                                    );\n                                } else {\n                                    if (!Array.isArray(v)) {\n                                        throw new Error(\n                                            'The value should be an array when using \"$in\" operator.'\n                                        );\n                                    }\n\n                                    if (inject) {\n                                        return (\n                                            this._escapeIdWithAlias(\n                                                fieldName,\n                                                hasJoining,\n                                                aliasMap\n                                            ) + ` NOT IN (${v})`\n                                        );\n                                    }\n\n                                    params.push(v);\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) + ' NOT IN (?)'\n                                    );\n                                }\n\n                            case '$startWith':\n                            case '$startsWith':\n                                if (typeof v !== 'string') {\n                                    throw new Error(\n                                        'The value should be a string when using \"$startWith\" operator.'\n                                    );\n                                }\n\n                                assert: !inject;\n\n                                params.push(`${v}%`);\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) + ' LIKE ?'\n                                );\n\n                            case '$endWith':\n                            case '$endsWith':\n                                if (typeof v !== 'string') {\n                                    throw new Error(\n                                        'The value should be a string when using \"$endWith\" operator.'\n                                    );\n                                }\n\n                                assert: !inject;\n\n                                params.push(`%${v}`);\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) + ' LIKE ?'\n                                );\n\n                            case '$like':\n                            case '$likes':\n                                if (typeof v !== 'string') {\n                                    throw new Error(\n                                        'The value should be a string when using \"$like\" operator.'\n                                    );\n                                }\n\n                                assert: !inject;\n\n                                params.push(`%${v}%`);\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) + ' LIKE ?'\n                                );\n\n                            case '$has':\n                                if (\n                                    typeof v !== 'string' ||\n                                    v.indexOf(',') >= 0\n                                ) {\n                                    throw new Error(\n                                        'The value should be a string without \",\" when using \"$has\" operator.'\n                                    );\n                                }\n\n                                assert: !inject;\n\n                                params.push(v);\n                                return `FIND_IN_SET(?, ${this._escapeIdWithAlias(\n                                    fieldName,\n                                    hasJoining,\n                                    aliasMap\n                                )}) > 0`;\n\n                            default:\n                                throw new Error(\n                                    `Unsupported condition operator: \"${k}\"!`\n                                );\n                        }\n                    } else {\n                        throw new Error(\n                            'Operator should not be mixed with condition value.'\n                        );\n                    }\n                }).join(' AND ');\n            }\n\n            assert: !inject;\n\n            params.push(JSON.stringify(value));\n            return (\n                this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) +\n                ' = ?'\n            );\n        }\n\n        value = this.typeCast(value);\n\n        if (inject) {\n            return (\n                this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) +\n                ' = ' +\n                value\n            );\n        }\n\n        params.push(value);\n        return (\n            this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) + ' = ?'\n        );\n    }\n\n    _buildColumns(columns, params, hasJoining, aliasMap) {\n        return _.map(_.castArray(columns), (col) =>\n            this._buildColumn(col, params, hasJoining, aliasMap)\n        ).join(', ');\n    }\n\n    _buildColumn(col, params, hasJoining, aliasMap) {\n        if (typeof col === 'string') {\n            //it's a string if it's quoted when passed in\n            return isQuoted(col)\n                ? col\n                : this._escapeIdWithAlias(col, hasJoining, aliasMap);\n        }\n\n        if (typeof col === 'number') {\n            return col;\n        }\n\n        if (_.isPlainObject(col)) {\n            if (col.alias) {\n                assert: typeof col.alias === 'string';\n\n                const lastDotIndex = col.alias.lastIndexOf('.');\n                let alias =\n                    lastDotIndex > 0\n                        ? col.alias.substr(lastDotIndex + 1)\n                        : col.alias;\n\n                if (lastDotIndex > 0) {\n                    if (!hasJoining) {\n                        throw new InvalidArgument(\n                            'Cascade alias is not allowed when the query has no associated entity populated.',\n                            {\n                                alias: col.alias,\n                            }\n                        );\n                    }\n\n                    const fullPath =\n                        hasJoining + '.' + col.alias.substr(0, lastDotIndex);\n                    const aliasPrefix = aliasMap[fullPath];\n                    if (!aliasPrefix) {\n                        throw new InvalidArgument(\n                            `Invalid cascade alias. \"${fullPath}\" not found in associations.`,\n                            {\n                                alias: col.alias,\n                            }\n                        );\n                    }\n\n                    alias = aliasPrefix + '$' + alias;\n                }\n\n                return (\n                    this._buildColumn(\n                        _.omit(col, ['alias']),\n                        params,\n                        hasJoining,\n                        aliasMap\n                    ) +\n                    ' AS ' +\n                    mysql.escapeId(alias)\n                );\n            }\n\n            if (col.type === 'function') {\n                let name = col.name.toUpperCase();\n                if (\n                    name === 'COUNT' &&\n                    col.args.length === 1 &&\n                    col.args[0] === '*'\n                ) {\n                    return 'COUNT(*)';\n                }\n\n                return (\n                    name +\n                    '(' +\n                    (col.prefix ? `${col.prefix.toUpperCase()} ` : '') +\n                    (col.args\n                        ? this._buildColumns(\n                              col.args,\n                              params,\n                              hasJoining,\n                              aliasMap\n                          )\n                        : '') +\n                    ')'\n                );\n            }\n\n            if (col.type === 'expression') {\n                return this._joinCondition(\n                    col.expr,\n                    params,\n                    null,\n                    hasJoining,\n                    aliasMap\n                );\n            }\n\n            if (col.type === 'column') {\n                return this._escapeIdWithAlias(col.name, hasJoining, aliasMap);\n            }\n        }\n\n        throw new ApplicationError(\n            `Unknow column syntax: ${JSON.stringify(col)}`\n        );\n    }\n\n    _buildGroupBy(groupBy, params, hasJoining, aliasMap) {\n        if (typeof groupBy === 'string')\n            return (\n                'GROUP BY ' +\n                this._escapeIdWithAlias(groupBy, hasJoining, aliasMap)\n            );\n\n        if (Array.isArray(groupBy))\n            return (\n                'GROUP BY ' +\n                groupBy\n                    .map((by) =>\n                        this._escapeIdWithAlias(by, hasJoining, aliasMap)\n                    )\n                    .join(', ')\n            );\n\n        if (_.isPlainObject(groupBy)) {\n            let { columns, having } = groupBy;\n\n            if (!columns || !Array.isArray(columns)) {\n                throw new ApplicationError(\n                    `Invalid group by syntax: ${JSON.stringify(groupBy)}`\n                );\n            }\n\n            let groupByClause = this._buildGroupBy(columns);\n            let havingCluse =\n                having &&\n                this._joinCondition(having, params, null, hasJoining, aliasMap);\n            if (havingCluse) {\n                groupByClause += ' HAVING ' + havingCluse;\n            }\n\n            return groupByClause;\n        }\n\n        throw new ApplicationError(\n            `Unknown group by syntax: ${JSON.stringify(groupBy)}`\n        );\n    }\n\n    _buildOrderBy(orderBy, hasJoining, aliasMap) {\n        if (typeof orderBy === 'string')\n            return (\n                'ORDER BY ' +\n                this._escapeIdWithAlias(orderBy, hasJoining, aliasMap)\n            );\n\n        if (Array.isArray(orderBy))\n            return (\n                'ORDER BY ' +\n                orderBy\n                    .map((by) =>\n                        this._escapeIdWithAlias(by, hasJoining, aliasMap)\n                    )\n                    .join(', ')\n            );\n\n        if (_.isPlainObject(orderBy)) {\n            return (\n                'ORDER BY ' +\n                _.map(\n                    orderBy,\n                    (asc, col) =>\n                        this._escapeIdWithAlias(col, hasJoining, aliasMap) +\n                        (asc === false || asc == '-1' ? ' DESC' : '')\n                ).join(', ')\n            );\n        }\n\n        throw new ApplicationError(\n            `Unknown order by syntax: ${JSON.stringify(orderBy)}`\n        );\n    }\n\n    async _getConnection_(options) {\n        return options && options.connection\n            ? options.connection\n            : this.connect_(options);\n    }\n\n    async _releaseConnection_(conn, options) {\n        if (!options || !options.connection) {\n            return this.disconnect_(conn);\n        }\n    }\n}\n\nMySQLConnector.driverLib = mysql;\n\nmodule.exports = MySQLConnector;\n"],"file":"Connector.js"}