{"version":3,"file":"Connector.js","names":["_","require","tryRequire","mysql","Connector","ApplicationError","InvalidArgument","isQuoted","ntol","connSym","Symbol","for","MySQLConnector","typeCast","value","t","isLuxonDateTime","toISO","includeOffset","constructor","connectionString","options","escape","escapeId","format","raw","queryCount","alias","fieldName","type","name","args","$call","extra","$as","nullOrIs","$exists","$eq","updatedCount","context","result","affectedRows","deletedCount","insertOne_","create_","updateOne_","update_","relational","acitveConnections","Set","executedCount","end_","size","conn","disconnect_","pool","end","log","connect_","connProps","createDatabase","database","multipleStatements","csKey","isEmpty","makeNewConnectionString","createConnection","getConnectionStringWithoutCredential","createPool","getConnection","add","has","delete","release","beginTransaction_","isolationLevel","find","IsolationLevels","key","query","ret","$$autocommit","commit_","rollback_","execute_","sql","params","_getConnection_","usePreparedStatement","logStatement","rowsAsArray","rows","execute","rows1","rows2","err","info","truncate","length","_releaseConnection_","ping_","ping","model","data","insertIgnore","restOptions","push","upsertOne_","uniqueKeys","dataOnInsert","dataWithoutUK","omit","insertData","upsert","upsertMany_","fieldsOnInsert","dataArrayOnInsert","dataExprOnUpdate","Array","isArray","map","f","join","insertMany_","fields","queryOptions","connOptions","aliasMap","joinings","hasJoining","joiningParams","$relationships","_joinAssociations","forEach","p","$requireSplitColumns","_splitColumnsAsInput","hasWhere","whereClause","_joinCondition","returnUpdated","connection","keyField","isInteger","$limit","_1","_result","_changedKeys","separator","quotedSeparator","toString","split","replace_","delete_","deleteOptions","find_","condition","sqlInfo","buildQuery","_executeQuery_","aggregate_","pipeline","startingQuery","_pipeline","stage","i","_params","concat","_buildCTEHeader","fromTable","withTables","subSql","$projection","$query","$groupBy","$orderBy","$offset","$totalCount","$key","hasTotalCount","needDistinctForLimit","_model","countParams","selectParams","selectColomns","_buildColumns","fromClause","fromAndJoin","whereParams","groupByClause","groupByParams","_buildGroupBy","orderByClause","_buildOrderBy","limitOffetParams","limitOffset","_buildLimitOffset","distinctField","_escapeIdWithAlias","countSubject","countSql","distinctFieldWithAlias","keysSql","keySqlAliasIndex","Object","keys","keySqlAnchor","_joinAssociation","joinType","on","oorType","output","console","Number","MAX_SAFE_INTEGER","getInsertedId","insertId","undefined","getNumOfAffectedRows","totalCount","countResult","count","reverseAliasMap","reduce","nodePath","slice","$skipOrm","_generateAlias","index","anchor","verboseAlias","snakeCase","toUpperCase","associations","parentAliasKey","startId","each","assocInfo","entity","subAssocs","aliasKey","subJoinings","sj","joinOperator","c","isPlainObject","_packValue","startsWith","Error","left","right","op","_wrapCondition","JSON","stringify","_replaceFieldNameWithAlias","mainEntity","parts","actualFieldName","pop","v","_packArray","array","statement","inject","isNil","$in","hasOperator","k","indexOf","columns","castArray","col","_buildColumn","lastDotIndex","lastIndexOf","substr","fullPath","aliasPrefix","windowFunctions","over","windowableFunctions","funcClause","prefix","$partitionBy","_buildPartitionBy","expr","_buildGroupByColumn","groupBy","_buildGroupByList","by","having","havingCluse","partitionBy","orderBy","asc","freeze","RepeatableRead","ReadCommitted","ReadUncommitted","Rerializable","driverLib","module","exports"],"sources":["../../../src/drivers/mysql/Connector.js"],"sourcesContent":["const { _ } = require('@genx/july');\nconst { tryRequire } = require('@genx/sys');\nconst mysql = tryRequire('mysql2/promise');\nconst Connector = require('../../Connector');\nconst { ApplicationError, InvalidArgument } = require('../../utils/Errors');\nconst { isQuoted } = require('../../utils/lang');\nconst ntol = require('number-to-letter');\n\nconst connSym = Symbol.for('conn');\n\n/**\n * SQL execution sequence\n * FROM clause\n * WHERE clause\n * GROUP BY clause\n * HAVING clause\n * SELECT clause\n * ORDER BY clause\n */\n\n/**\n * MySQL data storage connector.\n * @class\n * @extends Connector\n */\nclass MySQLConnector extends Connector {\n    /**\n     * Transaction isolation level\n     * {@link https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html}\n     * @member {object}\n     */\n    static IsolationLevels = Object.freeze({\n        RepeatableRead: 'REPEATABLE READ',\n        ReadCommitted: 'READ COMMITTED',\n        ReadUncommitted: 'READ UNCOMMITTED',\n        Rerializable: 'SERIALIZABLE',\n    });\n\n    static windowFunctions = new Set([\n        'CUME_DIST',\n        'DENSE_RANK',\n        'FIRST_VALUE',\n        'LAG',\n        'LAST_VALUE',\n        'LEAD',\n        'NTH_VALUE',\n        'NTILE',\n        'PERCENT_RANK',\n        'RANK',\n        'ROW_NUMBER',\n    ]);\n\n    static windowableFunctions = new Set([\n        'AVG',\n        'BIT_AND',\n        'BIT_OR',\n        'BIT_XOR',\n        'COUNT',\n        'JSON_ARRAYAGG',\n        'JSON_OBJECTAGG',\n        'MAX',\n        'MIN',\n        'STDDEV_POP',\n        'STDDEV',\n        'STD',\n        'STDDEV_SAMP',\n        'SUM',\n        'VAR_POP',\n        'VARIANCE',\n        'VAR_SAMP',\n    ]);\n\n    escape = mysql.escape;\n    escapeId = mysql.escapeId;\n    format = mysql.format;\n    raw = mysql.raw;\n    queryCount = (alias, fieldName) => ({\n        type: 'function',\n        name: 'COUNT',\n        args: [fieldName || '*'],\n        alias: alias || 'count',\n    });\n\n    $call = (name, alias, args, extra) => ({\n        ...extra,\n        type: 'function',\n        name,\n        alias,\n        args,\n    });\n    $as = (name, alias) => ({ type: 'column', name, alias });\n\n    // in mysql, null value comparison will never return true, even null != 1\n    nullOrIs = (fieldName, value) => [\n        { [fieldName]: { $exists: false } },\n        { [fieldName]: { $eq: value } },\n    ];\n\n    updatedCount = (context) => context.result.affectedRows;\n    deletedCount = (context) => context.result.affectedRows;\n\n    typeCast(value) {\n        const t = typeof value;\n\n        if (t === 'boolean') return value ? 1 : 0;\n\n        if (t === 'object') {\n            if (value != null && value.isLuxonDateTime) {\n                return value.toISO({ includeOffset: false });\n            }\n        }\n\n        return value;\n    }\n\n    /**\n     * @param {string} name\n     * @param {object} options\n     * @property {boolean} [options.usePreparedStatement] - Flat to use prepared statement to improve query performance.\n     * @property {boolean} [options.logStatement] - Flag to log executed SQL statement.\n     */\n    constructor(connectionString, options) {\n        super('mysql', connectionString, options);\n\n        this.relational = true;\n        this.acitveConnections = new Set();\n        this.executedCount = 0;\n    }\n\n    /**\n     * Close all connection initiated by this connector.\n     */\n    async end_() {\n        if (this.acitveConnections.size > 0) {\n            for (const conn of this.acitveConnections) {\n                await this.disconnect_(conn);\n            }\n        }\n\n        if (this.pool) {\n            await this.pool.end();\n            this.log(\n                'verbose',\n                `Close connection pool \"${this.pool[connSym]}\".`\n            );\n            delete this.pool;\n        }\n    }\n\n    /**\n     * Create a database connection based on the default connection string of the connector and given options.\n     * @param {Object} [options] - Extra options for the connection, optional.\n     * @property {bool} [options.multipleStatements=false] - Allow running multiple statements at a time.\n     * @property {bool} [options.createDatabase=false] - Flag to used when creating a database.\n     * @returns {Promise.<MySQLConnection>}\n     */\n    async connect_(options) {\n        if (options) {\n            const connProps = {};\n\n            if (options.createDatabase) {\n                // remove the database from connection\n                connProps.database = '';\n            }\n\n            if (options.multipleStatements) {\n                connProps.options = { multipleStatements: true };\n            }\n\n            const csKey = _.isEmpty(connProps)\n                ? null\n                : this.makeNewConnectionString(connProps);\n\n            if (csKey && csKey !== this.connectionString) {\n                // create standalone connection\n                const conn = await mysql.createConnection(csKey);\n\n                conn[connSym] =\n                    this.getConnectionStringWithoutCredential(csKey);\n                this.log(\n                    'verbose',\n                    `Create non-pool connection to \"${conn[connSym]}\".`\n                );\n\n                return conn;\n            }\n        }\n\n        if (!this.pool) {\n            this.pool = mysql.createPool(this.connectionString);\n            this.pool[connSym] = this.getConnectionStringWithoutCredential();\n            this.log(\n                'verbose',\n                `Create connection pool to \"${this.pool[connSym]}\".`\n            );\n        }\n\n        const conn = await this.pool.getConnection();\n        this.acitveConnections.add(conn);\n\n        this.log('debug', `Get connection from pool \"${this.pool[connSym]}\".`);\n\n        return conn;\n    }\n\n    /**\n     * Close a database connection.\n     * @param {MySQLConnection} conn - MySQL connection.\n     */\n    async disconnect_(conn) {\n        if (this.acitveConnections.has(conn)) {\n            this.log(\n                'debug',\n                `Release connection to pool \"${this.pool[connSym]}\".`\n            );\n            this.acitveConnections.delete(conn);\n            return conn.release();\n        } else {\n            this.log(\n                'verbose',\n                `Disconnect non-pool connection from \"${conn[connSym]}\".`\n            );\n            // not created by pool\n            return conn.end();\n        }\n    }\n\n    /**\n     * Start a transaction.\n     * @param {object} options - Options\n     * @property {string} [options.isolationLevel]\n     */\n    async beginTransaction_(options) {\n        const conn = await this.connect_();\n\n        if (options && options.isolationLevel) {\n            // only allow valid option value to avoid injection attach\n            const isolationLevel = _.find(\n                MySQLConnector.IsolationLevels,\n                (value, key) =>\n                    options.isolationLevel === key ||\n                    options.isolationLevel === value\n            );\n            if (!isolationLevel) {\n                throw new ApplicationError(\n                    `Invalid isolation level: \"${isolationLevel}\"!\"`\n                );\n            }\n\n            await conn.query(\n                'SET SESSION TRANSACTION ISOLATION LEVEL ' + isolationLevel\n            );\n\n            this.log('verbose', `Change isolation level to: ${isolationLevel}`);\n        }\n\n        const [ret] = await conn.query('SELECT @@autocommit;');\n        conn.$$autocommit = ret[0]['@@autocommit'];\n\n        await conn.query('SET SESSION autocommit=0;');\n        await conn.query('START TRANSACTION;');\n\n        this.log('verbose', 'Begins a new transaction.');\n        return conn;\n    }\n\n    /**\n     * Commit a transaction.\n     * @param {MySQLConnection} conn - MySQL connection.\n     */\n    async commit_(conn) {\n        await conn.query('COMMIT;');\n        this.log(\n            'verbose',\n            `Commits a transaction. Previous autocommit=${conn.$$autocommit}`\n        );\n        if (conn.$$autocommit) {\n            await conn.query('SET SESSION autocommit=1;');\n            delete conn.$$autocommit;\n        }\n\n        return this.disconnect_(conn);\n    }\n\n    /**\n     * Rollback a transaction.\n     * @param {MySQLConnection} conn - MySQL connection.\n     */\n    async rollback_(conn) {\n        await conn.query('ROLLBACK;');\n        this.log(\n            'verbose',\n            `Rollbacks a transaction. Previous autocommit=${conn.$$autocommit}`\n        );\n        if (conn.$$autocommit) {\n            await conn.query('SET SESSION autocommit=1;');\n            delete conn.$$autocommit;\n        }\n\n        return this.disconnect_(conn);\n    }\n\n    /**\n     * Execute the sql statement.\n     *\n     * @param {String} sql - The SQL statement to execute.\n     * @param {object} params - Parameters to be placed into the SQL statement.\n     * @param {object} [options] - Execution options.\n     * @property {boolean} [options.usePreparedStatement] - Whether to use prepared statement which is cached and re-used by connection.\n     * @property {boolean} [options.rowsAsArray] - To receive rows as array of columns instead of hash with column name as key.\n     * @property {MySQLConnection} [options.connection] - Existing connection.\n     */\n    async execute_(sql, params, options) {\n        let conn;\n\n        try {\n            conn = await this._getConnection_(options);\n\n            if (\n                this.options.usePreparedStatement ||\n                (options && options.usePreparedStatement)\n            ) {\n                if (this.options.logStatement) {\n                    this.log('verbose', conn.format(sql, params));\n                }\n\n                if (options && options.rowsAsArray) {\n                    const rows = await conn.execute(\n                        { sql, rowsAsArray: true },\n                        params\n                    );\n\n                    this.executedCount++;\n                    return rows;\n                }\n\n                const [rows1] = await conn.execute(sql, params);\n                this.executedCount++;\n\n                return rows1;\n            }\n\n            if (this.options.logStatement) {\n                this.log('verbose', conn.format(sql, params));\n            }\n\n            if (options && options.rowsAsArray) {\n                const result = await conn.query(\n                    { sql, rowsAsArray: true },\n                    params\n                );\n                this.executedCount++;\n                return result;\n            }\n\n            const [rows2] = await conn.query(sql, params);\n            this.executedCount++;\n\n            return rows2;\n        } catch (err) {\n            err.info || (err.info = {});\n            err.info.sql = _.truncate(sql, { length: 200 });\n            err.info.params = params;\n\n            throw err;\n        } finally {\n            conn && (await this._releaseConnection_(conn, options));\n        }\n    }\n\n    async ping_() {\n        const [ping] = await this.execute_('SELECT 1 AS result');\n        return ping && ping.result === 1;\n    }\n\n    /**\n     * Create a new entity.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} options\n     */\n    async create_(model, data, options) {\n        if (!data || _.isEmpty(data)) {\n            throw new ApplicationError(`Creating with empty \"${model}\" data.`);\n        }\n\n        const { insertIgnore, ...restOptions } = options || {};\n\n        const sql = `INSERT ${insertIgnore ? 'IGNORE ' : ''}INTO ?? SET ?`;\n        const params = [model];\n        params.push(data);\n\n        return this.execute_(sql, params, restOptions);\n    }\n\n    /**\n     * Create a new entity or update the old one if duplicate key found.\n     * @param {*} model\n     * @param {*} data\n     * @param {*} uniqueKeys\n     * @param {*} options\n     * @param {object} dataOnInsert - When no duplicate record exists, extra data for inserting\n     * @returns {object}\n     */\n    async upsertOne_(model, data, uniqueKeys, options, dataOnInsert) {\n        if (!data || _.isEmpty(data)) {\n            throw new ApplicationError(`Creating with empty \"${model}\" data.`);\n        }\n\n        const dataWithoutUK = _.omit(data, uniqueKeys);\n        const insertData = { ...data, ...dataOnInsert };\n\n        if (_.isEmpty(dataWithoutUK)) {\n            // if dupliate, dont need to update\n            return this.create_(model, insertData, {\n                ...options,\n                insertIgnore: true,\n            });\n        }\n\n        const sql = `INSERT INTO ?? SET ? ON DUPLICATE KEY UPDATE ?`;\n        const params = [model];\n        params.push(insertData);\n        params.push(dataWithoutUK);\n\n        const result = await this.execute_(sql, params, options);\n\n        return {\n            upsert: true,\n            ...result,\n        };\n    }\n\n    /**\n     * Insert many records or update existings if duplicate key found.\n     * @param {*} model\n     * @param {array} dataArrayOnInsert\n     * @param {*} uniqueKeys\n     * @param {*} options\n     * @param {object} dataExprOnUpdate - When duplicate record exists, the actual data used for updating\n     * @returns {object}\n     */\n    async upsertMany_(\n        model,\n        fieldsOnInsert,\n        dataArrayOnInsert,\n        dataExprOnUpdate,\n        options\n    ) {\n        if (!dataArrayOnInsert || _.isEmpty(dataArrayOnInsert)) {\n            throw new ApplicationError(\n                `Upserting with empty \"${model}\" insert data.`\n            );\n        }\n\n        if (!Array.isArray(dataArrayOnInsert)) {\n            throw new ApplicationError(\n                '\"data\" to bulk upsert should be an array of records.'\n            );\n        }\n\n        if (!dataExprOnUpdate || _.isEmpty(dataExprOnUpdate)) {\n            throw new ApplicationError(\n                `Upserting with empty \"${model}\" update data.`\n            );\n        }\n\n        if (!Array.isArray(fieldsOnInsert)) {\n            throw new ApplicationError(\n                '\"fields\" to bulk upsert should be an array of field names.'\n            );\n        }\n\n        const sql = `INSERT INTO ?? (${fieldsOnInsert\n            .map((f) => this.escapeId(f))\n            .join(', ')}) VALUES ? ON DUPLICATE KEY UPDATE ?`;\n        const params = [model];\n        params.push(dataArrayOnInsert);\n        params.push(dataExprOnUpdate);\n\n        return this.execute_(sql, params, options);\n    }\n\n    /**\n     * Insert many records in one SQL\n     * @param {*} model\n     * @param {*} fields\n     * @param {*} data\n     * @param {*} options\n     * @returns {object}\n     */\n    async insertMany_(model, fields, data, options) {\n        if (!data || _.isEmpty(data)) {\n            throw new ApplicationError(`Creating with empty \"${model}\" data.`);\n        }\n\n        if (!Array.isArray(data)) {\n            throw new ApplicationError(\n                '\"data\" to bulk insert should be an array of records.'\n            );\n        }\n\n        if (!Array.isArray(fields)) {\n            throw new ApplicationError(\n                '\"fields\" to bulk insert should be an array of field names.'\n            );\n        }\n\n        const { insertIgnore, ...restOptions } = options || {};\n\n        const sql = `INSERT ${insertIgnore ? 'IGNORE ' : ''}INTO ?? (${fields\n            .map((f) => this.escapeId(f))\n            .join(', ')}) VALUES ?`;\n        const params = [model];\n        params.push(data);\n\n        return this.execute_(sql, params, restOptions);\n    }\n\n    insertOne_ = this.create_;\n\n    /**\n     * Update an existing entity.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} query\n     * @param {*} queryOptions\n     * @property {object} [queryOptions.$relationships] - Parsed relatinships\n     * @property {boolean} [queryOptions.$requireSplitColumn] - Whether to use set field=value\n     * @property {integer} [queryOptions.$limit]\n     * @param {*} connOptions\n     * @return {object}\n     */\n    async update_(model, data, query, queryOptions, connOptions) {\n        if (_.isEmpty(data)) {\n            throw new InvalidArgument('Data record is empty.', {\n                model,\n                query,\n            });\n        }\n\n        const params = [];\n        const aliasMap = { [model]: 'A' };\n        let joinings;\n        let hasJoining = false;\n        const joiningParams = [];\n\n        if (queryOptions && queryOptions.$relationships) {\n            joinings = this._joinAssociations(\n                queryOptions.$relationships,\n                model,\n                aliasMap,\n                1,\n                joiningParams\n            );\n            hasJoining = model;\n        }\n\n        let sql = 'UPDATE ' + mysql.escapeId(model);\n\n        if (hasJoining) {\n            joiningParams.forEach((p) => params.push(p));\n            sql += ' A ' + joinings.join(' ');\n        }\n\n        if ((queryOptions && queryOptions.$requireSplitColumns) || hasJoining) {\n            sql +=\n                ' SET ' +\n                this._splitColumnsAsInput(\n                    data,\n                    params,\n                    hasJoining,\n                    aliasMap\n                ).join(',');\n        } else {\n            params.push(data);\n            sql += ' SET ?';\n        }\n\n        let hasWhere = false;\n\n        if (query) {\n            const whereClause = this._joinCondition(\n                query,\n                params,\n                null,\n                hasJoining,\n                aliasMap\n            );\n            if (whereClause) {\n                sql += ' WHERE ' + whereClause;\n                hasWhere = true;\n            }\n        }\n\n        if (!hasWhere) {\n            throw new ApplicationError(\n                'Update without where clause is not allowed.'\n            );\n        }\n\n        if (connOptions && connOptions.returnUpdated) {\n            if (connOptions.connection) {\n                throw new ApplicationError(\n                    'Since \"returnUpdated\" will create a new connection with \"multipleStatements\" enabled, it cannot be used within a transaction.'\n                );\n            }\n\n            connOptions = { ...connOptions, multipleStatements: 1 };\n\n            let { keyField } = connOptions.returnUpdated;\n            keyField = this.escapeId(keyField);\n\n            if (queryOptions && _.isInteger(queryOptions.$limit)) {\n                sql += ` AND (SELECT @key := ${keyField})`;\n                sql += ` LIMIT ${queryOptions.$limit}`;\n                sql = `SET @key := null; ${sql}; SELECT @key;`;\n\n                const [_1, _result, [_changedKeys]] = await this.execute_(\n                    sql,\n                    params,\n                    connOptions\n                );\n\n                return [_result, _changedKeys['@key']];\n            }\n\n            const { separator = ',' } = connOptions.returnUpdated;\n            const quotedSeparator = this.escape(separator);\n\n            sql += ` AND (SELECT find_in_set(${keyField}, @keys := CONCAT_WS(${quotedSeparator}, ${keyField}, @keys)))`;\n            sql = `SET @keys := null; ${sql}; SELECT @keys;`;\n\n            const [_1, _result, [_changedKeys]] = await this.execute_(\n                sql,\n                params,\n                connOptions\n            );\n\n            return [\n                _result,\n                _changedKeys['@keys']\n                    ? _changedKeys['@keys'].toString().split(separator)\n                    : [],\n            ];\n        }\n\n        if (queryOptions && _.isInteger(queryOptions.$limit)) {\n            sql += ` LIMIT ${queryOptions.$limit}`;\n        }\n\n        return this.execute_(sql, params, connOptions);\n    }\n\n    updateOne_ = this.update_;\n\n    /**\n     * Replace an existing entity or create a new one.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} options\n     */\n    async replace_(model, data, options) {\n        const params = [model, data];\n\n        const sql = 'REPLACE ?? SET ?';\n\n        return this.execute_(sql, params, options);\n    }\n\n    /**\n     * Remove an existing entity.\n     * @param {string} model\n     * @param {*} query\n     * @param {*} deleteOptions\n     * @param {*} options\n     */\n    async delete_(model, query, deleteOptions, options) {\n        const params = [model];\n        const aliasMap = { [model]: 'A' };\n        let joinings;\n        let hasJoining = false;\n        const joiningParams = [];\n\n        if (deleteOptions && deleteOptions.$relationships) {\n            joinings = this._joinAssociations(\n                deleteOptions.$relationships,\n                model,\n                aliasMap,\n                1,\n                joiningParams\n            );\n            hasJoining = model;\n        }\n\n        let sql;\n\n        if (hasJoining) {\n            joiningParams.forEach((p) => params.push(p));\n            sql = 'DELETE A FROM ?? A ' + joinings.join(' ');\n        } else {\n            sql = 'DELETE FROM ??';\n        }\n\n        const whereClause = this._joinCondition(\n            query,\n            params,\n            null,\n            hasJoining,\n            aliasMap\n        );\n        if (whereClause) {\n            sql += ' WHERE ' + whereClause;\n        }\n\n        return this.execute_(sql, params, options);\n    }\n\n    /**\n     * Perform select operation.\n     * @param {*} model\n     * @param {*} condition\n     * @param {*} connOptions\n     */\n    async find_(model, condition, connOptions) {\n        const sqlInfo = this.buildQuery(model, condition);\n        return this._executeQuery_(sqlInfo, condition, connOptions);\n    }\n\n    /**\n     * Run aggregate pipeline\n     * @param {string} model\n     * @param {array} pipeline\n     * @param {object} [connOptions]\n     * @returns {*}\n     */\n    async aggregate_(model, pipeline, connOptions) {\n        if (!Array.isArray(pipeline) || pipeline.length === 0) {\n            throw new InvalidArgument('\"pipeline\" should be an unempty array.');\n        }\n\n        const [startingQuery, ..._pipeline] = pipeline;\n\n        let query = this.buildQuery(model, startingQuery);\n\n        _pipeline.forEach((stage, i) => {\n            let _params = query.params;\n\n            query = this.buildQuery(\n                {\n                    sql: query.sql,\n                    alias: `_STAGE_${i}`,\n                },\n                stage\n            );\n\n            query.params = _params.concat(query.params);\n        });\n\n        return this._executeQuery_(query, null, connOptions);\n    }\n\n    /**\n     * Build CTE header and return the select from target and CTE header\n     * @param {*} model\n     * @returns {object} { fromTable, withTables }\n     */\n    _buildCTEHeader(model) {\n        let fromTable = mysql.escapeId(model);\n        let withTables = '';\n\n        // CTE, used by aggregation\n        if (typeof model === 'object') {\n            const { sql: subSql, alias } = model;\n\n            model = alias;\n            fromTable = alias;\n            withTables = `WITH ${alias} AS (${subSql}) `;\n        }\n\n        return { fromTable, withTables, model };\n    }\n\n    /**\n     * Build sql statement\n     * @param {*} model\n     * @param {*} condition\n     */\n    buildQuery(\n        model,\n        {\n            $relationships,\n            $projection,\n            $query,\n            $groupBy,\n            $orderBy,\n            $offset,\n            $limit,\n            $totalCount,\n            $key\n        }\n    ) {\n        const hasTotalCount = $totalCount;\n        let needDistinctForLimit =\n            ($limit != null && $limit > 0) || ($offset != null && $offset > 0);\n\n        const {\n            fromTable,\n            withTables,\n            model: _model,\n        } = this._buildCTEHeader(model);\n        model = _model;\n\n        const aliasMap = { [model]: 'A' };\n\n        let joinings;\n        let hasJoining = false;\n        const joiningParams = [];\n\n        // build alias map first\n        // cache params\n        if ($relationships) {\n            joinings = this._joinAssociations(\n                $relationships,\n                model,\n                aliasMap,\n                1,\n                joiningParams\n            );\n            hasJoining = model;            \n        }\n\n        // !!!limit or offset with mutiple joining requires group by distinct field to calculate the correct number of records\n        needDistinctForLimit &&= hasJoining;\n\n        // count does not require selectParams\n        const countParams = hasTotalCount ? joiningParams.concat() : null;\n\n        // Build select columns\n        const selectParams = [];\n        const selectColomns = $projection\n            ? this._buildColumns(\n                  $projection,\n                  selectParams,\n                  hasJoining,\n                  aliasMap\n              )\n            : '*';\n\n        // Build from clause\n        let fromClause = ' FROM ' + fromTable;\n        let fromAndJoin = fromClause;\n        if (joinings) {\n            fromAndJoin +=  ' A ' + joinings.join(' ');\n        }\n\n        // Build where clause\n        let whereClause = '';\n        const whereParams = [];\n\n        if ($query) {\n            whereClause = this._joinCondition(\n                $query,\n                whereParams,\n                null,\n                hasJoining,\n                aliasMap\n            );\n\n            if (whereClause) {\n                whereClause = ' WHERE ' + whereClause;\n                if (countParams) {\n                    whereParams.forEach((p) => {\n                        countParams.push(p);\n                    });\n                }\n            }\n        }\n\n        // Build group by clause\n        let groupByClause = '';\n        const groupByParams = [];\n\n        if ($groupBy) {\n            groupByClause +=\n                ' ' +\n                this._buildGroupBy(\n                    $groupBy,\n                    groupByParams,\n                    hasJoining,\n                    aliasMap\n                );\n            if (countParams) {\n                groupByParams.forEach((p) => {\n                    countParams.push(p);\n                });\n            }\n        }\n\n        // Build order by clause\n        let orderByClause = '';\n        if ($orderBy) {\n            orderByClause +=\n                ' ' +\n                this._buildOrderBy(\n                    $orderBy,\n                    hasJoining,\n                    aliasMap\n                );\n        }\n\n        // Build limit & offset clause\n        const limitOffetParams = [];\n        let limitOffset = this._buildLimitOffset(\n            $limit,\n            $offset,\n            limitOffetParams\n        );\n\n        const result = { hasJoining, aliasMap };\n\n        if (hasTotalCount || needDistinctForLimit) {\n            // The field used as the key of counting\n            const distinctField = this._escapeIdWithAlias(\n                typeof $totalCount === 'string' ? $totalCount : $key,\n                hasJoining,\n                aliasMap\n            );\n\n            if (hasTotalCount) {\n                const countSubject = 'DISTINCT(' + distinctField + ')';\n\n                result.countSql =\n                    withTables +\n                    `SELECT COUNT(${countSubject}) AS count` +\n                    fromAndJoin +\n                    whereClause +\n                    groupByClause;\n                result.countParams = countParams;\n            } \n\n            const distinctFieldWithAlias = `${distinctField} AS key_`;\n            const keysSql = `WITH records_ AS (SELECT ${distinctFieldWithAlias}${fromAndJoin}${whereClause}${groupByClause}${orderByClause}) SELECT key_ FROM records_ GROUP BY key_${limitOffset}`;\n\n            const keySqlAliasIndex = Object.keys(aliasMap).length;\n            const keySqlAnchor = ntol(keySqlAliasIndex);\n            this._joinAssociation(\n                {\n                    sql: keysSql,\n                    params: joiningParams.concat(\n                        whereParams,\n                        groupByParams,\n                        limitOffetParams\n                    ),\n                    joinType: 'INNER JOIN',\n                    on: {\n                        [$key]: {\n                            oorType: 'ColumnReference',\n                            name: `${keySqlAnchor}.key_`,\n                        },\n                    },\n                    output: true,\n                },\n                keySqlAnchor,\n                joinings,\n                model,\n                aliasMap,\n                keySqlAliasIndex,\n                joiningParams\n            );\n\n            fromAndJoin = fromClause + ' A ' + joinings.join(' ');\n\n            result.sql =\n                withTables +\n                'SELECT ' +\n                selectColomns +\n                fromAndJoin +\n                whereClause;\n            result.params = selectParams.concat(joiningParams, whereParams);\n        } else {\n            result.sql =\n                withTables +\n                'SELECT ' +\n                selectColomns +\n                fromAndJoin +\n                whereClause +\n                groupByClause +\n                orderByClause +\n                limitOffset;\n\n            result.params = selectParams.concat(\n                joiningParams,\n                whereParams,\n                groupByParams,\n                limitOffetParams\n            );\n        }\n\n        console.log(result);\n\n        return result;\n    }\n\n    /**\n     * Build limit and offset clause\n     * @param {*} $limit\n     * @param {*} $offset\n     * @param {*} params\n     * @returns {string} '' or ' LIMIT X, Y'\n     */\n    _buildLimitOffset($limit, $offset, params) {\n        let sql = '';\n\n        if (_.isInteger($limit) && $limit > 0) {\n            if (_.isInteger($offset) && $offset > 0) {\n                sql = ' LIMIT ?, ?';\n                params.push($offset);\n                params.push($limit);\n            } else {\n                sql = ' LIMIT ?';\n                params.push($limit);\n            }\n        } else if (_.isInteger($offset) && $offset > 0) {\n            sql = ` LIMIT ?, ${Number.MAX_SAFE_INTEGER}`;\n            params.push($offset);\n        }\n\n        return sql;\n    }\n\n    getInsertedId(result) {\n        return result && typeof result.insertId === 'number'\n            ? result.insertId\n            : undefined;\n    }\n\n    getNumOfAffectedRows(result) {\n        return result && typeof result.affectedRows === 'number'\n            ? result.affectedRows\n            : undefined;\n    }\n\n    async _executeQuery_(query, queryOptions, connOptions) {\n        let result, totalCount;\n\n        if (query.countSql) {\n            const [countResult] = await this.execute_(\n                query.countSql,\n                query.countParams,\n                connOptions\n            );\n            totalCount = countResult.count;\n        }\n\n        if (query.hasJoining) {\n            connOptions = { ...connOptions, rowsAsArray: true };\n            result = await this.execute_(query.sql, query.params, connOptions);\n\n            const reverseAliasMap = _.reduce(\n                query.aliasMap,\n                (result, alias, nodePath) => {\n                    result[alias] = nodePath\n                        .split('.')\n                        .slice(\n                            1\n                        ) /* .map(n => ':' + n) changed to be padding by orm and can be customized with other key getter */;\n                    return result;\n                },\n                {}\n            );\n\n            if (query.countSql) {\n                return result.concat([reverseAliasMap, totalCount]);\n            }\n\n            return result.concat([reverseAliasMap]);\n        } else if (queryOptions?.$skipOrm) {\n            connOptions = { ...connOptions, rowsAsArray: true };\n        }\n\n        result = await this.execute_(query.sql, query.params, connOptions);\n\n        if (query.countSql) {\n            return [result, totalCount];\n        }\n\n        return result;\n    }\n\n    _generateAlias(index, anchor) {\n        if (this.options.verboseAlias) {\n            return `${_.snakeCase(anchor).toUpperCase()}${index}`;\n        }\n\n        return ntol(index);\n    }\n\n    /**\n     * Extract associations into joining clauses.\n     *  {\n     *      entity: <remote entity>\n     *      joinType: 'LEFT JOIN|INNER JOIN|FULL OUTER JOIN'\n     *      anchor: 'local property to place the remote entity'\n     *      localField: <local field to join>\n     *      remoteField: <remote field to join>\n     *      subAssociations: { ... }\n     *  }\n     *\n     * @param {*} associations\n     * @param {*} parentAliasKey\n     * @param {*} aliasMap\n     * @param {*} params\n     * @param {*} startId\n     * @param {*} params\n     * @returns {object}\n     */\n    _joinAssociations(associations, parentAliasKey, aliasMap, startId, params) {\n        let joinings = [];\n\n        _.each(associations, (assocInfo, anchor) => {\n            startId = this._joinAssociation(\n                assocInfo,\n                anchor,\n                joinings,\n                parentAliasKey,\n                aliasMap,\n                startId,\n                params\n            );\n        });\n\n        return joinings;\n    }\n\n    _joinAssociation(\n        assocInfo,\n        anchor,\n        joinings,\n        parentAliasKey,\n        aliasMap,\n        startId,\n        params\n    ) {\n        const alias = assocInfo.alias || this._generateAlias(startId++, anchor);\n        let { joinType, on } = assocInfo;\n\n        joinType || (joinType = 'LEFT JOIN');\n\n        if (assocInfo.sql) {\n            if (assocInfo.output) {\n                aliasMap[parentAliasKey + '.' + alias] = alias;\n            }\n\n            assocInfo.params.forEach((p) => params.push(p));\n            joinings.push(\n                `${joinType} (${\n                    assocInfo.sql\n                }) ${alias} ON ${this._joinCondition(\n                    on,\n                    params,\n                    null,\n                    parentAliasKey,\n                    aliasMap\n                )}`\n            );\n\n            return startId;\n        }\n\n        const { entity, subAssocs } = assocInfo;\n        const aliasKey = parentAliasKey + '.' + anchor;\n        aliasMap[aliasKey] = alias;\n\n        if (subAssocs) {\n            const subJoinings = this._joinAssociations(\n                subAssocs,\n                aliasKey,\n                aliasMap,\n                startId,\n                params\n            );\n            startId += subJoinings.length;\n\n            joinings.push(\n                `${joinType} ${mysql.escapeId(\n                    entity\n                )} ${alias} ON ${this._joinCondition(\n                    on,\n                    params,\n                    null,\n                    parentAliasKey,\n                    aliasMap\n                )}`\n            );\n            subJoinings.forEach((sj) => joinings.push(sj));\n        } else {\n            joinings.push(\n                `${joinType} ${mysql.escapeId(\n                    entity\n                )} ${alias} ON ${this._joinCondition(\n                    on,\n                    params,\n                    null,\n                    parentAliasKey,\n                    aliasMap\n                )}`\n            );\n        }\n\n        return startId;\n    }\n\n    /**\n     * SQL condition representation\n     *   Rules:\n     *     default:\n     *        array: OR\n     *        kv-pair: AND\n     *     $all:\n     *        array: AND\n     *     $any:\n     *        kv-pair: OR\n     *     $not:\n     *        array: not ( or )\n     *        kv-pair: not ( and )\n     * @param {object} condition\n     * @param {array} params\n     */\n    _joinCondition(condition, params, joinOperator, hasJoining, aliasMap) {\n        if (Array.isArray(condition)) {\n            if (!joinOperator) {\n                joinOperator = 'OR';\n            }\n            return condition\n                .map(\n                    (c) =>\n                        '(' +\n                        this._joinCondition(\n                            c,\n                            params,\n                            null,\n                            hasJoining,\n                            aliasMap\n                        ) +\n                        ')'\n                )\n                .join(` ${joinOperator} `);\n        }\n\n        if (_.isPlainObject(condition)) {\n            if (condition.oorType) {\n                return this._packValue(condition, params, hasJoining, aliasMap);\n            }\n\n            if (!joinOperator) {\n                joinOperator = 'AND';\n            }\n\n            return _.map(condition, (value, key) => {\n                if (\n                    key === '$all' ||\n                    key === '$and' ||\n                    key.startsWith('$and_')\n                ) {\n                    // for avoiding duplicate, $or_1, $or_2 is valid\n                    if (!Array.isArray(value) && !_.isPlainObject(value)) {\n                        throw new Error(\n                            '\"$and\" operator value should be an array or plain object.'\n                        );\n                    }\n\n                    return (\n                        '(' +\n                        this._joinCondition(\n                            value,\n                            params,\n                            'AND',\n                            hasJoining,\n                            aliasMap\n                        ) +\n                        ')'\n                    );\n                }\n\n                if (key === '$any' || key === '$or' || key.startsWith('$or_')) {\n                    // for avoiding dupliate, $or_1, $or_2 is valid\n                    if (!Array.isArray(value) && !_.isPlainObject(value)) {\n                        throw new Error(\n                            '\"$or\" operator value should be an array or plain object.'\n                        );\n                    }\n\n                    return (\n                        '(' +\n                        this._joinCondition(\n                            value,\n                            params,\n                            'OR',\n                            hasJoining,\n                            aliasMap\n                        ) +\n                        ')'\n                    );\n                }\n\n                if (key === '$not') {\n                    if (Array.isArray(value)) {\n                        if (value.length === 0) {\n                            throw new Error(\n                                '\"$not\" operator value should be non-empty.'\n                            );\n                        }\n\n                        return (\n                            'NOT (' +\n                            this._joinCondition(\n                                value,\n                                params,\n                                null,\n                                hasJoining,\n                                aliasMap\n                            ) +\n                            ')'\n                        );\n                    }\n\n                    if (_.isPlainObject(value)) {\n                        if (_.isEmpty(value)) {\n                            throw new Error(\n                                '\"$not\" operator value should be non-empty.'\n                            );\n                        }\n\n                        return (\n                            'NOT (' +\n                            this._joinCondition(\n                                value,\n                                params,\n                                null,\n                                hasJoining,\n                                aliasMap\n                            ) +\n                            ')'\n                        );\n                    }\n\n                    if (typeof value !== 'string') {\n                        throw new Error('Unsupported condition!');\n                    }\n\n                    return 'NOT (' + condition + ')';\n                }\n\n                if (\n                    (key === '$expr' || key.startsWith('$expr_')) &&\n                    value.oorType &&\n                    value.oorType === 'BinaryExpression'\n                ) {\n                    const left = this._packValue(\n                        value.left,\n                        params,\n                        hasJoining,\n                        aliasMap\n                    );\n                    const right = this._packValue(\n                        value.right,\n                        params,\n                        hasJoining,\n                        aliasMap\n                    );\n                    return left + ` ${value.op} ` + right;\n                }\n\n                return this._wrapCondition(\n                    key,\n                    value,\n                    params,\n                    hasJoining,\n                    aliasMap\n                );\n            }).join(` ${joinOperator} `);\n        }\n\n        if (typeof condition !== 'string') {\n            throw new Error(\n                'Unsupported condition!\\n Value: ' + JSON.stringify(condition)\n            );\n        }\n\n        return condition;\n    }\n\n    _replaceFieldNameWithAlias(fieldName, mainEntity, aliasMap) {\n        const parts = fieldName.split('.');\n        if (parts.length > 1) {\n            const actualFieldName = parts.pop();\n            const aliasKey = mainEntity + '.' + parts.join('.');\n            const alias = aliasMap[aliasKey];\n            if (!alias) {\n                throw new InvalidArgument(\n                    `Column reference \"${fieldName}\" not found in populated associations.`,\n                    {\n                        entity: mainEntity,\n                        alias: aliasKey,\n                        aliasMap,\n                    }\n                );\n            }\n\n            return (\n                alias +\n                '.' +\n                (actualFieldName === '*'\n                    ? '*'\n                    : mysql.escapeId(actualFieldName))\n            );\n        }\n\n        if (aliasMap[fieldName] === fieldName) {\n            return mysql.escapeId(fieldName);\n        }\n\n        return (\n            aliasMap[mainEntity] +\n            '.' +\n            (fieldName === '*' ? '*' : mysql.escapeId(fieldName))\n        );\n    }\n\n    _escapeIdWithAlias(fieldName, mainEntity, aliasMap) {\n        if (mainEntity) {\n            return this._replaceFieldNameWithAlias(\n                fieldName,\n                mainEntity,\n                aliasMap\n            );\n        }\n\n        return fieldName === '*' ? fieldName : mysql.escapeId(fieldName);\n    }\n\n    _splitColumnsAsInput(data, params, hasJoining, aliasMap) {\n        return _.map(data, (v, fieldName) => {\n            return (\n                this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) +\n                '=' +\n                this._packValue(v, params, hasJoining, aliasMap)\n            );\n        });\n    }\n\n    _packArray(array, params, hasJoining, aliasMap) {\n        return array\n            .map((value) =>\n                this._packValue(value, params, hasJoining, aliasMap)\n            )\n            .join(',');\n    }\n\n    _packValue(value, params, hasJoining, aliasMap) {\n        if (_.isPlainObject(value)) {\n            if (value.oorType) {\n                switch (value.oorType) {\n                    case 'ColumnReference':\n                        return this._escapeIdWithAlias(\n                            value.name,\n                            hasJoining,\n                            aliasMap\n                        );\n\n                    case 'Function':\n                        return (\n                            value.name +\n                            '(' +\n                            (value.args\n                                ? this._packArray(\n                                      value.args,\n                                      params,\n                                      hasJoining,\n                                      aliasMap\n                                  )\n                                : '') +\n                            ')'\n                        );\n\n                    case 'Raw':\n                        return value.statement;\n\n                    case 'Query':\n                        return this._joinCondition(\n                            value.query,\n                            params,\n                            null,\n                            hasJoining,\n                            aliasMap\n                        );\n\n                    case 'BinaryExpression': {\n                        const left = this._packValue(\n                            value.left,\n                            params,\n                            hasJoining,\n                            aliasMap\n                        );\n                        const right = this._packValue(\n                            value.right,\n                            params,\n                            hasJoining,\n                            aliasMap\n                        );\n                        return left + ` ${value.op} ` + right;\n                    }\n\n                    default:\n                        throw new Error(`Unknown oor type: ${value.oorType}`);\n                }\n            }\n\n            value = JSON.stringify(value);\n        }\n\n        params.push(value);\n        return '?';\n    }\n\n    /**\n     * Wrap a condition clause\n     *\n     * Value can be a literal or a plain condition object.\n     *   1. fieldName, <literal>\n     *   2. fieldName, { normal object }\n     *\n     * @param {string} fieldName\n     * @param {*} value\n     * @param {array} params\n     */\n    _wrapCondition(fieldName, value, params, hasJoining, aliasMap, inject) {\n        if (_.isNil(value)) {\n            return (\n                this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) +\n                ' IS NULL'\n            );\n        }\n\n        if (Array.isArray(value)) {\n            return this._wrapCondition(\n                fieldName,\n                { $in: value },\n                params,\n                hasJoining,\n                aliasMap,\n                inject\n            );\n        }\n\n        if (_.isPlainObject(value)) {\n            if (value.oorType) {\n                return (\n                    this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) +\n                    ' = ' +\n                    this._packValue(value, params, hasJoining, aliasMap)\n                );\n            }\n\n            const hasOperator = _.find(\n                Object.keys(value),\n                (k) => k && k[0] === '$'\n            );\n\n            if (hasOperator) {\n                return _.map(value, (v, k) => {\n                    if (k && k[0] === '$') {\n                        // operator\n                        switch (k) {\n                            case '$exist':\n                            case '$exists':\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) + (v ? ' IS NOT NULL' : 'IS NULL')\n                                );\n\n                            case '$eq':\n                            case '$equal':\n                                return this._wrapCondition(\n                                    fieldName,\n                                    v,\n                                    params,\n                                    hasJoining,\n                                    aliasMap,\n                                    inject\n                                );\n\n                            case '$ne':\n                            case '$neq':\n                            case '$notEqual':\n                                if (_.isNil(v)) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) + ' IS NOT NULL'\n                                    );\n                                }\n\n                                v = this.typeCast(v);\n\n                                if (inject) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) +\n                                        ' <> ' +\n                                        v\n                                    );\n                                }\n\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) +\n                                    ` <> ${this._packValue(\n                                        v,\n                                        params,\n                                        hasJoining,\n                                        aliasMap\n                                    )}`\n                                );\n\n                            case '$>':\n                            case '$gt':\n                            case '$greaterThan':\n                                v = this.typeCast(v);\n\n                                if (inject) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) +\n                                        ' > ' +\n                                        v\n                                    );\n                                }\n\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) +\n                                    ` > ${this._packValue(\n                                        v,\n                                        params,\n                                        hasJoining,\n                                        aliasMap\n                                    )}`\n                                );\n\n                            case '$>=':\n                            case '$gte':\n                            case '$greaterThanOrEqual':\n                                v = this.typeCast(v);\n\n                                if (inject) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) +\n                                        ' >= ' +\n                                        v\n                                    );\n                                }\n\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) +\n                                    ` >= ${this._packValue(\n                                        v,\n                                        params,\n                                        hasJoining,\n                                        aliasMap\n                                    )}`\n                                );\n\n                            case '$<':\n                            case '$lt':\n                            case '$lessThan':\n                                v = this.typeCast(v);\n\n                                if (inject) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) +\n                                        ' < ' +\n                                        v\n                                    );\n                                }\n\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) +\n                                    ` < ${this._packValue(\n                                        v,\n                                        params,\n                                        hasJoining,\n                                        aliasMap\n                                    )}`\n                                );\n\n                            case '$<=':\n                            case '$lte':\n                            case '$lessThanOrEqual':\n                                v = this.typeCast(v);\n\n                                if (inject) {\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) +\n                                        ' <= ' +\n                                        v\n                                    );\n                                }\n\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) +\n                                    ` <= ${this._packValue(\n                                        v,\n                                        params,\n                                        hasJoining,\n                                        aliasMap\n                                    )}`\n                                );\n\n                            case '$in':\n                                if (\n                                    _.isPlainObject(v) &&\n                                    v.oorType === 'DataSet'\n                                ) {\n                                    const sqlInfo = this.buildQuery(\n                                        v.model,\n                                        v.query\n                                    );\n                                    sqlInfo.params &&\n                                        sqlInfo.params.forEach((p) =>\n                                            params.push(p)\n                                        );\n\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) + ` IN (${sqlInfo.sql})`\n                                    );\n                                } else {\n                                    if (!Array.isArray(v)) {\n                                        throw new Error(\n                                            'The value should be an array when using \"$in\" operator.'\n                                        );\n                                    }\n\n                                    if (inject) {\n                                        return (\n                                            this._escapeIdWithAlias(\n                                                fieldName,\n                                                hasJoining,\n                                                aliasMap\n                                            ) + ` IN (${v})`\n                                        );\n                                    }\n\n                                    params.push(v);\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) + ' IN (?)'\n                                    );\n                                }\n\n                            case '$nin':\n                            case '$notIn':\n                                if (\n                                    _.isPlainObject(v) &&\n                                    v.oorType === 'DataSet'\n                                ) {\n                                    const sqlInfo = this.buildQuery(\n                                        v.model,\n                                        v.query\n                                    );\n                                    sqlInfo.params &&\n                                        sqlInfo.params.forEach((p) =>\n                                            params.push(p)\n                                        );\n\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) + ` NOT IN (${sqlInfo.sql})`\n                                    );\n                                } else {\n                                    if (!Array.isArray(v)) {\n                                        throw new Error(\n                                            'The value should be an array when using \"$in\" operator.'\n                                        );\n                                    }\n\n                                    if (inject) {\n                                        return (\n                                            this._escapeIdWithAlias(\n                                                fieldName,\n                                                hasJoining,\n                                                aliasMap\n                                            ) + ` NOT IN (${v})`\n                                        );\n                                    }\n\n                                    params.push(v);\n                                    return (\n                                        this._escapeIdWithAlias(\n                                            fieldName,\n                                            hasJoining,\n                                            aliasMap\n                                        ) + ' NOT IN (?)'\n                                    );\n                                }\n\n                            case '$startWith':\n                            case '$startsWith':\n                                if (typeof v !== 'string') {\n                                    throw new Error(\n                                        'The value should be a string when using \"$startWith\" operator.'\n                                    );\n                                }\n\n                                params.push(`${v}%`);\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) + ' LIKE ?'\n                                );\n\n                            case '$endWith':\n                            case '$endsWith':\n                                if (typeof v !== 'string') {\n                                    throw new Error(\n                                        'The value should be a string when using \"$endWith\" operator.'\n                                    );\n                                }\n\n                                params.push(`%${v}`);\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) + ' LIKE ?'\n                                );\n\n                            case '$like':\n                            case '$likes':\n                                if (typeof v !== 'string') {\n                                    throw new Error(\n                                        'The value should be a string when using \"$like\" operator.'\n                                    );\n                                }\n\n                                params.push(`%${v}%`);\n                                return (\n                                    this._escapeIdWithAlias(\n                                        fieldName,\n                                        hasJoining,\n                                        aliasMap\n                                    ) + ' LIKE ?'\n                                );\n\n                            case '$has':\n                                if (\n                                    typeof v !== 'string' ||\n                                    v.indexOf(',') >= 0\n                                ) {\n                                    throw new Error(\n                                        'The value should be a string without \",\" when using \"$has\" operator.'\n                                    );\n                                }\n\n                                params.push(v);\n                                return `FIND_IN_SET(?, ${this._escapeIdWithAlias(\n                                    fieldName,\n                                    hasJoining,\n                                    aliasMap\n                                )}) > 0`;\n\n                            default:\n                                throw new Error(\n                                    `Unsupported condition operator: \"${k}\"!`\n                                );\n                        }\n                    } else {\n                        throw new Error(\n                            'Operator should not be mixed with condition value.'\n                        );\n                    }\n                }).join(' AND ');\n            }\n\n            params.push(JSON.stringify(value));\n            return (\n                this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) +\n                ' = ?'\n            );\n        }\n\n        value = this.typeCast(value);\n\n        if (inject) {\n            return (\n                this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) +\n                ' = ' +\n                value\n            );\n        }\n\n        params.push(value);\n        return (\n            this._escapeIdWithAlias(fieldName, hasJoining, aliasMap) + ' = ?'\n        );\n    }\n\n    _buildColumns(columns, params, hasJoining, aliasMap) {\n        return _.map(_.castArray(columns), (col) =>\n            this._buildColumn(col, params, hasJoining, aliasMap)\n        ).join(', ');\n    }\n\n    _buildColumn(col, params, hasJoining, aliasMap) {\n        if (typeof col === 'string') {\n            // it's a string if it's quoted when passed in\n            return isQuoted(col)\n                ? col\n                : this._escapeIdWithAlias(col, hasJoining, aliasMap);\n        }\n\n        if (typeof col === 'number') {\n            return col;\n        }\n\n        if (_.isPlainObject(col)) {\n            if (col.alias) {\n                const lastDotIndex = col.alias.lastIndexOf('.');\n                let alias =\n                    lastDotIndex > 0\n                        ? col.alias.substr(lastDotIndex + 1)\n                        : col.alias;\n\n                if (lastDotIndex > 0) {\n                    if (!hasJoining) {\n                        throw new InvalidArgument(\n                            'Cascade alias is not allowed when the query has no associated entity populated.',\n                            {\n                                alias: col.alias,\n                            }\n                        );\n                    }\n\n                    const fullPath =\n                        hasJoining + '.' + col.alias.substr(0, lastDotIndex);\n                    const aliasPrefix = aliasMap[fullPath];\n                    if (!aliasPrefix) {\n                        throw new InvalidArgument(\n                            `Invalid cascade alias. \"${fullPath}\" not found in associations.`,\n                            {\n                                alias: col.alias,\n                            }\n                        );\n                    }\n\n                    alias = aliasPrefix + '$' + alias;\n                }\n\n                aliasMap[alias] = alias;\n\n                return (\n                    this._buildColumn(\n                        _.omit(col, ['alias']),\n                        params,\n                        hasJoining,\n                        aliasMap\n                    ) +\n                    ' AS ' +\n                    mysql.escapeId(alias)\n                );\n            }\n\n            if (col.type === 'function') {\n                const name = col.name.toUpperCase();\n                if (\n                    name === 'COUNT' &&\n                    col.args.length === 1 &&\n                    col.args[0] === '*'\n                ) {\n                    return 'COUNT(*)';\n                }\n\n                if (MySQLConnector.windowFunctions.has(name)) {\n                    if (!col.over) {\n                        throw new InvalidArgument(\n                            `\"${name}\" function requires over clause.`\n                        );\n                    }\n                } else if (\n                    !MySQLConnector.windowableFunctions.has(name) &&\n                    col.over\n                ) {\n                    throw new InvalidArgument(\n                        `\"${name}\" function does not support over clause.`\n                    );\n                }\n\n                let funcClause =\n                    name +\n                    '(' +\n                    (col.prefix ? `${col.prefix.toUpperCase()} ` : '') +\n                    (col.args\n                        ? this._buildColumns(\n                              col.args,\n                              params,\n                              hasJoining,\n                              aliasMap\n                          )\n                        : '') +\n                    ')';\n\n                if (col.over) {\n                    funcClause += ' OVER(';\n                    if (col.over.$partitionBy) {\n                        funcClause += this._buildPartitionBy(\n                            col.over.$partitionBy,\n                            hasJoining,\n                            aliasMap\n                        );\n                    }\n\n                    if (col.over.$orderBy) {\n                        funcClause += this._buildOrderBy(\n                            col.over.$orderBy,\n                            hasJoining,\n                            aliasMap\n                        );\n                    }\n                    funcClause += ')';\n                }\n\n                return funcClause;\n            }\n\n            if (col.type === 'expression') {\n                return this._joinCondition(\n                    col.expr,\n                    params,\n                    null,\n                    hasJoining,\n                    aliasMap\n                );\n            }\n\n            if (col.type === 'column') {\n                return this._escapeIdWithAlias(col.name, hasJoining, aliasMap);\n            }\n        }\n\n        throw new ApplicationError(\n            `Unknow column syntax: ${JSON.stringify(col)}`\n        );\n    }\n\n    _buildGroupByColumn(groupBy, hasJoining, aliasMap) {\n        if (typeof groupBy === 'string') {\n            return isQuoted(groupBy)\n                ? groupBy\n                : this._escapeIdWithAlias(groupBy, hasJoining, aliasMap);\n        }\n\n        if (typeof groupBy === 'object') {\n            if (groupBy.alias) {\n                return this._escapeIdWithAlias(\n                    groupBy.alias,\n                    hasJoining,\n                    aliasMap\n                );\n            }\n        }\n\n        throw new ApplicationError(\n            `Unknown GROUP BY syntax: ${JSON.stringify(groupBy)}`\n        );\n    }\n\n    _buildGroupByList(groupBy, hasJoining, aliasMap) {\n        if (Array.isArray(groupBy)) {\n            return (\n                'GROUP BY ' +\n                groupBy\n                    .map((by) =>\n                        this._buildGroupByColumn(by, hasJoining, aliasMap)\n                    )\n                    .join(', ')\n            );\n        }\n\n        return (\n            'GROUP BY ' +\n            this._buildGroupByColumn(groupBy, hasJoining, aliasMap)\n        );\n    }\n\n    _buildGroupBy(groupBy, params, hasJoining, aliasMap) {\n        if (_.isPlainObject(groupBy)) {\n            const { columns, having } = groupBy;\n\n            if (!columns || !Array.isArray(columns)) {\n                throw new ApplicationError(\n                    `Invalid group by syntax: ${JSON.stringify(groupBy)}`\n                );\n            }\n\n            let groupByClause = this._buildGroupByList(\n                columns,\n                hasJoining,\n                aliasMap\n            );\n            const havingCluse =\n                having &&\n                this._joinCondition(having, params, null, hasJoining, aliasMap);\n            if (havingCluse) {\n                groupByClause += ' HAVING ' + havingCluse;\n            }\n\n            return groupByClause;\n        }\n\n        return this._buildGroupByList(groupBy, hasJoining, aliasMap);\n    }\n\n    _buildPartitionBy(partitionBy, hasJoining, aliasMap) {\n        if (typeof partitionBy === 'string') {\n            return (\n                'PARTITION BY ' +\n                this._escapeIdWithAlias(partitionBy, hasJoining, aliasMap)\n            );\n        }\n\n        if (Array.isArray(partitionBy)) {\n            return (\n                'PARTITION BY ' +\n                partitionBy\n                    .map((by) =>\n                        this._escapeIdWithAlias(by, hasJoining, aliasMap)\n                    )\n                    .join(', ')\n            );\n        }\n\n        throw new ApplicationError(\n            `Unknown PARTITION BY syntax: ${JSON.stringify(partitionBy)}`\n        );\n    }\n\n    _buildOrderBy(orderBy, hasJoining, aliasMap) {\n        if (typeof orderBy === 'string') {\n            return (\n                'ORDER BY ' +\n                this._escapeIdWithAlias(\n                    orderBy,\n                    hasJoining,\n                    aliasMap\n                )\n            );\n        }\n\n        if (Array.isArray(orderBy))\n            return (\n                'ORDER BY ' +\n                orderBy\n                    .map((by) =>\n                        this._escapeIdWithAlias(\n                            by,\n                            hasJoining,\n                            aliasMap\n                        )\n                    )\n                    .join(', ')\n            );\n\n        if (_.isPlainObject(orderBy)) {\n            return (\n                'ORDER BY ' +\n                _.map(\n                    orderBy,\n                    (asc, col) =>\n                        this._escapeIdWithAlias(\n                            col,\n                            hasJoining,\n                            aliasMap\n                        ) + (asc === false || asc === -1 ? ' DESC' : '')\n                ).join(', ')\n            );\n        }\n\n        throw new ApplicationError(\n            `Unknown ORDER BY syntax: ${JSON.stringify(orderBy)}`\n        );\n    }\n\n    async _getConnection_(options) {\n        return options && options.connection\n            ? options.connection\n            : this.connect_(options);\n    }\n\n    async _releaseConnection_(conn, options) {\n        if (!options || !options.connection) {\n            return this.disconnect_(conn);\n        }\n    }\n}\n\nMySQLConnector.driverLib = mysql;\n\nmodule.exports = MySQLConnector;\n"],"mappings":"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"}