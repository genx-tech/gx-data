"use strict";require("source-map-support/register");const{_,eachAsync_,setValueByPath}=require("rk-utils");const{tryRequire}=require("../../utils/lib");const mysql=tryRequire("mysql2/promise");const Connector=require("../../Connector");const{ApplicationError,RequestError}=require("../../utils/Errors");const{isQuoted,isPrimitive}=require("../../utils/lang");const ntol=require("number-to-letter");class MySQLConnector extends Connector{constructor(connectionString,options){super("mysql",connectionString,options);this.escape=mysql.escape;this.escapeId=mysql.escapeId;this.format=mysql.format;this.raw=mysql.raw;this.insertOne_=this.create_;this.updateOne_=this.update_;this.relational=true;this.acitveConnections=new WeakSet}async end_(){if(this.acitveConnections.size>0){for(let conn of this.acitveConnections){await this.disconnect_(conn)};}if(this.pool){await this.pool.end();delete this.pool}}async connect_(options){let csKey=this.connectionString;if(!this.currentConnectionString){this.currentConnectionString=csKey}if(options){let connProps={};if(options.createDatabase){connProps.database=""}connProps.options=_.pick(options,["multipleStatements"]);csKey=this.makeNewConnectionString(connProps)}if(csKey!==this.currentConnectionString){await this.end_();this.currentConnectionString=csKey}if(!this.pool){this.pool=mysql.createPool(csKey)}let conn=await this.pool.getConnection();this.acitveConnections.add(conn);return conn}async disconnect_(conn){this.acitveConnections.delete(conn);return conn.release()}async beginTransaction_(options){let conn=await this.connect_();if(options&&options.isolationLevel){let isolationLevel=_.find(MySQLConnector.IsolationLevels,(value,key)=>options.isolationLevel===key||options.isolationLevel===value);if(!isolationLevel){throw new ApplicationError(`Invalid isolation level: "${isolationLevel}"!"`)}await conn.query("SET SESSION TRANSACTION ISOLATION LEVEL "+isolationLevel)}await conn.beginTransaction();this.log("verbose","Begins a new transaction.");return conn}async commit_(conn){await conn.commit();this.log("verbose","Commits a transaction.");return this.disconnect_(conn)}async rollback_(conn){await conn.rollback();this.log("debug","Rollbacks a transaction.");return this.disconnect_(conn)}async execute_(sql,params,options){let conn;try{conn=await this._getConnection_(options);if(this.options.usePreparedStatement||options&&options.usePreparedStatement){if(this.options.logSQLStatement){this.log("verbose",conn.format(sql,params))}if(options&&options.rowsAsArray){return await conn.execute({sql,rowsAsArray:true},params)}let[rows1]=await conn.execute(sql,params);return rows1}if(this.options.logSQLStatement){this.log("verbose",conn.format(sql,params))}if(options&&options.rowsAsArray){return await conn.query({sql,rowsAsArray:true},params)}let[rows2]=await conn.query(sql,params);return rows2}catch(err){err.extraInfo||(err.extraInfo={});err.extraInfo.sql=_.truncate(sql,{length:200});err.extraInfo.params=params;throw err}finally{conn&&(await this._releaseConnection_(conn,options))}}async ping_(){let[ping]=await this.execute_("SELECT 1 AS result");return ping&&ping.result===1}async create_(model,data,options){if(!data||_.isEmpty(data)){throw new ApplicationError(`Creating with empty "${model}" data.`)}let sql="INSERT INTO ?? SET ?";let params=[model];params.push(data);return this.execute_(sql,params,options)}async update_(model,data,query,queryOptions,connOptions){if(_.isEmpty(data)){throw new RequestError("Data record is empty.",{model,query})}let params=[],aliasMap={[model]:"A"},joinings,hasJoining=false,joiningParams=[];if(queryOptions&&queryOptions.$relationships){joinings=this._joinAssociations(queryOptions.$relationships,model,"A",aliasMap,1,joiningParams);hasJoining=model}let sql="UPDATE "+mysql.escapeId(model);if(hasJoining){joiningParams.forEach(p=>params.push(p));sql+=" A "+joinings.join(" ")}if(queryOptions&&queryOptions.$requireSplitColumns){sql+=" SET "+this._splitColumnsAsInput(data,params,hasJoining,aliasMap).join(",")}else{params.push(data);sql+=" SET ?"}if(query){let whereClause=this._joinCondition(query,params,null,hasJoining,aliasMap);if(whereClause){sql+=" WHERE "+whereClause}}return this.execute_(sql,params,connOptions)}async replace_(model,data,options){let params=[model,data];let sql="REPLACE ?? SET ?";return this.execute_(sql,params,options)}async delete_(model,condition,options){let params=[model];let whereClause=this._joinCondition(condition,params);let sql="DELETE FROM ?? WHERE "+whereClause;return this.execute_(sql,params,options)}async find_(model,condition,connOptions){let sqlInfo=this.buildQuery(model,condition);let result,totalCount;if(sqlInfo.countSql){let[countResult]=await this.execute_(sqlInfo.countSql,sqlInfo.params,connOptions);totalCount=countResult["count"]}if(sqlInfo.hasJoining){connOptions={...connOptions,rowsAsArray:true};result=await this.execute_(sqlInfo.sql,sqlInfo.params,connOptions);let reverseAliasMap=_.reduce(sqlInfo.aliasMap,(result,alias,nodePath)=>{result[alias]=nodePath.split(".").slice(1).map(n=>":"+n);return result},{});if(sqlInfo.countSql){return result.concat(reverseAliasMap,totalCount)}return result.concat(reverseAliasMap)}result=await this.execute_(sqlInfo.sql,sqlInfo.params,connOptions);if(sqlInfo.countSql){return[result,totalCount]}return result}buildQuery(model,{$relationships,$projection,$query,$groupBy,$orderBy,$offset,$limit,$totalCount}){let params=[],aliasMap={[model]:"A"},joinings,hasJoining=false,joiningParams=[];if($relationships){joinings=this._joinAssociations($relationships,model,"A",aliasMap,1,joiningParams);hasJoining=model}let selectColomns=$projection?this._buildColumns($projection,params,hasJoining,aliasMap):"*";let sql=" FROM "+mysql.escapeId(model);if(hasJoining){joiningParams.forEach(p=>params.push(p));sql+=" A "+joinings.join(" ")}if($query){let whereClause=this._joinCondition($query,params,null,hasJoining,aliasMap);if(whereClause){sql+=" WHERE "+whereClause}}if($groupBy){sql+=" "+this._buildGroupBy($groupBy,params,hasJoining,aliasMap)}if($orderBy){sql+=" "+this._buildOrderBy($orderBy,hasJoining,aliasMap)}let result={params,hasJoining,aliasMap};if($totalCount){let countSubject;if(typeof $totalCount==="string"){countSubject="DISTINCT("+this._escapeIdWithAlias($totalCount,hasJoining,aliasMap)+")"}else{countSubject="*"}result.countSql=`SELECT COUNT(${countSubject}) AS count`+sql}sql="SELECT "+selectColomns+sql;if(_.isInteger($limit)&&$limit>0){if(_.isInteger($offset)&&$offset>0){sql+=" LIMIT ?, ?";params.push($offset);params.push($limit)}else{sql+=" LIMIT ?";params.push($limit)}}else if(_.isInteger($offset)&&$offset>0){sql+=" LIMIT ?, 1000";params.push($offset)}result.sql=sql;return result}getInsertedId(result){return result&&typeof result.insertId==="number"?result.insertId:undefined}getNumOfAffectedRows(result){return result&&typeof result.affectedRows==="number"?result.affectedRows:undefined}_generateAlias(index,anchor){let alias=ntol(index);if(this.options.verboseAlias){return _.snakeCase(anchor).toUpperCase()+"_"+alias}return alias}_joinAssociations(associations,parentAliasKey,parentAlias,aliasMap,startId,params){let joinings=[];_.each(associations,(assocInfo,anchor)=>{let alias=assocInfo.alias||this._generateAlias(startId++,anchor);let{joinType,on}=assocInfo;joinType||(joinType="LEFT JOIN");if(assocInfo.sql){if(assocInfo.output){aliasMap[parentAliasKey+"."+alias]=alias}assocInfo.params.forEach(p=>params.push(p));joinings.push(`${joinType} (${assocInfo.sql}) ${alias} ON ${this._joinCondition(on,params,null,parentAliasKey,aliasMap)}`);return}let{entity,subAssocs}=assocInfo;let aliasKey=parentAliasKey+"."+anchor;aliasMap[aliasKey]=alias;joinings.push(`${joinType} ${mysql.escapeId(entity)} ${alias} ON ${this._joinCondition(on,params,null,parentAliasKey,aliasMap)}`);if(subAssocs){let subJoinings=this._joinAssociations(subAssocs,aliasKey,alias,aliasMap,startId,params);startId+=subJoinings.length;joinings=joinings.concat(subJoinings)}});return joinings}_joinCondition(condition,params,joinOperator,hasJoining,aliasMap){if(Array.isArray(condition)){if(!joinOperator){joinOperator="OR"}return condition.map(c=>"("+this._joinCondition(c,params,null,hasJoining,aliasMap)+")").join(` ${joinOperator} `)}if(_.isPlainObject(condition)){if(!joinOperator){joinOperator="AND"}return _.map(condition,(value,key)=>{if(key==="$all"||key==="$and"){return"("+this._joinCondition(value,params,"AND",hasJoining,aliasMap)+")"}if(key==="$any"||key==="$or"||key.startsWith("$or_")){return"("+this._joinCondition(value,params,"OR",hasJoining,aliasMap)+")"}if(key==="$not"){if(Array.isArray(value)){return"NOT ("+this._joinCondition(value,params,null,hasJoining,aliasMap)+")"}if(_.isPlainObject(value)){let numOfElement=Object.keys(value).length;return"NOT ("+this._joinCondition(value,params,null,hasJoining,aliasMap)+")"}return"NOT ("+condition+")"}return this._wrapCondition(key,value,params,hasJoining,aliasMap)}).join(` ${joinOperator} `)}if(typeof condition!=="string"){throw new Error("Unsupported condition!\n Value: "+JSON.stringify(condition))}return condition}_replaceFieldNameWithAlias(fieldName,mainEntity,aliasMap){let parts=fieldName.split(".");if(parts.length>1){let actualFieldName=parts.pop();let alias=aliasMap[mainEntity+"."+parts.join(".")];if(!alias){let msg=`Unknown column reference: ${fieldName}`;throw new RequestError(msg)}return alias+"."+mysql.escapeId(actualFieldName)}return aliasMap[mainEntity]+"."+(fieldName==="*"?fieldName:mysql.escapeId(fieldName))}_escapeIdWithAlias(fieldName,mainEntity,aliasMap){if(mainEntity){return this._replaceFieldNameWithAlias(fieldName,mainEntity,aliasMap)}return fieldName==="*"?fieldName:mysql.escapeId(fieldName)}_splitColumnsAsInput(data,params,hasJoining,aliasMap){return _.map(data,(v,fieldName)=>{return mysql.escapeId(fieldName)+"="+this._packValue(v,params,hasJoining,aliasMap)})}_packArray(array,params,hasJoining,aliasMap){return array.map(value=>this._packValue(value,params,hasJoining,aliasMap)).join(",")}_packValue(value,params,hasJoining,aliasMap){if(_.isPlainObject(value)){if(value.oorType){switch(value.oorType){case"ColumnReference":return this._escapeIdWithAlias(value.name,hasJoining,aliasMap);case"Function":return value.name+"("+(value.args?this._packArray(value.args,params,hasJoining,aliasMap):"")+")";case"BinaryExpression":let left=this._packValue(value.left,params,hasJoining,aliasMap);let right=this._packValue(value.right,params,hasJoining,aliasMap);return left+` ${value.op} `+right;default:throw new Error(`Unknown oor type: ${value.oorType}`);}}value=JSON.stringify(value)}params.push(value);return"?"}_wrapCondition(fieldName,value,params,hasJoining,aliasMap,inject){if(_.isNil(value)){return this._escapeIdWithAlias(fieldName,hasJoining,aliasMap)+" IS NULL"}if(Array.isArray(value)){return this._wrapCondition(fieldName,{$in:value},params,hasJoining,aliasMap,inject)}if(_.isPlainObject(value)){if(value.oorType){return this._escapeIdWithAlias(fieldName,hasJoining,aliasMap)+" = "+this._packValue(value,params,hasJoining,aliasMap)}let hasOperator=_.find(Object.keys(value),k=>k&&k[0]==="$");if(hasOperator){return _.map(value,(v,k)=>{if(k&&k[0]==="$"){switch(k){case"$eq":case"$equal":return this._wrapCondition(fieldName,v,params,hasJoining,aliasMap,inject);case"$ne":case"$neq":case"$notEqual":if(_.isNil(v)){return this._escapeIdWithAlias(fieldName,hasJoining,aliasMap)+" IS NOT NULL"}if(isPrimitive(v)){if(inject){return this._escapeIdWithAlias(fieldName,hasJoining,aliasMap)+" <> "+v}params.push(v);return this._escapeIdWithAlias(fieldName,hasJoining,aliasMap)+" <> ?"}return"NOT ("+this._wrapCondition(fieldName,v,params,hasJoining,aliasMap,true)+")";case"$>":case"$gt":case"$greaterThan":if(inject){return this._escapeIdWithAlias(fieldName,hasJoining,aliasMap)+" > "+v}params.push(v);return this._escapeIdWithAlias(fieldName,hasJoining,aliasMap)+" > ?";case"$>=":case"$gte":case"$greaterThanOrEqual":if(inject){return this._escapeIdWithAlias(fieldName,hasJoining,aliasMap)+" >= "+v}params.push(v);return this._escapeIdWithAlias(fieldName,hasJoining,aliasMap)+" >= ?";case"$<":case"$lt":case"$lessThan":if(inject){return this._escapeIdWithAlias(fieldName,hasJoining,aliasMap)+" < "+v}params.push(v);return this._escapeIdWithAlias(fieldName,hasJoining,aliasMap)+" < ?";case"$<=":case"$lte":case"$lessThanOrEqual":if(inject){return this._escapeIdWithAlias(fieldName,hasJoining,aliasMap)+" <= "+v}params.push(v);return this._escapeIdWithAlias(fieldName,hasJoining,aliasMap)+" <= ?";case"$in":if(!Array.isArray(v)){throw new Error("The value should be an array when using \"$in\" operator.")}if(inject){return this._escapeIdWithAlias(fieldName,hasJoining,aliasMap)+` IN (${v})`}params.push(v);return this._escapeIdWithAlias(fieldName,hasJoining,aliasMap)+" IN (?)";case"$nin":case"$notIn":if(!Array.isArray(v)){throw new Error("The value should be an array when using \"$in\" operator.")}if(inject){return this._escapeIdWithAlias(fieldName,hasJoining,aliasMap)+` NOT IN (${v})`}params.push(v);return this._escapeIdWithAlias(fieldName,hasJoining,aliasMap)+" NOT IN (?)";case"$startWith":case"$startsWith":if(typeof v!=="string"){throw new Error("The value should be a string when using \"$startWith\" operator.")}params.push(`${v}%`);return this._escapeIdWithAlias(fieldName,hasJoining,aliasMap)+" LIKE ?";case"$endWith":case"$endsWith":if(typeof v!=="string"){throw new Error("The value should be a string when using \"$endWith\" operator.")}params.push(`%${v}`);return this._escapeIdWithAlias(fieldName,hasJoining,aliasMap)+" LIKE ?";case"$like":case"$likes":if(typeof v!=="string"){throw new Error("The value should be a string when using \"$like\" operator.")}params.push(`%${v}%`);return this._escapeIdWithAlias(fieldName,hasJoining,aliasMap)+" LIKE ?";default:throw new Error(`Unsupported condition operator: "${k}"!`);}}else{throw new Error("Operator should not be mixed with condition value.")}}).join(" AND ")}params.push(JSON.stringify(value));return this._escapeIdWithAlias(fieldName,hasJoining,aliasMap)+" = ?"}if(inject){return this._escapeIdWithAlias(fieldName,hasJoining,aliasMap)+" = "+value}params.push(value);return this._escapeIdWithAlias(fieldName,hasJoining,aliasMap)+" = ?"}_buildColumns(columns,params,hasJoining,aliasMap){return _.map(_.castArray(columns),col=>this._buildColumn(col,params,hasJoining,aliasMap)).join(", ")}_buildColumn(col,params,hasJoining,aliasMap){if(typeof col==="string"){return isQuoted(col)?col:this._escapeIdWithAlias(col,hasJoining,aliasMap)}if(typeof col==="number"){return col}if(_.isPlainObject(col)){if(col.alias){return this._buildColumn(_.omit(col,["alias"]),params,hasJoining,aliasMap)+" AS "+mysql.escapeId(col.alias)}if(col.type==="function"){if(col.name.toUpperCase()==="COUNT"&&col.args.length===1&&col.args[0]==="*"){return"COUNT(*)"}return col.name+"("+(col.args?this._buildColumns(col.args,params,hasJoining,aliasMap):"")+")"}if(col.type==="expression"){return this._joinCondition(col.expr,params,null,hasJoining,aliasMap)}}throw new ApplicationError(`Unknow column syntax: ${JSON.stringify(col)}`)}_buildGroupBy(groupBy,params,hasJoining,aliasMap){if(typeof groupBy==="string")return"GROUP BY "+this._escapeIdWithAlias(groupBy,hasJoining,aliasMap);if(Array.isArray(groupBy))return"GROUP BY "+groupBy.map(by=>this._escapeIdWithAlias(by,hasJoining,aliasMap)).join(", ");if(_.isPlainObject(groupBy)){let{columns,having}=groupBy;if(!columns||!Array.isArray(columns)){throw new ApplicationError(`Invalid group by syntax: ${JSON.stringify(groupBy)}`)}let groupByClause=this._buildGroupBy(columns);let havingCluse=having&&this._joinCondition(having,params,null,hasJoining,aliasMap);if(havingCluse){groupByClause+=" HAVING "+havingCluse}return groupByClause}throw new ApplicationError(`Unknown group by syntax: ${JSON.stringify(groupBy)}`)}_buildOrderBy(orderBy,hasJoining,aliasMap){if(typeof orderBy==="string")return"ORDER BY "+this._escapeIdWithAlias(orderBy,hasJoining,aliasMap);if(Array.isArray(orderBy))return"ORDER BY "+orderBy.map(by=>this._escapeIdWithAlias(by,hasJoining,aliasMap)).join(", ");if(_.isPlainObject(orderBy)){return"ORDER BY "+_.map(orderBy,(asc,col)=>this._escapeIdWithAlias(col,hasJoining,aliasMap)+(asc?"":" DESC")).join(", ")}throw new ApplicationError(`Unknown order by syntax: ${JSON.stringify(orderBy)}`)}async _getConnection_(options){return options&&options.connection?options.connection:this.connect_(options)}async _releaseConnection_(conn,options){if(!options||!options.connection){return this.disconnect_(conn)}}}MySQLConnector.IsolationLevels=Object.freeze({RepeatableRead:"REPEATABLE READ",ReadCommitted:"READ COMMITTED",ReadUncommitted:"READ UNCOMMITTED",Rerializable:"SERIALIZABLE"});MySQLConnector.driverLib=mysql;module.exports=MySQLConnector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kcml2ZXJzL215c3FsL0Nvbm5lY3Rvci5qcyJdLCJuYW1lcyI6WyJfIiwiZWFjaEFzeW5jXyIsInNldFZhbHVlQnlQYXRoIiwicmVxdWlyZSIsInRyeVJlcXVpcmUiLCJteXNxbCIsIkNvbm5lY3RvciIsIkFwcGxpY2F0aW9uRXJyb3IiLCJSZXF1ZXN0RXJyb3IiLCJpc1F1b3RlZCIsImlzUHJpbWl0aXZlIiwibnRvbCIsIk15U1FMQ29ubmVjdG9yIiwiY29uc3RydWN0b3IiLCJjb25uZWN0aW9uU3RyaW5nIiwib3B0aW9ucyIsImVzY2FwZSIsImVzY2FwZUlkIiwiZm9ybWF0IiwicmF3IiwiaW5zZXJ0T25lXyIsImNyZWF0ZV8iLCJ1cGRhdGVPbmVfIiwidXBkYXRlXyIsInJlbGF0aW9uYWwiLCJhY2l0dmVDb25uZWN0aW9ucyIsIldlYWtTZXQiLCJlbmRfIiwic2l6ZSIsImNvbm4iLCJkaXNjb25uZWN0XyIsInBvb2wiLCJlbmQiLCJjb25uZWN0XyIsImNzS2V5IiwiY3VycmVudENvbm5lY3Rpb25TdHJpbmciLCJjb25uUHJvcHMiLCJjcmVhdGVEYXRhYmFzZSIsImRhdGFiYXNlIiwicGljayIsIm1ha2VOZXdDb25uZWN0aW9uU3RyaW5nIiwiY3JlYXRlUG9vbCIsImdldENvbm5lY3Rpb24iLCJhZGQiLCJkZWxldGUiLCJyZWxlYXNlIiwiYmVnaW5UcmFuc2FjdGlvbl8iLCJpc29sYXRpb25MZXZlbCIsImZpbmQiLCJJc29sYXRpb25MZXZlbHMiLCJ2YWx1ZSIsImtleSIsInF1ZXJ5IiwiYmVnaW5UcmFuc2FjdGlvbiIsImxvZyIsImNvbW1pdF8iLCJjb21taXQiLCJyb2xsYmFja18iLCJyb2xsYmFjayIsImV4ZWN1dGVfIiwic3FsIiwicGFyYW1zIiwiX2dldENvbm5lY3Rpb25fIiwidXNlUHJlcGFyZWRTdGF0ZW1lbnQiLCJsb2dTUUxTdGF0ZW1lbnQiLCJyb3dzQXNBcnJheSIsImV4ZWN1dGUiLCJyb3dzMSIsInJvd3MyIiwiZXJyIiwiZXh0cmFJbmZvIiwidHJ1bmNhdGUiLCJsZW5ndGgiLCJfcmVsZWFzZUNvbm5lY3Rpb25fIiwicGluZ18iLCJwaW5nIiwicmVzdWx0IiwibW9kZWwiLCJkYXRhIiwiaXNFbXB0eSIsInB1c2giLCJxdWVyeU9wdGlvbnMiLCJjb25uT3B0aW9ucyIsImFsaWFzTWFwIiwiam9pbmluZ3MiLCJoYXNKb2luaW5nIiwiam9pbmluZ1BhcmFtcyIsIiRyZWxhdGlvbnNoaXBzIiwiX2pvaW5Bc3NvY2lhdGlvbnMiLCJmb3JFYWNoIiwicCIsImpvaW4iLCIkcmVxdWlyZVNwbGl0Q29sdW1ucyIsIl9zcGxpdENvbHVtbnNBc0lucHV0Iiwid2hlcmVDbGF1c2UiLCJfam9pbkNvbmRpdGlvbiIsInJlcGxhY2VfIiwiZGVsZXRlXyIsImNvbmRpdGlvbiIsImZpbmRfIiwic3FsSW5mbyIsImJ1aWxkUXVlcnkiLCJ0b3RhbENvdW50IiwiY291bnRTcWwiLCJjb3VudFJlc3VsdCIsInJldmVyc2VBbGlhc01hcCIsInJlZHVjZSIsImFsaWFzIiwibm9kZVBhdGgiLCJzcGxpdCIsInNsaWNlIiwibWFwIiwibiIsImNvbmNhdCIsIiRwcm9qZWN0aW9uIiwiJHF1ZXJ5IiwiJGdyb3VwQnkiLCIkb3JkZXJCeSIsIiRvZmZzZXQiLCIkbGltaXQiLCIkdG90YWxDb3VudCIsInNlbGVjdENvbG9tbnMiLCJfYnVpbGRDb2x1bW5zIiwiX2J1aWxkR3JvdXBCeSIsIl9idWlsZE9yZGVyQnkiLCJjb3VudFN1YmplY3QiLCJfZXNjYXBlSWRXaXRoQWxpYXMiLCJpc0ludGVnZXIiLCJnZXRJbnNlcnRlZElkIiwiaW5zZXJ0SWQiLCJ1bmRlZmluZWQiLCJnZXROdW1PZkFmZmVjdGVkUm93cyIsImFmZmVjdGVkUm93cyIsIl9nZW5lcmF0ZUFsaWFzIiwiaW5kZXgiLCJhbmNob3IiLCJ2ZXJib3NlQWxpYXMiLCJzbmFrZUNhc2UiLCJ0b1VwcGVyQ2FzZSIsImFzc29jaWF0aW9ucyIsInBhcmVudEFsaWFzS2V5IiwicGFyZW50QWxpYXMiLCJzdGFydElkIiwiZWFjaCIsImFzc29jSW5mbyIsImpvaW5UeXBlIiwib24iLCJvdXRwdXQiLCJlbnRpdHkiLCJzdWJBc3NvY3MiLCJhbGlhc0tleSIsInN1YkpvaW5pbmdzIiwiam9pbk9wZXJhdG9yIiwiQXJyYXkiLCJpc0FycmF5IiwiYyIsImlzUGxhaW5PYmplY3QiLCJzdGFydHNXaXRoIiwibnVtT2ZFbGVtZW50IiwiT2JqZWN0Iiwia2V5cyIsIl93cmFwQ29uZGl0aW9uIiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwiX3JlcGxhY2VGaWVsZE5hbWVXaXRoQWxpYXMiLCJmaWVsZE5hbWUiLCJtYWluRW50aXR5IiwicGFydHMiLCJhY3R1YWxGaWVsZE5hbWUiLCJwb3AiLCJtc2ciLCJ2IiwiX3BhY2tWYWx1ZSIsIl9wYWNrQXJyYXkiLCJhcnJheSIsIm9vclR5cGUiLCJuYW1lIiwiYXJncyIsImxlZnQiLCJyaWdodCIsIm9wIiwiaW5qZWN0IiwiaXNOaWwiLCIkaW4iLCJoYXNPcGVyYXRvciIsImsiLCJjb2x1bW5zIiwiY2FzdEFycmF5IiwiY29sIiwiX2J1aWxkQ29sdW1uIiwib21pdCIsInR5cGUiLCJleHByIiwiZ3JvdXBCeSIsImJ5IiwiaGF2aW5nIiwiZ3JvdXBCeUNsYXVzZSIsImhhdmluZ0NsdXNlIiwib3JkZXJCeSIsImFzYyIsImNvbm5lY3Rpb24iLCJmcmVlemUiLCJSZXBlYXRhYmxlUmVhZCIsIlJlYWRDb21taXR0ZWQiLCJSZWFkVW5jb21taXR0ZWQiLCJSZXJpYWxpemFibGUiLCJkcml2ZXJMaWIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoib0RBQUEsS0FBTSxDQUFFQSxDQUFGLENBQUtDLFVBQUwsQ0FBaUJDLGNBQWpCLEVBQW9DQyxPQUFPLENBQUMsVUFBRCxDQUFqRCxDQUNBLEtBQU0sQ0FBRUMsVUFBRixFQUFpQkQsT0FBTyxDQUFDLGlCQUFELENBQTlCLENBQ0EsS0FBTUUsQ0FBQUEsS0FBSyxDQUFHRCxVQUFVLENBQUMsZ0JBQUQsQ0FBeEIsQ0FD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LElBQUlwRixDQUFBQSxnQkFBSixDQUFzQiw0QkFBMkI0SixJQUFJLENBQUNDLFNBQUwsQ0FBZW1DLE9BQWYsQ0FBd0IsRUFBekUsQ0FDVCxDQUVELEtBQU16SSxDQUFBQSxlQUFOLENBQXNCL0MsT0FBdEIsQ0FBK0IsQ0FDM0IsTUFBUUEsQ0FBQUEsT0FBTyxFQUFJQSxPQUFPLENBQUMwTCxVQUFwQixDQUFrQzFMLE9BQU8sQ0FBQzBMLFVBQTFDLENBQXVELEtBQUt4SyxRQUFMLENBQWNsQixPQUFkLENBQ2pFLENBRUQsS0FBTTBELENBQUFBLG1CQUFOLENBQTBCNUMsSUFBMUIsQ0FBZ0NkLE9BQWhDLENBQXlDLENBQ3JDLEdBQUksQ0FBQ0EsT0FBRCxFQUFZLENBQUNBLE9BQU8sQ0FBQzBMLFVBQXpCLENBQXFDLENBQ2pDLE1BQU8sTUFBSzNLLFdBQUwsQ0FBaUJELElBQWpCLENBQ1YsQ0FDSixDQXQ2QmtDLENBQWpDakIsYyxDQU1LcUMsZSxDQUFrQjhHLE1BQU0sQ0FBQzJDLE1BQVAsQ0FBYyxDQUNuQ0MsY0FBYyxDQUFFLGlCQURtQixDQUVuQ0MsYUFBYSxDQUFFLGdCQUZvQixDQUduQ0MsZUFBZSxDQUFFLGtCQUhrQixDQUluQ0MsWUFBWSxDQUFFLGNBSnFCLENBQWQsQyxDQW02QjdCbE0sY0FBYyxDQUFDbU0sU0FBZixDQUEyQjFNLEtBQTNCLENBRUEyTSxNQUFNLENBQUNDLE9BQVAsQ0FBaUJyTSxjQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgXywgZWFjaEFzeW5jXywgc2V0VmFsdWVCeVBhdGggfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IHRyeVJlcXVpcmUgfSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2xpYicpO1xuY29uc3QgbXlzcWwgPSB0cnlSZXF1aXJlKCdteXNxbDIvcHJvbWlzZScpO1xuY29uc3QgQ29ubmVjdG9yID0gcmVxdWlyZSgnLi4vLi4vQ29ubmVjdG9yJyk7XG5jb25zdCB7IEFwcGxpY2F0aW9uRXJyb3IsIFJlcXVlc3RFcnJvciB9ID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvRXJyb3JzJyk7XG5jb25zdCB7IGlzUXVvdGVkLCBpc1ByaW1pdGl2ZSB9ID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvbGFuZycpO1xuY29uc3QgbnRvbCA9IHJlcXVpcmUoJ251bWJlci10by1sZXR0ZXInKTtcblxuLyoqXG4gKiBNeVNRTCBkYXRhIHN0b3JhZ2UgY29ubmVjdG9yLlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBDb25uZWN0b3JcbiAqL1xuY2xhc3MgTXlTUUxDb25uZWN0b3IgZXh0ZW5kcyBDb25uZWN0b3Ige1xuICAgIC8qKlxuICAgICAqIFRyYW5zYWN0aW9uIGlzb2xhdGlvbiBsZXZlbFxuICAgICAqIHtAbGluayBodHRwczovL2Rldi5teXNxbC5jb20vZG9jL3JlZm1hbi84LjAvZW4vaW5ub2RiLXRyYW5zYWN0aW9uLWlzb2xhdGlvbi1sZXZlbHMuaHRtbH1cbiAgICAgKiBAbWVtYmVyIHtvYmplY3R9XG4gICAgICovXG4gICAgc3RhdGljIElzb2xhdGlvbkxldmVscyA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgICBSZXBlYXRhYmxlUmVhZDogJ1JFUEVBVEFCTEUgUkVBRCcsXG4gICAgICAgIFJlYWRDb21taXR0ZWQ6ICdSRUFEIENPTU1JVFRFRCcsXG4gICAgICAgIFJlYWRVbmNvbW1pdHRlZDogJ1JFQUQgVU5DT01NSVRURUQnLFxuICAgICAgICBSZXJpYWxpemFibGU6ICdTRVJJQUxJWkFCTEUnXG4gICAgfSk7ICAgIFxuICAgIFxuICAgIGVzY2FwZSA9IG15c3FsLmVzY2FwZTtcbiAgICBlc2NhcGVJZCA9IG15c3FsLmVzY2FwZUlkO1xuICAgIGZvcm1hdCA9IG15c3FsLmZvcm1hdDtcbiAgICByYXcgPSBteXNxbC5yYXc7XG5cbiAgICAvKiogICAgICAgICAgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbb3B0aW9ucy51c2VQcmVwYXJlZFN0YXRlbWVudF0gLSBGbGF0IHRvIHVzZSBwcmVwYXJlZCBzdGF0ZW1lbnQgdG8gaW1wcm92ZSBxdWVyeSBwZXJmb3JtYW5jZS4gXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbb3B0aW9ucy5sb2dTUUxTdGF0ZW1lbnRdIC0gRmxhZyB0byBsb2cgZXhlY3V0ZWQgU1FMIHN0YXRlbWVudC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uU3RyaW5nLCBvcHRpb25zKSB7ICAgICAgICBcbiAgICAgICAgc3VwZXIoJ215c3FsJywgY29ubmVjdGlvblN0cmluZywgb3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5yZWxhdGlvbmFsID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5hY2l0dmVDb25uZWN0aW9ucyA9IG5ldyBXZWFrU2V0KCk7XG4gICAgfSAgICBcblxuICAgIC8qKlxuICAgICAqIENsb3NlIGFsbCBjb25uZWN0aW9uIGluaXRpYXRlZCBieSB0aGlzIGNvbm5lY3Rvci5cbiAgICAgKi9cbiAgICBhc3luYyBlbmRfKCkge1xuICAgICAgICBpZiAodGhpcy5hY2l0dmVDb25uZWN0aW9ucy5zaXplID4gMCkge1xuICAgICAgICAgICAgZm9yIChsZXQgY29ubiBvZiB0aGlzLmFjaXR2ZUNvbm5lY3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5kaXNjb25uZWN0Xyhjb25uKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wb29sKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBvb2wuZW5kKCk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5wb29sO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZGF0YWJhc2UgY29ubmVjdGlvbiBiYXNlZCBvbiB0aGUgZGVmYXVsdCBjb25uZWN0aW9uIHN0cmluZyBvZiB0aGUgY29ubmVjdG9yIGFuZCBnaXZlbiBvcHRpb25zLiAgICAgXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIEV4dHJhIG9wdGlvbnMgZm9yIHRoZSBjb25uZWN0aW9uLCBvcHRpb25hbC5cbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFtvcHRpb25zLm11bHRpcGxlU3RhdGVtZW50cz1mYWxzZV0gLSBBbGxvdyBydW5uaW5nIG11bHRpcGxlIHN0YXRlbWVudHMgYXQgYSB0aW1lLlxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW29wdGlvbnMuY3JlYXRlRGF0YWJhc2U9ZmFsc2VdIC0gRmxhZyB0byB1c2VkIHdoZW4gY3JlYXRpbmcgYSBkYXRhYmFzZS5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48TXlTUUxDb25uZWN0aW9uPn1cbiAgICAgKi9cbiAgICBhc3luYyBjb25uZWN0XyhvcHRpb25zKSB7XG4gICAgICAgIGxldCBjc0tleSA9IHRoaXMuY29ubmVjdGlvblN0cmluZztcbiAgICAgICAgaWYgKCF0aGlzLmN1cnJlbnRDb25uZWN0aW9uU3RyaW5nKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRDb25uZWN0aW9uU3RyaW5nID0gY3NLZXk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgICAgbGV0IGNvbm5Qcm9wcyA9IHt9O1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5jcmVhdGVEYXRhYmFzZSkge1xuICAgICAgICAgICAgICAgIC8vcmVtb3ZlIHRoZSBkYXRhYmFzZSBmcm9tIGNvbm5lY3Rpb25cbiAgICAgICAgICAgICAgICBjb25uUHJvcHMuZGF0YWJhc2UgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29ublByb3BzLm9wdGlvbnMgPSBfLnBpY2sob3B0aW9ucywgWydtdWx0aXBsZVN0YXRlbWVudHMnXSk7ICAgICBcblxuICAgICAgICAgICAgY3NLZXkgPSB0aGlzLm1ha2VOZXdDb25uZWN0aW9uU3RyaW5nKGNvbm5Qcm9wcyk7XG4gICAgICAgIH0gXG4gICAgICAgIFxuICAgICAgICBpZiAoY3NLZXkgIT09IHRoaXMuY3VycmVudENvbm5lY3Rpb25TdHJpbmcpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZW5kXygpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50Q29ubmVjdGlvblN0cmluZyA9IGNzS2V5O1xuICAgICAgICB9ICAgICAgXG5cbiAgICAgICAgaWYgKCF0aGlzLnBvb2wpIHsgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMucG9vbCA9IG15c3FsLmNyZWF0ZVBvb2woY3NLZXkpO1xuICAgICAgICB9ICAgICAgICBcblxuICAgICAgICBsZXQgY29ubiA9IGF3YWl0IHRoaXMucG9vbC5nZXRDb25uZWN0aW9uKCk7XG4gICAgICAgIHRoaXMuYWNpdHZlQ29ubmVjdGlvbnMuYWRkKGNvbm4pO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGNvbm47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2UgYSBkYXRhYmFzZSBjb25uZWN0aW9uLlxuICAgICAqIEBwYXJhbSB7TXlTUUxDb25uZWN0aW9ufSBjb25uIC0gTXlTUUwgY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyBkaXNjb25uZWN0Xyhjb25uKSB7ICAgIFxuICAgICAgICB0aGlzLmFjaXR2ZUNvbm5lY3Rpb25zLmRlbGV0ZShjb25uKTsgICAgICAgIFxuICAgICAgICByZXR1cm4gY29ubi5yZWxlYXNlKCk7ICAgICBcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdGFydCBhIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gT3B0aW9uc1xuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb3B0aW9ucy5pc29sYXRpb25MZXZlbF1cbiAgICAgKi9cbiAgICBhc3luYyBiZWdpblRyYW5zYWN0aW9uXyhvcHRpb25zKSB7XG4gICAgICAgIGxldCBjb25uID0gYXdhaXQgdGhpcy5jb25uZWN0XygpO1xuXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuaXNvbGF0aW9uTGV2ZWwpIHtcbiAgICAgICAgICAgIC8vb25seSBhbGxvdyB2YWxpZCBvcHRpb24gdmFsdWUgdG8gYXZvaWQgaW5qZWN0aW9uIGF0dGFjaFxuICAgICAgICAgICAgbGV0IGlzb2xhdGlvbkxldmVsID0gXy5maW5kKE15U1FMQ29ubmVjdG9yLklzb2xhdGlvbkxldmVscywgKHZhbHVlLCBrZXkpID0+IG9wdGlvbnMuaXNvbGF0aW9uTGV2ZWwgPT09IGtleSB8fCBvcHRpb25zLmlzb2xhdGlvbkxldmVsID09PSB2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoIWlzb2xhdGlvbkxldmVsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFwcGxpY2F0aW9uRXJyb3IoYEludmFsaWQgaXNvbGF0aW9uIGxldmVsOiBcIiR7aXNvbGF0aW9uTGV2ZWx9XCIhXCJgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXdhaXQgY29ubi5xdWVyeSgnU0VUIFNFU1NJT04gVFJBTlNBQ1RJT04gSVNPTEFUSU9OIExFVkVMICcgKyBpc29sYXRpb25MZXZlbCk7ICAgICAgICAgICAgXG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCBjb25uLmJlZ2luVHJhbnNhY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMubG9nKCd2ZXJib3NlJywgJ0JlZ2lucyBhIG5ldyB0cmFuc2FjdGlvbi4nKTtcbiAgICAgICAgcmV0dXJuIGNvbm47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tbWl0IGEgdHJhbnNhY3Rpb24uXG4gICAgICogQHBhcmFtIHtNeVNRTENvbm5lY3Rpb259IGNvbm4gLSBNeVNRTCBjb25uZWN0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIGNvbW1pdF8oY29ubikge1xuICAgICAgICBhd2FpdCBjb25uLmNvbW1pdCgpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5sb2coJ3ZlcmJvc2UnLCAnQ29tbWl0cyBhIHRyYW5zYWN0aW9uLicpO1xuICAgICAgICByZXR1cm4gdGhpcy5kaXNjb25uZWN0Xyhjb25uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSb2xsYmFjayBhIHRyYW5zYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7TXlTUUxDb25uZWN0aW9ufSBjb25uIC0gTXlTUUwgY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyByb2xsYmFja18oY29ubikge1xuICAgICAgICBhd2FpdCBjb25uLnJvbGxiYWNrKCk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmxvZygnZGVidWcnLCAnUm9sbGJhY2tzIGEgdHJhbnNhY3Rpb24uJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmRpc2Nvbm5lY3RfKGNvbm4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgdGhlIHNxbCBzdGF0ZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3FsIC0gVGhlIFNRTCBzdGF0ZW1lbnQgdG8gZXhlY3V0ZS5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zIC0gUGFyYW1ldGVycyB0byBiZSBwbGFjZWQgaW50byB0aGUgU1FMIHN0YXRlbWVudC5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIC0gRXhlY3V0aW9uIG9wdGlvbnMuXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbb3B0aW9ucy51c2VQcmVwYXJlZFN0YXRlbWVudF0gLSBXaGV0aGVyIHRvIHVzZSBwcmVwYXJlZCBzdGF0ZW1lbnQgd2hpY2ggaXMgY2FjaGVkIGFuZCByZS11c2VkIGJ5IGNvbm5lY3Rpb24uXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbb3B0aW9ucy5yb3dzQXNBcnJheV0gLSBUbyByZWNlaXZlIHJvd3MgYXMgYXJyYXkgb2YgY29sdW1ucyBpbnN0ZWFkIG9mIGhhc2ggd2l0aCBjb2x1bW4gbmFtZSBhcyBrZXkuXG4gICAgICogQHByb3BlcnR5IHtNeVNRTENvbm5lY3Rpb259IFtvcHRpb25zLmNvbm5lY3Rpb25dIC0gRXhpc3RpbmcgY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyBleGVjdXRlXyhzcWwsIHBhcmFtcywgb3B0aW9ucykgeyAgICAgICAgXG4gICAgICAgIGxldCBjb25uO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25uID0gYXdhaXQgdGhpcy5fZ2V0Q29ubmVjdGlvbl8ob3B0aW9ucyk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudXNlUHJlcGFyZWRTdGF0ZW1lbnQgfHwgKG9wdGlvbnMgJiYgb3B0aW9ucy51c2VQcmVwYXJlZFN0YXRlbWVudCkpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmxvZ1NRTFN0YXRlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZygndmVyYm9zZScsIGNvbm4uZm9ybWF0KHNxbCwgcGFyYW1zKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yb3dzQXNBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgY29ubi5leGVjdXRlKHsgc3FsLCByb3dzQXNBcnJheTogdHJ1ZSB9LCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBbIHJvd3MxIF0gPSBhd2FpdCBjb25uLmV4ZWN1dGUoc3FsLCBwYXJhbXMpOyAgICAgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcm93czE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMubG9nU1FMU3RhdGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2coJ3ZlcmJvc2UnLCBjb25uLmZvcm1hdChzcWwsIHBhcmFtcykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnJvd3NBc0FycmF5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGNvbm4ucXVlcnkoeyBzcWwsIHJvd3NBc0FycmF5OiB0cnVlIH0sIHBhcmFtcyk7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICBsZXQgWyByb3dzMiBdID0gYXdhaXQgY29ubi5xdWVyeShzcWwsIHBhcmFtcyk7ICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgcmV0dXJuIHJvd3MyO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHsgICAgICBcbiAgICAgICAgICAgIGVyci5leHRyYUluZm8gfHwgKGVyci5leHRyYUluZm8gPSB7fSk7XG4gICAgICAgICAgICBlcnIuZXh0cmFJbmZvLnNxbCA9IF8udHJ1bmNhdGUoc3FsLCB7IGxlbmd0aDogMjAwIH0pO1xuICAgICAgICAgICAgZXJyLmV4dHJhSW5mby5wYXJhbXMgPSBwYXJhbXM7XG5cbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGNvbm4gJiYgYXdhaXQgdGhpcy5fcmVsZWFzZUNvbm5lY3Rpb25fKGNvbm4sIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgcGluZ18oKSB7XG4gICAgICAgIGxldCBbIHBpbmcgXSA9IGF3YWl0IHRoaXMuZXhlY3V0ZV8oJ1NFTEVDVCAxIEFTIHJlc3VsdCcpO1xuICAgICAgICByZXR1cm4gcGluZyAmJiBwaW5nLnJlc3VsdCA9PT0gMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgZW50aXR5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbCBcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSBcbiAgICAgKiBAcGFyYW0geyp9IG9wdGlvbnMgXG4gICAgICovXG4gICAgYXN5bmMgY3JlYXRlXyhtb2RlbCwgZGF0YSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoIWRhdGEgfHwgXy5pc0VtcHR5KGRhdGEpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXBwbGljYXRpb25FcnJvcihgQ3JlYXRpbmcgd2l0aCBlbXB0eSBcIiR7bW9kZWx9XCIgZGF0YS5gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBzcWwgPSAnSU5TRVJUIElOVE8gPz8gU0VUID8nO1xuICAgICAgICBsZXQgcGFyYW1zID0gWyBtb2RlbCBdO1xuICAgICAgICBwYXJhbXMucHVzaChkYXRhKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5leGVjdXRlXyhzcWwsIHBhcmFtcywgb3B0aW9ucyk7IFxuICAgIH1cblxuICAgIGluc2VydE9uZV8gPSB0aGlzLmNyZWF0ZV87XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgYW4gZXhpc3RpbmcgZW50aXR5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbCBcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSBcbiAgICAgKiBAcGFyYW0geyp9IHF1ZXJ5IFxuICAgICAqIEBwYXJhbSB7Kn0gcXVlcnlPcHRpb25zICBcbiAgICAgKiBAcGFyYW0geyp9IGNvbm5PcHRpb25zIFxuICAgICAqL1xuICAgIGFzeW5jIHVwZGF0ZV8obW9kZWwsIGRhdGEsIHF1ZXJ5LCBxdWVyeU9wdGlvbnMsIGNvbm5PcHRpb25zKSB7ICAgIFxuICAgICAgICBpZiAoXy5pc0VtcHR5KGRhdGEpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWVzdEVycm9yKCdEYXRhIHJlY29yZCBpcyBlbXB0eS4nLCB7IG1vZGVsLCBxdWVyeSB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbGV0IHBhcmFtcyA9IFtdLCBhbGlhc01hcCA9IHsgW21vZGVsXTogJ0EnIH0sIGpvaW5pbmdzLCBoYXNKb2luaW5nID0gZmFsc2UsIGpvaW5pbmdQYXJhbXMgPSBbXTsgXG5cbiAgICAgICAgaWYgKHF1ZXJ5T3B0aW9ucyAmJiBxdWVyeU9wdGlvbnMuJHJlbGF0aW9uc2hpcHMpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBqb2luaW5ncyA9IHRoaXMuX2pvaW5Bc3NvY2lhdGlvbnMocXVlcnlPcHRpb25zLiRyZWxhdGlvbnNoaXBzLCBtb2RlbCwgJ0EnLCBhbGlhc01hcCwgMSwgam9pbmluZ1BhcmFtcyk7ICAgICAgICAgICAgIFxuICAgICAgICAgICAgaGFzSm9pbmluZyA9IG1vZGVsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHNxbCA9ICdVUERBVEUgJyArIG15c3FsLmVzY2FwZUlkKG1vZGVsKTtcblxuICAgICAgICBpZiAoaGFzSm9pbmluZykge1xuICAgICAgICAgICAgam9pbmluZ1BhcmFtcy5mb3JFYWNoKHAgPT4gcGFyYW1zLnB1c2gocCkpO1xuICAgICAgICAgICAgc3FsICs9ICcgQSAnICsgam9pbmluZ3Muam9pbignICcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHF1ZXJ5T3B0aW9ucyAmJiBxdWVyeU9wdGlvbnMuJHJlcXVpcmVTcGxpdENvbHVtbnMpIHtcbiAgICAgICAgICAgIHNxbCArPSAnIFNFVCAnICsgdGhpcy5fc3BsaXRDb2x1bW5zQXNJbnB1dChkYXRhLCBwYXJhbXMsIGhhc0pvaW5pbmcsIGFsaWFzTWFwKS5qb2luKCcsJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJhbXMucHVzaChkYXRhKTtcbiAgICAgICAgICAgIHNxbCArPSAnIFNFVCA/JztcbiAgICAgICAgfSAgICAgICAgXG5cbiAgICAgICAgaWYgKHF1ZXJ5KSB7ICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgd2hlcmVDbGF1c2UgPSB0aGlzLl9qb2luQ29uZGl0aW9uKHF1ZXJ5LCBwYXJhbXMsIG51bGwsIGhhc0pvaW5pbmcsIGFsaWFzTWFwKTsgICBcbiAgICAgICAgICAgIGlmICh3aGVyZUNsYXVzZSkge1xuICAgICAgICAgICAgICAgIHNxbCArPSAnIFdIRVJFICcgKyB3aGVyZUNsYXVzZTsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgfSAgICBcblxuICAgICAgICByZXR1cm4gdGhpcy5leGVjdXRlXyhzcWwsIHBhcmFtcywgY29ubk9wdGlvbnMpO1xuICAgIH1cblxuICAgIHVwZGF0ZU9uZV8gPSB0aGlzLnVwZGF0ZV87XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlIGFuIGV4aXN0aW5nIGVudGl0eSBvciBjcmVhdGUgYSBuZXcgb25lLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbCBcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSBcbiAgICAgKiBAcGFyYW0geyp9IG9wdGlvbnMgXG4gICAgICovXG4gICAgYXN5bmMgcmVwbGFjZV8obW9kZWwsIGRhdGEsIG9wdGlvbnMpIHsgICAgICAgIFxuICAgICAgICBsZXQgcGFyYW1zID0gWyBtb2RlbCwgZGF0YSBdOyBcblxuICAgICAgICBsZXQgc3FsID0gJ1JFUExBQ0UgPz8gU0VUID8nO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmV4ZWN1dGVfKHNxbCwgcGFyYW1zLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYW4gZXhpc3RpbmcgZW50aXR5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbCBcbiAgICAgKiBAcGFyYW0geyp9IGNvbmRpdGlvbiBcbiAgICAgKiBAcGFyYW0geyp9IG9wdGlvbnMgXG4gICAgICovXG4gICAgYXN5bmMgZGVsZXRlXyhtb2RlbCwgY29uZGl0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgIGxldCBwYXJhbXMgPSBbIG1vZGVsIF07XG5cbiAgICAgICAgbGV0IHdoZXJlQ2xhdXNlID0gdGhpcy5fam9pbkNvbmRpdGlvbihjb25kaXRpb24sIHBhcmFtcyk7ICAgICAgICBcblxuICAgICAgICBsZXQgc3FsID0gJ0RFTEVURSBGUk9NID8/IFdIRVJFICcgKyB3aGVyZUNsYXVzZTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzLmV4ZWN1dGVfKHNxbCwgcGFyYW1zLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtIHNlbGVjdCBvcGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBtb2RlbCBcbiAgICAgKiBAcGFyYW0geyp9IGNvbmRpdGlvbiBcbiAgICAgKiBAcGFyYW0geyp9IGNvbm5PcHRpb25zIFxuICAgICAqL1xuICAgIGFzeW5jIGZpbmRfKG1vZGVsLCBjb25kaXRpb24sIGNvbm5PcHRpb25zKSB7XG4gICAgICAgIGxldCBzcWxJbmZvID0gdGhpcy5idWlsZFF1ZXJ5KG1vZGVsLCBjb25kaXRpb24pO1xuXG4gICAgICAgIGxldCByZXN1bHQsIHRvdGFsQ291bnQ7XG5cbiAgICAgICAgaWYgKHNxbEluZm8uY291bnRTcWwpIHsgICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCBbIGNvdW50UmVzdWx0IF0gPSBhd2FpdCB0aGlzLmV4ZWN1dGVfKHNxbEluZm8uY291bnRTcWwsIHNxbEluZm8ucGFyYW1zLCBjb25uT3B0aW9ucyk7ICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHRvdGFsQ291bnQgPSBjb3VudFJlc3VsdFsnY291bnQnXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzcWxJbmZvLmhhc0pvaW5pbmcpIHtcbiAgICAgICAgICAgIGNvbm5PcHRpb25zID0geyAuLi5jb25uT3B0aW9ucywgcm93c0FzQXJyYXk6IHRydWUgfTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGF3YWl0IHRoaXMuZXhlY3V0ZV8oc3FsSW5mby5zcWwsIHNxbEluZm8ucGFyYW1zLCBjb25uT3B0aW9ucyk7ICBcbiAgICAgICAgICAgIGxldCByZXZlcnNlQWxpYXNNYXAgPSBfLnJlZHVjZShzcWxJbmZvLmFsaWFzTWFwLCAocmVzdWx0LCBhbGlhcywgbm9kZVBhdGgpID0+IHtcbiAgICAgICAgICAgICAgICByZXN1bHRbYWxpYXNdID0gbm9kZVBhdGguc3BsaXQoJy4nKS5zbGljZSgxKS5tYXAobiA9PiAnOicgKyBuKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfSwge30pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoc3FsSW5mby5jb3VudFNxbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuY29uY2F0KHJldmVyc2VBbGlhc01hcCwgdG90YWxDb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQuY29uY2F0KHJldmVyc2VBbGlhc01hcCk7XG4gICAgICAgIH0gXG5cbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgdGhpcy5leGVjdXRlXyhzcWxJbmZvLnNxbCwgc3FsSW5mby5wYXJhbXMsIGNvbm5PcHRpb25zKTtcblxuICAgICAgICBpZiAoc3FsSW5mby5jb3VudFNxbCkge1xuICAgICAgICAgICAgcmV0dXJuIFsgcmVzdWx0LCB0b3RhbENvdW50IF07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ1aWxkIHNxbCBzdGF0ZW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBtb2RlbCBcbiAgICAgKiBAcGFyYW0geyp9IGNvbmRpdGlvbiAgICAgIFxuICAgICAqL1xuICAgIGJ1aWxkUXVlcnkobW9kZWwsIHsgJHJlbGF0aW9uc2hpcHMsICRwcm9qZWN0aW9uLCAkcXVlcnksICRncm91cEJ5LCAkb3JkZXJCeSwgJG9mZnNldCwgJGxpbWl0LCAkdG90YWxDb3VudCB9KSB7XG4gICAgICAgIGxldCBwYXJhbXMgPSBbXSwgYWxpYXNNYXAgPSB7IFttb2RlbF06ICdBJyB9LCBqb2luaW5ncywgaGFzSm9pbmluZyA9IGZhbHNlLCBqb2luaW5nUGFyYW1zID0gW107ICAgICAgICBcblxuICAgICAgICAvLyBidWlsZCBhbGlhcyBtYXAgZmlyc3RcbiAgICAgICAgLy8gY2FjaGUgcGFyYW1zXG4gICAgICAgIGlmICgkcmVsYXRpb25zaGlwcykgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGpvaW5pbmdzID0gdGhpcy5fam9pbkFzc29jaWF0aW9ucygkcmVsYXRpb25zaGlwcywgbW9kZWwsICdBJywgYWxpYXNNYXAsIDEsIGpvaW5pbmdQYXJhbXMpOyAgICAgICAgICAgICBcbiAgICAgICAgICAgIGhhc0pvaW5pbmcgPSBtb2RlbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBzZWxlY3RDb2xvbW5zID0gJHByb2plY3Rpb24gPyB0aGlzLl9idWlsZENvbHVtbnMoJHByb2plY3Rpb24sIHBhcmFtcywgaGFzSm9pbmluZywgYWxpYXNNYXApIDogJyonO1xuXG4gICAgICAgIGxldCBzcWwgPSAnIEZST00gJyArIG15c3FsLmVzY2FwZUlkKG1vZGVsKTtcblxuICAgICAgICAvLyBtb3ZlIGNhY2hlZCBqb2luaW5nIHBhcmFtcyBpbnRvIHBhcmFtc1xuICAgICAgICAvLyBzaG91bGQgYWNjb3JkaW5nIHRvIHRoZSBwbGFjZSBvZiBjbGF1c2UgaW4gYSBzcWwgICAgICAgIFxuXG4gICAgICAgIGlmIChoYXNKb2luaW5nKSB7XG4gICAgICAgICAgICBqb2luaW5nUGFyYW1zLmZvckVhY2gocCA9PiBwYXJhbXMucHVzaChwKSk7XG4gICAgICAgICAgICBzcWwgKz0gJyBBICcgKyBqb2luaW5ncy5qb2luKCcgJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJHF1ZXJ5KSB7ICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgd2hlcmVDbGF1c2UgPSB0aGlzLl9qb2luQ29uZGl0aW9uKCRxdWVyeSwgcGFyYW1zLCBudWxsLCBoYXNKb2luaW5nLCBhbGlhc01hcCk7ICAgXG4gICAgICAgICAgICBpZiAod2hlcmVDbGF1c2UpIHtcbiAgICAgICAgICAgICAgICBzcWwgKz0gJyBXSEVSRSAnICsgd2hlcmVDbGF1c2U7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgfSAgICBcblxuICAgICAgICBpZiAoJGdyb3VwQnkpIHtcbiAgICAgICAgICAgIHNxbCArPSAnICcgKyB0aGlzLl9idWlsZEdyb3VwQnkoJGdyb3VwQnksIHBhcmFtcywgaGFzSm9pbmluZywgYWxpYXNNYXApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCRvcmRlckJ5KSB7XG4gICAgICAgICAgICBzcWwgKz0gJyAnICsgdGhpcy5fYnVpbGRPcmRlckJ5KCRvcmRlckJ5LCBoYXNKb2luaW5nLCBhbGlhc01hcCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzdWx0ID0geyBwYXJhbXMsIGhhc0pvaW5pbmcsIGFsaWFzTWFwIH07ICAgICAgICBcblxuICAgICAgICBpZiAoJHRvdGFsQ291bnQpIHtcbiAgICAgICAgICAgIGxldCBjb3VudFN1YmplY3Q7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgJHRvdGFsQ291bnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgY291bnRTdWJqZWN0ID0gJ0RJU1RJTkNUKCcgKyB0aGlzLl9lc2NhcGVJZFdpdGhBbGlhcygkdG90YWxDb3VudCwgaGFzSm9pbmluZywgYWxpYXNNYXApICsgJyknO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb3VudFN1YmplY3QgPSAnKic7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlc3VsdC5jb3VudFNxbCA9IGBTRUxFQ1QgQ09VTlQoJHtjb3VudFN1YmplY3R9KSBBUyBjb3VudGAgKyBzcWw7XG4gICAgICAgIH1cblxuICAgICAgICBzcWwgPSAnU0VMRUNUICcgKyBzZWxlY3RDb2xvbW5zICsgc3FsOyAgICAgICAgXG5cbiAgICAgICAgaWYgKF8uaXNJbnRlZ2VyKCRsaW1pdCkgJiYgJGxpbWl0ID4gMCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoXy5pc0ludGVnZXIoJG9mZnNldCkgJiYgJG9mZnNldCA+IDApIHsgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBzcWwgKz0gJyBMSU1JVCA/LCA/JztcbiAgICAgICAgICAgICAgICBwYXJhbXMucHVzaCgkb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBwYXJhbXMucHVzaCgkbGltaXQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzcWwgKz0gJyBMSU1JVCA/JztcbiAgICAgICAgICAgICAgICBwYXJhbXMucHVzaCgkbGltaXQpO1xuICAgICAgICAgICAgfSAgICAgICAgICAgIFxuICAgICAgICB9IGVsc2UgaWYgKF8uaXNJbnRlZ2VyKCRvZmZzZXQpICYmICRvZmZzZXQgPiAwKSB7ICAgICAgICAgICAgXG4gICAgICAgICAgICBzcWwgKz0gJyBMSU1JVCA/LCAxMDAwJztcbiAgICAgICAgICAgIHBhcmFtcy5wdXNoKCRvZmZzZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0LnNxbCA9IHNxbDtcblxuICAgICAgICAvL2NvbnNvbGUuZGlyKHJlc3VsdCwgeyBkZXB0aDogMTAsIGNvbG9yczogdHJ1ZSB9KTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZ2V0SW5zZXJ0ZWRJZChyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCAmJiB0eXBlb2YgcmVzdWx0Lmluc2VydElkID09PSAnbnVtYmVyJyA/XG4gICAgICAgICAgICByZXN1bHQuaW5zZXJ0SWQgOiBcbiAgICAgICAgICAgIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBnZXROdW1PZkFmZmVjdGVkUm93cyhyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCAmJiB0eXBlb2YgcmVzdWx0LmFmZmVjdGVkUm93cyA9PT0gJ251bWJlcicgP1xuICAgICAgICAgICAgcmVzdWx0LmFmZmVjdGVkUm93cyA6IFxuICAgICAgICAgICAgdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIF9nZW5lcmF0ZUFsaWFzKGluZGV4LCBhbmNob3IpIHtcbiAgICAgICAgbGV0IGFsaWFzID0gbnRvbChpbmRleCk7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy52ZXJib3NlQWxpYXMpIHtcbiAgICAgICAgICAgIHJldHVybiBfLnNuYWtlQ2FzZShhbmNob3IpLnRvVXBwZXJDYXNlKCkgKyAnXycgKyBhbGlhcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhbGlhcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0IGFzc29jaWF0aW9ucyBpbnRvIGpvaW5pbmcgY2xhdXNlcy5cbiAgICAgKiAge1xuICAgICAqICAgICAgZW50aXR5OiA8cmVtb3RlIGVudGl0eT5cbiAgICAgKiAgICAgIGpvaW5UeXBlOiAnTEVGVCBKT0lOfElOTkVSIEpPSU58RlVMTCBPVVRFUiBKT0lOJ1xuICAgICAqICAgICAgYW5jaG9yOiAnbG9jYWwgcHJvcGVydHkgdG8gcGxhY2UgdGhlIHJlbW90ZSBlbnRpdHknXG4gICAgICogICAgICBsb2NhbEZpZWxkOiA8bG9jYWwgZmllbGQgdG8gam9pbj5cbiAgICAgKiAgICAgIHJlbW90ZUZpZWxkOiA8cmVtb3RlIGZpZWxkIHRvIGpvaW4+XG4gICAgICogICAgICBzdWJBc3NvY2lhdGlvbnM6IHsgLi4uIH1cbiAgICAgKiAgfVxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7Kn0gYXNzb2NpYXRpb25zIFxuICAgICAqIEBwYXJhbSB7Kn0gcGFyZW50QWxpYXNLZXkgXG4gICAgICogQHBhcmFtIHsqfSBwYXJlbnRBbGlhcyBcbiAgICAgKiBAcGFyYW0geyp9IGFsaWFzTWFwIFxuICAgICAqIEBwYXJhbSB7Kn0gcGFyYW1zIFxuICAgICAqL1xuICAgIF9qb2luQXNzb2NpYXRpb25zKGFzc29jaWF0aW9ucywgcGFyZW50QWxpYXNLZXksIHBhcmVudEFsaWFzLCBhbGlhc01hcCwgc3RhcnRJZCwgcGFyYW1zKSB7XG4gICAgICAgIGxldCBqb2luaW5ncyA9IFtdO1xuXG4gICAgICAgIC8vY29uc29sZS5sb2coJ2Fzc29jaWF0aW9uczonLCBPYmplY3Qua2V5cyhhc3NvY2lhdGlvbnMpKTtcblxuICAgICAgICBfLmVhY2goYXNzb2NpYXRpb25zLCAoYXNzb2NJbmZvLCBhbmNob3IpID0+IHsgXG4gICAgICAgICAgICBsZXQgYWxpYXMgPSBhc3NvY0luZm8uYWxpYXMgfHwgdGhpcy5fZ2VuZXJhdGVBbGlhcyhzdGFydElkKyssIGFuY2hvcik7IFxuICAgICAgICAgICAgbGV0IHsgam9pblR5cGUsIG9uIH0gPSBhc3NvY0luZm87XG5cbiAgICAgICAgICAgIGpvaW5UeXBlIHx8IChqb2luVHlwZSA9ICdMRUZUIEpPSU4nKTtcblxuICAgICAgICAgICAgaWYgKGFzc29jSW5mby5zcWwpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXNzb2NJbmZvLm91dHB1dCkgeyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGFsaWFzTWFwW3BhcmVudEFsaWFzS2V5ICsgJy4nICsgYWxpYXNdID0gYWxpYXM7IFxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGFzc29jSW5mby5wYXJhbXMuZm9yRWFjaChwID0+IHBhcmFtcy5wdXNoKHApKTsgXG4gICAgICAgICAgICAgICAgam9pbmluZ3MucHVzaChgJHtqb2luVHlwZX0gKCR7YXNzb2NJbmZvLnNxbH0pICR7YWxpYXN9IE9OICR7dGhpcy5fam9pbkNvbmRpdGlvbihvbiwgcGFyYW1zLCBudWxsLCBwYXJlbnRBbGlhc0tleSwgYWxpYXNNYXApfWApOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgeyBlbnRpdHksIHN1YkFzc29jcyB9ID0gYXNzb2NJbmZvOyAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IGFsaWFzS2V5ID0gcGFyZW50QWxpYXNLZXkgKyAnLicgKyBhbmNob3I7XG4gICAgICAgICAgICBhbGlhc01hcFthbGlhc0tleV0gPSBhbGlhczsgXG5cbiAgICAgICAgICAgIGpvaW5pbmdzLnB1c2goYCR7am9pblR5cGV9ICR7bXlzcWwuZXNjYXBlSWQoZW50aXR5KX0gJHthbGlhc30gT04gJHt0aGlzLl9qb2luQ29uZGl0aW9uKG9uLCBwYXJhbXMsIG51bGwsIHBhcmVudEFsaWFzS2V5LCBhbGlhc01hcCl9YCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChzdWJBc3NvY3MpIHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGV0IHN1YkpvaW5pbmdzID0gdGhpcy5fam9pbkFzc29jaWF0aW9ucyhzdWJBc3NvY3MsIGFsaWFzS2V5LCBhbGlhcywgYWxpYXNNYXAsIHN0YXJ0SWQsIHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgc3RhcnRJZCArPSBzdWJKb2luaW5ncy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgam9pbmluZ3MgPSBqb2luaW5ncy5jb25jYXQoc3ViSm9pbmluZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gam9pbmluZ3M7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU1FMIGNvbmRpdGlvbiByZXByZXNlbnRhdGlvblxuICAgICAqICAgUnVsZXM6XG4gICAgICogICAgIGRlZmF1bHQ6IFxuICAgICAqICAgICAgICBhcnJheTogT1JcbiAgICAgKiAgICAgICAga3YtcGFpcjogQU5EXG4gICAgICogICAgICRhbGw6IFxuICAgICAqICAgICAgICBhcnJheTogQU5EXG4gICAgICogICAgICRhbnk6XG4gICAgICogICAgICAgIGt2LXBhaXI6IE9SXG4gICAgICogICAgICRub3Q6XG4gICAgICogICAgICAgIGFycmF5OiBub3QgKCBvciApXG4gICAgICogICAgICAgIGt2LXBhaXI6IG5vdCAoIGFuZCApICAgICBcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29uZGl0aW9uIFxuICAgICAqIEBwYXJhbSB7YXJyYXl9IHBhcmFtcyBcbiAgICAgKi9cbiAgICBfam9pbkNvbmRpdGlvbihjb25kaXRpb24sIHBhcmFtcywgam9pbk9wZXJhdG9yLCBoYXNKb2luaW5nLCBhbGlhc01hcCkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb25kaXRpb24pKSB7XG4gICAgICAgICAgICBpZiAoIWpvaW5PcGVyYXRvcikge1xuICAgICAgICAgICAgICAgIGpvaW5PcGVyYXRvciA9ICdPUic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29uZGl0aW9uLm1hcChjID0+ICcoJyArIHRoaXMuX2pvaW5Db25kaXRpb24oYywgcGFyYW1zLCBudWxsLCBoYXNKb2luaW5nLCBhbGlhc01hcCkgKyAnKScpLmpvaW4oYCAke2pvaW5PcGVyYXRvcn0gYCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KGNvbmRpdGlvbikpIHsgXG4gICAgICAgICAgICBpZiAoIWpvaW5PcGVyYXRvcikge1xuICAgICAgICAgICAgICAgIGpvaW5PcGVyYXRvciA9ICdBTkQnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gXy5tYXAoY29uZGl0aW9uLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICckYWxsJyB8fCBrZXkgPT09ICckYW5kJykge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnQ6IEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IF8uaXNQbGFpbk9iamVjdCh2YWx1ZSksICdcIiRhbmRcIiBvcGVyYXRvciB2YWx1ZSBzaG91bGQgYmUgYW4gYXJyYXkgb3IgcGxhaW4gb2JqZWN0Lic7ICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJygnICsgdGhpcy5fam9pbkNvbmRpdGlvbih2YWx1ZSwgcGFyYW1zLCAnQU5EJywgaGFzSm9pbmluZywgYWxpYXNNYXApICsgJyknO1xuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAnJGFueScgfHwga2V5ID09PSAnJG9yJyB8fCBrZXkuc3RhcnRzV2l0aCgnJG9yXycpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydDogQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgXy5pc1BsYWluT2JqZWN0KHZhbHVlKSwgJ1wiJG9yXCIgb3BlcmF0b3IgdmFsdWUgc2hvdWxkIGJlIGFuIGFycmF5IG9yIHBsYWluIG9iamVjdC4nOyAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnKCcgKyB0aGlzLl9qb2luQ29uZGl0aW9uKHZhbHVlLCBwYXJhbXMsICdPUicsIGhhc0pvaW5pbmcsIGFsaWFzTWFwKSArICcpJztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAnJG5vdCcpIHsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydDogdmFsdWUubGVuZ3RoID4gMCwgJ1wiJG5vdFwiIG9wZXJhdG9yIHZhbHVlIHNob3VsZCBiZSBub24tZW1wdHkuJzsgICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdOT1QgKCcgKyB0aGlzLl9qb2luQ29uZGl0aW9uKHZhbHVlLCBwYXJhbXMsIG51bGwsIGhhc0pvaW5pbmcsIGFsaWFzTWFwKSArICcpJztcbiAgICAgICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChfLmlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbnVtT2ZFbGVtZW50ID0gT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aDsgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydDogbnVtT2ZFbGVtZW50ID4gMCwgJ1wiJG5vdFwiIG9wZXJhdG9yIHZhbHVlIHNob3VsZCBiZSBub24tZW1wdHkuJzsgICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdOT1QgKCcgKyB0aGlzLl9qb2luQ29uZGl0aW9uKHZhbHVlLCBwYXJhbXMsIG51bGwsIGhhc0pvaW5pbmcsIGFsaWFzTWFwKSArICcpJztcbiAgICAgICAgICAgICAgICAgICAgfSBcblxuICAgICAgICAgICAgICAgICAgICBhc3NlcnQ6IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycsICdVbnN1cHBvcnRlZCBjb25kaXRpb24hJztcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ05PVCAoJyArIGNvbmRpdGlvbiArICcpJzsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd3JhcENvbmRpdGlvbihrZXksIHZhbHVlLCBwYXJhbXMsIGhhc0pvaW5pbmcsIGFsaWFzTWFwKTtcbiAgICAgICAgICAgIH0pLmpvaW4oYCAke2pvaW5PcGVyYXRvcn0gYCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmRpdGlvbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgY29uZGl0aW9uIVxcbiBWYWx1ZTogJyArIEpTT04uc3RyaW5naWZ5KGNvbmRpdGlvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbmRpdGlvbjtcbiAgICB9XG5cbiAgICBfcmVwbGFjZUZpZWxkTmFtZVdpdGhBbGlhcyhmaWVsZE5hbWUsIG1haW5FbnRpdHksIGFsaWFzTWFwKSB7XG4gICAgICAgIGxldCBwYXJ0cyA9IGZpZWxkTmFtZS5zcGxpdCgnLicpO1xuICAgICAgICBpZiAocGFydHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgbGV0IGFjdHVhbEZpZWxkTmFtZSA9IHBhcnRzLnBvcCgpO1xuICAgICAgICAgICAgbGV0IGFsaWFzID0gYWxpYXNNYXBbbWFpbkVudGl0eSArICcuJyArIHBhcnRzLmpvaW4oJy4nKV07XG4gICAgICAgICAgICBpZiAoIWFsaWFzKSB7XG4gICAgICAgICAgICAgICAgbGV0IG1zZyA9IGBVbmtub3duIGNvbHVtbiByZWZlcmVuY2U6ICR7ZmllbGROYW1lfWA7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1ZXN0RXJyb3IobXNnKTtcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcblxuICAgICAgICAgICAgcmV0dXJuIGFsaWFzICsgJy4nICsgbXlzcWwuZXNjYXBlSWQoYWN0dWFsRmllbGROYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhbGlhc01hcFttYWluRW50aXR5XSArICcuJyArIChmaWVsZE5hbWUgPT09ICcqJyA/IGZpZWxkTmFtZSA6IG15c3FsLmVzY2FwZUlkKGZpZWxkTmFtZSkpO1xuICAgIH1cblxuICAgIF9lc2NhcGVJZFdpdGhBbGlhcyhmaWVsZE5hbWUsIG1haW5FbnRpdHksIGFsaWFzTWFwKSB7ICAgXG5cbiAgICAgICAgaWYgKG1haW5FbnRpdHkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZXBsYWNlRmllbGROYW1lV2l0aEFsaWFzKGZpZWxkTmFtZSwgbWFpbkVudGl0eSwgYWxpYXNNYXApOyBcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmaWVsZE5hbWUgPT09ICcqJyA/IGZpZWxkTmFtZSA6IG15c3FsLmVzY2FwZUlkKGZpZWxkTmFtZSk7XG4gICAgfVxuXG4gICAgX3NwbGl0Q29sdW1uc0FzSW5wdXQoZGF0YSwgcGFyYW1zLCBoYXNKb2luaW5nLCBhbGlhc01hcCkge1xuICAgICAgICByZXR1cm4gXy5tYXAoZGF0YSwgKHYsIGZpZWxkTmFtZSkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0OiBmaWVsZE5hbWUuaW5kZXhPZignLicpID09PSAtMSwgJ0NvbHVtbiBvZiBkaXJlY3QgaW5wdXQgZGF0YSBjYW5ub3QgYmUgYSBkb3Qtc2VwYXJhdGVkIG5hbWUuJztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIG15c3FsLmVzY2FwZUlkKGZpZWxkTmFtZSkgKyAnPScgKyB0aGlzLl9wYWNrVmFsdWUodiwgcGFyYW1zLCBoYXNKb2luaW5nLCBhbGlhc01hcCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9wYWNrQXJyYXkoYXJyYXksIHBhcmFtcywgaGFzSm9pbmluZywgYWxpYXNNYXApIHtcbiAgICAgICAgcmV0dXJuIGFycmF5Lm1hcCh2YWx1ZSA9PiB0aGlzLl9wYWNrVmFsdWUodmFsdWUsIHBhcmFtcywgaGFzSm9pbmluZywgYWxpYXNNYXApKS5qb2luKCcsJyk7XG4gICAgfVxuXG4gICAgX3BhY2tWYWx1ZSh2YWx1ZSwgcGFyYW1zLCBoYXNKb2luaW5nLCBhbGlhc01hcCkge1xuICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlLm9vclR5cGUpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHZhbHVlLm9vclR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQ29sdW1uUmVmZXJlbmNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lc2NhcGVJZFdpdGhBbGlhcyh2YWx1ZS5uYW1lLCBoYXNKb2luaW5nLCBhbGlhc01hcCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnRnVuY3Rpb24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLm5hbWUgKyAnKCcgKyAodmFsdWUuYXJncyA/IHRoaXMuX3BhY2tBcnJheSh2YWx1ZS5hcmdzLCBwYXJhbXMsIGhhc0pvaW5pbmcsIGFsaWFzTWFwKSA6ICcnKSArICcpJztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCaW5hcnlFeHByZXNzaW9uJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsZWZ0ID0gdGhpcy5fcGFja1ZhbHVlKHZhbHVlLmxlZnQsIHBhcmFtcywgaGFzSm9pbmluZywgYWxpYXNNYXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJpZ2h0ID0gdGhpcy5fcGFja1ZhbHVlKHZhbHVlLnJpZ2h0LCBwYXJhbXMsIGhhc0pvaW5pbmcsIGFsaWFzTWFwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsZWZ0ICsgYCAke3ZhbHVlLm9wfSBgICsgcmlnaHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBvb3IgdHlwZTogJHt2YWx1ZS5vb3JUeXBlfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJhbXMucHVzaCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiAnPyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV3JhcCBhIGNvbmRpdGlvbiBjbGF1c2UgICAgIFxuICAgICAqIFxuICAgICAqIFZhbHVlIGNhbiBiZSBhIGxpdGVyYWwgb3IgYSBwbGFpbiBjb25kaXRpb24gb2JqZWN0LlxuICAgICAqICAgMS4gZmllbGROYW1lLCA8bGl0ZXJhbD5cbiAgICAgKiAgIDIuIGZpZWxkTmFtZSwgeyBub3JtYWwgb2JqZWN0IH0gXG4gICAgICogXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkTmFtZSBcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFxuICAgICAqIEBwYXJhbSB7YXJyYXl9IHBhcmFtcyAgXG4gICAgICovXG4gICAgX3dyYXBDb25kaXRpb24oZmllbGROYW1lLCB2YWx1ZSwgcGFyYW1zLCBoYXNKb2luaW5nLCBhbGlhc01hcCwgaW5qZWN0KSB7XG4gICAgICAgIGlmIChfLmlzTmlsKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VzY2FwZUlkV2l0aEFsaWFzKGZpZWxkTmFtZSwgaGFzSm9pbmluZywgYWxpYXNNYXApICsgJyBJUyBOVUxMJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dyYXBDb25kaXRpb24oZmllbGROYW1lLCB7ICRpbjogdmFsdWUgfSwgcGFyYW1zLCBoYXNKb2luaW5nLCBhbGlhc01hcCwgaW5qZWN0KTtcbiAgICAgICAgfSAgICAgICBcblxuICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlLm9vclR5cGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZXNjYXBlSWRXaXRoQWxpYXMoZmllbGROYW1lLCBoYXNKb2luaW5nLCBhbGlhc01hcCkgKyAnID0gJyArIHRoaXMuX3BhY2tWYWx1ZSh2YWx1ZSwgcGFyYW1zLCBoYXNKb2luaW5nLCBhbGlhc01hcCk7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIGxldCBoYXNPcGVyYXRvciA9IF8uZmluZChPYmplY3Qua2V5cyh2YWx1ZSksIGsgPT4gayAmJiBrWzBdID09PSAnJCcpO1xuXG4gICAgICAgICAgICBpZiAoaGFzT3BlcmF0b3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXy5tYXAodmFsdWUsICh2LCBrKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrICYmIGtbMF0gPT09ICckJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3BlcmF0b3JcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJyRlcSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnJGVxdWFsJzpcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dyYXBDb25kaXRpb24oZmllbGROYW1lLCB2LCBwYXJhbXMsIGhhc0pvaW5pbmcsIGFsaWFzTWFwLCBpbmplY3QpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJyRuZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnJG5lcSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnJG5vdEVxdWFsJzogICAgICAgICBcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8uaXNOaWwodikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lc2NhcGVJZFdpdGhBbGlhcyhmaWVsZE5hbWUsIGhhc0pvaW5pbmcsIGFsaWFzTWFwKSArICcgSVMgTk9UIE5VTEwnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgIFxuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzUHJpbWl0aXZlKHYpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5qZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VzY2FwZUlkV2l0aEFsaWFzKGZpZWxkTmFtZSwgaGFzSm9pbmluZywgYWxpYXNNYXApICsgJyA8PiAnICsgdjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLnB1c2godik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZXNjYXBlSWRXaXRoQWxpYXMoZmllbGROYW1lLCBoYXNKb2luaW5nLCBhbGlhc01hcCkgKyAnIDw+ID8nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnTk9UICgnICsgdGhpcy5fd3JhcENvbmRpdGlvbihmaWVsZE5hbWUsIHYsIHBhcmFtcywgaGFzSm9pbmluZywgYWxpYXNNYXAsIHRydWUpICsgJyknO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJyQ+JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICckZ3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJyRncmVhdGVyVGhhbic6XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIC8vIGZvciBkYXRldGltZSB0eXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghXy5pc0Zpbml0ZSh2KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdiA9IF8udG9GaW5pdGUodik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4odikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09ubHkgZmluaXRlIG51bWJlcnMgY2FuIHVzZSBcIiRndFwiIG9yIFwiJD5cIiBvcGVyYXRvci4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5qZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZXNjYXBlSWRXaXRoQWxpYXMoZmllbGROYW1lLCBoYXNKb2luaW5nLCBhbGlhc01hcCkgKyAnID4gJyArIHY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5wdXNoKHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZXNjYXBlSWRXaXRoQWxpYXMoZmllbGROYW1lLCBoYXNKb2luaW5nLCBhbGlhc01hcCkgKyAnID4gPyc7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJyQ+PSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnJGd0ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnJGdyZWF0ZXJUaGFuT3JFcXVhbCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIC8vIGZvciBkYXRldGltZSB0eXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghXy5pc0Zpbml0ZSh2KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdiA9IF8udG9GaW5pdGUodik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4odikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09ubHkgZmluaXRlIG51bWJlcnMgY2FuIHVzZSBcIiRndGVcIiBvciBcIiQ+PVwiIG9wZXJhdG9yLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ki9cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5qZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZXNjYXBlSWRXaXRoQWxpYXMoZmllbGROYW1lLCBoYXNKb2luaW5nLCBhbGlhc01hcCkgKyAnID49ICcgKyB2O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMucHVzaCh2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VzY2FwZUlkV2l0aEFsaWFzKGZpZWxkTmFtZSwgaGFzSm9pbmluZywgYWxpYXNNYXApICsgJyA+PSA/JztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICckPCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnJGx0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICckbGVzc1RoYW4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiAvLyBmb3IgZGF0ZXRpbWUgdHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV8uaXNGaW5pdGUodikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgPSBfLnRvRmluaXRlKHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKHYpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPbmx5IGZpbml0ZSBudW1iZXJzIGNhbiB1c2UgXCIkbHRcIiBvciBcIiQ8XCIgb3BlcmF0b3IuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0qL1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lc2NhcGVJZFdpdGhBbGlhcyhmaWVsZE5hbWUsIGhhc0pvaW5pbmcsIGFsaWFzTWFwKSArICcgPCAnICsgdjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLnB1c2godik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lc2NhcGVJZFdpdGhBbGlhcyhmaWVsZE5hbWUsIGhhc0pvaW5pbmcsIGFsaWFzTWFwKSArICcgPCA/JztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICckPD0nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJyRsdGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJyRsZXNzVGhhbk9yRXF1YWwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiAvLyBmb3IgZGF0ZXRpbWUgdHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV8uaXNGaW5pdGUodikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgPSBfLnRvRmluaXRlKHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKHYpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPbmx5IGZpbml0ZSBudW1iZXJzIGNhbiB1c2UgXCIkbHRlXCIgb3IgXCIkPD1cIiBvcGVyYXRvci4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lc2NhcGVJZFdpdGhBbGlhcyhmaWVsZE5hbWUsIGhhc0pvaW5pbmcsIGFsaWFzTWFwKSArICcgPD0gJyArIHY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5wdXNoKHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZXNjYXBlSWRXaXRoQWxpYXMoZmllbGROYW1lLCBoYXNKb2luaW5nLCBhbGlhc01hcCkgKyAnIDw9ID8nO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJyRpbic6XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdmFsdWUgc2hvdWxkIGJlIGFuIGFycmF5IHdoZW4gdXNpbmcgXCIkaW5cIiBvcGVyYXRvci4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lc2NhcGVJZFdpdGhBbGlhcyhmaWVsZE5hbWUsIGhhc0pvaW5pbmcsIGFsaWFzTWFwKSArIGAgSU4gKCR7dn0pYDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLnB1c2godik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lc2NhcGVJZFdpdGhBbGlhcyhmaWVsZE5hbWUsIGhhc0pvaW5pbmcsIGFsaWFzTWFwKSArICcgSU4gKD8pJztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICckbmluJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICckbm90SW4nOlxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHZhbHVlIHNob3VsZCBiZSBhbiBhcnJheSB3aGVuIHVzaW5nIFwiJGluXCIgb3BlcmF0b3IuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5qZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZXNjYXBlSWRXaXRoQWxpYXMoZmllbGROYW1lLCBoYXNKb2luaW5nLCBhbGlhc01hcCkgKyBgIE5PVCBJTiAoJHt2fSlgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMucHVzaCh2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VzY2FwZUlkV2l0aEFsaWFzKGZpZWxkTmFtZSwgaGFzSm9pbmluZywgYWxpYXNNYXApICsgJyBOT1QgSU4gKD8pJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJyRzdGFydFdpdGgnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJyRzdGFydHNXaXRoJzpcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHYgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSB2YWx1ZSBzaG91bGQgYmUgYSBzdHJpbmcgd2hlbiB1c2luZyBcIiRzdGFydFdpdGhcIiBvcGVyYXRvci4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydDogIWluamVjdDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMucHVzaChgJHt2fSVgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VzY2FwZUlkV2l0aEFsaWFzKGZpZWxkTmFtZSwgaGFzSm9pbmluZywgYWxpYXNNYXApICsgJyBMSUtFID8nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnJGVuZFdpdGgnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJyRlbmRzV2l0aCc6XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdmFsdWUgc2hvdWxkIGJlIGEgc3RyaW5nIHdoZW4gdXNpbmcgXCIkZW5kV2l0aFwiIG9wZXJhdG9yLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0OiAhaW5qZWN0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5wdXNoKGAlJHt2fWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZXNjYXBlSWRXaXRoQWxpYXMoZmllbGROYW1lLCBoYXNKb2luaW5nLCBhbGlhc01hcCkgKyAnIExJS0UgPyc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICckbGlrZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnJGxpa2VzJzpcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHYgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSB2YWx1ZSBzaG91bGQgYmUgYSBzdHJpbmcgd2hlbiB1c2luZyBcIiRsaWtlXCIgb3BlcmF0b3IuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnQ6ICFpbmplY3Q7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLnB1c2goYCUke3Z9JWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZXNjYXBlSWRXaXRoQWxpYXMoZmllbGROYW1lLCBoYXNKb2luaW5nLCBhbGlhc01hcCkgKyAnIExJS0UgPyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnJGFwcGx5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFyZ3MgPSB2YWx1ZS5hcmdzID8gWyBmaWVsZE5hbWUgXS5jb25jYXQodmFsdWUuYXJncykgOiBbIGZpZWxkTmFtZSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5uYW1lICsgJygnICsgdGhpcy5fYnVpbGRDb2x1bW5zKGNvbC5hcmdzLCB2YWx1ZXNTZXEsIGhhc0pvaW5pbmcsIGFsaWFzTWFwKSArICcpID0gJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGNvbmRpdGlvbiBvcGVyYXRvcjogXCIke2t9XCIhYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09wZXJhdG9yIHNob3VsZCBub3QgYmUgbWl4ZWQgd2l0aCBjb25kaXRpb24gdmFsdWUuJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KS5qb2luKCcgQU5EICcpO1xuICAgICAgICAgICAgfSAgICAgICAgICAgICBcblxuICAgICAgICAgICAgYXNzZXJ0OiAhaW5qZWN0O1xuXG4gICAgICAgICAgICBwYXJhbXMucHVzaChKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VzY2FwZUlkV2l0aEFsaWFzKGZpZWxkTmFtZSwgaGFzSm9pbmluZywgYWxpYXNNYXApICsgJyA9ID8nO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluamVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VzY2FwZUlkV2l0aEFsaWFzKGZpZWxkTmFtZSwgaGFzSm9pbmluZywgYWxpYXNNYXApICsgJyA9ICcgKyB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcGFyYW1zLnB1c2godmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZXNjYXBlSWRXaXRoQWxpYXMoZmllbGROYW1lLCBoYXNKb2luaW5nLCBhbGlhc01hcCkgKyAnID0gPyc7XG4gICAgfVxuXG4gICAgX2J1aWxkQ29sdW1ucyhjb2x1bW5zLCBwYXJhbXMsIGhhc0pvaW5pbmcsIGFsaWFzTWFwKSB7ICAgICAgICBcbiAgICAgICAgcmV0dXJuIF8ubWFwKF8uY2FzdEFycmF5KGNvbHVtbnMpLCBjb2wgPT4gdGhpcy5fYnVpbGRDb2x1bW4oY29sLCBwYXJhbXMsIGhhc0pvaW5pbmcsIGFsaWFzTWFwKSkuam9pbignLCAnKTtcbiAgICB9XG5cbiAgICBfYnVpbGRDb2x1bW4oY29sLCBwYXJhbXMsIGhhc0pvaW5pbmcsIGFsaWFzTWFwKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY29sID09PSAnc3RyaW5nJykgeyAgXG4gICAgICAgICAgICAvL2l0J3MgYSBzdHJpbmcgaWYgaXQncyBxdW90ZWQgd2hlbiBwYXNzZWQgaW4gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBpc1F1b3RlZChjb2wpID8gY29sIDogdGhpcy5fZXNjYXBlSWRXaXRoQWxpYXMoY29sLCBoYXNKb2luaW5nLCBhbGlhc01hcCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBjb2w7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KGNvbCkpIHsgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoY29sLmFsaWFzKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0OiB0eXBlb2YgY29sLmFsaWFzID09PSAnc3RyaW5nJztcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9idWlsZENvbHVtbihfLm9taXQoY29sLCBbJ2FsaWFzJ10pLCBwYXJhbXMsIGhhc0pvaW5pbmcsIGFsaWFzTWFwKSArICcgQVMgJyArIG15c3FsLmVzY2FwZUlkKGNvbC5hbGlhcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb2wudHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGlmIChjb2wubmFtZS50b1VwcGVyQ2FzZSgpID09PSAnQ09VTlQnICYmIGNvbC5hcmdzLmxlbmd0aCA9PT0gMSAmJiBjb2wuYXJnc1swXSA9PT0gJyonKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnQ09VTlQoKiknO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBjb2wubmFtZSArICcoJyArIChjb2wuYXJncyA/IHRoaXMuX2J1aWxkQ29sdW1ucyhjb2wuYXJncywgcGFyYW1zLCBoYXNKb2luaW5nLCBhbGlhc01hcCkgOiAnJykgKyAnKSc7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIGlmIChjb2wudHlwZSA9PT0gJ2V4cHJlc3Npb24nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pvaW5Db25kaXRpb24oY29sLmV4cHIsIHBhcmFtcywgbnVsbCwgaGFzSm9pbmluZywgYWxpYXNNYXApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEFwcGxpY2F0aW9uRXJyb3IoYFVua25vdyBjb2x1bW4gc3ludGF4OiAke0pTT04uc3RyaW5naWZ5KGNvbCl9YCk7XG4gICAgfVxuXG4gICAgX2J1aWxkR3JvdXBCeShncm91cEJ5LCBwYXJhbXMsIGhhc0pvaW5pbmcsIGFsaWFzTWFwKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ3JvdXBCeSA9PT0gJ3N0cmluZycpIHJldHVybiAnR1JPVVAgQlkgJyArIHRoaXMuX2VzY2FwZUlkV2l0aEFsaWFzKGdyb3VwQnksIGhhc0pvaW5pbmcsIGFsaWFzTWFwKTtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShncm91cEJ5KSkgcmV0dXJuICdHUk9VUCBCWSAnICsgZ3JvdXBCeS5tYXAoYnkgPT4gdGhpcy5fZXNjYXBlSWRXaXRoQWxpYXMoYnksIGhhc0pvaW5pbmcsIGFsaWFzTWFwKSkuam9pbignLCAnKTtcblxuICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KGdyb3VwQnkpKSB7XG4gICAgICAgICAgICBsZXQgeyBjb2x1bW5zLCBoYXZpbmcgfSA9IGdyb3VwQnk7XG5cbiAgICAgICAgICAgIGlmICghY29sdW1ucyB8fCAhQXJyYXkuaXNBcnJheShjb2x1bW5zKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBBcHBsaWNhdGlvbkVycm9yKGBJbnZhbGlkIGdyb3VwIGJ5IHN5bnRheDogJHtKU09OLnN0cmluZ2lmeShncm91cEJ5KX1gKTtcbiAgICAgICAgICAgIH0gXG5cbiAgICAgICAgICAgIGxldCBncm91cEJ5Q2xhdXNlID0gdGhpcy5fYnVpbGRHcm91cEJ5KGNvbHVtbnMpO1xuICAgICAgICAgICAgbGV0IGhhdmluZ0NsdXNlID0gaGF2aW5nICYmIHRoaXMuX2pvaW5Db25kaXRpb24oaGF2aW5nLCBwYXJhbXMsIG51bGwsIGhhc0pvaW5pbmcsIGFsaWFzTWFwKTtcbiAgICAgICAgICAgIGlmIChoYXZpbmdDbHVzZSkge1xuICAgICAgICAgICAgICAgIGdyb3VwQnlDbGF1c2UgKz0gJyBIQVZJTkcgJyArIGhhdmluZ0NsdXNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZ3JvdXBCeUNsYXVzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBBcHBsaWNhdGlvbkVycm9yKGBVbmtub3duIGdyb3VwIGJ5IHN5bnRheDogJHtKU09OLnN0cmluZ2lmeShncm91cEJ5KX1gKTtcbiAgICB9XG5cbiAgICBfYnVpbGRPcmRlckJ5KG9yZGVyQnksIGhhc0pvaW5pbmcsIGFsaWFzTWFwKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3JkZXJCeSA9PT0gJ3N0cmluZycpIHJldHVybiAnT1JERVIgQlkgJyArIHRoaXMuX2VzY2FwZUlkV2l0aEFsaWFzKG9yZGVyQnksIGhhc0pvaW5pbmcsIGFsaWFzTWFwKTtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvcmRlckJ5KSkgcmV0dXJuICdPUkRFUiBCWSAnICsgb3JkZXJCeS5tYXAoYnkgPT4gdGhpcy5fZXNjYXBlSWRXaXRoQWxpYXMoYnksIGhhc0pvaW5pbmcsIGFsaWFzTWFwKSkuam9pbignLCAnKTtcblxuICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KG9yZGVyQnkpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ09SREVSIEJZICcgKyBfLm1hcChvcmRlckJ5LCAoYXNjLCBjb2wpID0+IHRoaXMuX2VzY2FwZUlkV2l0aEFsaWFzKGNvbCwgaGFzSm9pbmluZywgYWxpYXNNYXApICsgKGFzYyA/ICcnIDogJyBERVNDJykpLmpvaW4oJywgJyk7IFxuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEFwcGxpY2F0aW9uRXJyb3IoYFVua25vd24gb3JkZXIgYnkgc3ludGF4OiAke0pTT04uc3RyaW5naWZ5KG9yZGVyQnkpfWApO1xuICAgIH1cblxuICAgIGFzeW5jIF9nZXRDb25uZWN0aW9uXyhvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAob3B0aW9ucyAmJiBvcHRpb25zLmNvbm5lY3Rpb24pID8gb3B0aW9ucy5jb25uZWN0aW9uIDogdGhpcy5jb25uZWN0XyhvcHRpb25zKTtcbiAgICB9XG5cbiAgICBhc3luYyBfcmVsZWFzZUNvbm5lY3Rpb25fKGNvbm4sIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLmNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRpc2Nvbm5lY3RfKGNvbm4pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5NeVNRTENvbm5lY3Rvci5kcml2ZXJMaWIgPSBteXNxbDtcblxubW9kdWxlLmV4cG9ydHMgPSBNeVNRTENvbm5lY3RvcjsiXX0=