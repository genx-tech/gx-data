"use strict";require("source-map-support/register");const{_,waitUntil_}=require("rk-utils");const{tryRequire}=require("../../utils/lib");const mongodb=tryRequire("mongodb");const{MongoClient,GridFSBucket}=mongodb;const Connector=require("../../Connector");const Generators=require("../../Generators");const UpdateOpsField=["$currentDate","$inc","$min","$max","$mul","$rename","$set","$setOnInsert","$unset"];const UpdateOpsArray=["$addToSet","$pop","$pull","$push","$pullAll"];const UpdateOps=UpdateOpsField.concat(UpdateOpsArray);class MongodbConnector extends Connector{constructor(connectionString,options){super("mongodb",connectionString,options);this.findAll_=this.find_;this.lockerField=this.options.lockerField||"__lock__"}async end_(){if(this.client&&this.client.isConnected()){await this.client.close();this.log("verbose",`mongodb: successfully disconnected from "${this.getConnectionStringWithoutCredential()}".`)}delete this.client}async connect_(options){if(!this.client||!this.client.isConnected()){let client=new MongoClient(this.connectionString,{useNewUrlParser:true});this.client=await client.connect();this.log("verbose",`mongodb: successfully connected to "${this.getConnectionStringWithoutCredential()}".`)}return this.client.db(this.database)}async disconnect_(conn){}async ping_(){return this.execute_(db=>{return db.listCollections(null,{nameOnly:true}).toArray()})}async execute_(dbExecutor){let db;try{db=await this.connect_();return await dbExecutor(db)}catch(err){throw err}finally{db&&(await this.disconnect_(db))}}async createGridFSBucket_(options){let db=await this.connect_();return new GridFSBucket(db,options)}async insertOne_(model,data,options){return this.onCollection_(model,coll=>coll.insertOne(data,{bypassDocumentValidation:true,...options}))}async insertMany_(model,data,options){return this.onCollection_(model,coll=>coll.insertMany(data,{bypassDocumentValidation:true,ordered:false,...options}))}async insertOneIfNotExist_(model,data,options){try{return await this.insertOne_(model,data,options)}catch(error){if(error.code===11000){return false}throw error}}async findOneAndReplace_(model,data,condition,options){return this.onCollection_(model,coll=>coll.findOneAndReplace(condition,data,options))}async findOneAndUpdate_(model,data,condition,options){return this.onCollection_(model,coll=>coll.findOneAndUpdate(condition,this._translateUpdate(data),options))}async findOneAndDelete_(model,condition,options){return this.onCollection_(model,coll=>coll.findOneAndDelete(condition,options))}async findOne_(model,condition,options){return this.onCollection_(model,coll=>coll.findOne(condition,options))}async updateOne_(model,data,condition,options){return this.onCollection_(model,coll=>coll.updateOne(condition,this._translateUpdate(data),options))}async updateOneAndReturn_(model,data,condition,options){let ret=await this.findOneAndUpdate_(model,data,condition,{...options,upsert:false,returnOriginal:false});return ret&&ret.value}async upsertOne_(model,data,condition,options){let trans=this._translateUpdate(data);let{_id,...others}=trans.$set;if(!_.isNil(_id)){trans.$set=others;trans.$setOnInsert={_id}}return this.onCollection_(model,coll=>coll.updateOne(condition,trans,{...options,upsert:true}))}async upsertMany_(model,data,uniqueKeys,options){let ops=data.map(record=>{let{_id,...updateData}=record;let updateOp={$set:updateData};if(_id){updateOp.$setOnInsert={_id}}return{updateOne:{filter:{..._.pick(record,uniqueKeys)},update:updateOp,upsert:true}}});return this.onCollection_(model,coll=>coll.bulkWrite(ops,{bypassDocumentValidation:true,ordered:false,...options}))}async updateManyAndReturn_(model,data,condition,options){let lockerId=Generators.shortid();return this.onCollection_(model,async coll=>{let ret=await coll.updateMany({...condition,[this.lockerField]:{$exists:false}},{$set:{...data,[this.lockerField]:lockerId}},{...options,upsert:false});try{return await coll.find({[this.lockerField]:lockerId}).toArray()}finally{if(ret.result.nModified>0){await coll.updateMany({[this.lockerField]:lockerId},{$unset:{[this.lockerField]:""}},{upsert:false})}}})}async insertManyIfNotExist_(model,data,uniqueKeys,options){let ops=data.map(record=>({updateOne:{filter:{..._.pick(record,uniqueKeys)},update:{$setOnInsert:record},upsert:true}}));return this.onCollection_(model,coll=>coll.bulkWrite(ops,{bypassDocumentValidation:true,ordered:false,...options}))}async updateMany_(model,data,condition,options){return this.onCollection_(model,coll=>coll.updateMany(condition,this._translateUpdate(data),options))}async replaceOne_(model,data,condition,options){return this.onCollection_(model,coll=>coll.replaceOne(condition,data,options))}async deleteOne_(model,condition,options){return this.onCollection_(model,coll=>coll.deleteOne(condition,options))}async deleteMany_(model,condition,options){return this.onCollection_(model,coll=>coll.deleteMany(condition,options))}async find_(model,condition,options){return this.onCollection_(model,async coll=>{let queryOptions={...options};let query={};if(condition){let{$projection,$orderBy,$offset,$limit,$query,...others}=condition;if($projection){queryOptions.projection=$projection}if($orderBy){queryOptions.sort=$orderBy}if($offset){queryOptions.skip=$offset}if($limit){queryOptions.limit=$limit}Object.assign(query,_.pickBy(others,(v,k)=>k[0]!=="$"));if($query){Object.assign(query,$query)}}let result=await coll.find(query,queryOptions).toArray();if(condition&&condition.$totalCount){let totalCount=await coll.find(query).count();return[result,totalCount]}return result})}async aggregate_(model,pipeline,options){return this.onCollection_(model,coll=>coll.aggregate(pipeline,options))}async onCollection_(model,executor){return this.execute_(db=>executor(db.collection(model)))}_translateUpdate(update){let ops=_.pick(update,UpdateOps);let others=_.omit(update,UpdateOps);if(ops.$set){ops.$set={...ops.$set,...others}}else if(!_.isEmpty(others)){ops.$set=others}return ops}}MongodbConnector.driverLib=mongodb;module.exports=MongodbConnector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kcml2ZXJzL21vbmdvZGIvQ29ubmVjdG9yLmpzIl0sIm5hbWVzIjpbIl8iLCJ3YWl0VW50aWxfIiwicmVxdWlyZSIsInRyeVJlcXVpcmUiLCJtb25nb2RiIiwiTW9uZ29DbGllbnQiLCJHcmlkRlNCdWNrZXQiLCJDb25uZWN0b3IiLCJHZW5lcmF0b3JzIiwiVXBkYXRlT3BzRmllbGQiLCJVcGRhdGVPcHNBcnJheSIsIlVwZGF0ZU9wcyIsImNvbmNhdCIsIk1vbmdvZGJDb25uZWN0b3IiLCJjb25zdHJ1Y3RvciIsImNvbm5lY3Rpb25TdHJpbmciLCJvcHRpb25zIiwiZmluZEFsbF8iLCJmaW5kXyIsImxvY2tlckZpZWxkIiwiZW5kXyIsImNsaWVudCIsImlzQ29ubmVjdGVkIiwiY2xvc2UiLCJsb2ciLCJnZXRDb25uZWN0aW9uU3RyaW5nV2l0aG91dENyZWRlbnRpYWwiLCJjb25uZWN0XyIsInVzZU5ld1VybFBhcnNlciIsImNvbm5lY3QiLCJkYiIsImRhdGFiYXNlIiwiZGlzY29ubmVjdF8iLCJjb25uIiwicGluZ18iLCJleGVjdXRlXyIsImxpc3RDb2xsZWN0aW9ucyIsIm5hbWVPbmx5IiwidG9BcnJheSIsImRiRXhlY3V0b3IiLCJlcnIiLCJjcmVhdGVHcmlkRlNCdWNrZXRfIiwiaW5zZXJ0T25lXyIsIm1vZGVsIiwiZGF0YSIsIm9uQ29sbGVjdGlvbl8iLCJjb2xsIiwiaW5zZXJ0T25lIiwiYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uIiwiaW5zZXJ0TWFueV8iLCJpbnNlcnRNYW55Iiwib3JkZXJlZCIsImluc2VydE9uZUlmTm90RXhpc3RfIiwiZXJyb3IiLCJjb2RlIiwiZmluZE9uZUFuZFJlcGxhY2VfIiwiY29uZGl0aW9uIiwiZmluZE9uZUFuZFJlcGxhY2UiLCJmaW5kT25lQW5kVXBkYXRlXyIsImZpbmRPbmVBbmRVcGRhdGUiLCJfdHJhbnNsYXRlVXBkYXRlIiwiZmluZE9uZUFuZERlbGV0ZV8iLCJmaW5kT25lQW5kRGVsZXRlIiwiZmluZE9uZV8iLCJmaW5kT25lIiwidXBkYXRlT25lXyIsInVwZGF0ZU9uZSIsInVwZGF0ZU9uZUFuZFJldHVybl8iLCJyZXQiLCJ1cHNlcnQiLCJyZXR1cm5PcmlnaW5hbCIsInZhbHVlIiwidXBzZXJ0T25lXyIsInRyYW5zIiwiX2lkIiwib3RoZXJzIiwiJHNldCIsImlzTmlsIiwiJHNldE9uSW5zZXJ0IiwidXBzZXJ0TWFueV8iLCJ1bmlxdWVLZXlzIiwib3BzIiwibWFwIiwicmVjb3JkIiwidXBkYXRlRGF0YSIsInVwZGF0ZU9wIiwiZmlsdGVyIiwicGljayIsInVwZGF0ZSIsImJ1bGtXcml0ZSIsInVwZGF0ZU1hbnlBbmRSZXR1cm5fIiwibG9ja2VySWQiLCJzaG9ydGlkIiwidXBkYXRlTWFueSIsIiRleGlzdHMiLCJmaW5kIiwicmVzdWx0Iiwibk1vZGlmaWVkIiwiJHVuc2V0IiwiaW5zZXJ0TWFueUlmTm90RXhpc3RfIiwidXBkYXRlTWFueV8iLCJyZXBsYWNlT25lXyIsInJlcGxhY2VPbmUiLCJkZWxldGVPbmVfIiwiZGVsZXRlT25lIiwiZGVsZXRlTWFueV8iLCJkZWxldGVNYW55IiwicXVlcnlPcHRpb25zIiwicXVlcnkiLCIkcHJvamVjdGlvbiIsIiRvcmRlckJ5IiwiJG9mZnNldCIsIiRsaW1pdCIsIiRxdWVyeSIsInByb2plY3Rpb24iLCJzb3J0Iiwic2tpcCIsImxpbWl0IiwiT2JqZWN0IiwiYXNzaWduIiwicGlja0J5IiwidiIsImsiLCIkdG90YWxDb3VudCIsInRvdGFsQ291bnQiLCJjb3VudCIsImFnZ3JlZ2F0ZV8iLCJwaXBlbGluZSIsImFnZ3JlZ2F0ZSIsImV4ZWN1dG9yIiwiY29sbGVjdGlvbiIsIm9taXQiLCJpc0VtcHR5IiwiZHJpdmVyTGliIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Im9EQUFBLEtBQU0sQ0FBRUEsQ0FBRixDQUFLQyxVQUFMLEVBQW9CQyxPQUFPLENBQUMsVUFBRCxDQUFqQyxDQUNBLEtBQU0sQ0FBRUMsVUFBRixFQUFpQkQs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Q0FBQ0wsSUFBSixDQUFXLENBQUUsR0FBR0ssR0FBRyxDQUFDTCxJQUFULENBQWUsR0FBR0QsTUFBbEIsQ0FDZCxDQUZELElBRU8sSUFBSSxDQUFDMUUsQ0FBQyxDQUFDbUksT0FBRixDQUFVekQsTUFBVixDQUFMLENBQXdCLENBQzNCTSxHQUFHLENBQUNMLElBQUosQ0FBV0QsTUFDZCxDQUVELE1BQU9NLENBQUFBLEdBQ1YsQ0E1Vm9DLENBK1Z6Q25FLGdCQUFnQixDQUFDdUgsU0FBakIsQ0FBNkJoSSxPQUE3QixDQUVBaUksTUFBTSxDQUFDQyxPQUFQLENBQWlCekgsZ0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBfLCB3YWl0VW50aWxfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyB0cnlSZXF1aXJlIH0gPSByZXF1aXJlKCcuLi8uLi91dGlscy9saWInKTtcbmNvbnN0IG1vbmdvZGIgPSB0cnlSZXF1aXJlKCdtb25nb2RiJyk7XG5jb25zdCB7IE1vbmdvQ2xpZW50LCBHcmlkRlNCdWNrZXQgfSA9IG1vbmdvZGI7XG5jb25zdCBDb25uZWN0b3IgPSByZXF1aXJlKCcuLi8uLi9Db25uZWN0b3InKTtcbmNvbnN0IEdlbmVyYXRvcnMgPSByZXF1aXJlKCcuLi8uLi9HZW5lcmF0b3JzJyk7XG5cbmNvbnN0IFVwZGF0ZU9wc0ZpZWxkID0gWyAnJGN1cnJlbnREYXRlJywgJyRpbmMnLCAnJG1pbicsICckbWF4JywgJyRtdWwnLCAnJHJlbmFtZScsICckc2V0JywgJyRzZXRPbkluc2VydCcsICckdW5zZXQnIF07XG5jb25zdCBVcGRhdGVPcHNBcnJheSA9IFsgJyRhZGRUb1NldCcsICckcG9wJywgJyRwdWxsJywgJyRwdXNoJywgJyRwdWxsQWxsJyBdO1xuY29uc3QgVXBkYXRlT3BzID0gVXBkYXRlT3BzRmllbGQuY29uY2F0KFVwZGF0ZU9wc0FycmF5KTtcblxuLyoqXG4gKiBNb25nb2RiIGRhdGEgc3RvcmFnZSBjb25uZWN0b3IuXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIENvbm5lY3RvclxuICovXG5jbGFzcyBNb25nb2RiQ29ubmVjdG9yIGV4dGVuZHMgQ29ubmVjdG9yIHtcbiAgICAvKiogICAgICAgICAgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbb3B0aW9ucy51c2VQcmVwYXJlZFN0YXRlbWVudF0gLSBcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uU3RyaW5nLCBvcHRpb25zKSB7ICAgICAgICBcbiAgICAgICAgc3VwZXIoJ21vbmdvZGInLCBjb25uZWN0aW9uU3RyaW5nLCBvcHRpb25zKTsgICAgXG4gICAgICAgIFxuICAgICAgICB0aGlzLmxvY2tlckZpZWxkID0gdGhpcy5vcHRpb25zLmxvY2tlckZpZWxkIHx8ICdfX2xvY2tfXyc7XG4gICAgfVxuXG4gICAgZmluZEFsbF8gPSB0aGlzLmZpbmRfO1xuXG4gICAgLyoqXG4gICAgICogQ2xvc2UgYWxsIGNvbm5lY3Rpb24gaW5pdGlhdGVkIGJ5IHRoaXMgY29ubmVjdG9yLlxuICAgICAqL1xuICAgIGFzeW5jIGVuZF8oKSB7XG4gICAgICAgIGlmICh0aGlzLmNsaWVudCAmJiB0aGlzLmNsaWVudC5pc0Nvbm5lY3RlZCgpKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNsaWVudC5jbG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5sb2coJ3ZlcmJvc2UnLCBgbW9uZ29kYjogc3VjY2Vzc2Z1bGx5IGRpc2Nvbm5lY3RlZCBmcm9tIFwiJHt0aGlzLmdldENvbm5lY3Rpb25TdHJpbmdXaXRob3V0Q3JlZGVudGlhbCgpfVwiLmApOyAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSB0aGlzLmNsaWVudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBkYXRhYmFzZSBjb25uZWN0aW9uIGJhc2VkIG9uIHRoZSBkZWZhdWx0IGNvbm5lY3Rpb24gc3RyaW5nIG9mIHRoZSBjb25uZWN0b3IgYW5kIGdpdmVuIG9wdGlvbnMuICAgICBcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gRXh0cmEgb3B0aW9ucyBmb3IgdGhlIGNvbm5lY3Rpb24sIG9wdGlvbmFsLlxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW29wdGlvbnMubXVsdGlwbGVTdGF0ZW1lbnRzPWZhbHNlXSAtIEFsbG93IHJ1bm5pbmcgbXVsdGlwbGUgc3RhdGVtZW50cyBhdCBhIHRpbWUuXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbb3B0aW9ucy5jcmVhdGVEYXRhYmFzZT1mYWxzZV0gLSBGbGFnIHRvIHVzZWQgd2hlbiBjcmVhdGluZyBhIGRhdGFiYXNlLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlLjxEYj59XG4gICAgICovXG4gICAgYXN5bmMgY29ubmVjdF8ob3B0aW9ucykge1xuICAgICAgICBpZiAoIXRoaXMuY2xpZW50IHx8ICF0aGlzLmNsaWVudC5pc0Nvbm5lY3RlZCgpKSB7XG4gICAgICAgICAgICBsZXQgY2xpZW50ID0gbmV3IE1vbmdvQ2xpZW50KHRoaXMuY29ubmVjdGlvblN0cmluZywge3VzZU5ld1VybFBhcnNlcjogdHJ1ZX0pO1xuICAgICAgICAgICAgdGhpcy5jbGllbnQgPSBhd2FpdCBjbGllbnQuY29ubmVjdCgpOyBcbiAgICAgICAgICAgIHRoaXMubG9nKCd2ZXJib3NlJywgYG1vbmdvZGI6IHN1Y2Nlc3NmdWxseSBjb25uZWN0ZWQgdG8gXCIke3RoaXMuZ2V0Q29ubmVjdGlvblN0cmluZ1dpdGhvdXRDcmVkZW50aWFsKCl9XCIuYCk7ICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICB9ICAgICAgIFxuXG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5kYih0aGlzLmRhdGFiYXNlKTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQ2xvc2UgYSBkYXRhYmFzZSBjb25uZWN0aW9uLlxuICAgICAqIEBwYXJhbSB7RGJ9IGNvbm4gLSBNeVNRTCBjb25uZWN0aW9uLlxuICAgICAqL1xuICAgIGFzeW5jIGRpc2Nvbm5lY3RfKGNvbm4pIHtcbiAgICB9XG5cbiAgICBhc3luYyBwaW5nXygpIHsgIFxuICAgICAgICByZXR1cm4gdGhpcy5leGVjdXRlXyhkYiA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZGIubGlzdENvbGxlY3Rpb25zKG51bGwsIHsgbmFtZU9ubHk6IHRydWUgfSkudG9BcnJheSgpO1xuICAgICAgICB9KTsgIFxuICAgIH1cblxuICAgIGFzeW5jIGV4ZWN1dGVfKGRiRXhlY3V0b3IpIHtcbiAgICAgICAgbGV0IGRiO1xuICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGIgPSBhd2FpdCB0aGlzLmNvbm5lY3RfKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBkYkV4ZWN1dG9yKGRiKTtcbiAgICAgICAgfSBjYXRjaChlcnIpIHsgICAgICAgICAgICBcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGRiICYmIGF3YWl0IHRoaXMuZGlzY29ubmVjdF8oZGIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAtIE9wdGlvbmFsIHNldHRpbmdzLlxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb3B0aW9ucy5idWNrZXROYW1lPSdmcyddIC0gVGhlICdmaWxlcycgYW5kICdjaHVua3MnIGNvbGxlY3Rpb25zIHdpbGwgYmUgcHJlZml4ZWQgd2l0aCB0aGUgYnVja2V0IG5hbWUgZm9sbG93ZWQgYnkgYSBkb3QuXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFtvcHRpb25zLmNodW5rU2l6ZUJ5dGVzXSAtIE51bWJlciBvZiBieXRlcyBzdG9yZWQgaW4gZWFjaCBjaHVuay4gRGVmYXVsdHMgdG8gMjU1S0JcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW29wdGlvbnMud3JpdGVDb25jZXJuXVxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbb3B0aW9ucy5yZWFkUHJlZmVyZW5jZV1cbiAgICAgKi9cbiAgICBhc3luYyBjcmVhdGVHcmlkRlNCdWNrZXRfKG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IGRiID0gYXdhaXQgdGhpcy5jb25uZWN0XygpO1xuXG4gICAgICAgIHJldHVybiBuZXcgR3JpZEZTQnVja2V0KGRiLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgZW50aXR5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbCBcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSBcbiAgICAgKiBAcGFyYW0geyp9IG9wdGlvbnMgXG4gICAgICovXG4gICAgYXN5bmMgaW5zZXJ0T25lXyhtb2RlbCwgZGF0YSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5vbkNvbGxlY3Rpb25fKG1vZGVsLCAoY29sbCkgPT4gY29sbC5pbnNlcnRPbmUoZGF0YSwgeyBieXBhc3NEb2N1bWVudFZhbGlkYXRpb246IHRydWUsIC4uLm9wdGlvbnMgfSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbiBhcnJheSBvZiBuZXcgZW50aXR5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbCBcbiAgICAgKiBAcGFyYW0ge2FycmF5fSBkYXRhIFxuICAgICAqIEBwYXJhbSB7Kn0gb3B0aW9ucyBcbiAgICAgKi9cbiAgICBhc3luYyBpbnNlcnRNYW55Xyhtb2RlbCwgZGF0YSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5vbkNvbGxlY3Rpb25fKG1vZGVsLCAoY29sbCkgPT4gY29sbC5pbnNlcnRNYW55KGRhdGEsIHsgYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uOiB0cnVlLCBvcmRlcmVkOiBmYWxzZSwgLi4ub3B0aW9ucyB9KSk7XG4gICAgfVxuXG4gICAgYXN5bmMgaW5zZXJ0T25lSWZOb3RFeGlzdF8obW9kZWwsIGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmluc2VydE9uZV8obW9kZWwsIGRhdGEsIG9wdGlvbnMpXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gMTEwMDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZSAoaW5zZXJ0IG9yIHVwZGF0ZSBmb3IgZXhzaXN0aW5nKSBhbiBlbnRpdHkgYW5kIHJldHVybiBvcmlnaW5hbCByZWNvcmQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGVsIFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIFxuICAgICAqIEBwYXJhbSB7Kn0gb3B0aW9ucyBcbiAgICAgKi9cbiAgICBhc3luYyBmaW5kT25lQW5kUmVwbGFjZV8obW9kZWwsIGRhdGEsIGNvbmRpdGlvbiwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5vbkNvbGxlY3Rpb25fKG1vZGVsLCAoY29sbCkgPT4gY29sbC5maW5kT25lQW5kUmVwbGFjZShjb25kaXRpb24sIGRhdGEsIG9wdGlvbnMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kIGEgZG9jdW1lbnQgYW5kIHVwZGF0ZSBpdCBpbiBvbmUgYXRvbWljIG9wZXJhdGlvbi4gUmVxdWlyZXMgYSB3cml0ZSBsb2NrIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZWwgXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgXG4gICAgICogQHBhcmFtIHsqfSBvcHRpb25zIFxuICAgICAqL1xuICAgIGFzeW5jIGZpbmRPbmVBbmRVcGRhdGVfKG1vZGVsLCBkYXRhLCBjb25kaXRpb24sIG9wdGlvbnMpIHsgICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5vbkNvbGxlY3Rpb25fKG1vZGVsLCAoY29sbCkgPT4gY29sbC5maW5kT25lQW5kVXBkYXRlKGNvbmRpdGlvbiwgdGhpcy5fdHJhbnNsYXRlVXBkYXRlKGRhdGEpLCBvcHRpb25zKSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZmluZE9uZUFuZERlbGV0ZV8obW9kZWwsIGNvbmRpdGlvbiwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5vbkNvbGxlY3Rpb25fKG1vZGVsLCAoY29sbCkgPT4gY29sbC5maW5kT25lQW5kRGVsZXRlKGNvbmRpdGlvbiwgb3B0aW9ucykpO1xuICAgIH1cblxuICAgIGFzeW5jIGZpbmRPbmVfKG1vZGVsLCBjb25kaXRpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub25Db2xsZWN0aW9uXyhtb2RlbCwgKGNvbGwpID0+IGNvbGwuZmluZE9uZShjb25kaXRpb24sIG9wdGlvbnMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgYW4gZXhpc3RpbmcgZW50aXR5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbCBcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSBcbiAgICAgKiBAcGFyYW0geyp9IGNvbmRpdGlvbiBcbiAgICAgKiBAcGFyYW0geyp9IG9wdGlvbnMgXG4gICAgICovXG4gICAgYXN5bmMgdXBkYXRlT25lXyhtb2RlbCwgZGF0YSwgY29uZGl0aW9uLCBvcHRpb25zKSB7IFxuICAgICAgICByZXR1cm4gdGhpcy5vbkNvbGxlY3Rpb25fKG1vZGVsLCAoY29sbCkgPT4gY29sbC51cGRhdGVPbmUoY29uZGl0aW9uLCB0aGlzLl90cmFuc2xhdGVVcGRhdGUoZGF0YSksIG9wdGlvbnMpKTtcbiAgICB9XG5cbiAgICBhc3luYyB1cGRhdGVPbmVBbmRSZXR1cm5fKG1vZGVsLCBkYXRhLCBjb25kaXRpb24sIG9wdGlvbnMpIHsgICAgIFxuICAgICAgICBsZXQgcmV0ID0gYXdhaXQgdGhpcy5maW5kT25lQW5kVXBkYXRlXyhtb2RlbCwgZGF0YSwgY29uZGl0aW9uLCB7IC4uLm9wdGlvbnMsIHVwc2VydDogZmFsc2UsIHJldHVybk9yaWdpbmFsOiBmYWxzZSB9KTtcbiAgICAgICAgcmV0dXJuIHJldCAmJiByZXQudmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIGFuIGV4aXN0aW5nIGVudGl0eS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZWwgXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgXG4gICAgICogQHBhcmFtIHsqfSBjb25kaXRpb24gXG4gICAgICogQHBhcmFtIHsqfSBvcHRpb25zIFxuICAgICAqL1xuICAgIGFzeW5jIHVwc2VydE9uZV8obW9kZWwsIGRhdGEsIGNvbmRpdGlvbiwgb3B0aW9ucykgeyBcbiAgICAgICAgbGV0IHRyYW5zID0gdGhpcy5fdHJhbnNsYXRlVXBkYXRlKGRhdGEpO1xuICAgICAgICBsZXQgeyBfaWQsIC4uLm90aGVycyB9ID0gdHJhbnMuJHNldDsgXG4gICAgICAgIGlmICghXy5pc05pbChfaWQpKSB7XG4gICAgICAgICAgICB0cmFucy4kc2V0ID0gb3RoZXJzO1xuICAgICAgICAgICAgdHJhbnMuJHNldE9uSW5zZXJ0ID0geyBfaWQgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLm9uQ29sbGVjdGlvbl8obW9kZWwsIChjb2xsKSA9PiBjb2xsLnVwZGF0ZU9uZShjb25kaXRpb24sIHRyYW5zLCB7IC4uLm9wdGlvbnMsIHVwc2VydDogdHJ1ZSB9KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIG1hbnkgZW50aXRpZXMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGVsIFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gQXJyYXkgb2YgcmVjb3JkIHdpdGggX2lkXG4gICAgICogQHBhcmFtIHsqfSBvcHRpb25zIFxuICAgICAqL1xuICAgIGFzeW5jIHVwc2VydE1hbnlfKG1vZGVsLCBkYXRhLCB1bmlxdWVLZXlzLCBvcHRpb25zKSB7IFxuICAgICAgICBsZXQgb3BzID0gZGF0YS5tYXAocmVjb3JkID0+IHtcbiAgICAgICAgICAgIGxldCB7IF9pZCwgLi4udXBkYXRlRGF0YSB9ID0gcmVjb3JkO1xuXG4gICAgICAgICAgICBsZXQgdXBkYXRlT3AgPSB7XG4gICAgICAgICAgICAgICAgJHNldDogdXBkYXRlRGF0YVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKF9pZCkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZU9wLiRzZXRPbkluc2VydCA9IHsgX2lkIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXBkYXRlT25lOiB7IGZpbHRlcjogeyAuLi5fLnBpY2socmVjb3JkLCB1bmlxdWVLZXlzKSB9LCB1cGRhdGU6IHVwZGF0ZU9wLCB1cHNlcnQ6IHRydWUgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMub25Db2xsZWN0aW9uXyhtb2RlbCwgKGNvbGwpID0+IGNvbGwuYnVsa1dyaXRlKG9wcywgeyBieXBhc3NEb2N1bWVudFZhbGlkYXRpb246IHRydWUsIG9yZGVyZWQ6IGZhbHNlLCAuLi5vcHRpb25zIH0pKTtcbiAgICB9XG5cbiAgICBhc3luYyB1cGRhdGVNYW55QW5kUmV0dXJuXyhtb2RlbCwgZGF0YSwgY29uZGl0aW9uLCBvcHRpb25zKSB7ICAgICAgICBcbiAgICAgICAgbGV0IGxvY2tlcklkID0gR2VuZXJhdG9ycy5zaG9ydGlkKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMub25Db2xsZWN0aW9uXyhtb2RlbCwgYXN5bmMgKGNvbGwpID0+IHtcbiAgICAgICAgICAgIC8vMS51cGRhdGUgYW5kIHNldCBsb2NrZXJcbiAgICAgICAgICAgIGxldCByZXQgPSBhd2FpdCBjb2xsLnVwZGF0ZU1hbnkoXG4gICAgICAgICAgICAgICAgeyAuLi5jb25kaXRpb24sIFt0aGlzLmxvY2tlckZpZWxkXTogeyAkZXhpc3RzOiBmYWxzZSB9IH0sIC8vIGZvciBhbGwgbm9uLWxvY2tlZFxuICAgICAgICAgICAgICAgIHsgJHNldDogeyAuLi5kYXRhLCBbdGhpcy5sb2NrZXJGaWVsZF06IGxvY2tlcklkIH0gfSwgLy8gbG9jayBpdCBcbiAgICAgICAgICAgICAgICB7IC4uLm9wdGlvbnMsIHVwc2VydDogZmFsc2UgfSApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vMi5yZXR1cm4gYWxsIGxvY2tlZCByZWNvcmRzXG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGNvbGwuZmluZCh7IFt0aGlzLmxvY2tlckZpZWxkXTogbG9ja2VySWQgfSkudG9BcnJheSgpOyAvLyByZXR1cm4gYWxsIGxvY2tlZFxuICAgICAgICAgICAgfSBmaW5hbGx5IHsgICAgXG4gICAgICAgICAgICAgICAgLy8zLnJlbW92ZSBsb2NrZXJzXG4gICAgICAgICAgICAgICAgaWYgKHJldC5yZXN1bHQubk1vZGlmaWVkID4gMCkgeyAvLyB1bmxvY2tcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgY29sbC51cGRhdGVNYW55KHsgW3RoaXMubG9ja2VyRmllbGRdOiBsb2NrZXJJZCB9LCB7ICR1bnNldDogeyBbdGhpcy5sb2NrZXJGaWVsZF06IFwiXCIgfSB9LCB7IHVwc2VydDogZmFsc2UgfSk7ICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7ICAgICAgICAgXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0IG1hbnkgZW50aXRpZXMgaWYgbm90IGV4aXN0LlxuICAgICAqIEBwYXJhbSB7Kn0gbW9kZWwgXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFxuICAgICAqIEBwYXJhbSB7Kn0gdW5pcXVlS2V5cyBcbiAgICAgKiBAcGFyYW0geyp9IG9wdGlvbnMgXG4gICAgICovXG4gICAgYXN5bmMgaW5zZXJ0TWFueUlmTm90RXhpc3RfKG1vZGVsLCBkYXRhLCB1bmlxdWVLZXlzLCBvcHRpb25zKSB7XG4gICAgICAgIGxldCBvcHMgPSBkYXRhLm1hcChyZWNvcmQgPT4gKHtcbiAgICAgICAgICAgIHVwZGF0ZU9uZTogeyBmaWx0ZXI6IHsgLi4uXy5waWNrKHJlY29yZCwgdW5pcXVlS2V5cykgfSwgdXBkYXRlOiB7ICRzZXRPbkluc2VydDogcmVjb3JkIH0sIHVwc2VydDogdHJ1ZSB9XG4gICAgICAgIH0pKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5vbkNvbGxlY3Rpb25fKG1vZGVsLCAoY29sbCkgPT4gY29sbC5idWxrV3JpdGUob3BzLCB7IGJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbjogdHJ1ZSwgb3JkZXJlZDogZmFsc2UsIC4uLm9wdGlvbnMgfSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBtdWx0aXBsZSBkb2N1bWVudHMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGVsIFxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBcbiAgICAgKiBAcGFyYW0geyp9IGNvbmRpdGlvbiBcbiAgICAgKiBAcGFyYW0geyp9IG9wdGlvbnMgXG4gICAgICovXG4gICAgYXN5bmMgdXBkYXRlTWFueV8obW9kZWwsIGRhdGEsIGNvbmRpdGlvbiwgb3B0aW9ucykgeyBcbiAgICAgICAgcmV0dXJuIHRoaXMub25Db2xsZWN0aW9uXyhtb2RlbCwgKGNvbGwpID0+IGNvbGwudXBkYXRlTWFueShjb25kaXRpb24sIHRoaXMuX3RyYW5zbGF0ZVVwZGF0ZShkYXRhKSwgb3B0aW9ucykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2UgYW4gZXhpc3RpbmcgZW50aXR5IG9yIGNyZWF0ZSBhIG5ldyBvbmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGVsIFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIFxuICAgICAqIEBwYXJhbSB7Kn0gb3B0aW9ucyBcbiAgICAgKi9cbiAgICBhc3luYyByZXBsYWNlT25lXyhtb2RlbCwgZGF0YSwgY29uZGl0aW9uLCBvcHRpb25zKSB7ICBcbiAgICAgICAgcmV0dXJuIHRoaXMub25Db2xsZWN0aW9uXyhtb2RlbCwgKGNvbGwpID0+IGNvbGwucmVwbGFjZU9uZShjb25kaXRpb24sIGRhdGEsIG9wdGlvbnMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYW4gZXhpc3RpbmcgZW50aXR5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbCBcbiAgICAgKiBAcGFyYW0geyp9IGNvbmRpdGlvbiBcbiAgICAgKiBAcGFyYW0geyp9IG9wdGlvbnMgXG4gICAgICovXG4gICAgYXN5bmMgZGVsZXRlT25lXyhtb2RlbCwgY29uZGl0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9uQ29sbGVjdGlvbl8obW9kZWwsIChjb2xsKSA9PiBjb2xsLmRlbGV0ZU9uZShjb25kaXRpb24sIG9wdGlvbnMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYW4gZXhpc3RpbmcgZW50aXR5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbCBcbiAgICAgKiBAcGFyYW0geyp9IGNvbmRpdGlvbiBcbiAgICAgKiBAcGFyYW0geyp9IG9wdGlvbnMgXG4gICAgICovXG4gICAgYXN5bmMgZGVsZXRlTWFueV8obW9kZWwsIGNvbmRpdGlvbiwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5vbkNvbGxlY3Rpb25fKG1vZGVsLCAoY29sbCkgPT4gY29sbC5kZWxldGVNYW55KGNvbmRpdGlvbiwgb3B0aW9ucykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm0gc2VsZWN0IG9wZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IG1vZGVsIFxuICAgICAqIEBwYXJhbSB7Kn0gY29uZGl0aW9uIFxuICAgICAqIEBwYXJhbSB7Kn0gb3B0aW9ucyBcbiAgICAgKi9cbiAgICBhc3luYyBmaW5kXyhtb2RlbCwgY29uZGl0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9uQ29sbGVjdGlvbl8obW9kZWwsIGFzeW5jIGNvbGwgPT4ge1xuICAgICAgICAgICAgbGV0IHF1ZXJ5T3B0aW9ucyA9IHsuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGxldCBxdWVyeSA9IHt9O1xuXG4gICAgICAgICAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgICAgICAgICAgbGV0IHsgJHByb2plY3Rpb24sICRvcmRlckJ5LCAkb2Zmc2V0LCAkbGltaXQsICRxdWVyeSwgLi4ub3RoZXJzIH0gPSBjb25kaXRpb247XG5cbiAgICAgICAgICAgICAgICBpZiAoJHByb2plY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlPcHRpb25zLnByb2plY3Rpb24gPSAkcHJvamVjdGlvbjsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCRvcmRlckJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5T3B0aW9ucy5zb3J0ID0gJG9yZGVyQnk7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICgkb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5T3B0aW9ucy5za2lwID0gJG9mZnNldDsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCRsaW1pdCkge1xuICAgICAgICAgICAgICAgICAgICBxdWVyeU9wdGlvbnMubGltaXQgPSAkbGltaXQ7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocXVlcnksIF8ucGlja0J5KG90aGVycywgKHYsaykgPT4ga1swXSAhPT0gJyQnKSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoJHF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocXVlcnksICRxdWVyeSk7XG4gICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IGNvbGwuZmluZChxdWVyeSwgcXVlcnlPcHRpb25zKS50b0FycmF5KCk7XG5cbiAgICAgICAgICAgIGlmIChjb25kaXRpb24gJiYgY29uZGl0aW9uLiR0b3RhbENvdW50KSB7XG4gICAgICAgICAgICAgICAgbGV0IHRvdGFsQ291bnQgPSBhd2FpdCBjb2xsLmZpbmQocXVlcnkpLmNvdW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsgcmVzdWx0LCB0b3RhbENvdW50IF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgIH0gICBcblxuICAgIGFzeW5jIGFnZ3JlZ2F0ZV8obW9kZWwsIHBpcGVsaW5lLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9uQ29sbGVjdGlvbl8obW9kZWwsIChjb2xsKSA9PiBjb2xsLmFnZ3JlZ2F0ZShwaXBlbGluZSwgb3B0aW9ucykpO1xuICAgIH1cblxuICAgIGFzeW5jIG9uQ29sbGVjdGlvbl8obW9kZWwsIGV4ZWN1dG9yKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4ZWN1dGVfKGRiID0+IGV4ZWN1dG9yKGRiLmNvbGxlY3Rpb24obW9kZWwpKSk7XG4gICAgfVxuXG4gICAgX3RyYW5zbGF0ZVVwZGF0ZSh1cGRhdGUpIHtcbiAgICAgICAgbGV0IG9wcyA9IF8ucGljayh1cGRhdGUsIFVwZGF0ZU9wcyk7XG4gICAgICAgIGxldCBvdGhlcnMgPSBfLm9taXQodXBkYXRlLCBVcGRhdGVPcHMpO1xuXG4gICAgICAgIGlmIChvcHMuJHNldCkge1xuICAgICAgICAgICAgb3BzLiRzZXQgPSB7IC4uLm9wcy4kc2V0LCAuLi5vdGhlcnMgfTtcbiAgICAgICAgfSBlbHNlIGlmICghXy5pc0VtcHR5KG90aGVycykpIHtcbiAgICAgICAgICAgIG9wcy4kc2V0ID0gb3RoZXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9wcztcbiAgICB9XG59XG5cbk1vbmdvZGJDb25uZWN0b3IuZHJpdmVyTGliID0gbW9uZ29kYjtcblxubW9kdWxlLmV4cG9ydHMgPSBNb25nb2RiQ29ubmVjdG9yOyJdfQ==