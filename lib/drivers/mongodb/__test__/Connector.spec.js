'use strict';

require("source-map-support/register");

const winston = require('winston');

const Connector = require('../Connector');

const Generators = require('../../../Generators');

const TEST_DB = 'oolong-unit-test';
describe('unit:connector:mongodb', function () {
  let logger = winston.createLogger({
    "level": "verbose",
    "transports": [new winston.transports.Console({
      "format": winston.format.combine(winston.format.colorize(), winston.format.simple())
    })]
  });
  let connector;
  before(async function () {
    connector = new Connector(`mongodb://root:root@localhost/${TEST_DB}?authSource=admin&useUnifiedTopology=1`, {
      logger
    });
  });
  after(async function () {
    await connector.end_();
  });
  describe('basic', function () {
    it('ping', async function () {
      let alive = await connector.ping_();
      alive.should.be.ok();
    });
  });
  describe('crud', function () {
    it('upsert one', async function () {
      await connector.onCollection_('test_crud', collection => collection.createIndexes([{
        key: {
          key: 1,
          tag: 1
        },
        unique: true
      }]));
      let retDel = await connector.deleteMany_('test_crud', {
        tag: 'upsertOne'
      });
      retDel.result.ok.should.be.exactly(1);
      let empty = await connector.findAll_('test_crud', {
        tag: 'upsertOne'
      });
      empty.length.should.be.exactly(0);
      let id1 = Generators.shortid();
      let ret = await connector.upsertOne_('test_crud', {
        _id: id1,
        key: 10,
        tag: 'upsertOne'
      }, {
        key: 10,
        tag: 'upsertOne'
      });
      ret.result.ok.should.be.exactly(1);
      let oneRecord = await connector.findAll_('test_crud', {
        tag: 'upsertOne'
      });
      oneRecord.length.should.be.exactly(1);

      oneRecord[0]._id.should.be.equal(id1);

      await connector.upsertOne_('test_crud', {
        _id: Generators.shortid(),
        key: 20,
        tag: 'upsertOne'
      }, {
        key: 10,
        tag: 'upsertOne'
      });
      oneRecord = await connector.findAll_('test_crud', {
        tag: 'upsertOne'
      });
      oneRecord.length.should.be.exactly(1);

      oneRecord[0]._id.should.be.equal(id1);

      oneRecord[0].key.should.be.exactly(20);
      let id2 = Generators.shortid();
      await connector.upsertOne_('test_crud', {
        _id: id2,
        key: 10,
        tag: 'upsertOne'
      }, {
        key: 20,
        tag: 'upsertOne'
      });
      let multiRecords = await connector.findAll_('test_crud', {
        tag: 'upsertOne'
      });
      multiRecords.length.should.be.exactly(1);

      multiRecords[0]._id.should.be.equal(id1);
    });
    it('upsert many', async function () {
      let retDel = await connector.deleteMany_('test_crud', {
        tag: 'upsertMany'
      });
      retDel.result.ok.should.be.exactly(1);
      let empty = await connector.findAll_('test_crud', {
        tag: 'upsertMany'
      });
      empty.length.should.be.exactly(0);
      let id1 = Generators.shortid();
      let ret = await connector.insertOne_('test_crud', {
        _id: id1,
        key: 10,
        tag: 'upsertMany'
      });
      ret.result.ok.should.be.exactly(1);
      let id2 = Generators.shortid(),
          id3 = Generators.shortid();
      await connector.upsertMany_('test_crud', [{
        _id: id1,
        key: 20,
        tag: 'upsertMany'
      }, {
        _id: id2,
        key: 30,
        tag: 'upsertMany'
      }, {
        _id: id3,
        key: 40,
        tag: 'upsertMany'
      }], ['_id']);
      let item = await connector.findOne_('test_crud', {
        _id: id1
      });
      item.key.should.be.exactly(20);
      let allUpdated = await connector.findAll_('test_crud', {
        tag: 'upsertMany'
      });
      allUpdated.length.should.be.exactly(3);
      await connector.insertManyIfNotExist_('test_crud', [{
        _id: Generators.shortid(),
        key: 20,
        tag: 'upsertMany'
      }, {
        _id: Generators.shortid(),
        key: 30,
        tag: 'upsertMany'
      }, {
        _id: Generators.shortid(),
        key: 50,
        tag: 'upsertMany'
      }], ['key']);
      let partialUpdated = await connector.findAll_('test_crud', {
        tag: 'upsertMany'
      });
      partialUpdated.length.should.be.exactly(4);

      partialUpdated[0]._id.should.be.equal(id1);

      partialUpdated[1]._id.should.be.equal(id2);

      partialUpdated[2]._id.should.be.equal(id3);
    });
    it('find', async function () {
      let retDel = await connector.deleteMany_('test_crud', {
        tag: 'insertMany'
      });
      retDel.result.ok.should.be.exactly(1);
      await connector.insertMany_('test_crud', [{
        key: 10,
        tag: 'insertMany'
      }, {
        key: 20,
        tag: 'insertMany'
      }, {
        key: 30,
        tag: 'insertMany'
      }, {
        key: 40,
        tag: 'insertMany'
      }]);
      let [result, totalCount] = await connector.findAll_('test_crud', {
        tag: 'insertMany',
        $totalCount: true,
        $limit: 2
      });
      result.length.should.be.exactly(2);
      totalCount.should.be.exactly(4);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kcml2ZXJzL21vbmdvZGIvX190ZXN0X18vQ29ubmVjdG9yLnNwZWMuanMiXSwibmFtZXMiOlsid2luc3RvbiIsInJlcXVpcmUiLCJDb25uZWN0b3IiLCJHZW5lcmF0b3JzIiwiVEVTVF9EQiIsImRlc2NyaWJlIiwibG9nZ2VyIiwiY3JlYXRlTG9nZ2VyIiwidHJhbnNwb3J0cyIsIkNvbnNvbGUiLCJmb3JtYXQiLCJjb21iaW5lIiwiY29sb3JpemUiLCJzaW1wbGUiLCJjb25uZWN0b3IiLCJiZWZvcmUiLCJhZnRlciIsImVuZF8iLCJpdCIsImFsaXZlIiwicGluZ18iLCJzaG91bGQiLCJiZSIsIm9rIiwib25Db2xsZWN0aW9uXyIsImNvbGxlY3Rpb24iLCJjcmVhdGVJbmRleGVzIiwia2V5IiwidGFnIiwidW5pcXVlIiwicmV0RGVsIiwiZGVsZXRlTWFueV8iLCJyZXN1bHQiLCJleGFjdGx5IiwiZW1wdHkiLCJmaW5kQWxsXyIsImxlbmd0aCIsImlkMSIsInNob3J0aWQiLCJyZXQiLCJ1cHNlcnRPbmVfIiwiX2lkIiwib25lUmVjb3JkIiwiZXF1YWwiLCJpZDIiLCJtdWx0aVJlY29yZHMiLCJpbnNlcnRPbmVfIiwiaWQzIiwidXBzZXJ0TWFueV8iLCJpdGVtIiwiZmluZE9uZV8iLCJhbGxVcGRhdGVkIiwiaW5zZXJ0TWFueUlmTm90RXhpc3RfIiwicGFydGlhbFVwZGF0ZWQiLCJpbnNlcnRNYW55XyIsInRvdGFsQ291bnQiLCIkdG90YWxDb3VudCIsIiRsaW1pdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXZCOztBQUNBLE1BQU1DLFNBQVMsR0FBR0QsT0FBTyxDQUFDLGNBQUQsQ0FBekI7O0FBQ0EsTUFBTUUsVUFBVSxHQUFHRixPQUFPLENBQUMscUJBQUQsQ0FBMUI7O0FBRUEsTUFBTUcsT0FBTyxHQUFHLGtCQUFoQjtBQUVBQyxRQUFRLENBQUMsd0JBQUQs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QUFnQztBQUFFUCxRQUFBQSxHQUFHLEVBQUUsWUFBUDtBQUFxQjRCLFFBQUFBLFdBQVcsRUFBRSxJQUFsQztBQUF3Q0MsUUFBQUEsTUFBTSxFQUFFO0FBQWhELE9BQWhDLENBQW5DO0FBQ0F6QixNQUFBQSxNQUFNLENBQUNJLE1BQVAsQ0FBY2YsTUFBZCxDQUFxQkMsRUFBckIsQ0FBd0JXLE9BQXhCLENBQWdDLENBQWhDO0FBQ0FzQixNQUFBQSxVQUFVLENBQUNsQyxNQUFYLENBQWtCQyxFQUFsQixDQUFxQlcsT0FBckIsQ0FBNkIsQ0FBN0I7QUFDSCxLQXpCQyxDQUFGO0FBMEJILEdBbEtPLENBQVI7QUFtS0gsQ0E5TE8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3Qgd2luc3RvbiA9IHJlcXVpcmUoJ3dpbnN0b24nKTtcbmNvbnN0IENvbm5lY3RvciA9IHJlcXVpcmUoJy4uL0Nvbm5lY3RvcicpO1xuY29uc3QgR2VuZXJhdG9ycyA9IHJlcXVpcmUoJy4uLy4uLy4uL0dlbmVyYXRvcnMnKTtcblxuY29uc3QgVEVTVF9EQiA9ICdvb2xvbmctdW5pdC10ZXN0JztcblxuZGVzY3JpYmUoJ3VuaXQ6Y29ubmVjdG9yOm1vbmdvZGInLCBmdW5jdGlvbiAoKSB7ICAgIFxuICAgIGxldCBsb2dnZXIgPSB3aW5zdG9uLmNyZWF0ZUxvZ2dlcih7XG4gICAgICAgIFwibGV2ZWxcIjogXCJ2ZXJib3NlXCIsXG4gICAgICAgIFwidHJhbnNwb3J0c1wiOiBbXG4gICAgICAgICAgICBuZXcgd2luc3Rvbi50cmFuc3BvcnRzLkNvbnNvbGUoeyAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcImZvcm1hdFwiOiB3aW5zdG9uLmZvcm1hdC5jb21iaW5lKHdpbnN0b24uZm9ybWF0LmNvbG9yaXplKCksIHdpbnN0b24uZm9ybWF0LnNpbXBsZSgpKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgXVxuICAgIH0pO1xuXG4gICAgbGV0IGNvbm5lY3RvcjsgICAgXG5cbiAgICBiZWZvcmUoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25uZWN0b3IgPSBuZXcgQ29ubmVjdG9yKGBtb25nb2RiOi8vcm9vdDpyb290QGxvY2FsaG9zdC8ke1RFU1RfREJ9P2F1dGhTb3VyY2U9YWRtaW4mdXNlVW5pZmllZFRvcG9sb2d5PTFgLCB7IGxvZ2dlciB9KTsgICAgICAgIFxuICAgIH0pO1xuXG4gICAgYWZ0ZXIoYXN5bmMgZnVuY3Rpb24gKCkgeyAgICAgICAgXG4gICAgICAgIGF3YWl0IGNvbm5lY3Rvci5lbmRfKCk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnYmFzaWMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGl0KCdwaW5nJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbGV0IGFsaXZlID0gYXdhaXQgY29ubmVjdG9yLnBpbmdfKCk7XG4gICAgICAgICAgICBhbGl2ZS5zaG91bGQuYmUub2soKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnY3J1ZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoJ3Vwc2VydCBvbmUnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBhd2FpdCBjb25uZWN0b3Iub25Db2xsZWN0aW9uXygndGVzdF9jcnVkJywgY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmNyZWF0ZUluZGV4ZXMoWyB7IGtleTogeyBrZXk6IDEsIHRhZzogMSB9LCB1bmlxdWU6IHRydWUgfV0pKTtcblxuICAgICAgICAgICAgbGV0IHJldERlbCA9IGF3YWl0IGNvbm5lY3Rvci5kZWxldGVNYW55XygndGVzdF9jcnVkJywgeyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0YWc6ICd1cHNlcnRPbmUnXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0RGVsLnJlc3VsdC5vay5zaG91bGQuYmUuZXhhY3RseSgxKTtcblxuICAgICAgICAgICAgbGV0IGVtcHR5ID0gYXdhaXQgY29ubmVjdG9yLmZpbmRBbGxfKCd0ZXN0X2NydWQnLCB7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRhZzogJ3Vwc2VydE9uZSdcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBlbXB0eS5sZW5ndGguc2hvdWxkLmJlLmV4YWN0bHkoMCk7XG5cbiAgICAgICAgICAgIGxldCBpZDEgPSBHZW5lcmF0b3JzLnNob3J0aWQoKTtcblxuICAgICAgICAgICAgbGV0IHJldCA9IGF3YWl0IGNvbm5lY3Rvci51cHNlcnRPbmVfKCd0ZXN0X2NydWQnLCB7XG4gICAgICAgICAgICAgICAgX2lkOiBpZDEsXG4gICAgICAgICAgICAgICAga2V5OiAxMCxcbiAgICAgICAgICAgICAgICB0YWc6ICd1cHNlcnRPbmUnXG4gICAgICAgICAgICB9LCB7IGtleTogMTAsIHRhZzogJ3Vwc2VydE9uZScgfSk7XG5cbiAgICAgICAgICAgIHJldC5yZXN1bHQub2suc2hvdWxkLmJlLmV4YWN0bHkoMSk7XG5cbiAgICAgICAgICAgIGxldCBvbmVSZWNvcmQgPSBhd2FpdCBjb25uZWN0b3IuZmluZEFsbF8oJ3Rlc3RfY3J1ZCcsIHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGFnOiAndXBzZXJ0T25lJ1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIG9uZVJlY29yZC5sZW5ndGguc2hvdWxkLmJlLmV4YWN0bHkoMSk7XG4gICAgICAgICAgICBvbmVSZWNvcmRbMF0uX2lkLnNob3VsZC5iZS5lcXVhbChpZDEpO1xuXG4gICAgICAgICAgICBhd2FpdCBjb25uZWN0b3IudXBzZXJ0T25lXygndGVzdF9jcnVkJywge1xuICAgICAgICAgICAgICAgIF9pZDogR2VuZXJhdG9ycy5zaG9ydGlkKCksXG4gICAgICAgICAgICAgICAga2V5OiAyMCxcbiAgICAgICAgICAgICAgICB0YWc6ICd1cHNlcnRPbmUnXG4gICAgICAgICAgICB9LCB7IGtleTogMTAsIHRhZzogJ3Vwc2VydE9uZScgfSk7XG5cbiAgICAgICAgICAgIG9uZVJlY29yZCA9IGF3YWl0IGNvbm5lY3Rvci5maW5kQWxsXygndGVzdF9jcnVkJywgeyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0YWc6ICd1cHNlcnRPbmUnXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgb25lUmVjb3JkLmxlbmd0aC5zaG91bGQuYmUuZXhhY3RseSgxKTtcbiAgICAgICAgICAgIG9uZVJlY29yZFswXS5faWQuc2hvdWxkLmJlLmVxdWFsKGlkMSk7XG4gICAgICAgICAgICBvbmVSZWNvcmRbMF0ua2V5LnNob3VsZC5iZS5leGFjdGx5KDIwKTsgICAgICAgICAgICBcblxuICAgICAgICAgICAgbGV0IGlkMiA9IEdlbmVyYXRvcnMuc2hvcnRpZCgpO1xuXG4gICAgICAgICAgICBhd2FpdCBjb25uZWN0b3IudXBzZXJ0T25lXygndGVzdF9jcnVkJywge1xuICAgICAgICAgICAgICAgIF9pZDogaWQyLFxuICAgICAgICAgICAgICAgIGtleTogMTAsXG4gICAgICAgICAgICAgICAgdGFnOiAndXBzZXJ0T25lJ1xuICAgICAgICAgICAgfSwgeyBrZXk6IDIwLCB0YWc6ICd1cHNlcnRPbmUnIH0pO1xuXG4gICAgICAgICAgICBsZXQgbXVsdGlSZWNvcmRzID0gYXdhaXQgY29ubmVjdG9yLmZpbmRBbGxfKCd0ZXN0X2NydWQnLCB7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRhZzogJ3Vwc2VydE9uZSdcbiAgICAgICAgICAgIH0pOyAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIG11bHRpUmVjb3Jkcy5sZW5ndGguc2hvdWxkLmJlLmV4YWN0bHkoMSk7XG4gICAgICAgICAgICBtdWx0aVJlY29yZHNbMF0uX2lkLnNob3VsZC5iZS5lcXVhbChpZDEpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgndXBzZXJ0IG1hbnknLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsZXQgcmV0RGVsID0gYXdhaXQgY29ubmVjdG9yLmRlbGV0ZU1hbnlfKCd0ZXN0X2NydWQnLCB7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRhZzogJ3Vwc2VydE1hbnknXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0RGVsLnJlc3VsdC5vay5zaG91bGQuYmUuZXhhY3RseSgxKTtcblxuICAgICAgICAgICAgbGV0IGVtcHR5ID0gYXdhaXQgY29ubmVjdG9yLmZpbmRBbGxfKCd0ZXN0X2NydWQnLCB7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRhZzogJ3Vwc2VydE1hbnknXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZW1wdHkubGVuZ3RoLnNob3VsZC5iZS5leGFjdGx5KDApO1xuXG4gICAgICAgICAgICBsZXQgaWQxID0gR2VuZXJhdG9ycy5zaG9ydGlkKCk7XG5cbiAgICAgICAgICAgIGxldCByZXQgPSBhd2FpdCBjb25uZWN0b3IuaW5zZXJ0T25lXygndGVzdF9jcnVkJywge1xuICAgICAgICAgICAgICAgIF9pZDogaWQxLFxuICAgICAgICAgICAgICAgIGtleTogMTAsXG4gICAgICAgICAgICAgICAgdGFnOiAndXBzZXJ0TWFueSdcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXQucmVzdWx0Lm9rLnNob3VsZC5iZS5leGFjdGx5KDEpO1xuXG4gICAgICAgICAgICBsZXQgaWQyID0gR2VuZXJhdG9ycy5zaG9ydGlkKCksIGlkMyA9IEdlbmVyYXRvcnMuc2hvcnRpZCgpO1xuXG4gICAgICAgICAgICBhd2FpdCBjb25uZWN0b3IudXBzZXJ0TWFueV8oJ3Rlc3RfY3J1ZCcsIFt7XG4gICAgICAgICAgICAgICAgX2lkOiBpZDEsXG4gICAgICAgICAgICAgICAga2V5OiAyMCxcbiAgICAgICAgICAgICAgICB0YWc6ICd1cHNlcnRNYW55J1xuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIF9pZDogaWQyLFxuICAgICAgICAgICAgICAgIGtleTogMzAsXG4gICAgICAgICAgICAgICAgdGFnOiAndXBzZXJ0TWFueSdcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBfaWQ6IGlkMyxcbiAgICAgICAgICAgICAgICBrZXk6IDQwLFxuICAgICAgICAgICAgICAgIHRhZzogJ3Vwc2VydE1hbnknXG4gICAgICAgICAgICB9XSwgWyAnX2lkJyBdKTtcblxuICAgICAgICAgICAgbGV0IGl0ZW0gPSBhd2FpdCBjb25uZWN0b3IuZmluZE9uZV8oJ3Rlc3RfY3J1ZCcsIHsgX2lkOiBpZDEgfSk7XG4gICAgICAgICAgICBpdGVtLmtleS5zaG91bGQuYmUuZXhhY3RseSgyMCk7XG5cbiAgICAgICAgICAgIGxldCBhbGxVcGRhdGVkID0gYXdhaXQgY29ubmVjdG9yLmZpbmRBbGxfKCd0ZXN0X2NydWQnLCB7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRhZzogJ3Vwc2VydE1hbnknXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgYWxsVXBkYXRlZC5sZW5ndGguc2hvdWxkLmJlLmV4YWN0bHkoMyk7XG5cbiAgICAgICAgICAgIGF3YWl0IGNvbm5lY3Rvci5pbnNlcnRNYW55SWZOb3RFeGlzdF8oJ3Rlc3RfY3J1ZCcsIFt7XG4gICAgICAgICAgICAgICAgX2lkOiBHZW5lcmF0b3JzLnNob3J0aWQoKSxcbiAgICAgICAgICAgICAgICBrZXk6IDIwLFxuICAgICAgICAgICAgICAgIHRhZzogJ3Vwc2VydE1hbnknXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgX2lkOiBHZW5lcmF0b3JzLnNob3J0aWQoKSxcbiAgICAgICAgICAgICAgICBrZXk6IDMwLFxuICAgICAgICAgICAgICAgIHRhZzogJ3Vwc2VydE1hbnknXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgX2lkOiBHZW5lcmF0b3JzLnNob3J0aWQoKSxcbiAgICAgICAgICAgICAgICBrZXk6IDUwLFxuICAgICAgICAgICAgICAgIHRhZzogJ3Vwc2VydE1hbnknXG4gICAgICAgICAgICB9XSwgWyAna2V5JyBdKTtcblxuICAgICAgICAgICAgbGV0IHBhcnRpYWxVcGRhdGVkID0gYXdhaXQgY29ubmVjdG9yLmZpbmRBbGxfKCd0ZXN0X2NydWQnLCB7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRhZzogJ3Vwc2VydE1hbnknXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcGFydGlhbFVwZGF0ZWQubGVuZ3RoLnNob3VsZC5iZS5leGFjdGx5KDQpO1xuXG4gICAgICAgICAgICBwYXJ0aWFsVXBkYXRlZFswXS5faWQuc2hvdWxkLmJlLmVxdWFsKGlkMSk7XG4gICAgICAgICAgICBwYXJ0aWFsVXBkYXRlZFsxXS5faWQuc2hvdWxkLmJlLmVxdWFsKGlkMik7XG4gICAgICAgICAgICBwYXJ0aWFsVXBkYXRlZFsyXS5faWQuc2hvdWxkLmJlLmVxdWFsKGlkMyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdmaW5kJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBsZXQgcmV0RGVsID0gYXdhaXQgY29ubmVjdG9yLmRlbGV0ZU1hbnlfKCd0ZXN0X2NydWQnLCB7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRhZzogJ2luc2VydE1hbnknXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0RGVsLnJlc3VsdC5vay5zaG91bGQuYmUuZXhhY3RseSgxKTtcblxuICAgICAgICAgICAgYXdhaXQgY29ubmVjdG9yLmluc2VydE1hbnlfKCd0ZXN0X2NydWQnLCBbe1xuICAgICAgICAgICAgICAgIGtleTogMTAsXG4gICAgICAgICAgICAgICAgdGFnOiAnaW5zZXJ0TWFueSdcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBrZXk6IDIwLFxuICAgICAgICAgICAgICAgIHRhZzogJ2luc2VydE1hbnknXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAga2V5OiAzMCxcbiAgICAgICAgICAgICAgICB0YWc6ICdpbnNlcnRNYW55J1xuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGtleTogNDAsXG4gICAgICAgICAgICAgICAgdGFnOiAnaW5zZXJ0TWFueSdcbiAgICAgICAgICAgIH1dKTtcblxuICAgICAgICAgICAgbGV0IFsgcmVzdWx0LCB0b3RhbENvdW50IF0gPSBhd2FpdCBjb25uZWN0b3IuZmluZEFsbF8oJ3Rlc3RfY3J1ZCcsIHsgdGFnOiAnaW5zZXJ0TWFueScsICR0b3RhbENvdW50OiB0cnVlLCAkbGltaXQ6IDIgfSk7XG4gICAgICAgICAgICByZXN1bHQubGVuZ3RoLnNob3VsZC5iZS5leGFjdGx5KDIpO1xuICAgICAgICAgICAgdG90YWxDb3VudC5zaG91bGQuYmUuZXhhY3RseSg0KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTsiXX0=