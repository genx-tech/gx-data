{"version":3,"file":"Connector.js","names":["_","require","tryRequire","mongodb","MongoClient","GridFSBucket","ObjectID","Connector","Generators","InvalidArgument","DatabaseError","UpdateOpsField","UpdateOpsArray","UpdateOps","concat","MongodbConnector","constructor","connectionString","options","updatedCount","context","result","modifiedCount","deletedCount","toObjectID","str","lockerField","findAll_","find_","ensureInsertOne","opReturn","ok","n","insertedId","ensureUpdateOne","enforceUpdated","nModified","end_","client","close","log","getConnectionStringWithoutCredential","connect_","useNewUrlParser","connect","db","database","disconnect_","conn","ping_","execute_","listCollections","nameOnly","toArray","dbExecutor","createGridFSBucket_","insertOne_","model","data","logStatement","JSON","stringify","onCollection_","coll","insertOne","insertMany_","ordered","count","length","insertMany","insertOneIfNotExist_","error","code","updateOne_","condition","_translateUpdate","updateOne","updateOneAndReturn_","ret","findOneAndUpdate_","upsert","returnOriginal","value","upsertOne_","dataOnInsert","trans","_id","others","$set","isNil","$setOnInsert","isEmpty","upsertOneAndReturn_","findOneAndUpdate","upsertMany_","uniqueKeys","ops","map","record","updateData","updateOp","filter","pick","update","bulkWrite","updateManyAndReturn_","lockerId","shortid","updateMany","$exists","find","projection","$unset","insertManyIfNotExist_","console","updateMany_","replaceOne_","replaceOne","deleteOne_","deleteOne","deleteMany_","deleteMany","findOneAndReplace_","findOneAndReplace","findOneAndDelete_","findOneAndDelete","findOne_","queryOptions","query","$projection","$query","findOne","requireTotalCount","$totalCount","$orderBy","$offset","$limit","sort","skip","limit","totalCount","aggregate_","pipeline","aggregate","distinct_","field","distinct","count_","countDocuments","executor","collection","omit","driverLib","module","exports"],"sources":["../../../src/drivers/mongodb/Connector.js"],"sourcesContent":["const { _ } = require('@genx/july');\nconst { tryRequire } = require('@genx/sys');\nconst mongodb = tryRequire('mongodb');\nconst { MongoClient, GridFSBucket, ObjectID } = mongodb;\nconst Connector = require('../../Connector');\nconst Generators = require('../../Generators');\nconst { InvalidArgument, DatabaseError } = require('../../utils/Errors');\n\nconst UpdateOpsField = [\n    '$currentDate',\n    '$inc',\n    '$min',\n    '$max',\n    '$mul',\n    '$rename',\n    '$set',\n    '$setOnInsert',\n    '$unset',\n];\nconst UpdateOpsArray = ['$addToSet', '$pop', '$pull', '$push', '$pullAll'];\nconst UpdateOps = UpdateOpsField.concat(UpdateOpsArray);\n\n/**\n * Mongodb data storage connector.\n * @class\n * @extends Connector\n */\nclass MongodbConnector extends Connector {\n    /**\n     * Get updated record count\n     * @param {*} context \n     * @returns {integer}\n     */\n    updatedCount = (context) => context.result.modifiedCount;\n    /**\n     * Get deleted record count\n     * @param {*} context \n     * @returns {integer}\n     */\n    deletedCount = (context) => context.result.deletedCount;\n\n    /**\n     * Get ObjectID instance from string\n     * @param {*} str \n     * @returns {ObjectID}\n     */\n    toObjectID = (str) => ObjectID(str);\n\n    /**\n     * @param {string} name\n     * @param {object} options\n     * @property {boolean} [options.usePreparedStatement] -\n     */\n    constructor(connectionString, options) {\n        super('mongodb', connectionString, options);\n\n        this.lockerField = this.options.lockerField || '__lock__';\n        this.findAll_ = this.find_;\n    }\n\n    /**\n     * Throw db error if no record inserted\n     * @param {insertOneWriteOpResultObject} opReturn\n     */\n    ensureInsertOne(opReturn) {\n        if (opReturn.result.ok !== 1 || opReturn.result.n !== 1) {\n            throw new DatabaseError('Mongodb \"insertOne\" operation failed');\n        }\n\n        return opReturn.insertedId;\n    }\n\n    /**\n     * Throw db error if no record updated\n     * @param {updateWriteOpResultObject} opReturn\n     */\n    ensureUpdateOne(opReturn, enforceUpdated) {\n        if (\n            opReturn.result.ok !== 1 ||\n            (enforceUpdated && opReturn.result.nModified !== 1)\n        ) {\n            throw new DatabaseError('Mongodb \"updateOne\" operation failed');\n        }\n    }\n\n    /**\n     * Close all connection initiated by this connector.\n     */\n    async end_() {\n        if (this.client) {\n            await this.client.close();\n            this.log(\n                'verbose',\n                `mongodb: successfully disconnected from \"${this.getConnectionStringWithoutCredential()}\".`\n            );\n        }\n\n        delete this.client;\n    }\n\n    /**\n     * Create a database connection based on the default connection string of the connector and given options.\n     * @param {Object} [options] - Extra options for the connection, optional.\n     * @property {bool} [options.multipleStatements=false] - Allow running multiple statements at a time.\n     * @property {bool} [options.createDatabase=false] - Flag to used when creating a database.\n     * @returns {Promise.<Db>}\n     */\n    async connect_(options) {\n        if (!this.client) {\n            const client = new MongoClient(this.connectionString, {\n                useNewUrlParser: true,\n            });\n            this.client = await client.connect();\n            this.log(\n                'verbose',\n                `mongodb: successfully connected to \"${this.getConnectionStringWithoutCredential()}\".`\n            );\n        }\n\n        return this.client.db(this.database);\n    }\n\n    /**\n     * Close a database connection.\n     * @param {Db} conn - MySQL connection.\n     */\n    async disconnect_(conn) {}\n\n    /**\n     * Check mongodb server health status\n     * @returns {*}\n     */\n    async ping_() {\n        return this.execute_((db) => {\n            return db.listCollections(null, { nameOnly: true }).toArray();\n        });\n    }\n\n    /**\n     * Execute with an executor\n     * @param {Function} dbExecutor \n     * @returns {*}\n     */\n    async execute_(dbExecutor) {\n        let db;\n\n        try {\n            db = await this.connect_();\n\n            return await dbExecutor(db);\n        } finally {\n            db && (await this.disconnect_(db));\n        }\n    }\n\n    /**\n     * @param {object} [options] - Optional settings.\n     * @property {string} [options.bucketName='fs'] - The 'files' and 'chunks' collections will be prefixed with the bucket name followed by a dot.\n     * @property {number} [options.chunkSizeBytes] - Number of bytes stored in each chunk. Defaults to 255KB\n     * @property {object} [options.writeConcern]\n     * @property {object} [options.readPreference]\n     */\n    async createGridFSBucket_(options) {\n        const db = await this.connect_();\n\n        return new GridFSBucket(db, options);\n    }\n\n    /**\n     * Create a new entity.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} options\n     */\n    async insertOne_(model, data, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'insertOne: ' + JSON.stringify({ model, data, options })\n            );\n        }\n\n        return this.onCollection_(model, (coll) =>\n            coll.insertOne(data, options)\n        );\n    }\n\n    /**\n     * Create an array of new entity.\n     * @param {string} model\n     * @param {array} data\n     * @param {*} options\n     */\n    async insertMany_(model, data, options) {\n        options = { ordered: false, ...options };\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'insertMany: ' +\n                    JSON.stringify({ model, count: data.length, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.insertMany(data, options)\n        );\n    }\n\n    /**\n     * Create a new entity if not exist.\n     * @param {string} model\n     * @param {*} data\n     * @param {*} options\n     */\n    async insertOneIfNotExist_(model, data, options) {\n        try {\n            return await this.insertOne_(model, data, options);\n        } catch (error) {\n            if (error.code === 11000) {\n                return false;\n            }\n\n            throw error;\n        }\n    }\n\n    /**\n     * Update an existing entity.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} condition\n     * @param {*} options\n     */\n    async updateOne_(model, data, condition, options) {\n        data = this._translateUpdate(data);\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'updateOne: ' +\n                    JSON.stringify({ model, data, condition, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.updateOne(condition, data, options)\n        );\n    }\n\n    /**\n     * Update an existing entity and return the updated record.\n     * @param {string} model\n     * @param {*} data\n     * @param {*} condition\n     * @param {*} options\n     */\n    async updateOneAndReturn_(model, data, condition, options) {\n        const ret = await this.findOneAndUpdate_(model, data, condition, {\n            ...options,\n            upsert: false,\n            returnOriginal: false,\n        });\n        return ret && ret.value;\n    }\n\n    /**\n     * Update an existing entity.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} condition\n     * @param {*} options\n     * @param {object} dataOnInsert - Shared data on insert\n     */\n    async upsertOne_(model, data, condition, options, dataOnInsert) {\n        const trans = this._translateUpdate(data);\n        const { _id, ...others } = trans.$set || {};\n        if (!_.isNil(_id)) {\n            trans.$set = others;\n            trans.$setOnInsert = { _id };\n        }\n\n        if (!_.isEmpty(dataOnInsert)) {\n            trans.$setOnInsert = { ...trans.$setOnInsert, ...dataOnInsert };\n        }\n\n        options = { ...options, upsert: true };\n\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'upsertOne: ' +\n                    JSON.stringify({ model, data: trans, condition, options })\n            );\n        }\n\n        return this.onCollection_(model, (coll) =>\n            coll.updateOne(condition, trans, options)\n        );\n    }\n\n    /**\n     * Upsert an entity and return updated.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} condition\n     * @param {*} options\n     * @param {object} dataOnInsert - Shared data on insert\n     */\n    async upsertOneAndReturn_(model, data, condition, options, dataOnInsert) {\n        const trans = this._translateUpdate(data);\n        const { _id, ...others } = trans.$set || {};\n        if (!_.isNil(_id)) {\n            trans.$set = others;\n            trans.$setOnInsert = { _id };\n        }\n\n        if (!_.isEmpty(dataOnInsert)) {\n            trans.$setOnInsert = { ...trans.$setOnInsert, ...dataOnInsert };\n        }\n\n        options = { ...options, upsert: true, returnOriginal: false };\n\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'upsertOne: ' +\n                    JSON.stringify({ model, data: trans, condition, options })\n            );\n        }\n\n        const ret = await this.onCollection_(model, (coll) =>\n            coll.findOneAndUpdate(condition, trans, options)\n        );\n        return ret && ret.value;\n    }\n\n    /**\n     * Update many entities.\n     * @param {string} model\n     * @param {object} data - Array of record with _id\n     * @param {array} uniqueKeys - Unique keys in the data record used as filter\n     * @param {*} options\n     * @param {object} dataOnInsert - Shared data on insert\n     */\n    async upsertMany_(model, data, uniqueKeys, options, dataOnInsert) {\n        const ops = data.map((record) => {\n            const { _id, ...updateData } = record;\n\n            const updateOp = this._translateUpdate(updateData);\n\n            if (_id) {\n                updateOp.$setOnInsert = { _id, ...dataOnInsert };\n            } else if (!_.isEmpty(dataOnInsert)) {\n                updateOp.$setOnInsert = dataOnInsert;\n            }\n\n            return {\n                updateOne: {\n                    filter: { ..._.pick(record, uniqueKeys) },\n                    update: updateOp,\n                    upsert: true,\n                },\n            };\n        });\n\n        options = { ordered: false, ...options };\n\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'bulkWrite: ' +\n                    JSON.stringify({ model, count: ops.length, options })\n            );\n        }\n\n        return this.onCollection_(model, (coll) =>\n            coll.bulkWrite(ops, options)\n        );\n    }\n\n    /**\n     * Update many entities and return updated.\n     * @param {*} model\n     * @param {*} data\n     * @param {*} condition\n     * @param {*} options\n     */\n    async updateManyAndReturn_(model, data, condition, options) {\n        const lockerId = Generators.shortid();\n\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'updateMany+find+updateMany: ' +\n                    JSON.stringify({\n                        model,\n                        count: data.length,\n                        condition,\n                        options,\n                    })\n            );\n        }\n\n        return this.onCollection_(model, async (coll) => {\n            // 1.update and set locker\n            const ret = await coll.updateMany(\n                { ...condition, [this.lockerField]: { $exists: false } }, // for all non-locked\n                { $set: { ...data, [this.lockerField]: lockerId } }, // lock it\n                { ...options, upsert: false }\n            );\n\n            try {\n                // 2.return all locked records\n                return await coll\n                    .find(\n                        { [this.lockerField]: lockerId },\n                        { projection: { [this.lockerField]: 0 } }\n                    )\n                    .toArray(); // return all locked\n            } finally {\n                // 3.remove lockers\n                if (ret.result.nModified > 0) {\n                    // unlock\n                    await coll.updateMany(\n                        { [this.lockerField]: lockerId },\n                        { $unset: { [this.lockerField]: '' } },\n                        { upsert: false }\n                    );\n                }\n            }\n        });\n    }\n\n    /**\n     * Insert many entities if not exist.\n     * @param {*} model\n     * @param {*} data\n     * @param {*} uniqueKeys\n     * @param {*} options\n     */\n    async insertManyIfNotExist_(model, data, uniqueKeys, options) {\n        console.log('buggy: tofix');\n        const ops = data.map((record) => ({\n            updateOne: {\n                filter: { ..._.pick(record, uniqueKeys) },\n                update: { $setOnInsert: record },\n                upsert: true,\n            },\n        }));\n\n        return this.onCollection_(model, (coll) =>\n            coll.bulkWrite(ops, { ordered: false, ...options })\n        );\n    }\n\n    /**\n     * Update multiple documents.\n     * @param {string} model\n     * @param {*} data\n     * @param {*} condition\n     * @param {*} options\n     */\n    async updateMany_(model, data, condition, options) {\n        data = this._translateUpdate(data);\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'updateMany: ' +\n                    JSON.stringify({\n                        model,\n                        count: data.length,\n                        condition,\n                        options,\n                    })\n            );\n        }\n\n        return this.onCollection_(model, (coll) =>\n            coll.updateMany(condition, data, options)\n        );\n    }\n\n    /**\n     * Replace an existing entity or create a new one.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} options\n     */\n    async replaceOne_(model, data, condition, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'replaceOne: ' +\n                    JSON.stringify({ model, data, condition, options })\n            );\n        }\n\n        return this.onCollection_(model, (coll) =>\n            coll.replaceOne(condition, data, options)\n        );\n    }\n\n    /**\n     * Remove an existing entity.\n     * @param {string} model\n     * @param {*} condition\n     * @param {*} options\n     */\n    async deleteOne_(model, condition, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'deleteOne: ' + JSON.stringify({ model, condition, options })\n            );\n        }\n\n        return this.onCollection_(model, (coll) =>\n            coll.deleteOne(condition, options)\n        );\n    }\n\n    /**\n     * Remove an existing entity.\n     * @param {string} model\n     * @param {*} condition\n     * @param {*} options\n     */\n    async deleteMany_(model, condition, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'deleteMany: ' + JSON.stringify({ model, condition, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.deleteMany(condition, options)\n        );\n    }\n\n    /**\n     * Replace (insert or update for exsisting) an entity and return original record.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} options\n     */\n    async findOneAndReplace_(model, data, condition, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'findOneAndReplace: ' + JSON.stringify({ model, data, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.findOneAndReplace(condition, data, options)\n        );\n    }\n\n    /**\n     * Find a document and update it in one atomic operation. Requires a write lock for the duration of the operation.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} options\n     */\n    async findOneAndUpdate_(model, data, condition, options) {\n        data = this._translateUpdate(data);\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'findOneAndUpdate: ' +\n                    JSON.stringify({ model, data, condition, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.findOneAndUpdate(condition, data, options)\n        );\n    }\n\n    async findOneAndDelete_(model, condition, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'findOneAndDelete: ' +\n                    JSON.stringify({ model, condition, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.findOneAndDelete(condition, options)\n        );\n    }\n\n    async findOne_(model, condition, options) {\n        const queryOptions = { ...options };\n        let query;\n\n        if (!_.isEmpty(condition)) {\n            const { $projection, $query, ...others } = condition;\n\n            if ($projection) {\n                queryOptions.projection = $projection;\n            }\n\n            query = { ...others, ...$query };\n        } else {\n            throw new InvalidArgument(\n                'findOne requires non-empty query condition.'\n            );\n        }\n\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'findOne: ' +\n                    JSON.stringify({\n                        model,\n                        condition: query,\n                        options: queryOptions,\n                    })\n            );\n        }\n\n        return this.onCollection_(model, (coll) =>\n            coll.findOne(query, queryOptions)\n        );\n    }\n\n    /**\n     * Perform select operation.\n     * @param {*} model\n     * @param {*} condition\n     * @param {*} options\n     */\n    async find_(model, condition, options) {\n        const queryOptions = { ...options };\n        let query, requireTotalCount;\n\n        if (!_.isEmpty(condition)) {\n            const {\n                $projection,\n                $totalCount,\n                $orderBy,\n                $offset,\n                $limit,\n                $query,\n                ...others\n            } = condition;\n\n            if ($projection) {\n                queryOptions.projection = $projection;\n            }\n\n            if ($orderBy) {\n                queryOptions.sort = $orderBy;\n            }\n\n            if ($offset) {\n                queryOptions.skip = $offset;\n            }\n\n            if ($limit) {\n                queryOptions.limit = $limit;\n            }\n\n            query = { ...others, ...$query };\n            requireTotalCount = $totalCount;\n        } else {\n            query = {};\n            requireTotalCount = false;\n        }\n\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'find: ' +\n                    JSON.stringify({\n                        model,\n                        condition: query,\n                        options: queryOptions,\n                    })\n            );\n        }\n\n        return this.onCollection_(model, async (coll) => {\n            const result = await coll.find(query, queryOptions).toArray();\n\n            if (requireTotalCount) {\n                const totalCount = await coll.find(query).count();\n                return [result, totalCount];\n            }\n\n            return result;\n        });\n    }\n\n    /**\n     * Run aggregate pipeline\n     * @param {string} model \n     * @param {array} pipeline \n     * @param {object} options \n     * @returns {*}\n     */\n    async aggregate_(model, pipeline, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'aggregate: ' + JSON.stringify({ model, pipeline, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.aggregate(pipeline, options).toArray()\n        );\n    }\n\n    /**\n     * Get distinct records\n     * @param {*} model \n     * @param {*} field \n     * @param {*} query \n     * @param {*} options \n     * @returns {*}\n     */\n    async distinct_(model, field, query, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'distinct: ' + JSON.stringify({ model, field, query, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.distinct(field, query, options)\n        );\n    }\n\n    /**\n     * Get number of records\n     * @param {string} model \n     * @param {object} query \n     * @param {object} options \n     * @returns {integer}\n     */\n    async count_(model, query, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'count: ' + JSON.stringify({ model, query, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.countDocuments(query, options)\n        );\n    }\n\n    /**\n     * Wrap a batch of query into an executor for a collection\n     * @param {string} model \n     * @param {object} executor \n     * @returns {*}\n     */\n    async onCollection_(model, executor) {\n        return this.execute_((db) => executor(db.collection(model)));\n    }\n\n    _translateUpdate(update) {\n        const ops = _.pick(update, UpdateOps);\n        const others = _.omit(update, UpdateOps);\n\n        if (ops.$set) {\n            ops.$set = { ...ops.$set, ...others };\n        } else if (!_.isEmpty(others)) {\n            ops.$set = others;\n        }\n\n        return ops;\n    }\n}\n\nMongodbConnector.driverLib = mongodb;\n\nmodule.exports = MongodbConnector;\n"],"mappings":"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"}