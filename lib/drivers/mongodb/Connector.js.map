{"version":3,"file":"Connector.js","names":["_","require","tryRequire","mongodb","MongoClient","GridFSBucket","ObjectID","Connector","Generators","InvalidArgument","DatabaseError","UpdateOpsField","UpdateOpsArray","UpdateOps","concat","MongodbConnector","constructor","connectionString","options","updatedCount","context","result","modifiedCount","deletedCount","toObjectID","str","lockerField","findAll_","find_","ensureInsertOne","opReturn","ok","n","insertedId","ensureUpdateOne","enforceUpdated","nModified","end_","client","close","log","getConnectionStringWithoutCredential","connect_","useNewUrlParser","connect","db","database","disconnect_","conn","ping_","execute_","listCollections","nameOnly","toArray","dbExecutor","createGridFSBucket_","insertOne_","model","data","logStatement","JSON","stringify","onCollection_","coll","insertOne","insertMany_","ordered","count","length","insertMany","insertOneIfNotExist_","error","code","updateOne_","condition","_translateUpdate","updateOne","updateOneAndReturn_","ret","findOneAndUpdate_","upsert","returnOriginal","value","upsertOne_","dataOnInsert","trans","_id","others","$set","isNil","$setOnInsert","isEmpty","upsertOneAndReturn_","findOneAndUpdate","upsertMany_","uniqueKeys","ops","map","record","updateData","updateOp","filter","pick","update","bulkWrite","updateManyAndReturn_","lockerId","shortid","updateMany","$exists","find","projection","$unset","insertManyIfNotExist_","console","updateMany_","replaceOne_","replaceOne","deleteOne_","deleteOne","deleteMany_","deleteMany","findOneAndReplace_","findOneAndReplace","findOneAndDelete_","findOneAndDelete","findOne_","queryOptions","query","$projection","$query","findOne","requireTotalCount","$totalCount","$orderBy","$offset","$limit","sort","skip","limit","totalCount","aggregate_","pipeline","aggregate","distinct_","field","distinct","count_","countDocuments","executor","collection","omit","driverLib","module","exports"],"sources":["../../../src/drivers/mongodb/Connector.js"],"sourcesContent":["const { _ } = require('@genx/july');\nconst { tryRequire } = require('@genx/sys');\nconst mongodb = tryRequire('mongodb');\nconst { MongoClient, GridFSBucket, ObjectID } = mongodb;\nconst Connector = require('../../Connector');\nconst Generators = require('../../Generators');\nconst { InvalidArgument, DatabaseError } = require('../../utils/Errors');\n\nconst UpdateOpsField = [\n    '$currentDate',\n    '$inc',\n    '$min',\n    '$max',\n    '$mul',\n    '$rename',\n    '$set',\n    '$setOnInsert',\n    '$unset',\n];\nconst UpdateOpsArray = ['$addToSet', '$pop', '$pull', '$push', '$pullAll'];\nconst UpdateOps = UpdateOpsField.concat(UpdateOpsArray);\n\n/**\n * Mongodb data storage connector.\n * @class\n * @extends Connector\n */\nclass MongodbConnector extends Connector {\n    /**\n     * Get updated record count\n     * @param {*} context \n     * @returns {integer}\n     */\n    updatedCount = (context) => context.result.modifiedCount;\n    /**\n     * Get deleted record count\n     * @param {*} context \n     * @returns {integer}\n     */\n    deletedCount = (context) => context.result.deletedCount;\n\n    /**\n     * Get ObjectID instance from string\n     * @param {*} str \n     * @returns {ObjectID}\n     */\n    toObjectID = (str) => ObjectID(str);\n\n    /**\n     * @param {string} name\n     * @param {object} options\n     * @property {boolean} [options.usePreparedStatement] -\n     */\n    constructor(connectionString, options) {\n        super('mongodb', connectionString, options);\n\n        this.lockerField = this.options.lockerField || '__lock__';\n        this.findAll_ = this.find_;\n    }\n\n    /**\n     * Throw db error if no record inserted\n     * @param {insertOneWriteOpResultObject} opReturn\n     */\n    ensureInsertOne(opReturn) {\n        if (opReturn.result.ok !== 1 || opReturn.result.n !== 1) {\n            throw new DatabaseError('Mongodb \"insertOne\" operation failed');\n        }\n\n        return opReturn.insertedId;\n    }\n\n    /**\n     * Throw db error if no record updated\n     * @param {updateWriteOpResultObject} opReturn\n     */\n    ensureUpdateOne(opReturn, enforceUpdated) {\n        if (\n            opReturn.result.ok !== 1 ||\n            (enforceUpdated && opReturn.result.nModified !== 1)\n        ) {\n            throw new DatabaseError('Mongodb \"updateOne\" operation failed');\n        }\n    }\n\n    /**\n     * Close all connection initiated by this connector.\n     */\n    async end_() {\n        if (this.client) {\n            await this.client.close();\n            this.log(\n                'verbose',\n                `mongodb: successfully disconnected from \"${this.getConnectionStringWithoutCredential()}\".`\n            );\n        }\n\n        delete this.client;\n    }\n\n    /**\n     * Create a database connection based on the default connection string of the connector and given options.\n     * @param {Object} [options] - Extra options for the connection, optional.\n     * @property {bool} [options.multipleStatements=false] - Allow running multiple statements at a time.\n     * @property {bool} [options.createDatabase=false] - Flag to used when creating a database.\n     * @returns {Promise.<Db>}\n     */\n    async connect_(options) {\n        if (!this.client) {\n            const client = new MongoClient(this.connectionString, {\n                useNewUrlParser: true,\n            });\n            this.client = await client.connect();\n            this.log(\n                'verbose',\n                `mongodb: successfully connected to \"${this.getConnectionStringWithoutCredential()}\".`\n            );\n        }\n\n        return this.client.db(this.database);\n    }\n\n    /**\n     * Close a database connection.\n     * @param {Db} conn - MySQL connection.\n     */\n    async disconnect_(conn) {}\n\n    /**\n     * Check mongodb server health status\n     * @returns {*}\n     */\n    async ping_() {\n        return this.execute_((db) => {\n            return db.listCollections(null, { nameOnly: true }).toArray();\n        });\n    }\n\n    /**\n     * Execute with an executor\n     * @param {Function} dbExecutor \n     * @returns {*}\n     */\n    async execute_(dbExecutor) {\n        let db;\n\n        try {\n            db = await this.connect_();\n\n            return await dbExecutor(db);\n        } finally {\n            db && (await this.disconnect_(db));\n        }\n    }\n\n    /**\n     * @param {object} [options] - Optional settings.\n     * @property {string} [options.bucketName='fs'] - The 'files' and 'chunks' collections will be prefixed with the bucket name followed by a dot.\n     * @property {number} [options.chunkSizeBytes] - Number of bytes stored in each chunk. Defaults to 255KB\n     * @property {object} [options.writeConcern]\n     * @property {object} [options.readPreference]\n     */\n    async createGridFSBucket_(options) {\n        const db = await this.connect_();\n\n        return new GridFSBucket(db, options);\n    }\n\n    /**\n     * Create a new entity.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} options\n     */\n    async insertOne_(model, data, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'insertOne: ' + JSON.stringify({ model, data, options })\n            );\n        }\n\n        return this.onCollection_(model, (coll) =>\n            coll.insertOne(data, options)\n        );\n    }\n\n    /**\n     * Create an array of new entity.\n     * @param {string} model\n     * @param {array} data\n     * @param {*} options\n     */\n    async insertMany_(model, data, options) {\n        options = { ordered: false, ...options };\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'insertMany: ' +\n                    JSON.stringify({ model, count: data.length, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.insertMany(data, options)\n        );\n    }\n\n    /**\n     * Create a new entity if not exist.\n     * @param {string} model\n     * @param {*} data\n     * @param {*} options\n     */\n    async insertOneIfNotExist_(model, data, options) {\n        try {\n            return await this.insertOne_(model, data, options);\n        } catch (error) {\n            if (error.code === 11000) {\n                return false;\n            }\n\n            throw error;\n        }\n    }\n\n    /**\n     * Update an existing entity.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} condition\n     * @param {*} options\n     */\n    async updateOne_(model, data, condition, options) {\n        data = this._translateUpdate(data);\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'updateOne: ' +\n                    JSON.stringify({ model, data, condition, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.updateOne(condition, data, options)\n        );\n    }\n\n    /**\n     * Update an existing entity and return the updated record.\n     * @param {string} model\n     * @param {*} data\n     * @param {*} condition\n     * @param {*} options\n     */\n    async updateOneAndReturn_(model, data, condition, options) {\n        const ret = await this.findOneAndUpdate_(model, data, condition, {\n            ...options,\n            upsert: false,\n            returnOriginal: false,\n        });\n        return ret && ret.value;\n    }\n\n    /**\n     * Update an existing entity.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} condition\n     * @param {*} options\n     * @param {object} dataOnInsert - Shared data on insert\n     */\n    async upsertOne_(model, data, condition, options, dataOnInsert) {\n        const trans = this._translateUpdate(data);\n        const { _id, ...others } = trans.$set || {};\n        if (!_.isNil(_id)) {\n            trans.$set = others;\n            trans.$setOnInsert = { _id };\n        }\n\n        if (!_.isEmpty(dataOnInsert)) {\n            trans.$setOnInsert = { ...trans.$setOnInsert, ...dataOnInsert };\n        }\n\n        options = { ...options, upsert: true };\n\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'upsertOne: ' +\n                    JSON.stringify({ model, data: trans, condition, options })\n            );\n        }\n\n        return this.onCollection_(model, (coll) =>\n            coll.updateOne(condition, trans, options)\n        );\n    }\n\n    /**\n     * Upsert an entity and return updated.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} condition\n     * @param {*} options\n     * @param {object} dataOnInsert - Shared data on insert\n     */\n    async upsertOneAndReturn_(model, data, condition, options, dataOnInsert) {\n        const trans = this._translateUpdate(data);\n        const { _id, ...others } = trans.$set || {};\n        if (!_.isNil(_id)) {\n            trans.$set = others;\n            trans.$setOnInsert = { _id };\n        }\n\n        if (!_.isEmpty(dataOnInsert)) {\n            trans.$setOnInsert = { ...trans.$setOnInsert, ...dataOnInsert };\n        }\n\n        options = { ...options, upsert: true, returnOriginal: false };\n\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'upsertOne: ' +\n                    JSON.stringify({ model, data: trans, condition, options })\n            );\n        }\n\n        const ret = await this.onCollection_(model, (coll) =>\n            coll.findOneAndUpdate(condition, trans, options)\n        );\n        return ret && ret.value;\n    }\n\n    /**\n     * Update many entities.\n     * @param {string} model\n     * @param {object} data - Array of record with _id\n     * @param {array} uniqueKeys - Unique keys in the data record used as filter\n     * @param {*} options\n     * @param {object} dataOnInsert - Shared data on insert\n     */\n    async upsertMany_(model, data, uniqueKeys, options, dataOnInsert) {\n        const ops = data.map((record) => {\n            const { _id, ...updateData } = record;\n\n            const updateOp = this._translateUpdate(updateData);\n\n            if (_id) {\n                updateOp.$setOnInsert = { _id, ...dataOnInsert };\n            } else if (!_.isEmpty(dataOnInsert)) {\n                updateOp.$setOnInsert = dataOnInsert;\n            }\n\n            return {\n                updateOne: {\n                    filter: { ..._.pick(record, uniqueKeys) },\n                    update: updateOp,\n                    upsert: true,\n                },\n            };\n        });\n\n        options = { ordered: false, ...options };\n\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'bulkWrite: ' +\n                    JSON.stringify({ model, count: ops.length, options })\n            );\n        }\n\n        return this.onCollection_(model, (coll) =>\n            coll.bulkWrite(ops, options)\n        );\n    }\n\n    /**\n     * Update many entities and return updated.\n     * @param {*} model\n     * @param {*} data\n     * @param {*} condition\n     * @param {*} options\n     */\n    async updateManyAndReturn_(model, data, condition, options) {\n        const lockerId = Generators.shortid();\n\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'updateMany+find+updateMany: ' +\n                    JSON.stringify({\n                        model,\n                        count: data.length,\n                        condition,\n                        options,\n                    })\n            );\n        }\n\n        return this.onCollection_(model, async (coll) => {\n            // 1.update and set locker\n            const ret = await coll.updateMany(\n                { ...condition, [this.lockerField]: { $exists: false } }, // for all non-locked\n                { $set: { ...data, [this.lockerField]: lockerId } }, // lock it\n                { ...options, upsert: false }\n            );\n\n            try {\n                // 2.return all locked records\n                return await coll\n                    .find(\n                        { [this.lockerField]: lockerId },\n                        { projection: { [this.lockerField]: 0 } }\n                    )\n                    .toArray(); // return all locked\n            } finally {\n                // 3.remove lockers\n                if (ret.result.nModified > 0) {\n                    // unlock\n                    await coll.updateMany(\n                        { [this.lockerField]: lockerId },\n                        { $unset: { [this.lockerField]: '' } },\n                        { upsert: false }\n                    );\n                }\n            }\n        });\n    }\n\n    /**\n     * Insert many entities if not exist.\n     * @param {*} model\n     * @param {*} data\n     * @param {*} uniqueKeys\n     * @param {*} options\n     */\n    async insertManyIfNotExist_(model, data, uniqueKeys, options) {\n        console.log('buggy: tofix');\n        const ops = data.map((record) => ({\n            updateOne: {\n                filter: { ..._.pick(record, uniqueKeys) },\n                update: { $setOnInsert: record },\n                upsert: true,\n            },\n        }));\n\n        return this.onCollection_(model, (coll) =>\n            coll.bulkWrite(ops, { ordered: false, ...options })\n        );\n    }\n\n    /**\n     * Update multiple documents.\n     * @param {string} model\n     * @param {*} data\n     * @param {*} condition\n     * @param {*} options\n     */\n    async updateMany_(model, data, condition, options) {\n        data = this._translateUpdate(data);\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'updateMany: ' +\n                    JSON.stringify({\n                        model,\n                        count: data.length,\n                        condition,\n                        options,\n                    })\n            );\n        }\n\n        return this.onCollection_(model, (coll) =>\n            coll.updateMany(condition, data, options)\n        );\n    }\n\n    /**\n     * Replace an existing entity or create a new one.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} options\n     */\n    async replaceOne_(model, data, condition, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'replaceOne: ' +\n                    JSON.stringify({ model, data, condition, options })\n            );\n        }\n\n        return this.onCollection_(model, (coll) =>\n            coll.replaceOne(condition, data, options)\n        );\n    }\n\n    /**\n     * Remove an existing entity.\n     * @param {string} model\n     * @param {*} condition\n     * @param {*} options\n     */\n    async deleteOne_(model, condition, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'deleteOne: ' + JSON.stringify({ model, condition, options })\n            );\n        }\n\n        return this.onCollection_(model, (coll) =>\n            coll.deleteOne(condition, options)\n        );\n    }\n\n    /**\n     * Remove an existing entity.\n     * @param {string} model\n     * @param {*} condition\n     * @param {*} options\n     */\n    async deleteMany_(model, condition, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'deleteMany: ' + JSON.stringify({ model, condition, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.deleteMany(condition, options)\n        );\n    }\n\n    /**\n     * Replace (insert or update for exsisting) an entity and return original record.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} options\n     */\n    async findOneAndReplace_(model, data, condition, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'findOneAndReplace: ' + JSON.stringify({ model, data, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.findOneAndReplace(condition, data, options)\n        );\n    }\n\n    /**\n     * Find a document and update it in one atomic operation. Requires a write lock for the duration of the operation.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} options\n     */\n    async findOneAndUpdate_(model, data, condition, options) {\n        data = this._translateUpdate(data);\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'findOneAndUpdate: ' +\n                    JSON.stringify({ model, data, condition, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.findOneAndUpdate(condition, data, options)\n        );\n    }\n\n    async findOneAndDelete_(model, condition, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'findOneAndDelete: ' +\n                    JSON.stringify({ model, condition, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.findOneAndDelete(condition, options)\n        );\n    }\n\n    async findOne_(model, condition, options) {\n        const queryOptions = { ...options };\n        let query;\n\n        if (!_.isEmpty(condition)) {\n            const { $projection, $query, ...others } = condition;\n\n            if ($projection) {\n                queryOptions.projection = $projection;\n            }\n\n            query = { ...others, ...$query };\n        } else {\n            throw new InvalidArgument(\n                'findOne requires non-empty query condition.'\n            );\n        }\n\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'findOne: ' +\n                    JSON.stringify({\n                        model,\n                        condition: query,\n                        options: queryOptions,\n                    })\n            );\n        }\n\n        return this.onCollection_(model, (coll) =>\n            coll.findOne(query, queryOptions)\n        );\n    }\n\n    /**\n     * Perform select operation.\n     * @param {*} model\n     * @param {*} condition\n     * @param {*} options\n     */\n    async find_(model, condition, options) {\n        const queryOptions = { ...options };\n        let query, requireTotalCount;\n\n        if (!_.isEmpty(condition)) {\n            const {\n                $projection,\n                $totalCount,\n                $orderBy,\n                $offset,\n                $limit,\n                $query,\n                ...others\n            } = condition;\n\n            if ($projection) {\n                queryOptions.projection = $projection;\n            }\n\n            if ($orderBy) {\n                queryOptions.sort = $orderBy;\n            }\n\n            if ($offset) {\n                queryOptions.skip = $offset;\n            }\n\n            if ($limit) {\n                queryOptions.limit = $limit;\n            }\n\n            query = { ...others, ...$query };\n            requireTotalCount = $totalCount;\n        } else {\n            query = {};\n            requireTotalCount = false;\n        }\n\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'find: ' +\n                    JSON.stringify({\n                        model,\n                        condition: query,\n                        options: queryOptions,\n                    })\n            );\n        }\n\n        return this.onCollection_(model, async (coll) => {\n            const result = await coll.find(query, queryOptions).toArray();\n\n            if (requireTotalCount) {\n                const totalCount = await coll.find(query).count();\n                return [result, totalCount];\n            }\n\n            return result;\n        });\n    }\n\n    /**\n     * Run aggregate pipeline\n     * @param {string} model \n     * @param {array} pipeline \n     * @param {object} options \n     * @returns {*}\n     */\n    async aggregate_(model, pipeline, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'aggregate: ' + JSON.stringify({ model, pipeline, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.aggregate(pipeline, options).toArray()\n        );\n    }\n\n    /**\n     * Get distinct records\n     * @param {*} model \n     * @param {*} field \n     * @param {*} query \n     * @param {*} options \n     * @returns {*}\n     */\n    async distinct_(model, field, query, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'distinct: ' + JSON.stringify({ model, field, query, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.distinct(field, query, options)\n        );\n    }\n\n    /**\n     * Get number of records\n     * @param {string} model \n     * @param {object} query \n     * @param {object} options \n     * @returns {integer}\n     */\n    async count_(model, query, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'count: ' + JSON.stringify({ model, query, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.countDocuments(query, options)\n        );\n    }\n\n    /**\n     * Wrap a batch of query into an executor for a collection\n     * @param {string} model \n     * @param {object} executor \n     * @returns {*}\n     */\n    async onCollection_(model, executor) {\n        return this.execute_((db) => executor(db.collection(model)));\n    }\n\n    _translateUpdate(update) {\n        const ops = _.pick(update, UpdateOps);\n        const others = _.omit(update, UpdateOps);\n\n        if (ops.$set) {\n            ops.$set = { ...ops.$set, ...others };\n        } else if (!_.isEmpty(others)) {\n            ops.$set = others;\n        }\n\n        return ops;\n    }\n}\n\nMongodbConnector.driverLib = mongodb;\n\nmodule.exports = MongodbConnector;\n"],"mappings":"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"}