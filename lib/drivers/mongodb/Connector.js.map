{"version":3,"sources":["../../../src/drivers/mongodb/Connector.js"],"names":["_","require","tryRequire","mongodb","MongoClient","GridFSBucket","ObjectID","Connector","Generators","InvalidArgument","DatabaseError","UpdateOpsField","UpdateOpsArray","UpdateOps","concat","MongodbConnector","constructor","connectionString","options","updatedCount","context","result","modifiedCount","deletedCount","toObjectID","str","lockerField","findAll_","find_","ensureInsertOne","opReturn","ok","n","insertedId","ensureUpdateOne","enforceUpdated","nModified","end_","client","close","log","getConnectionStringWithoutCredential","connect_","useNewUrlParser","connect","db","database","disconnect_","conn","ping_","execute_","listCollections","nameOnly","toArray","dbExecutor","createGridFSBucket_","insertOne_","model","data","logStatement","JSON","stringify","onCollection_","coll","insertOne","insertMany_","ordered","count","length","insertMany","insertOneIfNotExist_","error","code","updateOne_","condition","_translateUpdate","updateOne","updateOneAndReturn_","ret","findOneAndUpdate_","upsert","returnOriginal","value","upsertOne_","dataOnInsert","trans","_id","others","$set","isNil","$setOnInsert","isEmpty","upsertOneAndReturn_","findOneAndUpdate","upsertMany_","uniqueKeys","ops","map","record","updateData","updateOp","filter","pick","update","bulkWrite","updateManyAndReturn_","lockerId","shortid","updateMany","$exists","find","projection","$unset","insertManyIfNotExist_","console","updateMany_","replaceOne_","replaceOne","deleteOne_","deleteOne","deleteMany_","deleteMany","findOneAndReplace_","findOneAndReplace","findOneAndDelete_","findOneAndDelete","findOne_","queryOptions","query","$projection","$query","findOne","requireTotalCount","$totalCount","$orderBy","$offset","$limit","sort","skip","limit","totalCount","aggregate_","pipeline","aggregate","distinct_","field","distinct","count_","countDocuments","executor","collection","omit","driverLib","module","exports"],"mappings":"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","sourcesContent":["const { _ } = require('@genx/july');\nconst { tryRequire } = require('@genx/sys');\nconst mongodb = tryRequire('mongodb');\nconst { MongoClient, GridFSBucket, ObjectID } = mongodb;\nconst Connector = require('../../Connector');\nconst Generators = require('../../Generators');\nconst { InvalidArgument, DatabaseError } = require('../../utils/Errors');\n\nconst UpdateOpsField = [\n    '$currentDate',\n    '$inc',\n    '$min',\n    '$max',\n    '$mul',\n    '$rename',\n    '$set',\n    '$setOnInsert',\n    '$unset',\n];\nconst UpdateOpsArray = ['$addToSet', '$pop', '$pull', '$push', '$pullAll'];\nconst UpdateOps = UpdateOpsField.concat(UpdateOpsArray);\n\n/**\n * Mongodb data storage connector.\n * @class\n * @extends Connector\n */\nclass MongodbConnector extends Connector {\n    /**\n     * Get updated record count\n     * @param {*} context \n     * @returns {integer}\n     */\n    updatedCount = (context) => context.result.modifiedCount;\n    /**\n     * Get deleted record count\n     * @param {*} context \n     * @returns {integer}\n     */\n    deletedCount = (context) => context.result.deletedCount;\n\n    /**\n     * Get ObjectID instance from string\n     * @param {*} str \n     * @returns {ObjectID}\n     */\n    toObjectID = (str) => ObjectID(str);\n\n    /**\n     * @param {string} name\n     * @param {object} options\n     * @property {boolean} [options.usePreparedStatement] -\n     */\n    constructor(connectionString, options) {\n        super('mongodb', connectionString, options);\n\n        this.lockerField = this.options.lockerField || '__lock__';\n        this.findAll_ = this.find_;\n    }\n\n    /**\n     * Throw db error if no record inserted\n     * @param {insertOneWriteOpResultObject} opReturn\n     */\n    ensureInsertOne(opReturn) {\n        if (opReturn.result.ok !== 1 || opReturn.result.n !== 1) {\n            throw new DatabaseError('Mongodb \"insertOne\" operation failed');\n        }\n\n        return opReturn.insertedId;\n    }\n\n    /**\n     * Throw db error if no record updated\n     * @param {updateWriteOpResultObject} opReturn\n     */\n    ensureUpdateOne(opReturn, enforceUpdated) {\n        if (\n            opReturn.result.ok !== 1 ||\n            (enforceUpdated && opReturn.result.nModified !== 1)\n        ) {\n            throw new DatabaseError('Mongodb \"updateOne\" operation failed');\n        }\n    }\n\n    /**\n     * Close all connection initiated by this connector.\n     */\n    async end_() {\n        if (this.client) {\n            await this.client.close();\n            this.log(\n                'verbose',\n                `mongodb: successfully disconnected from \"${this.getConnectionStringWithoutCredential()}\".`\n            );\n        }\n\n        delete this.client;\n    }\n\n    /**\n     * Create a database connection based on the default connection string of the connector and given options.\n     * @param {Object} [options] - Extra options for the connection, optional.\n     * @property {bool} [options.multipleStatements=false] - Allow running multiple statements at a time.\n     * @property {bool} [options.createDatabase=false] - Flag to used when creating a database.\n     * @returns {Promise.<Db>}\n     */\n    async connect_(options) {\n        if (!this.client) {\n            const client = new MongoClient(this.connectionString, {\n                useNewUrlParser: true,\n            });\n            this.client = await client.connect();\n            this.log(\n                'verbose',\n                `mongodb: successfully connected to \"${this.getConnectionStringWithoutCredential()}\".`\n            );\n        }\n\n        return this.client.db(this.database);\n    }\n\n    /**\n     * Close a database connection.\n     * @param {Db} conn - MySQL connection.\n     */\n    async disconnect_(conn) {}\n\n    /**\n     * Check mongodb server health status\n     * @returns {*}\n     */\n    async ping_() {\n        return this.execute_((db) => {\n            return db.listCollections(null, { nameOnly: true }).toArray();\n        });\n    }\n\n    /**\n     * Execute with an executor\n     * @param {Function} dbExecutor \n     * @returns {*}\n     */\n    async execute_(dbExecutor) {\n        let db;\n\n        try {\n            db = await this.connect_();\n\n            return await dbExecutor(db);\n        } finally {\n            db && (await this.disconnect_(db));\n        }\n    }\n\n    /**\n     * @param {object} [options] - Optional settings.\n     * @property {string} [options.bucketName='fs'] - The 'files' and 'chunks' collections will be prefixed with the bucket name followed by a dot.\n     * @property {number} [options.chunkSizeBytes] - Number of bytes stored in each chunk. Defaults to 255KB\n     * @property {object} [options.writeConcern]\n     * @property {object} [options.readPreference]\n     */\n    async createGridFSBucket_(options) {\n        const db = await this.connect_();\n\n        return new GridFSBucket(db, options);\n    }\n\n    /**\n     * Create a new entity.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} options\n     */\n    async insertOne_(model, data, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'insertOne: ' + JSON.stringify({ model, data, options })\n            );\n        }\n\n        return this.onCollection_(model, (coll) =>\n            coll.insertOne(data, options)\n        );\n    }\n\n    /**\n     * Create an array of new entity.\n     * @param {string} model\n     * @param {array} data\n     * @param {*} options\n     */\n    async insertMany_(model, data, options) {\n        options = { ordered: false, ...options };\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'insertMany: ' +\n                    JSON.stringify({ model, count: data.length, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.insertMany(data, options)\n        );\n    }\n\n    /**\n     * Create a new entity if not exist.\n     * @param {string} model\n     * @param {*} data\n     * @param {*} options\n     */\n    async insertOneIfNotExist_(model, data, options) {\n        try {\n            return await this.insertOne_(model, data, options);\n        } catch (error) {\n            if (error.code === 11000) {\n                return false;\n            }\n\n            throw error;\n        }\n    }\n\n    /**\n     * Update an existing entity.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} condition\n     * @param {*} options\n     */\n    async updateOne_(model, data, condition, options) {\n        data = this._translateUpdate(data);\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'updateOne: ' +\n                    JSON.stringify({ model, data, condition, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.updateOne(condition, data, options)\n        );\n    }\n\n    /**\n     * Update an existing entity and return the updated record.\n     * @param {string} model\n     * @param {*} data\n     * @param {*} condition\n     * @param {*} options\n     */\n    async updateOneAndReturn_(model, data, condition, options) {\n        const ret = await this.findOneAndUpdate_(model, data, condition, {\n            ...options,\n            upsert: false,\n            returnOriginal: false,\n        });\n        return ret && ret.value;\n    }\n\n    /**\n     * Update an existing entity.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} condition\n     * @param {*} options\n     * @param {object} dataOnInsert - Shared data on insert\n     */\n    async upsertOne_(model, data, condition, options, dataOnInsert) {\n        const trans = this._translateUpdate(data);\n        const { _id, ...others } = trans.$set || {};\n        if (!_.isNil(_id)) {\n            trans.$set = others;\n            trans.$setOnInsert = { _id };\n        }\n\n        if (!_.isEmpty(dataOnInsert)) {\n            trans.$setOnInsert = { ...trans.$setOnInsert, ...dataOnInsert };\n        }\n\n        options = { ...options, upsert: true };\n\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'upsertOne: ' +\n                    JSON.stringify({ model, data: trans, condition, options })\n            );\n        }\n\n        return this.onCollection_(model, (coll) =>\n            coll.updateOne(condition, trans, options)\n        );\n    }\n\n    /**\n     * Upsert an entity and return updated.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} condition\n     * @param {*} options\n     * @param {object} dataOnInsert - Shared data on insert\n     */\n    async upsertOneAndReturn_(model, data, condition, options, dataOnInsert) {\n        const trans = this._translateUpdate(data);\n        const { _id, ...others } = trans.$set || {};\n        if (!_.isNil(_id)) {\n            trans.$set = others;\n            trans.$setOnInsert = { _id };\n        }\n\n        if (!_.isEmpty(dataOnInsert)) {\n            trans.$setOnInsert = { ...trans.$setOnInsert, ...dataOnInsert };\n        }\n\n        options = { ...options, upsert: true, returnOriginal: false };\n\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'upsertOne: ' +\n                    JSON.stringify({ model, data: trans, condition, options })\n            );\n        }\n\n        const ret = await this.onCollection_(model, (coll) =>\n            coll.findOneAndUpdate(condition, trans, options)\n        );\n        return ret && ret.value;\n    }\n\n    /**\n     * Update many entities.\n     * @param {string} model\n     * @param {object} data - Array of record with _id\n     * @param {array} uniqueKeys - Unique keys in the data record used as filter\n     * @param {*} options\n     * @param {object} dataOnInsert - Shared data on insert\n     */\n    async upsertMany_(model, data, uniqueKeys, options, dataOnInsert) {\n        const ops = data.map((record) => {\n            const { _id, ...updateData } = record;\n\n            const updateOp = this._translateUpdate(updateData);\n\n            if (_id) {\n                updateOp.$setOnInsert = { _id, ...dataOnInsert };\n            } else if (!_.isEmpty(dataOnInsert)) {\n                updateOp.$setOnInsert = dataOnInsert;\n            }\n\n            return {\n                updateOne: {\n                    filter: { ..._.pick(record, uniqueKeys) },\n                    update: updateOp,\n                    upsert: true,\n                },\n            };\n        });\n\n        options = { ordered: false, ...options };\n\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'bulkWrite: ' +\n                    JSON.stringify({ model, count: ops.length, options })\n            );\n        }\n\n        return this.onCollection_(model, (coll) =>\n            coll.bulkWrite(ops, options)\n        );\n    }\n\n    /**\n     * Update many entities and return updated.\n     * @param {*} model\n     * @param {*} data\n     * @param {*} condition\n     * @param {*} options\n     */\n    async updateManyAndReturn_(model, data, condition, options) {\n        const lockerId = Generators.shortid();\n\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'updateMany+find+updateMany: ' +\n                    JSON.stringify({\n                        model,\n                        count: data.length,\n                        condition,\n                        options,\n                    })\n            );\n        }\n\n        return this.onCollection_(model, async (coll) => {\n            // 1.update and set locker\n            const ret = await coll.updateMany(\n                { ...condition, [this.lockerField]: { $exists: false } }, // for all non-locked\n                { $set: { ...data, [this.lockerField]: lockerId } }, // lock it\n                { ...options, upsert: false }\n            );\n\n            try {\n                // 2.return all locked records\n                return await coll\n                    .find(\n                        { [this.lockerField]: lockerId },\n                        { projection: { [this.lockerField]: 0 } }\n                    )\n                    .toArray(); // return all locked\n            } finally {\n                // 3.remove lockers\n                if (ret.result.nModified > 0) {\n                    // unlock\n                    await coll.updateMany(\n                        { [this.lockerField]: lockerId },\n                        { $unset: { [this.lockerField]: '' } },\n                        { upsert: false }\n                    );\n                }\n            }\n        });\n    }\n\n    /**\n     * Insert many entities if not exist.\n     * @param {*} model\n     * @param {*} data\n     * @param {*} uniqueKeys\n     * @param {*} options\n     */\n    async insertManyIfNotExist_(model, data, uniqueKeys, options) {\n        console.log('buggy: tofix');\n        const ops = data.map((record) => ({\n            updateOne: {\n                filter: { ..._.pick(record, uniqueKeys) },\n                update: { $setOnInsert: record },\n                upsert: true,\n            },\n        }));\n\n        return this.onCollection_(model, (coll) =>\n            coll.bulkWrite(ops, { ordered: false, ...options })\n        );\n    }\n\n    /**\n     * Update multiple documents.\n     * @param {string} model\n     * @param {*} data\n     * @param {*} condition\n     * @param {*} options\n     */\n    async updateMany_(model, data, condition, options) {\n        data = this._translateUpdate(data);\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'updateMany: ' +\n                    JSON.stringify({\n                        model,\n                        count: data.length,\n                        condition,\n                        options,\n                    })\n            );\n        }\n\n        return this.onCollection_(model, (coll) =>\n            coll.updateMany(condition, data, options)\n        );\n    }\n\n    /**\n     * Replace an existing entity or create a new one.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} options\n     */\n    async replaceOne_(model, data, condition, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'replaceOne: ' +\n                    JSON.stringify({ model, data, condition, options })\n            );\n        }\n\n        return this.onCollection_(model, (coll) =>\n            coll.replaceOne(condition, data, options)\n        );\n    }\n\n    /**\n     * Remove an existing entity.\n     * @param {string} model\n     * @param {*} condition\n     * @param {*} options\n     */\n    async deleteOne_(model, condition, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'deleteOne: ' + JSON.stringify({ model, condition, options })\n            );\n        }\n\n        return this.onCollection_(model, (coll) =>\n            coll.deleteOne(condition, options)\n        );\n    }\n\n    /**\n     * Remove an existing entity.\n     * @param {string} model\n     * @param {*} condition\n     * @param {*} options\n     */\n    async deleteMany_(model, condition, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'deleteMany: ' + JSON.stringify({ model, condition, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.deleteMany(condition, options)\n        );\n    }\n\n    /**\n     * Replace (insert or update for exsisting) an entity and return original record.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} options\n     */\n    async findOneAndReplace_(model, data, condition, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'findOneAndReplace: ' + JSON.stringify({ model, data, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.findOneAndReplace(condition, data, options)\n        );\n    }\n\n    /**\n     * Find a document and update it in one atomic operation. Requires a write lock for the duration of the operation.\n     * @param {string} model\n     * @param {object} data\n     * @param {*} options\n     */\n    async findOneAndUpdate_(model, data, condition, options) {\n        data = this._translateUpdate(data);\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'findOneAndUpdate: ' +\n                    JSON.stringify({ model, data, condition, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.findOneAndUpdate(condition, data, options)\n        );\n    }\n\n    async findOneAndDelete_(model, condition, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'findOneAndDelete: ' +\n                    JSON.stringify({ model, condition, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.findOneAndDelete(condition, options)\n        );\n    }\n\n    async findOne_(model, condition, options) {\n        const queryOptions = { ...options };\n        let query;\n\n        if (!_.isEmpty(condition)) {\n            const { $projection, $query, ...others } = condition;\n\n            if ($projection) {\n                queryOptions.projection = $projection;\n            }\n\n            query = { ...others, ...$query };\n        } else {\n            throw new InvalidArgument(\n                'findOne requires non-empty query condition.'\n            );\n        }\n\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'findOne: ' +\n                    JSON.stringify({\n                        model,\n                        condition: query,\n                        options: queryOptions,\n                    })\n            );\n        }\n\n        return this.onCollection_(model, (coll) =>\n            coll.findOne(query, queryOptions)\n        );\n    }\n\n    /**\n     * Perform select operation.\n     * @param {*} model\n     * @param {*} condition\n     * @param {*} options\n     */\n    async find_(model, condition, options) {\n        const queryOptions = { ...options };\n        let query, requireTotalCount;\n\n        if (!_.isEmpty(condition)) {\n            const {\n                $projection,\n                $totalCount,\n                $orderBy,\n                $offset,\n                $limit,\n                $query,\n                ...others\n            } = condition;\n\n            if ($projection) {\n                queryOptions.projection = $projection;\n            }\n\n            if ($orderBy) {\n                queryOptions.sort = $orderBy;\n            }\n\n            if ($offset) {\n                queryOptions.skip = $offset;\n            }\n\n            if ($limit) {\n                queryOptions.limit = $limit;\n            }\n\n            query = { ...others, ...$query };\n            requireTotalCount = $totalCount;\n        } else {\n            query = {};\n            requireTotalCount = false;\n        }\n\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'find: ' +\n                    JSON.stringify({\n                        model,\n                        condition: query,\n                        options: queryOptions,\n                    })\n            );\n        }\n\n        return this.onCollection_(model, async (coll) => {\n            const result = await coll.find(query, queryOptions).toArray();\n\n            if (requireTotalCount) {\n                const totalCount = await coll.find(query).count();\n                return [result, totalCount];\n            }\n\n            return result;\n        });\n    }\n\n    /**\n     * Run aggregate pipeline\n     * @param {string} model \n     * @param {array} pipeline \n     * @param {object} options \n     * @returns {*}\n     */\n    async aggregate_(model, pipeline, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'aggregate: ' + JSON.stringify({ model, pipeline, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.aggregate(pipeline, options).toArray()\n        );\n    }\n\n    /**\n     * Get distinct records\n     * @param {*} model \n     * @param {*} field \n     * @param {*} query \n     * @param {*} options \n     * @returns {*}\n     */\n    async distinct_(model, field, query, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'distinct: ' + JSON.stringify({ model, field, query, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.distinct(field, query, options)\n        );\n    }\n\n    /**\n     * Get number of records\n     * @param {string} model \n     * @param {object} query \n     * @param {object} options \n     * @returns {integer}\n     */\n    async count_(model, query, options) {\n        if (this.options.logStatement) {\n            this.log(\n                'verbose',\n                'count: ' + JSON.stringify({ model, query, options })\n            );\n        }\n        return this.onCollection_(model, (coll) =>\n            coll.countDocuments(query, options)\n        );\n    }\n\n    /**\n     * Wrap a batch of query into an executor for a collection\n     * @param {string} model \n     * @param {object} executor \n     * @returns {*}\n     */\n    async onCollection_(model, executor) {\n        return this.execute_((db) => executor(db.collection(model)));\n    }\n\n    _translateUpdate(update) {\n        const ops = _.pick(update, UpdateOps);\n        const others = _.omit(update, UpdateOps);\n\n        if (ops.$set) {\n            ops.$set = { ...ops.$set, ...others };\n        } else if (!_.isEmpty(others)) {\n            ops.$set = others;\n        }\n\n        return ops;\n    }\n}\n\nMongodbConnector.driverLib = mongodb;\n\nmodule.exports = MongodbConnector;\n"],"file":"Connector.js"}