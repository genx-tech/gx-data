{"version":3,"file":"Connector.js","names":["URL","require","_","SupportedDrivers","Connector","createConnector","driver","connectionString","options","indexOf","Error","ConnectorClass","constructor","relational","makeNewConnectionString","components","url","username","password","pathname","database","forOwn","value","key","searchParams","set","href","getConnectionStringWithoutCredential","connStr","strOrObj","user","host","_database","substring","driverLib","log","args","logger","module","exports"],"sources":["../src/Connector.js"],"sourcesContent":["const { URL } = require('url');\nconst { _ } = require('@genx/july');\nconst { SupportedDrivers } = require('./utils/lang');\n\n/**\n * A database storage connector object.\n * @class\n */\nclass Connector {\n    /**\n     * Create a connector.\n     * @param {*} driver\n     * @param {*} connectionString\n     * @param {*} options\n     */\n    static createConnector(driver, connectionString, options) {\n        if (SupportedDrivers.indexOf(driver) === -1) {\n            throw new Error(`Unsupported connector driver: \"${driver}\"!`);\n        }\n\n        if (!connectionString) {\n            throw new Error(`Missing required connection string`);\n        }\n\n        const ConnectorClass = require(`./drivers/${driver}/Connector`);\n\n        return new ConnectorClass(connectionString, options);\n    }\n\n    /**\n     * @param {string} driver - Data storage type\n     * @param {string} connectionString - The connection string\n     * @param {object} [options] - Connector options\n     * @property {boolean} [options.logger] - Logger instance\n     */\n    constructor(driver, connectionString, options) {\n        /**\n         * The database storage type, e.g. mysql, mongodb\n         * @member {string}\n         */\n        this.driver = driver;\n\n        /**\n         * The default URL style connection string, e.g. mysql://username:password@host:port/dbname\n         * @member {string}\n         */\n        this.connectionString = connectionString;\n\n        /**\n         * Connector options\n         * @member {object}\n         */\n        this.options = options || {};\n\n        /**\n         * Is the database a relational database\n         * @member {boolean}\n         */\n        this.relational = false;\n    }\n\n    /**\n     * Make a new connection components from current connection string and given components.\n     * @param {object} components\n     * @property {string} [components.username]\n     * @property {string} [components.password]\n     * @property {string} [components.database]\n     * @property {object} [components.options]\n     */\n    makeNewConnectionString(components) {\n        const url = new URL(this.connectionString);\n\n        if ('username' in components) {\n            url.username = components.username;\n        }\n\n        if ('password' in components) {\n            url.password = components.password;\n        }\n\n        if ('database' in components) {\n            url.pathname = '/' + components.database;\n        }\n\n        if ('options' in components) {\n            const options = components.options;\n\n            _.forOwn(options, (value, key) => {\n                url.searchParams.set(\n                    key,\n                    typeof value === 'boolean' ? (value ? 1 : 0) : value\n                );\n            });\n        }\n\n        return url.href;\n    }\n\n    /**\n     * Get the connection without credential information, usually used for displaying.\n     * @returns {string}\n     */\n    getConnectionStringWithoutCredential(connStr) {\n        const strOrObj = connStr || this.connectionString;\n        if (typeof strOrObj === 'string') {\n            const url = new URL(strOrObj);\n\n            url.username = '';\n            url.password = '';\n\n            return url.href;\n        } else {\n            const { user, password, host, database } = strOrObj;\n            return `mysql://${user}:${password}@${host}/${database}`\n        }\n\n    }\n\n    /**\n     * Database name.\n     * @member {string}\n     */\n    get database() {\n        if (!this._database) {\n            this._database = new URL(this.connectionString).pathname.substring(1);\n        }\n\n        return this._database;\n    }\n\n    /**\n     * Client library.\n     * @member {object}\n     */\n    get driverLib() {\n        return this.constructor.driverLib;\n    }\n\n    /**\n     * Write log.\n     * @param  {...any} args\n     */\n    log(...args) {\n        if (this.options.logger) {\n            this.options.logger.log(...args);\n        }\n    }\n\n    /**\n     * Log query.\n     */\n\n    /*\n    async connect_() {}\n\n    async disconnect_() {}\n\n    async ping_() {}\n\n    async execute_() {}\n\n    async end_() {}\n    */\n}\n\nmodule.exports = Connector;\n"],"mappings":"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"}