{"version":3,"sources":["../src/Connector.js"],"names":["URL","require","_","SupportedDrivers","Connector","createConnector","driver","connectionString","options","indexOf","Error","ConnectorClass","constructor","relational","_mapOfConnectionToId","WeakMap","makeNewConnectionString","components","url","username","password","pathname","database","forOwn","value","key","searchParams","set","href","getConnectionStringWithoutCredential","_database","substr","driverLib","log","args","logger","module","exports"],"mappings":"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","sourcesContent":["const { URL } = require('url');\nconst { _ } = require('@genx/july');\nconst { SupportedDrivers } = require('./utils/lang');\n\n/**\n * A database storage connector object.\n * @class\n */\nclass Connector {\n    /**\n     * Create a connector.\n     * @param {*} driver\n     * @param {*} connectionString\n     * @param {*} options\n     */\n    static createConnector(driver, connectionString, options) {\n        if (SupportedDrivers.indexOf(driver) === -1) {\n            throw new Error(`Unsupported connector driver: \"${driver}\"!`);\n        }\n\n        if (!connectionString) {\n            throw new Error(`Missing required connection string`);\n        }\n\n        const ConnectorClass = require(`./drivers/${driver}/Connector`);\n\n        return new ConnectorClass(connectionString, options);\n    }\n\n    /**\n     * @param {string} driver - Data storage type\n     * @param {string} connectionString - The connection string\n     * @param {object} [options] - Connector options\n     * @property {boolean} [options.logger] - Logger instance\n     */\n    constructor(driver, connectionString, options) {\n        /**\n         * The database storage type, e.g. mysql, mongodb\n         * @member {string}\n         */\n        this.driver = driver;\n\n        /**\n         * The default URL style connection string, e.g. mysql://username:password@host:port/dbname\n         * @member {string}\n         */\n        this.connectionString = connectionString;\n\n        /**\n         * Connector options\n         * @member {object}\n         */\n        this.options = options || {};\n\n        /**\n         * Is the database a relational database\n         * @member {boolean}\n         */\n        this.relational = false;\n\n        /**\n         * Map of connection object to unique id, for tracing purpose\n         * @private\n         */\n        this._mapOfConnectionToId = new WeakMap();\n    }\n\n    /**\n     * Make a new connection components from current connection string and given components.\n     * @param {object} components\n     * @property {string} [components.username]\n     * @property {string} [components.password]\n     * @property {string} [components.database]\n     * @property {object} [components.options]\n     */\n    makeNewConnectionString(components) {\n        const url = new URL(this.connectionString);\n\n        if ('username' in components) {\n            url.username = components.username;\n        }\n\n        if ('password' in components) {\n            url.password = components.password;\n        }\n\n        if ('database' in components) {\n            url.pathname = '/' + components.database;\n        }\n\n        if ('options' in components) {\n            const options = components.options;\n\n            _.forOwn(options, (value, key) => {\n                url.searchParams.set(\n                    key,\n                    typeof value === 'boolean' ? (value ? 1 : 0) : value\n                );\n            });\n        }\n\n        return url.href;\n    }\n\n    /**\n     * Get the connection without credential information, usually used for displaying.\n     * @returns {string}\n     */\n    getConnectionStringWithoutCredential() {\n        const url = new URL(this.connectionString);\n\n        url.username = '';\n        url.password = '';\n\n        return url.href;\n    }\n\n    /**\n     * Database name.\n     * @member {string}\n     */\n    get database() {\n        if (!this._database) {\n            this._database = new URL(this.connectionString).pathname.substr(1);\n        }\n\n        return this._database;\n    }\n\n    /**\n     * Client library.\n     * @member {object}\n     */\n    get driverLib() {\n        return this.constructor.driverLib;\n    }\n\n    /**\n     * Write log.\n     * @param  {...any} args\n     */\n    log(...args) {\n        if (this.options.logger) {\n            this.options.logger.log(...args);\n        }\n    }\n\n    /**\n     * Log query.\n     */\n\n    /*\n    async connect_() {}\n\n    async disconnect_() {}\n\n    async ping_() {}\n\n    async execute_() {}\n\n    async end_() {}\n    */\n}\n\nmodule.exports = Connector;\n"],"file":"Connector.js"}