"use strict";

require("source-map-support/register");

const {
  _,
  pascalCase,
  sleep_
} = require('rk-utils');

const {
  DatabaseError
} = require('./utils/Errors');

const retryFailed = error => [false, error];

const retryOK = result => [true, result];

const directReturn = a => a;

class DbModel {
  constructor(app, connector, i18n) {
    this.app = app;
    this.connector = connector;
    this.i18n = i18n;
    this._modelCache = {};
  }

  get driver() {
    return this.connector.driver;
  }

  model(entityName) {
    if (this._modelCache[entityName]) return this._modelCache[entityName];
    let modelClassName = pascalCase(entityName);
    if (this._modelCache[modelClassName]) return this._modelCache[modelClassName];
    let entityCustomClassFactory = this.loadCustomModel(modelClassName);
    let entityClassFactory = this.loadModel(modelClassName);

    let BaseEntityModel = require(`./drivers/${this.driver}/EntityModel`);

    if (entityCustomClassFactory) {
      BaseEntityModel = entityCustomClassFactory(BaseEntityModel);
    }

    const modelClass = entityClassFactory(BaseEntityModel);
    modelClass.db = this;
    this._modelCache[entityName] = modelClass;

    if (modelClassName !== entityName) {
      this._modelCache[modelClassName] = modelClass;
    }

    return modelClass;
  }

  entitiesOfType(baseEntityName) {
    return _.filter(this.entities, entityName => {
      let Model = this.model(entityName);
      return Model.baseClasses && Model.baseClasses.indexOf(baseEntityName) > -1;
    });
  }

  async retry_(transactionName, transaction, connOptions, maxRetry, interval) {
    if (connOptions && connOptions.connection) {
      return transaction(directReturn, directReturn);
    }

    let i = 0;
    if (maxRetry == null) maxRetry = 3;

    while (i++ < maxRetry) {
      const [finished, result] = await transaction(retryOK, retryFailed);

      if (finished) {
        return result;
      }

      if (i === maxRetry) {
        throw new DatabaseError(`Unable to complete expected transaction after retried ${maxRetry} times.`, result);
      }

      this.app.logException('warn', result, `Unable to complete "${transactionName}" and will try ${maxRetry - i} more times after ${interval || 0} ms.`);

      if (interval != null) {
        await sleep_(interval);
      }
    }
  }

  async close_() {
    delete this._modelCache;
    delete this.connector;
    delete this.app;
  }

}

module.exports = DbModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9EYk1vZGVsLmpzIl0sIm5hbWVzIjpbIl8iLCJwYXNjYWxDYXNlIiwic2xlZXBfIiwicmVxdWlyZSIsIkRhdGFiYXNlRXJyb3IiLCJyZXRyeUZhaWxlZCIsImVycm9yIiwicmV0cnlPSyIsInJlc3VsdCIsImRpcmVjdFJldHVybiIsImEiLCJEYk1vZGVsIiwiY29uc3RydWN0b3IiLCJhcHAiLCJjb25uZWN0b3IiLCJpMThuIiwiX21vZGVsQ2FjaGUiLCJkcml2ZXIiLCJtb2RlbCIsImVudGl0eU5hbWUiLCJtb2RlbENsYXNzTmFtZSIsImVudGl0eUN1c3RvbUNsYXNzRmFjdG9yeSIsImxvYWRDdXN0b21Nb2RlbCIsImVudGl0eUNsYXNzRmFjdG9yeSIsImxvYWRNb2RlbCIsIkJhc2VFbnRpdHlNb2RlbCIsIm1vZGVsQ2xhc3MiLCJkYiIsImVudGl0aWVzT2ZUeXBlIiwiYmFzZUVudGl0eU5hbWUiLCJmaWx0ZXIiLCJlbnRpdGllcyIsIk1vZGVsIiwiYmFzZUNsYXNzZXMiLCJpbmRleE9mIiwicmV0cnlfIiwidHJhbnNhY3Rpb25OYW1lIiwidHJhbnNhY3Rpb24iLCJjb25uT3B0aW9ucyIsIm1heFJldHJ5IiwiaW50ZXJ2YWwiLCJjb25uZWN0aW9uIiwiaSIsImZpbmlzaGVkIiwibG9nRXhjZXB0aW9uIiwiY2xvc2VfIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU07QUFBRUEsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQSxVQUFMO0FBQWlCQyxFQUFBQTtBQUFqQixJQUE0QkMsT0FBTyxDQUFDLFVBQUQsQ0FBekM7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQW9CRCxPQUFPLENBQUMsZ0JBQUQsQ0FBakM7O0FBRUEsTUFBTUUsV0FBVyxHQUFHQyxLQUFLLElBQUksQ0FBRSxLQUFGLEVBQVNBLEtBQVQsQ0FBN0I7O0FBQ0EsTUFBTUMsT0FBTyxHQUFJQyxNQUFELElBQVksQ0FBRSxJQUFGLEVBQVFBLE1B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RixDQUFOO0FBQ0g7O0FBRUQsV0FBS0ssR0FBTCxDQUFTK0IsWUFBVCxDQUFzQixNQUF0QixFQUE4QnBDLE1BQTlCLEVBQXVDLHVCQUFzQjRCLGVBQWdCLGtCQUFpQkcsUUFBUSxHQUFDRyxDQUFFLHFCQUFvQkYsUUFBUSxJQUFFLENBQUUsTUFBekk7O0FBRUEsVUFBSUEsUUFBUSxJQUFJLElBQWhCLEVBQXNCO0FBQ2xCLGNBQU10QyxNQUFNLENBQUNzQyxRQUFELENBQVo7QUFDSDtBQUNKO0FBQ0o7O0FBRUQsUUFBTUssTUFBTixHQUFlO0FBQ1gsV0FBTyxLQUFLN0IsV0FBWjtBQUNBLFdBQU8sS0FBS0YsU0FBWjtBQUNBLFdBQU8sS0FBS0QsR0FBWjtBQUNIOztBQTVFUzs7QUErRWRpQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJwQyxPQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgXywgcGFzY2FsQ2FzZSwgc2xlZXBfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyBEYXRhYmFzZUVycm9yIH0gPSByZXF1aXJlKCcuL3V0aWxzL0Vycm9ycycpO1xuXG5jb25zdCByZXRyeUZhaWxlZCA9IGVycm9yID0+IFsgZmFsc2UsIGVycm9yIF07XG5jb25zdCByZXRyeU9LID0gKHJlc3VsdCkgPT4gWyB0cnVlLCByZXN1bHQgXTtcblxuY29uc3QgZGlyZWN0UmV0dXJuID0gYSA9PiBhO1xuXG5jbGFzcyBEYk1vZGVsIHtcbiAgICBjb25zdHJ1Y3RvcihhcHAsIGNvbm5lY3RvciwgaTE4bikgeyAgICAgXG4gICAgICAgIHRoaXMuYXBwID0gYXBwO1xuICAgICAgICB0aGlzLmNvbm5lY3RvciA9IGNvbm5lY3RvcjtcbiAgICAgICAgdGhpcy5pMThuID0gaTE4bjtcblxuICAgICAgICB0aGlzLl9tb2RlbENhY2hlID0ge307XG4gICAgfVxuXG4gICAgZ2V0IGRyaXZlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdG9yLmRyaXZlcjtcbiAgICB9XG5cbiAgICBtb2RlbChlbnRpdHlOYW1lKSB7ICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuX21vZGVsQ2FjaGVbZW50aXR5TmFtZV0pIHJldHVybiB0aGlzLl9tb2RlbENhY2hlW2VudGl0eU5hbWVdO1xuXG4gICAgICAgIGxldCBtb2RlbENsYXNzTmFtZSA9IHBhc2NhbENhc2UoZW50aXR5TmFtZSk7XG4gICAgICAgIGlmICh0aGlzLl9tb2RlbENhY2hlW21vZGVsQ2xhc3NOYW1lXSkgcmV0dXJuIHRoaXMuX21vZGVsQ2FjaGVbbW9kZWxDbGFzc05hbWVdO1xuXG4gICAgICAgIGxldCBlbnRpdHlDdXN0b21DbGFzc0ZhY3RvcnkgPSB0aGlzLmxvYWRDdXN0b21Nb2RlbChtb2RlbENsYXNzTmFtZSk7IFxuICAgICAgICBsZXQgZW50aXR5Q2xhc3NGYWN0b3J5ID0gdGhpcy5sb2FkTW9kZWwobW9kZWxDbGFzc05hbWUpO1xuICAgICAgICBcbiAgICAgICAgbGV0IEJhc2VFbnRpdHlNb2RlbCA9IHJlcXVpcmUoYC4vZHJpdmVycy8ke3RoaXMuZHJpdmVyfS9FbnRpdHlNb2RlbGApOyBcbiAgICAgICAgaWYgKGVudGl0eUN1c3RvbUNsYXNzRmFjdG9yeSkge1xuICAgICAgICAgICAgQmFzZUVudGl0eU1vZGVsID0gZW50aXR5Q3VzdG9tQ2xhc3NGYWN0b3J5KEJhc2VFbnRpdHlNb2RlbCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtb2RlbENsYXNzID0gZW50aXR5Q2xhc3NGYWN0b3J5KEJhc2VFbnRpdHlNb2RlbCk7XG4gICAgICAgIG1vZGVsQ2xhc3MuZGIgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMuX21vZGVsQ2FjaGVbZW50aXR5TmFtZV0gPSBtb2RlbENsYXNzO1xuICAgICAgICBpZiAobW9kZWxDbGFzc05hbWUgIT09IGVudGl0eU5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMuX21vZGVsQ2FjaGVbbW9kZWxDbGFzc05hbWVdID0gbW9kZWxDbGFzcztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG1vZGVsQ2xhc3M7XG4gICAgfVxuXG4gICAgZW50aXRpZXNPZlR5cGUoYmFzZUVudGl0eU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIF8uZmlsdGVyKHRoaXMuZW50aXRpZXMsIGVudGl0eU5hbWUgPT4ge1xuICAgICAgICAgICAgbGV0IE1vZGVsID0gdGhpcy5tb2RlbChlbnRpdHlOYW1lKTtcbiAgICAgICAgICAgIHJldHVybiBNb2RlbC5iYXNlQ2xhc3NlcyAmJiBNb2RlbC5iYXNlQ2xhc3Nlcy5pbmRleE9mKGJhc2VFbnRpdHlOYW1lKSA+IC0xO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyByZXRyeV8odHJhbnNhY3Rpb25OYW1lLCB0cmFuc2FjdGlvbiwgY29ubk9wdGlvbnMsIG1heFJldHJ5LCBpbnRlcnZhbCkge1xuICAgICAgICBpZiAoY29ubk9wdGlvbnMgJiYgY29ubk9wdGlvbnMuY29ubmVjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uKGRpcmVjdFJldHVybiwgZGlyZWN0UmV0dXJuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgaWYgKG1heFJldHJ5ID09IG51bGwpIG1heFJldHJ5ID0gMztcblxuICAgICAgICB3aGlsZSAoaSsrIDwgbWF4UmV0cnkpIHtcbiAgICAgICAgICAgIGNvbnN0IFsgZmluaXNoZWQsIHJlc3VsdCBdID0gYXdhaXQgdHJhbnNhY3Rpb24ocmV0cnlPSywgcmV0cnlGYWlsZWQpO1xuXG4gICAgICAgICAgICBpZiAoZmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaSA9PT0gbWF4UmV0cnkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRGF0YWJhc2VFcnJvcihgVW5hYmxlIHRvIGNvbXBsZXRlIGV4cGVjdGVkIHRyYW5zYWN0aW9uIGFmdGVyIHJldHJpZWQgJHttYXhSZXRyeX0gdGltZXMuYCwgcmVzdWx0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5hcHAubG9nRXhjZXB0aW9uKCd3YXJuJywgcmVzdWx0LCBgVW5hYmxlIHRvIGNvbXBsZXRlIFwiJHt0cmFuc2FjdGlvbk5hbWV9XCIgYW5kIHdpbGwgdHJ5ICR7bWF4UmV0cnktaX0gbW9yZSB0aW1lcyBhZnRlciAke2ludGVydmFsfHwwfSBtcy5gKTtcblxuICAgICAgICAgICAgaWYgKGludGVydmFsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBzbGVlcF8oaW50ZXJ2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9ICAgICAgICBcbiAgICB9XG5cbiAgICBhc3luYyBjbG9zZV8oKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9tb2RlbENhY2hlO1xuICAgICAgICBkZWxldGUgdGhpcy5jb25uZWN0b3I7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmFwcDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGJNb2RlbDsiXX0=