"use strict";

require("source-map-support/register");

const {
  _,
  pascalCase,
  sleep_
} = require('rk-utils');

const {
  DatabaseError
} = require('./utils/Errors');

const retryFailed = error => [false, error];

const retryOK = result => [true, result];

class DbModel {
  constructor(app, connector, i18n) {
    this.app = app;
    this.connector = connector;
    this.i18n = i18n;
    this._modelCache = {};
  }

  get driver() {
    return this.connector.driver;
  }

  model(entityName) {
    if (this._modelCache[entityName]) return this._modelCache[entityName];
    let modelClassName = pascalCase(entityName);
    if (this._modelCache[modelClassName]) return this._modelCache[modelClassName];
    let entityCustomClassFactory = this.loadCustomModel(modelClassName);
    let entityClassFactory = this.loadModel(modelClassName);

    let BaseEntityModel = require(`./drivers/${this.driver}/EntityModel`);

    if (entityCustomClassFactory) {
      BaseEntityModel = entityCustomClassFactory(BaseEntityModel);
    }

    const modelClass = entityClassFactory(BaseEntityModel);
    modelClass.db = this;
    this._modelCache[entityName] = modelClass;

    if (modelClassName !== entityName) {
      this._modelCache[modelClassName] = modelClass;
    }

    return modelClass;
  }

  entitiesOfType(baseEntityName) {
    return _.filter(this.entities, entityName => {
      let Model = this.model(entityName);
      return Model.baseClasses && Model.baseClasses.indexOf(baseEntityName) > -1;
    });
  }

  async retry_(transactionName, transaction, maxRetry, interval) {
    let i = 0;
    if (maxRetry == null) maxRetry = 3;

    while (i++ < maxRetry) {
      const [finished, result] = await transaction(retryOK, retryFailed);

      if (finished) {
        return result;
      }

      if (i === maxRetry) {
        throw new DatabaseError(`Unable to complete expected transaction after retried ${maxRetry} times.`, result);
      }

      this.app.logException('warn', result, `Unable to complete "${transactionName}" and will try ${maxRetry - i} more times after ${interval || 0} ms.`);

      if (interval != null) {
        await sleep_(interval);
      }
    }
  }

  async close_() {
    delete this._modelCache;
    delete this.connector;
    delete this.app;
  }

}

module.exports = DbModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9EYk1vZGVsLmpzIl0sIm5hbWVzIjpbIl8iLCJwYXNjYWxDYXNlIiwic2xlZXBfIiwicmVxdWlyZSIsIkRhdGFiYXNlRXJyb3IiLCJyZXRyeUZhaWxlZCIsImVycm9yIiwicmV0cnlPSyIsInJlc3VsdCIsIkRiTW9kZWwiLCJjb25zdHJ1Y3RvciIsImFwcCIsImNvbm5lY3RvciIsImkxOG4iLCJfbW9kZWxDYWNoZSIsImRyaXZlciIsIm1vZGVsIiwiZW50aXR5TmFtZSIsIm1vZGVsQ2xhc3NOYW1lIiwiZW50aXR5Q3VzdG9tQ2xhc3NGYWN0b3J5IiwibG9hZEN1c3RvbU1vZGVsIiwiZW50aXR5Q2xhc3NGYWN0b3J5IiwibG9hZE1vZGVsIiwiQmFzZUVudGl0eU1vZGVsIiwibW9kZWxDbGFzcyIsImRiIiwiZW50aXRpZXNPZlR5cGUiLCJiYXNlRW50aXR5TmFtZSIsImZpbHRlciIsImVudGl0aWVzIiwiTW9kZWwiLCJiYXNlQ2xhc3NlcyIsImluZGV4T2YiLCJyZXRyeV8iLCJ0cmFuc2FjdGlvbk5hbWUiLCJ0cmFuc2FjdGlvbiIsIm1heFJldHJ5IiwiaW50ZXJ2YWwiLCJpIiwiZmluaXNoZWQiLCJsb2dFeGNlcHRpb24iLCJjbG9zZV8iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBLFVBQUw7QUFBaUJDLEVBQUFBO0FBQWpCLElBQTRCQyxPQUFPLENBQUMsVUFBRCxDQUF6Qzs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBb0JELE9BQU8sQ0FBQyxnQkFBRCxDQUFqQzs7QUFFQSxNQUFNRSxXQUFXLEdBQUdDLEtBQUssSUFBSSxDQUFFLEtBQUYsRUFBU0EsS0FBVCxDQUE3Qjs7QUFDQSxNQUFNQyxPQUFPLEdBQUlDLE1BQUQsSUFBWSxDQUFFLElBQUYsRUFBUUEsTUFBUixDQUE1Qjs7QUFFQSxNQUFNQyxPQUFOLENBQWM7QUFDVkMsRUFBQUEsV0FB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bUMsUUFBRCxDQUFaO0FBQ0g7QUFDSjtBQUNKOztBQUVELFFBQU1JLE1BQU4sR0FBZTtBQUNYLFdBQU8sS0FBSzNCLFdBQVo7QUFDQSxXQUFPLEtBQUtGLFNBQVo7QUFDQSxXQUFPLEtBQUtELEdBQVo7QUFDSDs7QUF4RVM7O0FBMkVkK0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCbEMsT0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IF8sIHBhc2NhbENhc2UsIHNsZWVwXyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHsgRGF0YWJhc2VFcnJvciB9ID0gcmVxdWlyZSgnLi91dGlscy9FcnJvcnMnKTtcblxuY29uc3QgcmV0cnlGYWlsZWQgPSBlcnJvciA9PiBbIGZhbHNlLCBlcnJvciBdO1xuY29uc3QgcmV0cnlPSyA9IChyZXN1bHQpID0+IFsgdHJ1ZSwgcmVzdWx0IF07XG5cbmNsYXNzIERiTW9kZWwge1xuICAgIGNvbnN0cnVjdG9yKGFwcCwgY29ubmVjdG9yLCBpMThuKSB7ICAgICBcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgICAgIHRoaXMuY29ubmVjdG9yID0gY29ubmVjdG9yO1xuICAgICAgICB0aGlzLmkxOG4gPSBpMThuO1xuXG4gICAgICAgIHRoaXMuX21vZGVsQ2FjaGUgPSB7fTtcbiAgICB9XG5cbiAgICBnZXQgZHJpdmVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0b3IuZHJpdmVyO1xuICAgIH1cblxuICAgIG1vZGVsKGVudGl0eU5hbWUpIHsgICAgICAgIFxuICAgICAgICBpZiAodGhpcy5fbW9kZWxDYWNoZVtlbnRpdHlOYW1lXSkgcmV0dXJuIHRoaXMuX21vZGVsQ2FjaGVbZW50aXR5TmFtZV07XG5cbiAgICAgICAgbGV0IG1vZGVsQ2xhc3NOYW1lID0gcGFzY2FsQ2FzZShlbnRpdHlOYW1lKTtcbiAgICAgICAgaWYgKHRoaXMuX21vZGVsQ2FjaGVbbW9kZWxDbGFzc05hbWVdKSByZXR1cm4gdGhpcy5fbW9kZWxDYWNoZVttb2RlbENsYXNzTmFtZV07XG5cbiAgICAgICAgbGV0IGVudGl0eUN1c3RvbUNsYXNzRmFjdG9yeSA9IHRoaXMubG9hZEN1c3RvbU1vZGVsKG1vZGVsQ2xhc3NOYW1lKTsgXG4gICAgICAgIGxldCBlbnRpdHlDbGFzc0ZhY3RvcnkgPSB0aGlzLmxvYWRNb2RlbChtb2RlbENsYXNzTmFtZSk7XG4gICAgICAgIFxuICAgICAgICBsZXQgQmFzZUVudGl0eU1vZGVsID0gcmVxdWlyZShgLi9kcml2ZXJzLyR7dGhpcy5kcml2ZXJ9L0VudGl0eU1vZGVsYCk7IFxuICAgICAgICBpZiAoZW50aXR5Q3VzdG9tQ2xhc3NGYWN0b3J5KSB7XG4gICAgICAgICAgICBCYXNlRW50aXR5TW9kZWwgPSBlbnRpdHlDdXN0b21DbGFzc0ZhY3RvcnkoQmFzZUVudGl0eU1vZGVsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1vZGVsQ2xhc3MgPSBlbnRpdHlDbGFzc0ZhY3RvcnkoQmFzZUVudGl0eU1vZGVsKTtcbiAgICAgICAgbW9kZWxDbGFzcy5kYiA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5fbW9kZWxDYWNoZVtlbnRpdHlOYW1lXSA9IG1vZGVsQ2xhc3M7XG4gICAgICAgIGlmIChtb2RlbENsYXNzTmFtZSAhPT0gZW50aXR5TmFtZSkge1xuICAgICAgICAgICAgdGhpcy5fbW9kZWxDYWNoZVttb2RlbENsYXNzTmFtZV0gPSBtb2RlbENsYXNzO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbW9kZWxDbGFzcztcbiAgICB9XG5cbiAgICBlbnRpdGllc09mVHlwZShiYXNlRW50aXR5TmFtZSkge1xuICAgICAgICByZXR1cm4gXy5maWx0ZXIodGhpcy5lbnRpdGllcywgZW50aXR5TmFtZSA9PiB7XG4gICAgICAgICAgICBsZXQgTW9kZWwgPSB0aGlzLm1vZGVsKGVudGl0eU5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIE1vZGVsLmJhc2VDbGFzc2VzICYmIE1vZGVsLmJhc2VDbGFzc2VzLmluZGV4T2YoYmFzZUVudGl0eU5hbWUpID4gLTE7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFzeW5jIHJldHJ5Xyh0cmFuc2FjdGlvbk5hbWUsIHRyYW5zYWN0aW9uLCBtYXhSZXRyeSwgaW50ZXJ2YWwpIHtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBpZiAobWF4UmV0cnkgPT0gbnVsbCkgbWF4UmV0cnkgPSAzO1xuXG4gICAgICAgIHdoaWxlIChpKysgPCBtYXhSZXRyeSkge1xuICAgICAgICAgICAgY29uc3QgWyBmaW5pc2hlZCwgcmVzdWx0IF0gPSBhd2FpdCB0cmFuc2FjdGlvbihyZXRyeU9LLCByZXRyeUZhaWxlZCk7XG5cbiAgICAgICAgICAgIGlmIChmaW5pc2hlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpID09PSBtYXhSZXRyeSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBEYXRhYmFzZUVycm9yKGBVbmFibGUgdG8gY29tcGxldGUgZXhwZWN0ZWQgdHJhbnNhY3Rpb24gYWZ0ZXIgcmV0cmllZCAke21heFJldHJ5fSB0aW1lcy5gLCByZXN1bHQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmFwcC5sb2dFeGNlcHRpb24oJ3dhcm4nLCByZXN1bHQsIGBVbmFibGUgdG8gY29tcGxldGUgXCIke3RyYW5zYWN0aW9uTmFtZX1cIiBhbmQgd2lsbCB0cnkgJHttYXhSZXRyeS1pfSBtb3JlIHRpbWVzIGFmdGVyICR7aW50ZXJ2YWx8fDB9IG1zLmApO1xuXG4gICAgICAgICAgICBpZiAoaW50ZXJ2YWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHNsZWVwXyhpbnRlcnZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gICAgICAgIFxuICAgIH1cblxuICAgIGFzeW5jIGNsb3NlXygpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX21vZGVsQ2FjaGU7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmNvbm5lY3RvcjtcbiAgICAgICAgZGVsZXRlIHRoaXMuYXBwO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEYk1vZGVsOyJdfQ==