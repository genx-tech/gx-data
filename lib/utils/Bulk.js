"use strict";

require("source-map-support/register");

const {
  waitUntil_
} = require('rk-utils');

class Bulk {
  constructor(limit, bulkAction, total) {
    this.limit = limit;
    this.itemsTotal = total;
    this.bulkAction = bulkAction;
    this.itemsPending = 0;
    this.itemsDone = 0;
    this.itemsError = 0;
    this._buffer = [];
    this.batch = 0;
  }

  flush() {
    if (this._buffer.length > 0) {
      let bulkItems = this._buffer.concat();

      this._buffer = [];
      let l = bulkItems.length;
      this.itemsPending += l;
      Promise.resolve(this.bulkAction(bulkItems, this.batch++)).then(async () => {
        this.itemsDone += l;

        if (this.onProgress) {
          this.onProgress(this.itemsPending, this.itemsDone, this.itemsTotal);
        }
      }).catch(error => {
        this.itemsDone += l;
        this.itemsError += l;

        if (this.onError) {
          this.onError(error, this.itemsError);
        }
      });
    }
  }

  add(item) {
    this._buffer.push(item);

    if (this._buffer.length >= this.limit) {
      this.flush();
    }
  }

  async waitToEnd_(interval, maxRounds) {
    this.flush();
    return waitUntil_(() => this.itemsDone >= this.itemsPending, interval, maxRounds);
  }

}

module.exports = Bulk;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9CdWxrLmpzIl0sIm5hbWVzIjpbIndhaXRVbnRpbF8iLCJyZXF1aXJlIiwiQnVsayIsImNvbnN0cnVjdG9yIiwibGltaXQiLCJidWxrQWN0aW9uIiwidG90YWwiLCJpdGVtc1RvdGFsIiwiaXRlbXNQZW5kaW5nIiwiaXRlbXNEb25lIiwiaXRlbXNFcnJvciIsIl9idWZmZXIiLCJiYXRjaCIsImZsdXNoIiwibGVuZ3RoIiwiYnVsa0l0ZW1zIiwiY29uY2F0IiwibCIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsIm9uUHJvZ3Jlc3MiLCJjYXRjaCIsImVycm9yIiwib25FcnJvciIsImFkZCIsIml0ZW0iLCJwdXNoIiwid2FpdFRvRW5kXyIsImludGVydmFsIiwibWF4Um91bmRzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFpQkMsT0FBTyxDQUFDLFVBQUQsQ0FBOUI7O0FBRUEsTUFBTUMsSUFBTixDQUFXO0FBQ1BDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRQyxVQUFSLEVBQW9CQyxLQUFwQixFQUEyQjtBQUNsQyxTQUFLRixLQUFMLEdBQWFBLEtBQWI7QUFDQSxTQUFLRyxVQUFMLEdBQWtCRCxLQUFsQjtBQUNBLFNBQUtELFVBQUwsR0FBa0JBLFVBQWxCO0FBRUEsU0FBS0csWUFBTCxHQUFvQixDQUFwQjtBQUNBLFNBQUtDLFNBQUwsR0FBaUIsQ0FBakI7QUFDQSxTQUFLQyxVQUFMLEdBQWtCLENBQWxCO0FBQ0EsU0FBS0MsT0FBTCxHQUFlLEVBQWY7QUFDQSxTQUFLQyxLQUFMLEdBQWEsQ0FBYjtBQUNIOztBQUVEQyxFQUFBQSxLQUFLLEdBQUc7QUFDSixRQUFJLEtBQUtGLE9BQUwsQ0FBYUcsTUFBYixHQUFzQixDQUExQixFQUE2QjtBQUN6QixVQUFJQyxTQUFTLEdBQUcsS0FBS0osT0FBTCxDQUFhSyxNQUFiLEVBQWhCOztBQUNBLFdBQUtMLE9BQUwsR0FBZSxFQUFmO0FBRUEsVUFBSU0sQ0FBQyxHQUFHRixTQUFTLENBQUNELE1BQWxCO0FBQ0EsV0FBS04sWUFBTCxJQUFxQlMsQ0FBckI7QUFFQUMsTUFBQUEsT0FBTyxDQUFDQyxPQUFSLENBQWdCLEtBQUtkLFVBQUwsQ0FBZ0JVLFNBQWhCLEVBQTJCLEtBQUtILEtBQUwsRUFBM0IsQ0FBaEIsRUFBMERRLElBQTFELENBQStELFlBQVk7QUFDdkUsYUFBS1gsU0FBTCxJQUFrQlEsQ0FBbEI7O0FBRUEsWUFBSSxLQUFLSSxVQUFULEVBQXFCO0FBQ2pCLGVBQUtBLFVBQUwsQ0FBZ0IsS0FBS2IsWUFBckIsRUFBbUMsS0FBS0MsU0FBeEMsRUFBbUQsS0FBS0YsVUFBeEQ7QUFDSDtBQUNKLE9BTkQsRUFNR2UsS0FOSCxDQU1TQyxLQUFLLElBQUk7QUFDZCxhQUFLZCxTQUFMLElBQWtCUSxDQUFsQjtBQUNBLGFBQUtQLFVBQUwsSUFBbUJPLENBQW5COztBQUVBLFlBQUksS0FBS08sT0FBVCxFQUFrQjtBQUNkLGVBQUtBLE9BQUwsQ0FBYUQsS0FBYixFQUFvQixLQUFLYixVQUF6QjtBQUNIO0FBQ0osT0FiRDtBQWNIO0FBQ0o7O0FBRURlLEVBQUFBLEdBQUcsQ0FBQ0MsSUFBRCxFQUFPO0FBQ04sU0FBS2YsT0FBTCxDQUFhZ0IsSUFBYixDQUFrQkQsSUFBbEI7O0FBRUEsUUFBSSxLQUFLZixPQUFMLENBQWFHLE1BQWIsSUFBdUIsS0FBS1YsS0FBaEMsRUFBdUM7QUFDbkMsV0FBS1MsS0FBTDtBQUNIO0FBQ0o7O0FBRUQsUUFBTWUsVUFBTixDQUFpQkMsUUFBakIsRUFBMkJDLFNBQTNCLEVBQXNDO0FBQ2xDLFNBQUtqQixLQUFMO0FBQ0EsV0FBT2IsVUFBVSxDQUFDLE1BQU0sS0FBS1MsU0FBTCxJQUFrQixLQUFLRCxZQUE5QixFQUE0Q3FCLFFBQTVDLEVBQXNEQyxTQUF0RCxDQUFqQjtBQUNIOztBQWpETTs7QUFvRFhDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjlCLElBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyB3YWl0VW50aWxfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuXG5jbGFzcyBCdWxrIHtcbiAgICBjb25zdHJ1Y3RvcihsaW1pdCwgYnVsa0FjdGlvbiwgdG90YWwpIHtcbiAgICAgICAgdGhpcy5saW1pdCA9IGxpbWl0OyBcbiAgICAgICAgdGhpcy5pdGVtc1RvdGFsID0gdG90YWw7XG4gICAgICAgIHRoaXMuYnVsa0FjdGlvbiA9IGJ1bGtBY3Rpb247XG5cbiAgICAgICAgdGhpcy5pdGVtc1BlbmRpbmcgPSAwO1xuICAgICAgICB0aGlzLml0ZW1zRG9uZSA9IDA7XG4gICAgICAgIHRoaXMuaXRlbXNFcnJvciA9IDA7XG4gICAgICAgIHRoaXMuX2J1ZmZlciA9IFtdOyAgXG4gICAgICAgIHRoaXMuYmF0Y2ggPSAwOyAgICAgICAgICAgIFxuICAgIH1cblxuICAgIGZsdXNoKCkgeyAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLl9idWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IGJ1bGtJdGVtcyA9IHRoaXMuX2J1ZmZlci5jb25jYXQoKTtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlciA9IFtdO1xuXG4gICAgICAgICAgICBsZXQgbCA9IGJ1bGtJdGVtcy5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLml0ZW1zUGVuZGluZyArPSBsO1xuXG4gICAgICAgICAgICBQcm9taXNlLnJlc29sdmUodGhpcy5idWxrQWN0aW9uKGJ1bGtJdGVtcywgdGhpcy5iYXRjaCsrKSkudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtc0RvbmUgKz0gbDtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vblByb2dyZXNzKHRoaXMuaXRlbXNQZW5kaW5nLCB0aGlzLml0ZW1zRG9uZSwgdGhpcy5pdGVtc1RvdGFsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtc0RvbmUgKz0gbDtcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zRXJyb3IgKz0gbDtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKGVycm9yLCB0aGlzLml0ZW1zRXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkKGl0ZW0pIHtcbiAgICAgICAgdGhpcy5fYnVmZmVyLnB1c2goaXRlbSk7XG5cbiAgICAgICAgaWYgKHRoaXMuX2J1ZmZlci5sZW5ndGggPj0gdGhpcy5saW1pdCkge1xuICAgICAgICAgICAgdGhpcy5mbHVzaCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgd2FpdFRvRW5kXyhpbnRlcnZhbCwgbWF4Um91bmRzKSB7XG4gICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgICAgcmV0dXJuIHdhaXRVbnRpbF8oKCkgPT4gdGhpcy5pdGVtc0RvbmUgPj0gdGhpcy5pdGVtc1BlbmRpbmcsIGludGVydmFsLCBtYXhSb3VuZHMpO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCdWxrOyJdfQ==