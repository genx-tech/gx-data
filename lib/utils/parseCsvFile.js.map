{"version":3,"sources":["../../src/utils/parseCsvFile.js"],"names":["fs","tryRequire","require","module","exports","csvFile","options","transformer","csv","readStream","createReadStream","parser","parse","headers","trim","transformWithCallback","output","line","data","callback","then","result","catch","error","Promise","resolve","reject","pipe","on","record","push","transform","row"],"mappings":";;;;AAAA,MAAM;AAAEA,EAAAA,EAAF;AAAMC,EAAAA;AAAN,IAAqBC,OAAO,CAAC,WAAD,CAAlC;;AAEAC,MAAM,CAACC,OAAP,GAAiB,OAAOC,OAAP,EAAgBC,OAAhB,EAAyBC,WAAzB,KAAyC;AACtD,QAAMC,GAAG,GAAGP,UAAU,CAAC,UAAD,CAAtB;AAEA,QAAMQ,UAAU,GAAGT,EAAE,CAACU,gBAAH,CAAoBL,OAApB,CAAnB;AACA,QAAMM,MAAM,GAAGH,GAAG,CAACI,KAAJ,CAAU;AACrBC,IAAAA,OAAO,EAAE,IADY;AAErBC,IAAAA,IAAI,EAAE,IAFe;AAGrB,OAAGR;AAHkB,GAAV,CAAf;AAMA,MAAIS,qBAAJ,EAA2BC,MAA3B;;AAEA,MAAIT,WAAJ,EAAiB;AACb,QAAIU,IAAI,GAAG,CAAX;;AACAF,IAAAA,qBAAqB,GAAG,CAACG,IAAD,EAAOC,QAAP,KACpBZ,WAAW,CAACW,IAAD,EAAOD,IAAI,EAAX,CAAX,CACKG,IADL,CACWC,MAAD,IAAYF,QAAQ,CAAC,IAAD,EAAOE,MAAP,CAD9B,EAEKC,KAFL,CAEYC,KAAD,IAAWJ,QAAQ,CAACI,KAAD,CAF9B,CADJ;AAIH,GAND,MAMO;AACHP,IAAAA,MAAM,GAAG,EAAT;AACH;;AAED,SAAO,IAAIQ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAI,CAACX,qBAAL,EAA4B;AACxBN,MAAAA,UAAU,CAACkB,IAAX,CACIhB,MAAM,CACDiB,EADL,CACQ,OADR,EACiBF,MADjB,EAEKE,EAFL,CAEQ,MAFR,EAEiBC,MAAD,IAAYb,MAAM,CAACc,IAAP,CAAYD,MAAZ,CAF5B,EAGKD,EAHL,CAGQ,KAHR,EAGe,MAAMH,OAAO,CAACT,MAAD,CAH5B,CADJ;AAMH,KAPD,MAOO;AACHP,MAAAA,UAAU,CAACkB,IAAX,CACIhB,MAAM,CACDoB,SADL,CACehB,qBADf,EAEKa,EAFL,CAEQ,OAFR,EAEiBF,MAFjB,EAGKE,EAHL,CAGQ,MAHR,EAGiBI,GAAD,IAAS,CAAE,CAH3B,EAIKJ,EAJL,CAIQ,KAJR,EAIe,MAAMH,OAAO,EAJ5B,CADJ;AAOH;AACJ,GAjBM,CAAP;AAkBH,CAxCD","sourcesContent":["const { fs, tryRequire } = require('@genx/sys');\n\nmodule.exports = async (csvFile, options, transformer) => {\n    const csv = tryRequire('fast-csv');\n\n    const readStream = fs.createReadStream(csvFile);\n    const parser = csv.parse({\n        headers: true,\n        trim: true,\n        ...options,\n    });\n\n    let transformWithCallback, output;\n\n    if (transformer) {\n        let line = 0;\n        transformWithCallback = (data, callback) =>\n            transformer(data, line++)\n                .then((result) => callback(null, result))\n                .catch((error) => callback(error));\n    } else {\n        output = [];\n    }\n\n    return new Promise((resolve, reject) => {\n        if (!transformWithCallback) {\n            readStream.pipe(\n                parser\n                    .on('error', reject)\n                    .on('data', (record) => output.push(record))\n                    .on('end', () => resolve(output))\n            );\n        } else {\n            readStream.pipe(\n                parser\n                    .transform(transformWithCallback)\n                    .on('error', reject)\n                    .on('data', (row) => {})\n                    .on('end', () => resolve())\n            );\n        }\n    });\n};\n"],"file":"parseCsvFile.js"}