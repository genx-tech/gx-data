"use strict";

require("source-map-support/register");

const {
  fs,
  Promise
} = require('rk-utils');

const {
  tryRequire
} = require('./lib');

module.exports = async (csvFile, options, transformer) => {
  const parse = tryRequire('csv-parse');
  const readStream = fs.createReadStream(csvFile);
  const parser = parse({
    columns: true,
    ...options
  });
  let transformSteam, output;

  if (transformer) {
    const transform = tryRequire('stream-transform');
    let line = 0;
    transformSteam = transform((data, callback) => {
      transformer(data, line++).then(result => callback(null, result)).catch(error => callback(error));
    }, {
      parallel: 1
    });
  } else {
    output = [];
  }

  return new Promise((resolve, reject) => {
    parser.on('error', reject);

    if (!transformSteam) {
      parser.on('readable', () => {
        let record;

        while (record = parser.read()) {
          output.push(record);
        }
      });
      parser.on('end', () => resolve(output));
      readStream.pipe(parser);
    } else {
      transformSteam.on('error', reject);
      transformSteam.on('finish', resolve);
      readStream.pipe(parser).pipe(transformSteam);
    }
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9wYXJzZUNzdkZpbGUuanMiXSwibmFtZXMiOlsiZnMiLCJQcm9taXNlIiwicmVxdWlyZSIsInRyeVJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY3N2RmlsZSIsIm9wdGlvbnMiLCJ0cmFuc2Zvcm1lciIsInBhcnNlIiwicmVhZFN0cmVhbSIsImNyZWF0ZVJlYWRTdHJlYW0iLCJwYXJzZXIiLCJjb2x1bW5zIiwidHJhbnNmb3JtU3RlYW0iLCJvdXRwdXQiLCJ0cmFuc2Zvcm0iLCJsaW5lIiwiZGF0YSIsImNhbGxiYWNrIiwidGhlbiIsInJlc3VsdCIsImNhdGNoIiwiZXJyb3IiLCJwYXJhbGxlbCIsInJlc29sdmUiLCJyZWplY3QiLCJvbiIsInJlY29yZCIsInJlYWQiLCJwdXNoIiwicGlwZSJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU07QUFBRUEsRUFBQUEsRUFBRjtBQUFNQyxFQUFBQTtBQUFOLElBQWtCQyxPQUFPLENBQUMsVUFBRCxDQUEvQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBaUJELE9BQU8sQ0FBQyxPQUFELENBQTlCOztBQUVBRSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsT0FBT0MsT0FBUCxFQUFnQkMsT0FBaEIsRUFBeUJDLFdBQXpCLEtBQXlDO0FBQ3RELFFBQU1DLEtBQUssR0FBR04sVUFBVSxDQUFDLFdBQUQsQ0FBeEI7QUFFQSxRQUFNTyxVQUFVLEdBQUdWLEVBQUUsQ0FBQ1csZ0JBQUgsQ0FBb0JMLE9BQXBCLENBQW5CO0FBQ0EsUUFBTU0sTUFBTSxHQUFHSCxLQUFLLENBQUM7QUFDakJJLElBQUFBLE9BQU8sRUFBRSxJQURRO0FBRWpCLE9BQUdOO0FBRmMsR0FBRCxDQUFwQjtBQUtBLE1BQUlPLGNBQUosRUFBb0JDLE1BQXBCOztBQUVBLE1BQUlQLFdBQUosRUFBaUI7QUFDYixVQUFNUSxTQUFTLEdBQUdiLFVBQVUsQ0FBQyxrQkFBRCxDQUE1QjtBQUNBLFFBQUljLElBQUksR0FBRyxDQUFYO0FBRUFILElBQUFBLGNBQWMsR0FBR0UsU0FBUyxDQUFDLENBQUNFLElBQUQsRUFBT0MsUUFBUCxLQUFvQjtBQUMzQ1gsTUFBQUEsV0FBVyxDQUFDVSxJQUFELEVBQU9ELElBQUksRUFBWCxDQUFYLENBQTBCRyxJQUExQixDQUErQkMsTUFBTSxJQUFJRixRQUFRLENBQUMsSUFBRCxFQUFPRSxNQUFQLENBQWpELEVBQWlFQyxLQUFqRSxDQUF1RUMsS0FBSyxJQUFJSixRQUFRLENBQUNJLEtBQUQsQ0FBeEY7QUFDSCxLQUZ5QixFQUV2QjtBQUNDQyxNQUFBQSxRQUFRLEVBQUU7QUFEWCxLQUZ1QixDQUExQjtBQUtILEdBVEQsTUFTTztBQUNIVCxJQUFBQSxNQUFNLEdBQUcsRUFBVDtBQUNIOztBQUVELFNBQU8sSUFBSWQsT0FBSixDQUFZLENBQUN3QixPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFFcENkLElBQUFBLE1BQU0sQ0FBQ2UsRUFBUCxDQUFVLE9BQVYsRUFBbUJELE1BQW5COztBQUVBLFFBQUksQ0FBQ1osY0FBTCxFQUFxQjtBQUNqQkYsTUFBQUEsTUFBTSxDQUFDZSxFQUFQLENBQVUsVUFBVixFQUFzQixNQUFNO0FBQ3hCLFlBQUlDLE1BQUo7O0FBRUEsZUFBT0EsTUFBTSxHQUFHaEIsTUFBTSxDQUFDaUIsSUFBUCxFQUFoQixFQUErQjtBQUMzQmQsVUFBQUEsTUFBTSxDQUFDZSxJQUFQLENBQVlGLE1BQVo7QUFDSDtBQUNKLE9BTkQ7QUFTQWhCLE1BQUFBLE1BQU0sQ0FBQ2UsRUFBUCxDQUFVLEtBQVYsRUFBaUIsTUFBTUYsT0FBTyxDQUFDVixNQUFELENBQTlCO0FBRUFMLE1BQUFBLFVBQVUsQ0FBQ3FCLElBQVgsQ0FBZ0JuQixNQUFoQjtBQUNILEtBYkQsTUFhTztBQUNIRSxNQUFBQSxjQUFjLENBQUNhLEVBQWYsQ0FBa0IsT0FBbEIsRUFBMkJELE1BQTNCO0FBQ0FaLE1BQUFBLGNBQWMsQ0FBQ2EsRUFBZixDQUFrQixRQUFsQixFQUE0QkYsT0FBNUI7QUFFQWYsTUFBQUEsVUFBVSxDQUFDcUIsSUFBWCxDQUFnQm5CLE1BQWhCLEVBQXdCbUIsSUFBeEIsQ0FBNkJqQixjQUE3QjtBQUNIO0FBQ0osR0F2Qk0sQ0FBUDtBQXdCSCxDQWhERCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgZnMsIFByb21pc2UgfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IHRyeVJlcXVpcmUgfSA9IHJlcXVpcmUoJy4vbGliJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgKGNzdkZpbGUsIG9wdGlvbnMsIHRyYW5zZm9ybWVyKSA9PiB7XG4gICAgY29uc3QgcGFyc2UgPSB0cnlSZXF1aXJlKCdjc3YtcGFyc2UnKTsgICAgXG5cbiAgICBjb25zdCByZWFkU3RyZWFtID0gZnMuY3JlYXRlUmVhZFN0cmVhbShjc3ZGaWxlKTtcbiAgICBjb25zdCBwYXJzZXIgPSBwYXJzZSh7XG4gICAgICAgIGNvbHVtbnM6IHRydWUsXG4gICAgICAgIC4uLm9wdGlvbnNcbiAgICB9KTtcblxuICAgIGxldCB0cmFuc2Zvcm1TdGVhbSwgb3V0cHV0O1xuXG4gICAgaWYgKHRyYW5zZm9ybWVyKSB7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IHRyeVJlcXVpcmUoJ3N0cmVhbS10cmFuc2Zvcm0nKTtcbiAgICAgICAgbGV0IGxpbmUgPSAwO1xuXG4gICAgICAgIHRyYW5zZm9ybVN0ZWFtID0gdHJhbnNmb3JtKChkYXRhLCBjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgdHJhbnNmb3JtZXIoZGF0YSwgbGluZSsrKS50aGVuKHJlc3VsdCA9PiBjYWxsYmFjayhudWxsLCByZXN1bHQpKS5jYXRjaChlcnJvciA9PiBjYWxsYmFjayhlcnJvcikpO1xuICAgICAgICB9LCB7XG4gICAgICAgICAgICBwYXJhbGxlbDogMVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXQgPSBbXTtcbiAgICB9ICAgXG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAvLyBDYXRjaCBhbnkgZXJyb3JcbiAgICAgICAgcGFyc2VyLm9uKCdlcnJvcicsIHJlamVjdCk7IFxuXG4gICAgICAgIGlmICghdHJhbnNmb3JtU3RlYW0pIHtcbiAgICAgICAgICAgIHBhcnNlci5vbigncmVhZGFibGUnLCAoKSA9PiB7ICAgXG4gICAgICAgICAgICAgICAgbGV0IHJlY29yZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgd2hpbGUgKHJlY29yZCA9IHBhcnNlci5yZWFkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2gocmVjb3JkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgZG9uZSwgdGVzdCB0aGF0IHRoZSBwYXJzZWQgb3V0cHV0IG1hdGNoZWQgd2hhdCBleHBlY3RlZFxuICAgICAgICAgICAgcGFyc2VyLm9uKCdlbmQnLCAoKSA9PiByZXNvbHZlKG91dHB1dCkpO1xuXG4gICAgICAgICAgICByZWFkU3RyZWFtLnBpcGUocGFyc2VyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybVN0ZWFtLm9uKCdlcnJvcicsIHJlamVjdCk7XG4gICAgICAgICAgICB0cmFuc2Zvcm1TdGVhbS5vbignZmluaXNoJywgcmVzb2x2ZSk7XG5cbiAgICAgICAgICAgIHJlYWRTdHJlYW0ucGlwZShwYXJzZXIpLnBpcGUodHJhbnNmb3JtU3RlYW0pO1xuICAgICAgICB9ICAgICBcbiAgICB9KTsgICAgXG59O1xuICAgICJdfQ==