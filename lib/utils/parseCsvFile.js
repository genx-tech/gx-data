"use strict";

require("source-map-support/register");

const {
  fs,
  Promise
} = require('rk-utils');

const {
  tryRequire
} = require('./lib');

module.exports = async (csvFile, options, transformer) => {
  const csv = tryRequire('fast-csv');
  const readStream = fs.createReadStream(csvFile);
  const parser = csv.parse({
    headers: true,
    trim: true,
    ...options
  });
  let transformWithCallback, output;

  if (transformer) {
    let line = 0;

    transformWithCallback = (data, callback) => transformer(data, line++).then(result => callback(null, result)).catch(error => callback(error));
  } else {
    output = [];
  }

  return new Promise((resolve, reject) => {
    if (!transformWithCallback) {
      readStream.pipe(parser.on('error', reject).on('data', record => output.push(record)).on('end', () => resolve(output)));
    } else {
      readStream.pipe(parser.transform(transformWithCallback).on('error', reject).on('data', row => {}).on('end', () => resolve()));
    }
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9wYXJzZUNzdkZpbGUuanMiXSwibmFtZXMiOlsiZnMiLCJQcm9taXNlIiwicmVxdWlyZSIsInRyeVJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY3N2RmlsZSIsIm9wdGlvbnMiLCJ0cmFuc2Zvcm1lciIsImNzdiIsInJlYWRTdHJlYW0iLCJjcmVhdGVSZWFkU3RyZWFtIiwicGFyc2VyIiwicGFyc2UiLCJoZWFkZXJzIiwidHJpbSIsInRyYW5zZm9ybVdpdGhDYWxsYmFjayIsIm91dHB1dCIsImxpbmUiLCJkYXRhIiwiY2FsbGJhY2siLCJ0aGVuIiwicmVzdWx0IiwiY2F0Y2giLCJlcnJvciIsInJlc29sdmUiLCJyZWplY3QiLCJwaXBlIiwib24iLCJyZWNvcmQiLCJwdXNoIiwidHJhbnNmb3JtIiwicm93Il0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQSxFQUFGO0FBQU1DLEVBQUFBO0FBQU4sSUFBa0JDLE9BQU8sQ0FBQyxVQUFELENBQS9COztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFpQkQsT0FBTyxDQUFDLE9BQUQsQ0FBOUI7O0FBRUFFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixPQUFPQyxPQUFQLEVBQWdCQyxPQUFoQixFQUF5QkMsV0FBekIsS0FBeUM7QUFDdEQsUUFBTUMsR0FBRyxHQUFHTixVQUFVLENBQUMsVUFBRCxDQUF0QjtBQUVBLFFBQU1PLFVBQVUsR0FBR1YsRUFBRSxDQUFDVyxnQkFBSCxDQUFvQkwsT0FBcEIsQ0FBbkI7QUFDQSxRQUFNTSxNQUFNLEdBQUdILEdBQUcsQ0FBQ0ksS0FBSixDQUFVO0FBQ3JCQyxJQUFBQSxPQUFPLEVBQUUsSUFEWTtBQUVyQkMsSUFBQUEsSUFBSSxFQUFFLElBRmU7QUFHckIsT0FBR1I7QUFIa0IsR0FBVixDQUFmO0FBTUEsTUFBSVMscUJBQUosRUFBMkJDLE1BQTNCOztBQUVBLE1BQUlULFdBQUosRUFBaUI7QUFDYixRQUFJVSxJQUFJLEdBQUcsQ0FBWDs7QUFDQUYsSUFBQUEscUJBQXFCLEdBQUcsQ0FBQ0csSUFBRCxFQUFPQyxRQUFQLEtBQW9CWixXQUFXLENBQUNXLElBQUQsRUFBT0QsSUFBSSxFQUFYLENBQVgsQ0FBMEJHLElBQTFCLENBQStCQyxNQUFNLElBQUlGLFFBQVEsQ0FBQyxJQUFELEVBQU9FLE1BQVAsQ0FBakQsRUFBaUVDLEtBQWpFLENBQXVFQyxLQUFLLElBQUlKLFFBQVEsQ0FBQ0ksS0FBRCxDQUF4RixDQUE1QztBQUNILEdBSEQsTUFHTztBQUNIUCxJQUFBQSxNQUFNLEdBQUcsRUFBVDtBQUNIOztBQUVELFNBQU8sSUFBSWhCLE9BQUosQ0FBWSxDQUFDd0IsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3BDLFFBQUksQ0FBQ1YscUJBQUwsRUFBNEI7QUFDeEJOLE1BQUFBLFVBQVUsQ0FBQ2lCLElBQVgsQ0FBZ0JmLE1BQU0sQ0FBQ2dCLEVBQVAsQ0FBVSxPQUFWLEVBQW1CRixNQUFuQixFQUEyQkUsRUFBM0IsQ0FBOEIsTUFBOUIsRUFBdUNDLE1BQUQsSUFBWVosTUFBTSxDQUFDYSxJQUFQLENBQVlELE1BQVosQ0FBbEQsRUFBdUVELEVBQXZFLENBQTBFLEtBQTFFLEVBQWlGLE1BQU1ILE9BQU8sQ0FBQ1IsTUFBRCxDQUE5RixDQUFoQjtBQUNILEtBRkQsTUFFTztBQUNIUCxNQUFBQSxVQUFVLENBQUNpQixJQUFYLENBQWdCZixNQUFNLENBQUNtQixTQUFQLENBQWlCZixxQkFBakIsRUFBd0NZLEVBQXhDLENBQTJDLE9BQTNDLEVBQW9ERixNQUFwRCxFQUE0REUsRUFBNUQsQ0FBK0QsTUFBL0QsRUFBdUVJLEdBQUcsSUFBSSxDQUFFLENBQWhGLEVBQWtGSixFQUFsRixDQUFxRixLQUFyRixFQUE0RixNQUFNSCxPQUFPLEVBQXpHLENBQWhCO0FBQ0g7QUFDSixHQU5NLENBQVA7QUFPSCxDQTFCRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgZnMsIFByb21pc2UgfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IHRyeVJlcXVpcmUgfSA9IHJlcXVpcmUoJy4vbGliJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgKGNzdkZpbGUsIG9wdGlvbnMsIHRyYW5zZm9ybWVyKSA9PiB7XG4gICAgY29uc3QgY3N2ID0gdHJ5UmVxdWlyZSgnZmFzdC1jc3YnKTsgICAgXG5cbiAgICBjb25zdCByZWFkU3RyZWFtID0gZnMuY3JlYXRlUmVhZFN0cmVhbShjc3ZGaWxlKTtcbiAgICBjb25zdCBwYXJzZXIgPSBjc3YucGFyc2Uoe1xuICAgICAgICBoZWFkZXJzOiB0cnVlLFxuICAgICAgICB0cmltOiB0cnVlLFxuICAgICAgICAuLi5vcHRpb25zXG4gICAgfSk7XG5cbiAgICBsZXQgdHJhbnNmb3JtV2l0aENhbGxiYWNrLCBvdXRwdXQ7XG5cbiAgICBpZiAodHJhbnNmb3JtZXIpIHtcbiAgICAgICAgbGV0IGxpbmUgPSAwO1xuICAgICAgICB0cmFuc2Zvcm1XaXRoQ2FsbGJhY2sgPSAoZGF0YSwgY2FsbGJhY2spID0+IHRyYW5zZm9ybWVyKGRhdGEsIGxpbmUrKykudGhlbihyZXN1bHQgPT4gY2FsbGJhY2sobnVsbCwgcmVzdWx0KSkuY2F0Y2goZXJyb3IgPT4gY2FsbGJhY2soZXJyb3IpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXQgPSBbXTtcbiAgICB9ICAgXG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4geyAgICAgICAgXG4gICAgICAgIGlmICghdHJhbnNmb3JtV2l0aENhbGxiYWNrKSB7XG4gICAgICAgICAgICByZWFkU3RyZWFtLnBpcGUocGFyc2VyLm9uKCdlcnJvcicsIHJlamVjdCkub24oJ2RhdGEnLCAocmVjb3JkKSA9PiBvdXRwdXQucHVzaChyZWNvcmQpKS5vbignZW5kJywgKCkgPT4gcmVzb2x2ZShvdXRwdXQpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWFkU3RyZWFtLnBpcGUocGFyc2VyLnRyYW5zZm9ybSh0cmFuc2Zvcm1XaXRoQ2FsbGJhY2spLm9uKCdlcnJvcicsIHJlamVjdCkub24oJ2RhdGEnLCByb3cgPT4ge30pLm9uKCdlbmQnLCAoKSA9PiByZXNvbHZlKCkpKTtcbiAgICAgICAgfSAgICAgXG4gICAgfSk7ICAgIFxufTtcbiAgICAiXX0=