"use strict";

require("source-map-support/register");

const {
  fs,
  Promise
} = require('rk-utils');

const {
  tryRequire
} = require('./lib');

module.exports = async (csvFile, options, transformer) => {
  const parse = tryRequire('csv-parse');
  const readStream = fs.createReadStream(csvFile);
  const parser = parse({
    columns: true,
    ...options
  });
  let transformSteam, output;

  if (transformer) {
    const transform = tryRequire('stream-transform');
    transformSteam = transform((data, callback) => {
      transformer(data).then(result => callback(null, result)).catch(error => callback(error));
    });
  } else {
    output = [];
  }

  return new Promise((resolve, reject) => {
    if (!transformSteam) {
      parser.on('readable', record => {
        output.push(record);
      });
      parser.on('end', () => resolve(output));
    } else {
      transformSteam.on('error', reject);
      transformSteam.on('finish', resolve);
    }

    parser.on('error', reject);

    if (transformSteam) {
      readStream.pipe(parser).pipe(transformSteam);
    } else {
      readStream.pipe(parser);
    }
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9wYXJzZUNzdkZpbGUuanMiXSwibmFtZXMiOlsiZnMiLCJQcm9taXNlIiwicmVxdWlyZSIsInRyeVJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY3N2RmlsZSIsIm9wdGlvbnMiLCJ0cmFuc2Zvcm1lciIsInBhcnNlIiwicmVhZFN0cmVhbSIsImNyZWF0ZVJlYWRTdHJlYW0iLCJwYXJzZXIiLCJjb2x1bW5zIiwidHJhbnNmb3JtU3RlYW0iLCJvdXRwdXQiLCJ0cmFuc2Zvcm0iLCJkYXRhIiwiY2FsbGJhY2siLCJ0aGVuIiwicmVzdWx0IiwiY2F0Y2giLCJlcnJvciIsInJlc29sdmUiLCJyZWplY3QiLCJvbiIsInJlY29yZCIsInB1c2giLCJwaXBlIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQSxFQUFGO0FBQU1DLEVBQUFBO0FBQU4sSUFBa0JDLE9BQU8sQ0FBQyxVQUFELENBQS9COztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFpQkQsT0FBTyxDQUFDLE9BQUQsQ0FBOUI7O0FBRUFFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixPQUFPQyxPQUFQLEVBQWdCQyxPQUFoQixFQUF5QkMsV0FBekIsS0FBeUM7QUFDdEQsUUFBTUMsS0FBSyxHQUFHTixVQUFVLENBQUMsV0FBRCxDQUF4QjtBQUVBLFFBQU1PLFVBQVUsR0FBR1YsRUFBRSxDQUFDVyxnQkFBSCxDQUFvQkwsT0FBcEIsQ0FBbkI7QUFDQSxRQUFNTSxNQUFNLEdBQUdILEtBQUssQ0FBQztBQUNqQkksSUFBQUEsT0FBTyxFQUFFLElBRFE7QUFFakIsT0FBR047QUFGYyxHQUFELENBQXBCO0FBS0EsTUFBSU8sY0FBSixFQUFvQkMsTUFBcEI7O0FBRUEsTUFBSVAsV0FBSixFQUFpQjtBQUNiLFVBQU1RLFNBQVMsR0FBR2IsVUFBVSxDQUFDLGtCQUFELENBQTVCO0FBRUFXLElBQUFBLGNBQWMsR0FBR0UsU0FBUyxDQUFDLENBQUNDLElBQUQsRUFBT0MsUUFBUCxLQUFvQjtBQUMzQ1YsTUFBQUEsV0FBVyxDQUFDUyxJQUFELENBQVgsQ0FBa0JFLElBQWxCLENBQXVCQyxNQUFNLElBQUlGLFFBQVEsQ0FBQyxJQUFELEVBQU9FLE1BQVAsQ0FBekMsRUFBeURDLEtBQXpELENBQStEQyxLQUFLLElBQUlKLFFBQVEsQ0FBQ0ksS0FBRCxDQUFoRjtBQUNILEtBRnlCLENBQTFCO0FBR0gsR0FORCxNQU1PO0FBQ0hQLElBQUFBLE1BQU0sR0FBRyxFQUFUO0FBQ0g7O0FBRUQsU0FBTyxJQUFJZCxPQUFKLENBQVksQ0FBQ3NCLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUNwQyxRQUFJLENBQUNWLGNBQUwsRUFBcUI7QUFDakJGLE1BQUFBLE1BQU0sQ0FBQ2EsRUFBUCxDQUFVLFVBQVYsRUFBdUJDLE1BQUQsSUFBWTtBQUFFWCxRQUFBQSxNQUFNLENBQUNZLElBQVAsQ0FBWUQsTUFBWjtBQUFzQixPQUExRDtBQUdBZCxNQUFBQSxNQUFNLENBQUNhLEVBQVAsQ0FBVSxLQUFWLEVBQWlCLE1BQU1GLE9BQU8sQ0FBQ1IsTUFBRCxDQUE5QjtBQUNILEtBTEQsTUFLTztBQUNIRCxNQUFBQSxjQUFjLENBQUNXLEVBQWYsQ0FBa0IsT0FBbEIsRUFBMkJELE1BQTNCO0FBQ0FWLE1BQUFBLGNBQWMsQ0FBQ1csRUFBZixDQUFrQixRQUFsQixFQUE0QkYsT0FBNUI7QUFDSDs7QUFHRFgsSUFBQUEsTUFBTSxDQUFDYSxFQUFQLENBQVUsT0FBVixFQUFtQkQsTUFBbkI7O0FBRUEsUUFBSVYsY0FBSixFQUFvQjtBQUNoQkosTUFBQUEsVUFBVSxDQUFDa0IsSUFBWCxDQUFnQmhCLE1BQWhCLEVBQXdCZ0IsSUFBeEIsQ0FBNkJkLGNBQTdCO0FBQ0gsS0FGRCxNQUVPO0FBQ0hKLE1BQUFBLFVBQVUsQ0FBQ2tCLElBQVgsQ0FBZ0JoQixNQUFoQjtBQUNIO0FBQ0osR0FuQk0sQ0FBUDtBQW9CSCxDQXpDRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgZnMsIFByb21pc2UgfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IHRyeVJlcXVpcmUgfSA9IHJlcXVpcmUoJy4vbGliJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgKGNzdkZpbGUsIG9wdGlvbnMsIHRyYW5zZm9ybWVyKSA9PiB7XG4gICAgY29uc3QgcGFyc2UgPSB0cnlSZXF1aXJlKCdjc3YtcGFyc2UnKTsgICAgXG5cbiAgICBjb25zdCByZWFkU3RyZWFtID0gZnMuY3JlYXRlUmVhZFN0cmVhbShjc3ZGaWxlKTtcbiAgICBjb25zdCBwYXJzZXIgPSBwYXJzZSh7XG4gICAgICAgIGNvbHVtbnM6IHRydWUsXG4gICAgICAgIC4uLm9wdGlvbnNcbiAgICB9KTtcblxuICAgIGxldCB0cmFuc2Zvcm1TdGVhbSwgb3V0cHV0O1xuXG4gICAgaWYgKHRyYW5zZm9ybWVyKSB7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IHRyeVJlcXVpcmUoJ3N0cmVhbS10cmFuc2Zvcm0nKVxuXG4gICAgICAgIHRyYW5zZm9ybVN0ZWFtID0gdHJhbnNmb3JtKChkYXRhLCBjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgdHJhbnNmb3JtZXIoZGF0YSkudGhlbihyZXN1bHQgPT4gY2FsbGJhY2sobnVsbCwgcmVzdWx0KSkuY2F0Y2goZXJyb3IgPT4gY2FsbGJhY2soZXJyb3IpKTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0ID0gW107XG4gICAgfSAgIFxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgaWYgKCF0cmFuc2Zvcm1TdGVhbSkge1xuICAgICAgICAgICAgcGFyc2VyLm9uKCdyZWFkYWJsZScsIChyZWNvcmQpID0+IHsgb3V0cHV0LnB1c2gocmVjb3JkKTsgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGRvbmUsIHRlc3QgdGhhdCB0aGUgcGFyc2VkIG91dHB1dCBtYXRjaGVkIHdoYXQgZXhwZWN0ZWRcbiAgICAgICAgICAgIHBhcnNlci5vbignZW5kJywgKCkgPT4gcmVzb2x2ZShvdXRwdXQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybVN0ZWFtLm9uKCdlcnJvcicsIHJlamVjdCk7XG4gICAgICAgICAgICB0cmFuc2Zvcm1TdGVhbS5vbignZmluaXNoJywgcmVzb2x2ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYXRjaCBhbnkgZXJyb3JcbiAgICAgICAgcGFyc2VyLm9uKCdlcnJvcicsIHJlamVjdCk7IFxuICAgICAgICBcbiAgICAgICAgaWYgKHRyYW5zZm9ybVN0ZWFtKSB7XG4gICAgICAgICAgICByZWFkU3RyZWFtLnBpcGUocGFyc2VyKS5waXBlKHRyYW5zZm9ybVN0ZWFtKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlYWRTdHJlYW0ucGlwZShwYXJzZXIpO1xuICAgICAgICB9ICAgICAgICBcbiAgICB9KTsgICAgXG59O1xuICAgICJdfQ==