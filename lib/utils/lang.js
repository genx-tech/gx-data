"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const SupportedDrivers = ['mysql', 'mongodb', 'rabbitmq'];
const JsPrimitiveTypes = new Set(['number', 'boolean', 'string', 'symbol', 'undefined']);

function mergeCondition(condition1, condition2, operator = '$and') {
  if (_.isEmpty(condition1)) {
    return condition2;
  }

  if (_.isEmpty(condition2)) {
    return condition1;
  }

  return {
    [operator]: [condition1, condition2]
  };
}

exports.isNothing = v => _.isNil(v) || _.isNaN(v);

exports.isPrimitive = v => JsPrimitiveTypes.has(typeof v);

exports.isQuoted = s => (s.startsWith("'") || s.startsWith('"')) && s[0] === s[s.length - 1];

exports.isQuotedWith = (s, q) => s.startsWith(q) && s[0] === s[s.length - 1];

exports.makeDataSourceName = (driver, schema) => driver + '.' + schema;

exports.extractDriverAndConnectorName = id => id.split('.');

exports.mergeCondition = mergeCondition;
exports.SupportedDrivers = Object.freeze(SupportedDrivers);

exports.$col = name => ({
  oorType: 'ColumnReference',
  name
});

exports.$expr = (left, op, right) => ({
  oorType: 'BinaryExpression',
  left,
  op,
  right
});

exports.$f = (name, ...args) => ({
  oorType: 'Function',
  name,
  args
});

exports.hasValueIn = (arrayOfColl, key) => _.find(arrayOfColl, coll => coll[key] != null);

exports.getValueFrom = (arrayOfColl, key) => {
  const l = arrayOfColl.length;

  for (let i = 0; i < l; i++) {
    const coll = arrayOfColl[i];
    const value = coll && coll[key];
    if (value != null) return value;
  }

  return undefined;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9sYW5nLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiU3VwcG9ydGVkRHJpdmVycyIsIkpzUHJpbWl0aXZlVHlwZXMiLCJTZXQiLCJtZXJnZUNvbmRpdGlvbiIsImNvbmRpdGlvbjEiLCJjb25kaXRpb24yIiwib3BlcmF0b3IiLCJpc0VtcHR5IiwiZXhwb3J0cyIsImlzTm90aGluZyIsInYiLCJpc05pbCIsImlzTmFOIiwiaXNQcmltaXRpdmUiLCJoYXMiLCJpc1F1b3RlZCIsInMiLCJzdGFydHNXaXRoIiwibGVuZ3RoIiwiaXNRdW90ZWRXaXRoIiwicSIsIm1ha2VEYXRhU291cmNlTmFtZSIsImRyaXZlciIsInNjaGVtYSIsImV4dHJhY3REcml2ZXJBbmRDb25uZWN0b3JOYW1lIiwiaWQiLCJzcGxpdCIsIk9iamVjdCIsImZyZWV6ZSIsIiRjb2wiLCJuYW1lIiwib29yVHlwZSIsIiRleHByIiwibGVmdCIsIm9wIiwicmlnaHQiLCIkZiIsImFyZ3MiLCJoYXNWYWx1ZUluIiwiYXJyYXlPZkNvbGwiLCJrZXkiLCJmaW5kIiwiY29sbCIsImdldFZhbHVlRnJvbSIsImwiLCJpIiwidmFsdWUiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVFDLE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUVBLE1BQU1DLGdCQUFnQixHQUFHLENBQUUsT0FBRixFQUFXLFNBQVgsRUFBc0IsVUFBdEIsQ0FBekI7QUFDQSxNQUFNQyxnQkFBZ0IsR0FBRyxJQUFJQyxHQUFKLENBQVEsQ0FBRSxRQUFGLEVBQVksU0FBWixFQUF1QixRQUF2QixFQUFpQyxRQUFqQyxFQUEyQyxXQUEzQyxDQUFSLENBQXpCOztBQVNBLFNBQVNDLGNBQVQsQ0FBd0JDLFVBQXhCLEVBQW9DQyxVQUFwQyxFQUFnREMsUUFBUSxHQUFHLE1BQTNELEVBQW1FO0FBQy9ELE1BQUlSLENBQUMsQ0FBQ1MsT0FBRixD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QUFDRixHQUFELENBQTFCO0FBQ0EsUUFBSU0sS0FBSyxJQUFJLElBQWIsRUFBbUIsT0FBT0EsS0FBUDtBQUN0Qjs7QUFDRCxTQUFPQyxTQUFQO0FBQ0gsQ0FSRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB7IF8gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5cbmNvbnN0IFN1cHBvcnRlZERyaXZlcnMgPSBbICdteXNxbCcsICdtb25nb2RiJywgJ3JhYmJpdG1xJyBdO1xuY29uc3QgSnNQcmltaXRpdmVUeXBlcyA9IG5ldyBTZXQoWyAnbnVtYmVyJywgJ2Jvb2xlYW4nLCAnc3RyaW5nJywgJ3N5bWJvbCcsICd1bmRlZmluZWQnIF0pO1xuXG4vKipcbiAqIE1lcmdlIHR3byBxdWVyeSBjb25kaXRpb25zIHVzaW5nIGdpdmVuIG9wZXJhdG9yLlxuICogQHBhcmFtIHsqfSBjb25kaXRpb24xIFxuICogQHBhcmFtIHsqfSBjb25kaXRpb24yIFxuICogQHBhcmFtIHsqfSBvcGVyYXRvciBcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIG1lcmdlQ29uZGl0aW9uKGNvbmRpdGlvbjEsIGNvbmRpdGlvbjIsIG9wZXJhdG9yID0gJyRhbmQnKSB7ICAgICAgICBcbiAgICBpZiAoXy5pc0VtcHR5KGNvbmRpdGlvbjEpKSB7XG4gICAgICAgIHJldHVybiBjb25kaXRpb24yO1xuICAgIH1cblxuICAgIGlmIChfLmlzRW1wdHkoY29uZGl0aW9uMikpIHtcbiAgICAgICAgcmV0dXJuIGNvbmRpdGlvbjE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgW29wZXJhdG9yXTogWyBjb25kaXRpb24xLCBjb25kaXRpb24yIF0gfTtcbn1cblxuZXhwb3J0cy5pc05vdGhpbmcgPSB2ID0+IF8uaXNOaWwodikgfHwgXy5pc05hTih2KTtcbmV4cG9ydHMuaXNQcmltaXRpdmUgPSB2ID0+IEpzUHJpbWl0aXZlVHlwZXMuaGFzKHR5cGVvZiB2KTtcbmV4cG9ydHMuaXNRdW90ZWQgPSBzID0+IChzLnN0YXJ0c1dpdGgoXCInXCIpIHx8IHMuc3RhcnRzV2l0aCgnXCInKSkgJiYgc1swXSA9PT0gc1tzLmxlbmd0aC0xXTtcbmV4cG9ydHMuaXNRdW90ZWRXaXRoID0gKHMsIHEpID0+IChzLnN0YXJ0c1dpdGgocSkgJiYgc1swXSA9PT0gc1tzLmxlbmd0aC0xXSk7XG5leHBvcnRzLm1ha2VEYXRhU291cmNlTmFtZSA9IChkcml2ZXIsIHNjaGVtYSkgPT4gKGRyaXZlciArICcuJyArIHNjaGVtYSk7XG5leHBvcnRzLmV4dHJhY3REcml2ZXJBbmRDb25uZWN0b3JOYW1lID0gaWQgPT4gaWQuc3BsaXQoJy4nKTtcbmV4cG9ydHMubWVyZ2VDb25kaXRpb24gPSBtZXJnZUNvbmRpdGlvbjtcbmV4cG9ydHMuU3VwcG9ydGVkRHJpdmVycyA9IE9iamVjdC5mcmVlemUoU3VwcG9ydGVkRHJpdmVycyk7XG5cbmV4cG9ydHMuJGNvbCA9IChuYW1lKSA9PiAoeyBvb3JUeXBlOiAnQ29sdW1uUmVmZXJlbmNlJywgbmFtZSB9KTtcbmV4cG9ydHMuJGV4cHIgPSAobGVmdCwgb3AsIHJpZ2h0KSA9Pih7IG9vclR5cGU6ICdCaW5hcnlFeHByZXNzaW9uJywgbGVmdCwgb3AsIHJpZ2h0IH0pO1xuZXhwb3J0cy4kZiA9IChuYW1lLCAuLi5hcmdzKSA9PiAoeyBvb3JUeXBlOiAnRnVuY3Rpb24nLCBuYW1lLCBhcmdzIH0pO1xuXG5leHBvcnRzLmhhc1ZhbHVlSW4gPSAoYXJyYXlPZkNvbGwsIGtleSkgPT4gXy5maW5kKGFycmF5T2ZDb2xsLCBjb2xsID0+IGNvbGxba2V5XSAhPSBudWxsKTtcbmV4cG9ydHMuZ2V0VmFsdWVGcm9tID0gKGFycmF5T2ZDb2xsLCBrZXkpID0+IHtcbiAgICBjb25zdCBsID0gYXJyYXlPZkNvbGwubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNvbGwgPSBhcnJheU9mQ29sbFtpXTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBjb2xsICYmIGNvbGxba2V5XTtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn07Il19