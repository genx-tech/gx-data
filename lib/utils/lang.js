"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const SupportedDrivers = ['mysql', 'mongodb', 'rabbitmq'];
const JsPrimitiveTypes = new Set(['number', 'boolean', 'string', 'symbol', 'undefined']);

function mergeCondition(condition1, condition2, operator = '$and') {
  if (_.isEmpty(condition1)) {
    return condition2;
  }

  if (_.isEmpty(condition2)) {
    return condition1;
  }

  return {
    [operator]: [condition1, condition2]
  };
}

exports.isNothing = v => _.isNil(v) || _.isNaN(v);

exports.isPrimitive = v => JsPrimitiveTypes.has(typeof v);

exports.isQuoted = s => (s.startsWith("'") || s.startsWith('"')) && s[0] === s[s.length - 1];

exports.isQuotedWith = (s, q) => s.startsWith(q) && s[0] === s[s.length - 1];

exports.makeDataSourceName = (driver, schema) => driver + '.' + schema;

exports.extractDriverAndConnectorName = id => id.split('.');

exports.mergeCondition = mergeCondition;
exports.SupportedDrivers = Object.freeze(SupportedDrivers);

exports.$col = name => ({
  oorType: 'ColumnReference',
  name
});

exports.$expr = (left, op, right) => ({
  oorType: 'BinaryExpression',
  left,
  op,
  right
});

exports.$f = (name, ...args) => ({
  oorType: 'Function',
  name,
  args
});

exports.hasValueIn = (arrayOfColl, key) => _.find(arrayOfColl, coll => coll[key] != null);

exports.getValueFrom = (arrayOfColl, key) => {
  const l = arrayOfColl.length;

  for (let i = 0; i < l; i++) {
    const coll = arrayOfColl[i];
    const value = coll[key];
    if (value != null) return value;
  }

  return undefined;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9sYW5nLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiU3VwcG9ydGVkRHJpdmVycyIsIkpzUHJpbWl0aXZlVHlwZXMiLCJTZXQiLCJtZXJnZUNvbmRpdGlvbiIsImNvbmRpdGlvbjEiLCJjb25kaXRpb24yIiwib3BlcmF0b3IiLCJpc0VtcHR5IiwiZXhwb3J0cyIsImlzTm90aGluZyIsInYiLCJpc05pbCIsImlzTmFOIiwiaXNQcmltaXRpdmUiLCJoYXMiLCJpc1F1b3RlZCIsInMiLCJzdGFydHNXaXRoIiwibGVuZ3RoIiwiaXNRdW90ZWRXaXRoIiwicSIsIm1ha2VEYXRhU291cmNlTmFtZSIsImRyaXZlciIsInNjaGVtYSIsImV4dHJhY3REcml2ZXJBbmRDb25uZWN0b3JOYW1lIiwiaWQiLCJzcGxpdCIsIk9iamVjdCIsImZyZWV6ZSIsIiRjb2wiLCJuYW1lIiwib29yVHlwZSIsIiRleHByIiwibGVmdCIsIm9wIiwicmlnaHQiLCIkZiIsImFyZ3MiLCJoYXNWYWx1ZUluIiwiYXJyYXlPZkNvbGwiLCJrZXkiLCJmaW5kIiwiY29sbCIsImdldFZhbHVlRnJvbSIsImwiLCJpIiwidmFsdWUiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVFDLE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUVBLE1BQU1DLGdCQUFnQixHQUFHLENBQUUsT0FBRixFQUFXLFNBQVgsRUFBc0IsVUFBdEIsQ0FBekI7QUFDQSxNQUFNQyxnQkFBZ0IsR0FBRyxJQUFJQyxHQUFKLENBQVEsQ0FBRSxRQUFGLEVBQVksU0FBWixFQUF1QixRQUF2QixFQUFpQyxRQUFqQyxFQUEyQyxXQUEzQyxDQUFSLENBQXpCOztBQVNBLFNBQVNDLGNBQVQsQ0FBd0JDLFVBQXhCLEVBQW9DQyxVQUFwQyxFQUFnREMsUUFBUSxHQUFHLE1BQTNELEVBQW1FO0FBQy9ELE1BQUlSLENBQUMsQ0FBQ1MsT0FBRixD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QUFsQjtBQUNBLFFBQUlNLEtBQUssSUFBSSxJQUFiLEVBQW1CLE9BQU9BLEtBQVA7QUFDdEI7O0FBQ0QsU0FBT0MsU0FBUDtBQUNILENBUkQiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgeyBfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuXG5jb25zdCBTdXBwb3J0ZWREcml2ZXJzID0gWyAnbXlzcWwnLCAnbW9uZ29kYicsICdyYWJiaXRtcScgXTtcbmNvbnN0IEpzUHJpbWl0aXZlVHlwZXMgPSBuZXcgU2V0KFsgJ251bWJlcicsICdib29sZWFuJywgJ3N0cmluZycsICdzeW1ib2wnLCAndW5kZWZpbmVkJyBdKTtcblxuLyoqXG4gKiBNZXJnZSB0d28gcXVlcnkgY29uZGl0aW9ucyB1c2luZyBnaXZlbiBvcGVyYXRvci5cbiAqIEBwYXJhbSB7Kn0gY29uZGl0aW9uMSBcbiAqIEBwYXJhbSB7Kn0gY29uZGl0aW9uMiBcbiAqIEBwYXJhbSB7Kn0gb3BlcmF0b3IgXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBtZXJnZUNvbmRpdGlvbihjb25kaXRpb24xLCBjb25kaXRpb24yLCBvcGVyYXRvciA9ICckYW5kJykgeyAgICAgICAgXG4gICAgaWYgKF8uaXNFbXB0eShjb25kaXRpb24xKSkge1xuICAgICAgICByZXR1cm4gY29uZGl0aW9uMjtcbiAgICB9XG5cbiAgICBpZiAoXy5pc0VtcHR5KGNvbmRpdGlvbjIpKSB7XG4gICAgICAgIHJldHVybiBjb25kaXRpb24xO1xuICAgIH1cblxuICAgIHJldHVybiB7IFtvcGVyYXRvcl06IFsgY29uZGl0aW9uMSwgY29uZGl0aW9uMiBdIH07XG59XG5cbmV4cG9ydHMuaXNOb3RoaW5nID0gdiA9PiBfLmlzTmlsKHYpIHx8IF8uaXNOYU4odik7XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gdiA9PiBKc1ByaW1pdGl2ZVR5cGVzLmhhcyh0eXBlb2Ygdik7XG5leHBvcnRzLmlzUXVvdGVkID0gcyA9PiAocy5zdGFydHNXaXRoKFwiJ1wiKSB8fCBzLnN0YXJ0c1dpdGgoJ1wiJykpICYmIHNbMF0gPT09IHNbcy5sZW5ndGgtMV07XG5leHBvcnRzLmlzUXVvdGVkV2l0aCA9IChzLCBxKSA9PiAocy5zdGFydHNXaXRoKHEpICYmIHNbMF0gPT09IHNbcy5sZW5ndGgtMV0pO1xuZXhwb3J0cy5tYWtlRGF0YVNvdXJjZU5hbWUgPSAoZHJpdmVyLCBzY2hlbWEpID0+IChkcml2ZXIgKyAnLicgKyBzY2hlbWEpO1xuZXhwb3J0cy5leHRyYWN0RHJpdmVyQW5kQ29ubmVjdG9yTmFtZSA9IGlkID0+IGlkLnNwbGl0KCcuJyk7XG5leHBvcnRzLm1lcmdlQ29uZGl0aW9uID0gbWVyZ2VDb25kaXRpb247XG5leHBvcnRzLlN1cHBvcnRlZERyaXZlcnMgPSBPYmplY3QuZnJlZXplKFN1cHBvcnRlZERyaXZlcnMpO1xuXG5leHBvcnRzLiRjb2wgPSAobmFtZSkgPT4gKHsgb29yVHlwZTogJ0NvbHVtblJlZmVyZW5jZScsIG5hbWUgfSk7XG5leHBvcnRzLiRleHByID0gKGxlZnQsIG9wLCByaWdodCkgPT4oeyBvb3JUeXBlOiAnQmluYXJ5RXhwcmVzc2lvbicsIGxlZnQsIG9wLCByaWdodCB9KTtcbmV4cG9ydHMuJGYgPSAobmFtZSwgLi4uYXJncykgPT4gKHsgb29yVHlwZTogJ0Z1bmN0aW9uJywgbmFtZSwgYXJncyB9KTtcblxuZXhwb3J0cy5oYXNWYWx1ZUluID0gKGFycmF5T2ZDb2xsLCBrZXkpID0+IF8uZmluZChhcnJheU9mQ29sbCwgY29sbCA9PiBjb2xsW2tleV0gIT0gbnVsbCk7XG5leHBvcnRzLmdldFZhbHVlRnJvbSA9IChhcnJheU9mQ29sbCwga2V5KSA9PiB7XG4gICAgY29uc3QgbCA9IGFycmF5T2ZDb2xsLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb25zdCBjb2xsID0gYXJyYXlPZkNvbGxbaV07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gY29sbFtrZXldO1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufTsiXX0=