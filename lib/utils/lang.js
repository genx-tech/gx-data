"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const SupportedDrivers = ['mysql', 'mongodb', 'rabbitmq'];
const JsPrimitiveTypes = new Set(['number', 'boolean', 'string', 'symbol', 'undefined']);

function mergeCondition(condition1, condition2, operator = '$and') {
  if (_.isEmpty(condition1)) {
    return condition2;
  }

  if (_.isEmpty(condition2)) {
    return condition1;
  }

  return {
    [operator]: [condition1, condition2]
  };
}

exports.isNothing = v => _.isNil(v) || _.isNaN(v);

exports.isPrimitive = v => JsPrimitiveTypes.has(typeof v);

exports.isQuoted = s => (s.startsWith("'") || s.startsWith('"')) && s[0] === s[s.length - 1];

exports.isQuotedWith = (s, q) => s.startsWith(q) && s[0] === s[s.length - 1];

exports.makeDataSourceName = (driver, schema) => driver + '.' + schema;

exports.extractDriverAndConnectorName = id => id.split('.');

exports.mergeCondition = mergeCondition;
exports.SupportedDrivers = Object.freeze(SupportedDrivers);

const $col = name => ({
  oorType: 'ColumnReference',
  name
});

const $expr = (left, op, right) => ({
  oorType: 'BinaryExpression',
  left,
  op,
  right
});

const $f = (name, ...args) => ({
  oorType: 'Function',
  name,
  args
});

const $inc = (field, increment) => $expr($col(field), '+', increment);

exports.$col = $col;
exports.$expr = $expr;
exports.$f = $f;
exports.$func = $f;
exports.$inc = $inc;
exports.$increase = $inc;

exports.hasValueIn = (arrayOfColl, key) => _.find(arrayOfColl, coll => coll[key] != null);

exports.getValueFrom = (arrayOfColl, key) => {
  const l = arrayOfColl.length;

  for (let i = 0; i < l; i++) {
    const coll = arrayOfColl[i];
    const value = coll && coll[key];
    if (value != null) return value;
  }

  return undefined;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9sYW5nLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiU3VwcG9ydGVkRHJpdmVycyIsIkpzUHJpbWl0aXZlVHlwZXMiLCJTZXQiLCJtZXJnZUNvbmRpdGlvbiIsImNvbmRpdGlvbjEiLCJjb25kaXRpb24yIiwib3BlcmF0b3IiLCJpc0VtcHR5IiwiZXhwb3J0cyIsImlzTm90aGluZyIsInYiLCJpc05pbCIsImlzTmFOIiwiaXNQcmltaXRpdmUiLCJoYXMiLCJpc1F1b3RlZCIsInMiLCJzdGFydHNXaXRoIiwibGVuZ3RoIiwiaXNRdW90ZWRXaXRoIiwicSIsIm1ha2VEYXRhU291cmNlTmFtZSIsImRyaXZlciIsInNjaGVtYSIsImV4dHJhY3REcml2ZXJBbmRDb25uZWN0b3JOYW1lIiwiaWQiLCJzcGxpdCIsIk9iamVjdCIsImZyZWV6ZSIsIiRjb2wiLCJuYW1lIiwib29yVHlwZSIsIiRleHByIiwibGVmdCIsIm9wIiwicmlnaHQiLCIkZiIsImFyZ3MiLCIkaW5jIiwiZmllbGQiLCJpbmNyZW1lbnQiLCIkZnVuYyIsIiRpbmNyZWFzZSIsImhhc1ZhbHVlSW4iLCJhcnJheU9mQ29sbCIsImtleSIsImZpbmQiLCJjb2xsIiwiZ2V0VmFsdWVGcm9tIiwibCIsImkiLCJ2YWx1ZSIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBUUMsT0FBTyxDQUFDLFVBQUQsQ0FBckI7O0FBRUEsTUFBTUMsZ0JBQWdCLEdBQUcsQ0FBRSxPQUFGLEVBQVcsU0FBWCxFQUFzQixVQUF0QixDQUF6QjtBQUNBLE1BQU1DLGdCQUFnQixHQUFHLElBQUlDLEdBQUosQ0FBUSxDQUFFLFFBQUYsRUFBWSxTQUFaLEVBQXVCLFFBQXZCLEVBQWlDLFFBQWpDLEVBQTJDLFdBQTNDLENBQVIsQ0FBekI7O0FBU0EsU0FBU0MsY0FBVCxDQUF3QkMsVUFBeEIsRUFBb0NDLFVBQXBDLEVBQWdEQyxRQUFRLEdBQUcsTUFBM0QsRUFBbUU7QUFDL0QsTUFBSVIsQ0FBQyxDQUFDUyxPQUFGLENBQVVILFVBQVYsQ0FBSixFQUEyQjtBQUN2QixXQUFPQyxVQUFQO0FBQ0g7O0FBRUQsTUFBSVAsQ0FBQyxDQUFDUyxPQUFGLENBQVVGLFVBQVYsQ0FBSixFQUEyQjtBQUN2QixXQUFPRCxVQUFQO0FBQ0g7O0FBRUQsU0FBTztBQUFFLEtBQUNFLFFBQUQsR0FBWSxDQUFFRixVQUFGLEVBQWNDLFVBQWQ7QUFBZCxHQUFQO0FBQ0g7O0FBRURHLE9BQU8sQ0FBQ0MsU0FBUixHQUFvQkMsQ0FBQyxJQUFJWixDQUFDLENBQUNhLEtBQUYsQ0FBUUQsQ0FBUixLQUFjWixDQUFDLENBQUNjLEtBQUYsQ0FBUUYsQ0FBUixDQUF2Qzs7QUFDQUYsT0FBTyxDQUFDSyxXQUFSLEdBQXNCSCxDQUFDLElBQUlULGdCQUFnQixDQUFDYSxHQUFqQixDQUFxQixPQUFPSixDQUE1QixDQUEzQjs7QUFDQUYsT0FBTyxDQUFDTyxRQUFSLEdBQW1CQyxDQUFDLElBQUksQ0FBQ0EsQ0FBQyxDQUFDQyxVQUFGLENBQWEsR0FBYixLQUFxQkQsQ0FBQyxDQUFDQyxVQUFGLENBQWEsR0FBYixDQUF0QixLQUE0Q0QsQ0FBQyxDQUFDLENBQUQsQ0FBRCxLQUFTQSxDQUFDLENBQUNBLENBQUMsQ0FBQ0UsTUFBRixHQUFTLENBQVYsQ0FBOUU7O0FBQ0FWLE9BQU8sQ0FBQ1csWUFBUixHQUF1QixDQUFDSCxDQUFELEVBQUlJLENBQUosS0FBV0osQ0FBQyxDQUFDQyxVQUFGLENBQWFHLENBQWIsS0FBbUJKLENBQUMsQ0FBQyxDQUFELENBQUQsS0FBU0EsQ0FBQyxDQUFDQSxDQUFDLENBQUNFLE1BQUYsR0FBUyxDQUFWLENBQS9EOztBQUNBVixPQUFPLENBQUNhLGtCQUFSLEdBQTZCLENBQUNDLE1BQUQsRUFBU0MsTUFBVCxLQUFxQkQsTUFBTSxHQUFHLEdBQVQsR0FBZUMsTUFBakU7O0FBQ0FmLE9BQU8sQ0FBQ2dCLDZCQUFSLEdBQXdDQyxFQUFFLElBQUlBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTLEdBQVQsQ0FBOUM7O0FBQ0FsQixPQUFPLENBQUNMLGNBQVIsR0FBeUJBLGNBQXpCO0FBQ0FLLE9BQU8sQ0FBQ1IsZ0JBQVIsR0FBMkIyQixNQUFNLENBQUNDLE1BQVAsQ0FBYzVCLGdCQUFkLENBQTNCOztBQUVBLE1BQU02QixJQUFJLEdBQUlDLElBQUQsS0FBVztBQUFFQyxFQUFBQSxPQUFPLEVBQUUsaUJBQVg7QUFBOEJELEVBQUFBO0FBQTlCLENBQVgsQ0FBYjs7QUFDQSxNQUFNRSxLQUFLLEdBQUcsQ0FBQ0MsSUFBRCxFQUFPQyxFQUFQLEVBQVdDLEtBQVgsTUFBcUI7QUFBRUosRUFBQUEsT0FBTyxFQUFFLGtCQUFYO0FBQStCRSxFQUFBQSxJQUEvQjtBQUFxQ0MsRUFBQUEsRUFBckM7QUFBeUNDLEVBQUFBO0FBQXpDLENBQXJCLENBQWQ7O0FBQ0EsTUFBTUMsRUFBRSxHQUFHLENBQUNOLElBQUQsRUFBTyxHQUFHTyxJQUFWLE1BQW9CO0FBQUVOLEVBQUFBLE9BQU8sRUFBRSxVQUFYO0FBQXVCRCxFQUFBQSxJQUF2QjtBQUE2Qk8sRUFBQUE7QUFBN0IsQ0FBcEIsQ0FBWDs7QUFDQSxNQUFNQyxJQUFJLEdBQUcsQ0FBQ0MsS0FBRCxFQUFRQyxTQUFSLEtBQXNCUixLQUFLLENBQUNILElBQUksQ0FBQ1UsS0FBRCxDQUFMLEVBQWMsR0FBZCxFQUFtQkMsU0FBbkIsQ0FBeEM7O0FBRUFoQyxPQUFPLENBQUNxQixJQUFSLEdBQWVBLElBQWY7QUFDQXJCLE9BQU8sQ0FBQ3dCLEtBQVIsR0FBZ0JBLEtBQWhCO0FBQ0F4QixPQUFPLENBQUM0QixFQUFSLEdBQWFBLEVBQWI7QUFDQTVCLE9BQU8sQ0FBQ2lDLEtBQVIsR0FBZ0JMLEVBQWhCO0FBQ0E1QixPQUFPLENBQUM4QixJQUFSLEdBQWVBLElBQWY7QUFDQTlCLE9BQU8sQ0FBQ2tDLFNBQVIsR0FBb0JKLElBQXBCOztBQUVBOUIsT0FBTyxDQUFDbUMsVUFBUixHQUFxQixDQUFDQyxXQUFELEVBQWNDLEdBQWQsS0FBc0IvQyxDQUFDLENBQUNnRCxJQUFGLENBQU9GLFdBQVAsRUFBb0JHLElBQUksSUFBSUEsSUFBSSxDQUFDRixHQUFELENBQUosSUFBYSxJQUF6QyxDQUEzQzs7QUFDQXJDLE9BQU8sQ0FBQ3dDLFlBQVIsR0FBdUIsQ0FBQ0osV0FBRCxFQUFjQyxHQUFkLEtBQXNCO0FBQ3pDLFFBQU1JLENBQUMsR0FBR0wsV0FBVyxDQUFDMUIsTUFBdEI7O0FBQ0EsT0FBSyxJQUFJZ0MsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0QsQ0FBcEIsRUFBdUJDLENBQUMsRUFBeEIsRUFBNEI7QUFDeEIsVUFBTUgsSUFBSSxHQUFHSCxXQUFXLENBQUNNLENBQUQsQ0FBeEI7QUFDQSxVQUFNQyxLQUFLLEdBQUdKLElBQUksSUFBSUEsSUFBSSxDQUFDRixHQUFELENBQTFCO0FBQ0EsUUFBSU0sS0FBSyxJQUFJLElBQWIsRUFBbUIsT0FBT0EsS0FBUDtBQUN0Qjs7QUFDRCxTQUFPQyxTQUFQO0FBQ0gsQ0FSRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB7IF8gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5cbmNvbnN0IFN1cHBvcnRlZERyaXZlcnMgPSBbICdteXNxbCcsICdtb25nb2RiJywgJ3JhYmJpdG1xJyBdO1xuY29uc3QgSnNQcmltaXRpdmVUeXBlcyA9IG5ldyBTZXQoWyAnbnVtYmVyJywgJ2Jvb2xlYW4nLCAnc3RyaW5nJywgJ3N5bWJvbCcsICd1bmRlZmluZWQnIF0pO1xuXG4vKipcbiAqIE1lcmdlIHR3byBxdWVyeSBjb25kaXRpb25zIHVzaW5nIGdpdmVuIG9wZXJhdG9yLlxuICogQHBhcmFtIHsqfSBjb25kaXRpb24xIFxuICogQHBhcmFtIHsqfSBjb25kaXRpb24yIFxuICogQHBhcmFtIHsqfSBvcGVyYXRvciBcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIG1lcmdlQ29uZGl0aW9uKGNvbmRpdGlvbjEsIGNvbmRpdGlvbjIsIG9wZXJhdG9yID0gJyRhbmQnKSB7ICAgICAgICBcbiAgICBpZiAoXy5pc0VtcHR5KGNvbmRpdGlvbjEpKSB7XG4gICAgICAgIHJldHVybiBjb25kaXRpb24yO1xuICAgIH1cblxuICAgIGlmIChfLmlzRW1wdHkoY29uZGl0aW9uMikpIHtcbiAgICAgICAgcmV0dXJuIGNvbmRpdGlvbjE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgW29wZXJhdG9yXTogWyBjb25kaXRpb24xLCBjb25kaXRpb24yIF0gfTtcbn1cblxuZXhwb3J0cy5pc05vdGhpbmcgPSB2ID0+IF8uaXNOaWwodikgfHwgXy5pc05hTih2KTtcbmV4cG9ydHMuaXNQcmltaXRpdmUgPSB2ID0+IEpzUHJpbWl0aXZlVHlwZXMuaGFzKHR5cGVvZiB2KTtcbmV4cG9ydHMuaXNRdW90ZWQgPSBzID0+IChzLnN0YXJ0c1dpdGgoXCInXCIpIHx8IHMuc3RhcnRzV2l0aCgnXCInKSkgJiYgc1swXSA9PT0gc1tzLmxlbmd0aC0xXTtcbmV4cG9ydHMuaXNRdW90ZWRXaXRoID0gKHMsIHEpID0+IChzLnN0YXJ0c1dpdGgocSkgJiYgc1swXSA9PT0gc1tzLmxlbmd0aC0xXSk7XG5leHBvcnRzLm1ha2VEYXRhU291cmNlTmFtZSA9IChkcml2ZXIsIHNjaGVtYSkgPT4gKGRyaXZlciArICcuJyArIHNjaGVtYSk7XG5leHBvcnRzLmV4dHJhY3REcml2ZXJBbmRDb25uZWN0b3JOYW1lID0gaWQgPT4gaWQuc3BsaXQoJy4nKTtcbmV4cG9ydHMubWVyZ2VDb25kaXRpb24gPSBtZXJnZUNvbmRpdGlvbjtcbmV4cG9ydHMuU3VwcG9ydGVkRHJpdmVycyA9IE9iamVjdC5mcmVlemUoU3VwcG9ydGVkRHJpdmVycyk7XG5cbmNvbnN0ICRjb2wgPSAobmFtZSkgPT4gKHsgb29yVHlwZTogJ0NvbHVtblJlZmVyZW5jZScsIG5hbWUgfSk7XG5jb25zdCAkZXhwciA9IChsZWZ0LCBvcCwgcmlnaHQpID0+KHsgb29yVHlwZTogJ0JpbmFyeUV4cHJlc3Npb24nLCBsZWZ0LCBvcCwgcmlnaHQgfSk7XG5jb25zdCAkZiA9IChuYW1lLCAuLi5hcmdzKSA9PiAoeyBvb3JUeXBlOiAnRnVuY3Rpb24nLCBuYW1lLCBhcmdzIH0pO1xuY29uc3QgJGluYyA9IChmaWVsZCwgaW5jcmVtZW50KSA9PiAkZXhwcigkY29sKGZpZWxkKSwgJysnLCBpbmNyZW1lbnQpO1xuXG5leHBvcnRzLiRjb2wgPSAkY29sO1xuZXhwb3J0cy4kZXhwciA9ICRleHByO1xuZXhwb3J0cy4kZiA9ICRmO1xuZXhwb3J0cy4kZnVuYyA9ICRmO1xuZXhwb3J0cy4kaW5jID0gJGluY1xuZXhwb3J0cy4kaW5jcmVhc2UgPSAkaW5jXG5cbmV4cG9ydHMuaGFzVmFsdWVJbiA9IChhcnJheU9mQ29sbCwga2V5KSA9PiBfLmZpbmQoYXJyYXlPZkNvbGwsIGNvbGwgPT4gY29sbFtrZXldICE9IG51bGwpO1xuZXhwb3J0cy5nZXRWYWx1ZUZyb20gPSAoYXJyYXlPZkNvbGwsIGtleSkgPT4ge1xuICAgIGNvbnN0IGwgPSBhcnJheU9mQ29sbC5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29uc3QgY29sbCA9IGFycmF5T2ZDb2xsW2ldO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGNvbGwgJiYgY29sbFtrZXldO1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufTsiXX0=