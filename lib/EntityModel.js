"use strict";require("source-map-support/register");const HttpCode=require("http-status-codes");const{_,eachAsync_,getValueByPath,hasKeyByPath}=require("rk-utils");const Errors=require("./utils/Errors");const Generators=require("./Generators");const Types=require("./types");const{ValidationError,DatabaseError,ApplicationError}=Errors;const Features=require("./entityFeatures");const Rules=require("../enum/Rules");const{isNothing}=require("../utils/lang");const NEED_OVERRIDE="Should be overrided by driver-specific subclass.";function minifyAssocs(assocs){let sorted=_.uniq(assocs).sort().reverse();let minified=_.take(sorted,1),l=sorted.length-1;for(let i=1;i<l;i++){let k=sorted[i]+".";if(!_.find(minified,a=>a.startsWith(k))){minified.push(sorted[i])}}return minified}const oorTypesToBypass=new Set(["ColumnReference","Function","BinaryExpression"]);class EntityModel{constructor(rawData){if(rawData){Object.assign(this,rawData)}}static valueOfKey(data){return Array.isArray(this.meta.keyField)?_.pick(data,this.meta.keyField):data[this.meta.keyField]}static queryColumn(name){return{oorType:"ColumnReference",name}}static queryBinExpr(left,op,right){return{oorType:"BinaryExpression",left,op,right}}static queryFunction(name,...args){return{oorType:"Function",name,args}}static getUniqueKeyFieldsFrom(data){return _.find(this.meta.uniqueKeys,fields=>_.every(fields,f=>!_.isNil(data[f])))}static getUniqueKeyValuePairsFrom(data){let ukFields=this.getUniqueKeyFieldsFrom(data);return _.pick(data,ukFields)}static getNestedObject(entityObj,keyPath,defaultValue){let nodes=(Array.isArray(keyPath)?keyPath:keyPath.split(".")).map(key=>key[0]===":"?key:":"+key);return getValueByPath(entityObj,nodes,defaultValue)}static ensureRetrieveCreated(context,customOptions){if(!context.options.$retrieveCreated){context.options.$retrieveCreated=customOptions?customOptions:true}}static ensureRetrieveUpdated(context,customOptions){if(!context.options.$retrieveUpdated){context.options.$retrieveUpdated=customOptions?customOptions:true}}static ensureRetrieveDeleted(context,customOptions){if(!context.options.$retrieveDeleted){context.options.$retrieveDeleted=customOptions?customOptions:true}}static async ensureTransaction_(context){if(!context.connOptions||!context.connOptions.connection){context.connOptions||(context.connOptions={});context.connOptions.connection=await this.db.connector.beginTransaction_()}}static getValueFromContext(context,key){return getValueByPath(context,"options.$variables."+key)}static async cached_(key,associations,connOptions){if(key){let combinedKey=key;if(!_.isEmpty(associations)){combinedKey+="/"+minifyAssocs(associations).join("&")}let cachedData;if(!this._cachedData){this._cachedData={}}else if(this._cachedData[combinedKey]){cachedData=this._cachedData[combinedKey]}if(!cachedData){cachedData=this._cachedData[combinedKey]=await this.findAll_({$association:associations,$toDictionary:key},connOptions)}return cachedData}return this.cached_(this.meta.keyField,associations,connOptions)}static toDictionary(entityCollection,key){key||(key=this.meta.keyField);return entityCollection.reduce((dict,v)=>{dict[v[key]]=v;return dict},{})}static async findOne_(findOptions,connOptions){findOptions=this._prepareQueries(findOptions,true);let context={options:findOptions,connOptions};await Features.applyRules_(Rules.RULE_BEFORE_FIND,this,context);return this._safeExecute_(async context=>{let records=await this.db.connector.find_(this.meta.name,context.options,context.connOptions);if(!records)throw new DatabaseError("connector.find_() returns undefined data record.");if(findOptions.$relationships&&!findOptions.$skipOrm){if(records[0].length===0)return undefined;records=this._mapRecordsToObjects(records,findOptions.$relationships)}else if(records.length===0){return undefined}if(records.length!==1){this.db.connector.log("error",`findOne() returns more than one record.`,{entity:this.meta.name,options:context.options})}let result=records[0];return result},context)}static async findAll_(findOptions,connOptions){findOptions=this._prepareQueries(findOptions);let context={options:findOptions,connOptions};await Features.applyRules_(Rules.RULE_BEFORE_FIND,this,context);let totalCount;let rows=await this._safeExecute_(async context=>{let records=await this.db.connector.find_(this.meta.name,context.options,context.connOptions);if(!records)throw new DatabaseError("connector.find_() returns undefined data record.");if(findOptions.$relationships){if(findOptions.$totalCount){totalCount=records[3]}if(!findOptions.$skipOrm){records=this._mapRecordsToObjects(records,findOptions.$relationships)}else{records=records[0]}}else{if(findOptions.$totalCount){totalCount=records[1];records=records[0]}}return this.afterFindAll_(context,records)},context);if(findOptions.$totalCount){let ret={totalItems:totalCount,items:rows};if(!isNothing(findOptions.$offset)){ret.offset=findOptions.$offset}if(!isNothing(findOptions.$limit)){ret.limit=findOptions.$limit}return ret}return rows}static async create_(data,createOptions,connOptions){let rawOptions=createOptions;if(!createOptions){createOptions={}}let[raw,associations]=this._extractAssociations(data);let context={raw,rawOptions,options:createOptions,connOptions};let needCreateAssocs=!_.isEmpty(associations);if(!(await this.beforeCreate_(context))){return context.return}let success=await this._safeExecute_(async context=>{if(needCreateAssocs){await this.ensureTransaction_(context)}await this._prepareEntityData_(context);if(!(await Features.applyRules_(Rules.RULE_BEFORE_CREATE,this,context))){return false}if(!(await this._internalBeforeCreate_(context))){return false}context.latest=Object.freeze(context.latest);context.result=await this.db.connector.create_(this.meta.name,context.latest,context.connOptions);context.return=context.latest;await this._internalAfterCreate_(context);if(!context.queryKey){context.queryKey=this.getUniqueKeyValuePairsFrom(context.latest)}await Features.applyRules_(Rules.RULE_AFTER_CREATE,this,context);if(needCreateAssocs){await this._createAssocs_(context,associations)}return true},context);if(success){await this.afterCreate_(context)}return context.return}static async updateOne_(data,updateOptions,connOptions){if(updateOptions&&updateOptions.$bypassReadOnly){throw new ApplicationError("Unexpected usage.",{entity:this.meta.name,reason:"$bypassReadOnly option is not allow to be set from public update_ method.",updateOptions})}return this._update_(data,updateOptions,connOptions,true)}static async updateMany_(data,updateOptions,connOptions){if(updateOptions&&updateOptions.$bypassReadOnly){throw new ApplicationError("Unexpected usage.",{entity:this.meta.name,reason:"$bypassReadOnly option is not allow to be set from public update_ method.",updateOptions})}return this._update_(data,updateOptions,connOptions,false)}static async _update_(data,updateOptions,connOptions,forSingleRecord){let rawOptions=updateOptions;if(!updateOptions){let conditionFields=this.getUniqueKeyFieldsFrom(data);if(_.isEmpty(conditionFields)){throw new ApplicationError("Primary key value(s) or at least one group of unique key value(s) is required for updating an entity.")}updateOptions={$query:_.pick(data,conditionFields)};data=_.omit(data,conditionFields)}let[raw,associations]=this._extractAssociations(data);let context={raw,rawOptions,options:this._prepareQueries(updateOptions,forSingleRecord),connOptions};let needCreateAssocs=!_.isEmpty(associations);let toUpdate;if(forSingleRecord){toUpdate=await this.beforeUpdate_(context)}else{toUpdate=await this.beforeUpdateMany_(context)}if(!toUpdate){return context.return}let success=await this._safeExecute_(async context=>{if(needCreateAssocs){await this.ensureTransaction_(context)}await this._prepareEntityData_(context,true,forSingleRecord);if(!(await Features.applyRules_(Rules.RULE_BEFORE_UPDATE,this,context))){return false}if(forSingleRecord){toUpdate=await this._internalBeforeUpdate_(context)}else{toUpdate=await this._internalBeforeUpdateMany_(context)}if(!toUpdate){return false}context.latest=Object.freeze(context.latest);context.result=await this.db.connector.update_(this.meta.name,context.latest,context.options.$query,context.options,context.connOptions);context.return=context.latest;if(forSingleRecord){await this._internalAfterUpdate_(context)}else{await this._internalAfterUpdateMany_(context)}if(!context.queryKey){context.queryKey=this.getUniqueKeyValuePairsFrom(context.options.$query)}await Features.applyRules_(Rules.RULE_AFTER_UPDATE,this,context);if(needCreateAssocs){await this._updateAssocs_(context,associations)}return true},context);if(success){if(forSingleRecord){await this.afterUpdate_(context)}else{await this.afterUpdateMany_(context)}}return context.return}static async replaceOne_(data,updateOptions,connOptions){let rawOptions=updateOptions;if(!updateOptions){let conditionFields=this.getUniqueKeyFieldsFrom(data);if(_.isEmpty(conditionFields)){throw new ApplicationError("Primary key value(s) or at least one group of unique key value(s) is required for replacing an entity.")}updateOptions={...updateOptions,$query:_.pick(data,conditionFields)}}else{updateOptions=this._prepareQueries(updateOptions,true)}let context={raw:data,rawOptions,options:updateOptions,connOptions};return this._safeExecute_(async context=>{return this._doReplaceOne_(context)},context)}static async deleteOne_(deleteOptions,connOptions){return this._delete_(deleteOptions,connOptions,true)}static async deleteMany_(deleteOptions,connOptions){return this._delete_(deleteOptions,connOptions,false)}static async _delete_(deleteOptions,connOptions,forSingleRecord){let rawOptions=deleteOptions;deleteOptions=this._prepareQueries(deleteOptions,forSingleRecord);if(_.isEmpty(deleteOptions.$query)){throw new ApplicationError("Empty condition is not allowed for deleting an entity.")}let context={rawOptions,options:deleteOptions,connOptions};let toDelete;if(forSingleRecord){toDelete=await this.beforeDelete_(context)}else{toDelete=await this.beforeDeleteMany_(context)}if(!toDelete){return context.return}let success=await this._safeExecute_(async context=>{if(!(await Features.applyRules_(Rules.RULE_BEFORE_DELETE,this,context))){return false}if(forSingleRecord){toDelete=await this._internalBeforeDelete_(context)}else{toDelete=await this._internalBeforeDeleteMany_(context)}if(!toDelete){return false}context.result=await this.db.connector.delete_(this.meta.name,context.options.$query,context.connOptions);if(forSingleRecord){await this._internalAfterDelete_(context)}else{await this._internalAfterDeleteMany_(context)}if(!context.queryKey){if(forSingleRecord){context.queryKey=this.getUniqueKeyValuePairsFrom(context.options.$query)}else{context.queryKey=context.options.$query}}await Features.applyRules_(Rules.RULE_AFTER_DELETE,this,context);return true},context);if(success){if(forSingleRecord){await this.afterDelete_(context)}else{await this.afterDeleteMany_(context)}}return context.return}static _containsUniqueKey(data){let hasKeyNameOnly=false;let hasNotNullKey=_.find(this.meta.uniqueKeys,fields=>{let hasKeys=_.every(fields,f=>f in data);hasKeyNameOnly=hasKeyNameOnly||hasKeys;return _.every(fields,f=>!_.isNil(data[f]))});return[hasNotNullKey,hasKeyNameOnly]}static _ensureContainsUniqueKey(condition){let[containsUniqueKeyAndValue,containsUniqueKeyOnly]=this._containsUniqueKey(condition);if(!containsUniqueKeyAndValue){if(containsUniqueKeyOnly){throw new ValidationError("One of the unique key field as query condition is null. Condition: "+JSON.stringify(condition))}throw new ApplicationError("Single record operation requires at least one unique key value pair in the query condition.",{entity:this.meta.name,condition})}}static async _prepareEntityData_(context,isUpdating=false,forSingleRecord=true){let meta=this.meta;let i18n=this.i18n;let{name,fields}=meta;let{raw}=context;let latest={},existing=context.options.$existing;context.latest=latest;if(!context.i18n){context.i18n=i18n}let opOptions=context.options;if(isUpdating&&_.isEmpty(existing)&&(this._dependsOnExistingData(raw)||opOptions.$retrieveExisting)){await this.ensureTransaction_(context);if(forSingleRecord){existing=await this.findOne_({$query:opOptions.$query},context.connOptions)}else{existing=await this.findAll_({$query:opOptions.$query},context.connOptions)}context.existing=existing}if(opOptions.$retrieveExisting&&!context.rawOptions.$existing){context.rawOptions.$existing=existing}await eachAsync_(fields,async(fieldInfo,fieldName)=>{if(fieldName in raw){let value=raw[fieldName];if(fieldInfo.readOnly){if(!isUpdating||!opOptions.$bypassReadOnly.has(fieldName)){throw new ValidationError(`Read-only field "${fieldName}" is not allowed to be set by manual input.`,{entity:name,fieldInfo:fieldInfo})}}if(isUpdating&&fieldInfo.freezeAfterNonDefault){if(existing[fieldName]!==fieldInfo.default){throw new ValidationError(`FreezeAfterNonDefault field "${fieldName}" is not allowed to be changed.`,{entity:name,fieldInfo:fieldInfo})}}if(isNothing(value)){if(!fieldInfo.optional){throw new ValidationError(`The "${fieldName}" value of "${name}" entity cannot be null.`,{entity:name,fieldInfo:fieldInfo})}latest[fieldName]=null}else{if(_.isPlainObject(value)&&value.oorType){latest[fieldName]=value;return}try{latest[fieldName]=Types.sanitize(value,fieldInfo,i18n)}catch(error){throw new ValidationError(`Invalid "${fieldName}" value of "${name}" entity.`,{entity:name,fieldInfo:fieldInfo,error:error.message||error.stack})}}return}if(isUpdating){if(fieldInfo.forceUpdate){if(fieldInfo.updateByDb){return}if(fieldInfo.auto){latest[fieldName]=await Generators.default(fieldInfo,i18n);return}throw new ValidationError(`"${fieldName}" of "${name}" enttiy is required for each update.`,{entity:name,fieldInfo:fieldInfo})}return}if(!fieldInfo.createByDb){if(fieldInfo.hasOwnProperty("default")){latest[fieldName]=fieldInfo.default}else if(fieldInfo.optional){return}else if(fieldInfo.auto){latest[fieldName]=await Generators.default(fieldInfo,i18n)}else{throw new ValidationError(`"${fieldName}" of "${name}" entity is required.`,{entity:name,fieldInfo:fieldInfo})}}});latest=context.latest=this._translateValue(latest,opOptions.$variables,true);await Features.applyRules_(Rules.RULE_AFTER_VALIDATION,this,context);await this.applyModifiers_(context,isUpdating);context.latest=_.mapValues(latest,(value,key)=>{let fieldInfo=fields[key];if(_.isPlainObject(value)&&value.oorType){opOptions.$requireSplitColumns=true;return value}return this._serializeByTypeInfo(value,fieldInfo)});return context}static async _safeExecute_(executor,context){executor=executor.bind(this);if(context.connOptions&&context.connOptions.connection){return executor(context)}try{let result=await executor(context);if(context.connOptions&&context.connOptions.connection){await this.db.connector.commit_(context.connOptions.connection);delete context.connOptions.connection}return result}catch(error){if(context.connOptions&&context.connOptions.connection){this.db.connector.log("error",`Rollbacked, reason: ${error.message}`,{entity:this.meta.name,context:context.options,rawData:context.raw,latestData:context.latest});await this.db.connector.rollback_(context.connOptions.connection);delete context.connOptions.connection}throw error}}static _dependencyChanged(fieldName,context){let deps=this.meta.fieldDependencies[fieldName];return _.find(deps,d=>_.isPlainObject(d)?hasKeyByPath(context,d.reference):hasKeyByPath(context,d))}static _referenceExist(input,ref){let pos=ref.indexOf(".");if(pos>0){return ref.substr(pos+1)in input}return ref in input}static _dependsOnExistingData(input){let deps=this.meta.fieldDependencies;let hasDepends=false;if(deps){let nullDepends=new Set;hasDepends=_.find(deps,(dep,fieldName)=>_.find(dep,d=>{if(_.isPlainObject(d)){if(d.whenNull){if(_.isNil(input[fieldName])){nullDepends.add(dep)}return false}d=d.reference}return fieldName in input&&!this._referenceExist(input,d)}));if(hasDepends){return true}for(let dep of nullDepends){if(_.find(dep,d=>!this._referenceExist(input,d.reference))){return true}}}let atLeastOneNotNull=this.meta.features.atLeastOneNotNull;if(atLeastOneNotNull){hasDepends=_.find(atLeastOneNotNull,fields=>_.find(fields,field=>field in input&&_.isNil(input[field])));if(hasDepends){return true}}return false}static _hasReservedKeys(obj){return _.find(obj,(v,k)=>k[0]==="$")}static _prepareQueries(options,forSingleRecord=false){if(!_.isPlainObject(options)){if(forSingleRecord&&Array.isArray(this.meta.keyField)){throw new ApplicationError("Cannot use a singular value as condition to query against a entity with combined primary key.")}return options?{$query:{[this.meta.keyField]:this._translateValue(options)}}:{}}let normalizedOptions={},query={};_.forOwn(options,(v,k)=>{if(k[0]==="$"){normalizedOptions[k]=v}else{query[k]=v}});normalizedOptions.$query={...query,...normalizedOptions.$query};if(forSingleRecord&&!options.$bypassEnsureUnique){this._ensureContainsUniqueKey(normalizedOptions.$query)}normalizedOptions.$query=this._translateValue(normalizedOptions.$query,normalizedOptions.$variables,null,true);if(normalizedOptions.$groupBy){if(_.isPlainObject(normalizedOptions.$groupBy)){if(normalizedOptions.$groupBy.having){normalizedOptions.$groupBy.having=this._translateValue(normalizedOptions.$groupBy.having,normalizedOptions.$variables)}}}if(normalizedOptions.$projection){normalizedOptions.$projection=this._translateValue(normalizedOptions.$projection,normalizedOptions.$variables)}if(normalizedOptions.$association&&!normalizedOptions.$relationships){normalizedOptions.$relationships=this._prepareAssociations(normalizedOptions)}return normalizedOptions}static async beforeCreate_(context){return true}static async beforeUpdate_(context){return true}static async beforeUpdateMany_(context){return true}static async beforeDelete_(context){return true}static async beforeDeleteMany_(context){return true}static async afterCreate_(context){}static async afterUpdate_(context){}static async afterUpdateMany_(context){}static async afterDelete_(context){}static async afterDeleteMany_(context){}static async afterFindAll_(context,records){if(context.options.$toDictionary){let keyField=this.meta.keyField;if(typeof context.options.$toDictionary==="string"){keyField=context.options.$toDictionary;if(!(keyField in this.meta.fields)){throw new ApplicationError(`The key field "${keyField}" provided to index the cached dictionary is not a field of entity "${this.meta.name}".`)}}return this.toDictionary(records,keyField)}return records}static _prepareAssociations(){throw new Error(NEED_OVERRIDE)}static _mapRecordsToObjects(){throw new Error(NEED_OVERRIDE)}static _extractAssociations(data){throw new Error(NEED_OVERRIDE)}static async _createAssocs_(context,assocs){throw new Error(NEED_OVERRIDE)}static async _updateAssocs_(context,assocs){throw new Error(NEED_OVERRIDE)}static _translateSymbolToken(name){throw new Error(NEED_OVERRIDE)}static _serialize(value){throw new Error(NEED_OVERRIDE)}static _serializeByTypeInfo(value,info){throw new Error(NEED_OVERRIDE)}static _translateValue(value,variables,skipSerialize,arrayToInOperator){if(_.isPlainObject(value)){if(value.oorType){if(oorTypesToBypass.has(value.oorType))return value;if(value.oorType==="SessionVariable"){if(!variables){throw new ApplicationError("Variables context missing.")}if((!variables.session||!(value.name in variables.session))&&!value.optional){let errArgs=[];if(value.missingMessage){errArgs.push(value.missingMessage)}if(value.missingStatus){errArgs.push(value.missingStatus||HttpCode.BAD_REQUEST)}throw new RequestError(...errArgs)}return variables.session[value.name]}else if(value.oorType==="QueryVariable"){if(!variables){throw new ApplicationError("Variables context missing.")}if(!variables.query||!(value.name in variables.query)){throw new ApplicationError(`Query parameter "${value.name}" in configuration not found.`)}return variables.query[value.name]}else if(value.oorType==="SymbolToken"){return this._translateSymbolToken(value.name)}throw new Error("Not impletemented yet. "+value.oorType)}return _.mapValues(value,(v,k)=>this._translateValue(v,variables,skipSerialize,arrayToInOperator&&k[0]!=="$"))}if(Array.isArray(value)){let ret=value.map(v=>this._translateValue(v,variables,skipSerialize,arrayToInOperator));return arrayToInOperator?{$in:ret}:ret}if(skipSerialize)return value;return this._serialize(value)}}module.exports=EntityModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9FbnRpdHlNb2RlbC5qcyJdLCJuYW1lcyI6WyJIdHRwQ29kZSIsInJlcXVpcmUiLCJfIiwiZWFjaEFzeW5jXyIsImdldFZhbHVlQnlQYXRoIiwiaGFzS2V5QnlQYXRoIiwiRXJyb3JzIiwiR2VuZXJhdG9ycyIsIlR5cGVzIiwiVmFsaWRhdGlvbkVycm9yIiwiRGF0YWJhc2VFcnJvciIsIkFwcGxpY2F0aW9uRXJyb3IiLCJGZWF0dXJlcyIsIlJ1bGVzIiwiaXNOb3RoaW5nIiwiTkVFRF9PVkVSUklERSIsIm1pbmlmeUFzc29jcyIsImFzc29jcyIsInNvcnRlZCIsInVuaXEiLCJzb3J0IiwicmV2ZXJzZSIsIm1pbmlmaWVkIiwidGFrZSIsImwiLCJsZW5ndGgiLCJpIiwiayIsImZpbmQiLCJhIiwic3RhcnRzV2l0aCIsInB1c2giLCJvb3JUeXBlc1RvQnlwYXNzIiwiU2V0IiwiRW50aXR5TW9kZWwiLCJjb25zdHJ1Y3RvciIsInJhd0RhdGEiLCJPYmplY3QiLCJhc3NpZ24iLCJ2YWx1ZU9mS2V5IiwiZGF0YSIsIkFycmF5IiwiaXNBcnJheSIsIm1ldGEiLCJrZXlGaWVsZCIsInBpY2siLCJxdWVyeUNvbHVtbiIsIm5hbWUiLCJvb3JUeXBlIiwicXVlcnlCaW5FeHByIiwibGVmdCIsIm9wIiwicmlnaHQiLCJxdWVyeUZ1bmN0aW9uIiwiYXJncyIsImdldFVuaXF1ZUtleUZpZWxkc0Zyb20iLCJ1bmlxdWVLZXlzIiwiZmllbGRzIiwiZXZlcnkiLCJmIiwiaXNOaWwiLCJnZXRVbmlxdWVLZXlWYWx1ZVBhaXJzRnJvbSIsInVrRmllbGRzIiwiZ2V0TmVzdGVkT2JqZWN0IiwiZW50aXR5T2JqIiwia2V5UGF0aCIsImRlZmF1bHRWYWx1ZSIsIm5vZGVzIiwic3BsaXQiLCJtYXAiLCJrZXkiLCJlbnN1cmVSZXRyaWV2ZUNyZWF0ZWQiLCJjb250ZXh0IiwiY3VzdG9tT3B0aW9ucyIsIm9wdGlvbnMiLCIkcmV0cmlldmVDcmVhdGVkIiwiZW5zdXJlUmV0cmlldmVVcGRhdGVkIiwiJHJldHJpZXZlVXBkYXRlZCIsImVuc3VyZVJldHJpZXZlRGVsZXRlZCIsIiRyZXRyaWV2ZURlbGV0ZWQiLCJlbnN1cmVUcmFuc2FjdGlvbl8iLCJjb25uT3B0aW9ucyIsImNvbm5lY3Rpb24iLCJkYiIsImNvbm5lY3RvciIsImJlZ2luVHJhbnNhY3Rpb25fIiwiZ2V0VmFsdWVGcm9tQ29udGV4dCIsImNhY2hlZF8iLCJhc3NvY2lhdGlvbnMiLCJjb21iaW5lZEtleSIsImlzRW1wdHkiLCJqb2luIiwiY2FjaGVkRGF0YSIsIl9jYWNoZWREYXRhIiwiZmluZEFsbF8iLCIkYXNzb2NpYXRpb24iLCIkdG9EaWN0aW9uYXJ5IiwidG9EaWN0aW9uYXJ5IiwiZW50aXR5Q29sbGVjdGlvbiIsInJlZHVjZSIsImRpY3QiLCJ2IiwiZmluZE9uZV8iLCJmaW5kT3B0aW9ucyIsIl9wcmVwYXJlUXVlcmllcyIsImFwcGx5UnVsZXNfIiwiUlVMRV9CRUZPUkVfRklORCIsIl9zYWZlRXhlY3V0ZV8iLCJyZWNvcmRzIiwiZmluZF8iLCIkcmVsYXRpb25zaGlwcyIsIiRza2lwT3JtIiwidW5kZWZpbmVkIiwiX21hcFJlY29yZHNUb09iamVjdHMiLCJsb2ciLCJlbnRpdHkiLCJyZXN1bHQiLCJ0b3RhbENvdW50Iiwicm93cyIsIiR0b3RhbENvdW50IiwiYWZ0ZXJGaW5kQWxsXyIsInJldCIsInRvdGFsSXRlbXMiLCJpdGVtcyIsIiRvZmZzZXQiLCJvZmZzZXQiLCIkbGltaXQiLCJsaW1pdCIsImNyZWF0ZV8iLCJjcmVhdGVPcHRpb25zIiwicmF3T3B0aW9ucyIsInJhdyIsIl9leHRyYWN0QXNzb2NpYXRpb25zIiwibmVlZENyZWF0ZUFzc29jcyIsImJlZm9yZUNyZWF0ZV8iLCJyZXR1cm4iLCJzdWNjZXNzIiwiX3ByZXBhcmVFbnRpdHlEYXRhXyIsIlJVTEVfQkVGT1JFX0NSRUFURSIsIl9pbnRlcm5hbEJlZm9yZUNyZWF0ZV8iLCJsYXRlc3QiLCJmcmVlemUiLCJfaW50ZXJuYWxBZnRlckNyZWF0ZV8iLCJxdWVyeUtleSIsIlJVTEVfQUZURVJfQ1JFQVRFIiwiX2NyZWF0ZUFzc29jc18iLCJhZnRlckNyZWF0ZV8iLCJ1cGRhdGVPbmVfIiwidXBkYXRlT3B0aW9ucyIsIiRieXBhc3NSZWFkT25seSIsInJlYXNvbiIsIl91cGRhdGVfIiwidXBkYXRlTWFueV8iLCJmb3JTaW5nbGVSZWNvcmQiLCJjb25kaXRpb25GaWVsZHMiLCIkcXVlcnkiLCJvbWl0IiwidG9VcGRhdGUiLCJiZWZvcmVVcGRhdGVfIiwiYmVmb3JlVXBkYXRlTWFueV8iLCJSVUxFX0JFRk9SRV9VUERBVEUiLCJfaW50ZXJuYWxCZWZvcmVVcGRhdGVfIiwiX2ludGVybmFsQmVmb3JlVXBkYXRlTWFueV8iLCJ1cGRhdGVfIiwiX2ludGVybmFsQWZ0ZXJVcGRhdGVfIiwiX2ludGVybmFsQWZ0ZXJVcGRhdGVNYW55XyIsIlJVTEVfQUZURVJfVVBEQVRFIiwiX3VwZGF0ZUFzc29jc18iLCJhZnRlclVwZGF0ZV8iLCJhZnRlclVwZGF0ZU1hbnlfIiwicmVwbGFjZU9uZV8iLCJfZG9SZXBsYWNlT25lXyIsImRlbGV0ZU9uZV8iLCJkZWxldGVPcHRpb25zIiwiX2RlbGV0ZV8iLCJkZWxldGVNYW55XyIsInRvRGVsZXRlIiwiYmVmb3JlRGVsZXRlXyIsImJlZm9yZURlbGV0ZU1hbnlfIiwiUlVMRV9CRUZPUkVfREVMRVRFIiwiX2ludGVybmFsQmVmb3JlRGVsZXRlXyIsIl9pbnRlcm5hbEJlZm9yZURlbGV0ZU1hbnlfIiwiZGVsZXRlXyIsIl9pbnRlcm5hbEFmdGVyRGVsZXRlXyIsIl9pbnRlcm5hbEFmdGVyRGVsZXRlTWFueV8iLCJSVUxFX0FGVEVSX0RFTEVURSIsImFmdGVyRGVsZXRlXyIsImFmdGVyRGVsZXRlTWFueV8iLCJfY29udGFpbnNVbmlxdWVLZXkiLCJoYXNLZXlOYW1lT25seSIsImhhc05vdE51bGxLZXkiLCJoYXNLZXlzIiwiX2Vuc3VyZUNvbnRhaW5zVW5pcXVlS2V5IiwiY29uZGl0aW9uIiwiY29udGFpbnNVbmlxdWVLZXlBbmRWYWx1ZSIsImNvbnRhaW5zVW5pcXVlS2V5T25seSIsIkpTT04iLCJzdHJpbmdpZnkiLCJpc1VwZGF0aW5nIiwiaTE4biIsImV4aXN0aW5nIiwiJGV4aXN0aW5nIiwib3BPcHRpb25zIiwiX2RlcGVuZHNPbkV4aXN0aW5nRGF0YSIsIiRyZXRyaWV2ZUV4aXN0aW5nIiwiZmllbGRJbmZvIiwiZmllbGROYW1lIiwidmFsdWUiLCJyZWFkT25seSIsImhhcyIsImZyZWV6ZUFmdGVyTm9uRGVmYXVsdCIsImRlZmF1bHQiLCJvcHRpb25hbCIsImlzUGxhaW5PYmplY3QiLCJzYW5pdGl6ZSIsImVycm9yIiwibWVzc2FnZSIsInN0YWNrIiwiZm9yY2VVcGRhdGUiLCJ1cGRhdGVCeURiIiwiYXV0byIsImNyZWF0ZUJ5RGIiLCJoYXNPd25Qcm9wZXJ0eSIsIl90cmFuc2xhdGVWYWx1ZSIsIiR2YXJpYWJsZXMiLCJSVUxFX0FGVEVSX1ZBTElEQVRJT04iLCJhcHBseU1vZGlmaWVyc18iLCJtYXBWYWx1ZXMiLCIkcmVxdWlyZVNwbGl0Q29sdW1ucyIsIl9zZXJpYWxpemVCeVR5cGVJbmZvIiwiZXhlY3V0b3IiLCJiaW5kIiwiY29tbWl0XyIsImxhdGVzdERhdGEiLCJyb2xsYmFja18iLCJfZGVwZW5kZW5jeUNoYW5nZWQiLCJkZXBzIiwiZmllbGREZXBlbmRlbmNpZXMiLCJkIiwicmVmZXJlbmNlIiwiX3JlZmVyZW5jZUV4aXN0IiwiaW5wdXQiLCJyZWYiLCJwb3MiLCJpbmRleE9mIiwic3Vic3RyIiwiaGFzRGVwZW5kcyIsIm51bGxEZXBlbmRzIiwiZGVwIiwid2hlbk51bGwiLCJhZGQiLCJhdExlYXN0T25lTm90TnVsbCIsImZlYXR1cmVzIiwiZmllbGQiLCJfaGFzUmVzZXJ2ZWRLZXlzIiwib2JqIiwibm9ybWFsaXplZE9wdGlvbnMiLCJxdWVyeSIsImZvck93biIsIiRieXBhc3NFbnN1cmVVbmlxdWUiLCIkZ3JvdXBCeSIsImhhdmluZyIsIiRwcm9qZWN0aW9uIiwiX3ByZXBhcmVBc3NvY2lhdGlvbnMiLCJFcnJvciIsIl90cmFuc2xhdGVTeW1ib2xUb2tlbiIsIl9zZXJpYWxpemUiLCJpbmZvIiwidmFyaWFibGVzIiwic2tpcFNlcmlhbGl6ZSIsImFycmF5VG9Jbk9wZXJhdG9yIiwic2Vzc2lvbiIsImVyckFyZ3MiLCJtaXNzaW5nTWVzc2FnZSIsIm1pc3NpbmdTdGF0dXMiLCJCQURfUkVRVUVTVCIsIlJlcXVlc3RFcnJvciIsIiRpbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLGEsdUNBRUEsS0FBTUEsQ0FBQUEsUUFBUSxDQUFHQyxPQUFPLENBQUMsbUJBQUQsQ0FBeEIsQ0FDQSxLQUFNLENBQUVDLENBQUYsQ0FBS0MsVUFBTCxDQUFpQkMsY0FBakIsQ0FBaUNDLFlBQWpDLEVBQWtESixPQUFPLENBQUMsVUFBRCxDQUEvRCxDQUNBLEtBQU1LLENBQUFBLE1BQU0sQ0FBR0wsT0FBTyxDQUFDLGdCQUFELENBQXRCLENBQ0EsS0FBTU0sQ0FBQUEsVUFBVSxDQUFHTixPQUFPLENBQUMsY0FBRCxDQUExQixDQUNBLEtBQU1PLENBQUFBLEtBQUssQ0FBR1AsT0FBTyxDQUFDLFNBQUQsQ0FBckIsQ0FDQSxLQUFNLENBQUVRLGVBQUYsQ0FBbUJDLGFBQW5CLENBQWtDQyxnQkFBbEMsRUFBdURMLE1BQTdELENBQ0EsS0FBTU0sQ0FBQUEsUUFBUSxDQUFHWCxPQUFPLENBQUMsa0JBQUQsQ0FBeEIsQ0FDQSxLQUFNWSxDQUFBQSxLQUFLLENBQUdaLE9BQU8sQ0FBQyxlQUFELENBQXJCLENBRUEsS0FBTSxDQUFFYSxTQUFGLEVBQWdCYixPQUFPLENBQUMsZUFBRCxDQUE3QixDQUVBLEtBQU1jLENBQUFBLGFBQWEsQ0FBRyxrREFBdEIsQ0FFQSxRQUFTQyxDQUFBQSxZQUFULENBQXNCQyxNQUF0QixDQUE4QixDQUMxQixHQUFJQyxDQUFBQSxNQUFNLENBQUdoQixDQUFDLENBQUNpQixJQUFGLENBQU9GLE1BQVAsRUFBZUcsSUFBZixHQUFzQkMsT0FBdEIsRUFBYixDQUVBLEdBQUlDLENBQUFBLFFBQVEs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LENBQUMsRUFBSSxLQUFLMEgsZUFBTCxDQUFxQjFILENBQXJCLENBQXdCdUssU0FBeEIsQ0FBbUNDLGFBQW5DLENBQWtEQyxpQkFBbEQsQ0FBZixDQUFWLENBQ0EsTUFBT0EsQ0FBQUEsaUJBQWlCLENBQUcsQ0FBRU8sR0FBRyxDQUFFNUosR0FBUCxDQUFILENBQWtCQSxHQUM3QyxDQUVELEdBQUlvSixhQUFKLENBQW1CLE1BQU85RCxDQUFBQSxLQUFQLENBRW5CLE1BQU8sTUFBSzJELFVBQUwsQ0FBZ0IzRCxLQUFoQixDQUNWLENBbHJDYSxDQXFyQ2xCdUUsTUFBTSxDQUFDQyxPQUFQLENBQWlCclAsV0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgSHR0cENvZGUgPSByZXF1aXJlKCdodHRwLXN0YXR1cy1jb2RlcycpO1xuY29uc3QgeyBfLCBlYWNoQXN5bmNfLCBnZXRWYWx1ZUJ5UGF0aCwgaGFzS2V5QnlQYXRoIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgRXJyb3JzID0gcmVxdWlyZSgnLi91dGlscy9FcnJvcnMnKTtcbmNvbnN0IEdlbmVyYXRvcnMgPSByZXF1aXJlKCcuL0dlbmVyYXRvcnMnKTtcbmNvbnN0IFR5cGVzID0gcmVxdWlyZSgnLi90eXBlcycpO1xuY29uc3QgeyBWYWxpZGF0aW9uRXJyb3IsIERhdGFiYXNlRXJyb3IsIEFwcGxpY2F0aW9uRXJyb3IgfSA9IEVycm9ycztcbmNvbnN0IEZlYXR1cmVzID0gcmVxdWlyZSgnLi9lbnRpdHlGZWF0dXJlcycpO1xuY29uc3QgUnVsZXMgPSByZXF1aXJlKCcuLi9lbnVtL1J1bGVzJyk7XG5cbmNvbnN0IHsgaXNOb3RoaW5nIH0gPSByZXF1aXJlKCcuLi91dGlscy9sYW5nJyk7XG5cbmNvbnN0IE5FRURfT1ZFUlJJREUgPSAnU2hvdWxkIGJlIG92ZXJyaWRlZCBieSBkcml2ZXItc3BlY2lmaWMgc3ViY2xhc3MuJztcblxuZnVuY3Rpb24gbWluaWZ5QXNzb2NzKGFzc29jcykge1xuICAgIGxldCBzb3J0ZWQgPSBfLnVuaXEoYXNzb2NzKS5zb3J0KCkucmV2ZXJzZSgpO1xuXG4gICAgbGV0IG1pbmlmaWVkID0gXy50YWtlKHNvcnRlZCwgMSksIGwgPSBzb3J0ZWQubGVuZ3RoIC0gMTtcblxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGxldCBrID0gc29ydGVkW2ldICsgJy4nO1xuXG4gICAgICAgIGlmICghXy5maW5kKG1pbmlmaWVkLCBhID0+IGEuc3RhcnRzV2l0aChrKSkpIHtcbiAgICAgICAgICAgIG1pbmlmaWVkLnB1c2goc29ydGVkW2ldKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtaW5pZmllZDtcbn1cblxuY29uc3Qgb29yVHlwZXNUb0J5cGFzcyA9IG5ldyBTZXQoWydDb2x1bW5SZWZlcmVuY2UnLCAnRnVuY3Rpb24nLCAnQmluYXJ5RXhwcmVzc2lvbiddKTtcblxuLyoqXG4gKiBCYXNlIGVudGl0eSBtb2RlbCBjbGFzcy5cbiAqIEBjbGFzc1xuICovXG5jbGFzcyBFbnRpdHlNb2RlbCB7XG4gICAgLyoqICAgICBcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3Jhd0RhdGFdIC0gUmF3IGRhdGEgb2JqZWN0IFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHJhd0RhdGEpIHtcbiAgICAgICAgaWYgKHJhd0RhdGEpIHtcbiAgICAgICAgICAgIC8vb25seSBwaWNrIHRob3NlIHRoYXQgYXJlIGZpZWxkcyBvZiB0aGlzIGVudGl0eVxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCByYXdEYXRhKTtcbiAgICAgICAgfSBcbiAgICB9ICAgIFxuXG4gICAgc3RhdGljIHZhbHVlT2ZLZXkoZGF0YSkge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh0aGlzLm1ldGEua2V5RmllbGQpID8gXy5waWNrKGRhdGEsIHRoaXMubWV0YS5rZXlGaWVsZCkgOiBkYXRhW3RoaXMubWV0YS5rZXlGaWVsZF07XG4gICAgfVxuXG4gICAgc3RhdGljIHF1ZXJ5Q29sdW1uKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9vclR5cGU6ICdDb2x1bW5SZWZlcmVuY2UnLFxuICAgICAgICAgICAgbmFtZVxuICAgICAgICB9OyBcbiAgICB9XG5cbiAgICBzdGF0aWMgcXVlcnlCaW5FeHByKGxlZnQsIG9wLCByaWdodCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb29yVHlwZTogJ0JpbmFyeUV4cHJlc3Npb24nLFxuICAgICAgICAgICAgbGVmdCxcbiAgICAgICAgICAgIG9wLFxuICAgICAgICAgICAgcmlnaHRcbiAgICAgICAgfTsgXG4gICAgfVxuXG4gICAgc3RhdGljIHF1ZXJ5RnVuY3Rpb24obmFtZSwgLi4uYXJncykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb29yVHlwZTogJ0Z1bmN0aW9uJyxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBhcmdzXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGZpZWxkIG5hbWVzIGFycmF5IG9mIGEgdW5pcXVlIGtleSBmcm9tIGlucHV0IGRhdGEuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBJbnB1dCBkYXRhLlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRVbmlxdWVLZXlGaWVsZHNGcm9tKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIF8uZmluZCh0aGlzLm1ldGEudW5pcXVlS2V5cywgZmllbGRzID0+IF8uZXZlcnkoZmllbGRzLCBmID0+ICFfLmlzTmlsKGRhdGFbZl0pKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGtleS12YWx1ZSBwYWlycyBvZiBhIHVuaXF1ZSBrZXkgZnJvbSBpbnB1dCBkYXRhLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gSW5wdXQgZGF0YS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0VW5pcXVlS2V5VmFsdWVQYWlyc0Zyb20oZGF0YSkgeyAgXG4gICAgICAgIHByZTogdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnO1xuICAgICAgICBcbiAgICAgICAgbGV0IHVrRmllbGRzID0gdGhpcy5nZXRVbmlxdWVLZXlGaWVsZHNGcm9tKGRhdGEpO1xuICAgICAgICByZXR1cm4gXy5waWNrKGRhdGEsIHVrRmllbGRzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgbmVzdGVkIG9iamVjdCBvZiBhbiBlbnRpdHkuXG4gICAgICogQHBhcmFtIHsqfSBlbnRpdHlPYmogXG4gICAgICogQHBhcmFtIHsqfSBrZXlQYXRoIFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXROZXN0ZWRPYmplY3QoZW50aXR5T2JqLCBrZXlQYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgbGV0IG5vZGVzID0gKEFycmF5LmlzQXJyYXkoa2V5UGF0aCkgPyBrZXlQYXRoIDoga2V5UGF0aC5zcGxpdCgnLicpKS5tYXAoa2V5ID0+IGtleVswXSA9PT0gJzonID8ga2V5IDogKCc6JyArIGtleSkpO1xuICAgICAgICByZXR1cm4gZ2V0VmFsdWVCeVBhdGgoZW50aXR5T2JqLCBub2RlcywgZGVmYXVsdFZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbnN1cmUgY29udGV4dC5sYXRlc3QgYmUgdGhlIGp1c3QgY3JlYXRlZCBlbnRpdHkuXG4gICAgICogQHBhcmFtIHsqfSBjb250ZXh0IFxuICAgICAqIEBwYXJhbSB7Kn0gY3VzdG9tT3B0aW9ucyBcbiAgICAgKi9cbiAgICBzdGF0aWMgZW5zdXJlUmV0cmlldmVDcmVhdGVkKGNvbnRleHQsIGN1c3RvbU9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFjb250ZXh0Lm9wdGlvbnMuJHJldHJpZXZlQ3JlYXRlZCkge1xuICAgICAgICAgICAgY29udGV4dC5vcHRpb25zLiRyZXRyaWV2ZUNyZWF0ZWQgPSBjdXN0b21PcHRpb25zID8gY3VzdG9tT3B0aW9ucyA6IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbnN1cmUgY29udGV4dC5sYXRlc3QgYmUgdGhlIGp1c3QgdXBkYXRlZCBlbnRpdHkuXG4gICAgICogQHBhcmFtIHsqfSBjb250ZXh0IFxuICAgICAqIEBwYXJhbSB7Kn0gY3VzdG9tT3B0aW9ucyBcbiAgICAgKi9cbiAgICBzdGF0aWMgZW5zdXJlUmV0cmlldmVVcGRhdGVkKGNvbnRleHQsIGN1c3RvbU9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFjb250ZXh0Lm9wdGlvbnMuJHJldHJpZXZlVXBkYXRlZCkge1xuICAgICAgICAgICAgY29udGV4dC5vcHRpb25zLiRyZXRyaWV2ZVVwZGF0ZWQgPSBjdXN0b21PcHRpb25zID8gY3VzdG9tT3B0aW9ucyA6IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbnN1cmUgY29udGV4dC5leGlzaW50ZyBiZSB0aGUganVzdCBkZWxldGVkIGVudGl0eS5cbiAgICAgKiBAcGFyYW0geyp9IGNvbnRleHQgXG4gICAgICogQHBhcmFtIHsqfSBjdXN0b21PcHRpb25zIFxuICAgICAqL1xuICAgIHN0YXRpYyBlbnN1cmVSZXRyaWV2ZURlbGV0ZWQoY29udGV4dCwgY3VzdG9tT3B0aW9ucykge1xuICAgICAgICBpZiAoIWNvbnRleHQub3B0aW9ucy4kcmV0cmlldmVEZWxldGVkKSB7XG4gICAgICAgICAgICBjb250ZXh0Lm9wdGlvbnMuJHJldHJpZXZlRGVsZXRlZCA9IGN1c3RvbU9wdGlvbnMgPyBjdXN0b21PcHRpb25zIDogdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuc3VyZSB0aGUgdXBjb21pbmcgb3BlcmF0aW9ucyBhcmUgZXhlY3V0ZWQgaW4gYSB0cmFuc2FjdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IGNvbnRleHQgXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGVuc3VyZVRyYW5zYWN0aW9uXyhjb250ZXh0KSB7XG4gICAgICAgIGlmICghY29udGV4dC5jb25uT3B0aW9ucyB8fCAhY29udGV4dC5jb25uT3B0aW9ucy5jb25uZWN0aW9uKSB7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY29udGV4dC5jb25uT3B0aW9ucyB8fCAoY29udGV4dC5jb25uT3B0aW9ucyA9IHt9KTtcblxuICAgICAgICAgICAgY29udGV4dC5jb25uT3B0aW9ucy5jb25uZWN0aW9uID0gYXdhaXQgdGhpcy5kYi5jb25uZWN0b3IuYmVnaW5UcmFuc2FjdGlvbl8oKTsgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgfSBcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdmFsdWUgZnJvbSBjb250ZXh0LCBlLmcuIHNlc3Npb24sIHF1ZXJ5IC4uLlxuICAgICAqIEBwYXJhbSB7Kn0gY29udGV4dCBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAgICogQHJldHVybnMgeyp9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRWYWx1ZUZyb21Db250ZXh0KGNvbnRleHQsIGtleSkge1xuICAgICAgICByZXR1cm4gZ2V0VmFsdWVCeVBhdGgoY29udGV4dCwgJ29wdGlvbnMuJHZhcmlhYmxlcy4nICsga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBway1pbmRleGVkIGhhc2h0YWJsZSB3aXRoIGFsbCB1bmRlbGV0ZWQgZGF0YVxuICAgICAqIHtzdHJpbmd9IFtrZXldIC0gVGhlIGtleSBmaWVsZCB0byB1c2VkIGJ5IHRoZSBoYXNodGFibGUuXG4gICAgICoge2FycmF5fSBbYXNzb2NpYXRpb25zXSAtIFdpdGggYW4gYXJyYXkgb2YgYXNzb2NpYXRpb25zLlxuICAgICAqIHtvYmplY3R9IFtjb25uT3B0aW9uc10gLSBDb25uZWN0aW9uIG9wdGlvbnMsIGUuZy4gdHJhbnNhY3Rpb24gaGFuZGxlXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGNhY2hlZF8oa2V5LCBhc3NvY2lhdGlvbnMsIGNvbm5PcHRpb25zKSB7XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIGxldCBjb21iaW5lZEtleSA9IGtleTtcblxuICAgICAgICAgICAgaWYgKCFfLmlzRW1wdHkoYXNzb2NpYXRpb25zKSkge1xuICAgICAgICAgICAgICAgIGNvbWJpbmVkS2V5ICs9ICcvJyArIG1pbmlmeUFzc29jcyhhc3NvY2lhdGlvbnMpLmpvaW4oJyYnKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgY2FjaGVkRGF0YTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLl9jYWNoZWREYXRhKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVkRGF0YSA9IHt9O1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9jYWNoZWREYXRhW2NvbWJpbmVkS2V5XSkge1xuICAgICAgICAgICAgICAgIGNhY2hlZERhdGEgPSB0aGlzLl9jYWNoZWREYXRhW2NvbWJpbmVkS2V5XTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFjYWNoZWREYXRhKSB7XG4gICAgICAgICAgICAgICAgY2FjaGVkRGF0YSA9IHRoaXMuX2NhY2hlZERhdGFbY29tYmluZWRLZXldID0gYXdhaXQgdGhpcy5maW5kQWxsXyh7ICRhc3NvY2lhdGlvbjogYXNzb2NpYXRpb25zLCAkdG9EaWN0aW9uYXJ5OiBrZXkgfSwgY29ubk9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZERhdGE7XG4gICAgICAgIH0gXG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVkXyh0aGlzLm1ldGEua2V5RmllbGQsIGFzc29jaWF0aW9ucywgY29ubk9wdGlvbnMpO1xuICAgIH1cblxuICAgIHN0YXRpYyB0b0RpY3Rpb25hcnkoZW50aXR5Q29sbGVjdGlvbiwga2V5KSB7XG4gICAgICAgIGtleSB8fCAoa2V5ID0gdGhpcy5tZXRhLmtleUZpZWxkKTtcblxuICAgICAgICByZXR1cm4gZW50aXR5Q29sbGVjdGlvbi5yZWR1Y2UoKGRpY3QsIHYpID0+IHtcbiAgICAgICAgICAgIGRpY3RbdltrZXldXSA9IHY7XG4gICAgICAgICAgICByZXR1cm4gZGljdDtcbiAgICAgICAgfSwge30pO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBGaW5kIG9uZSByZWNvcmQsIHJldHVybnMgYSBtb2RlbCBvYmplY3QgY29udGFpbmluZyB0aGUgcmVjb3JkIG9yIHVuZGVmaW5lZCBpZiBub3RoaW5nIGZvdW5kLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fGFycmF5fSBjb25kaXRpb24gLSBRdWVyeSBjb25kaXRpb24sIGtleS12YWx1ZSBwYWlyIHdpbGwgYmUgam9pbmVkIHdpdGggJ0FORCcsIGFycmF5IGVsZW1lbnQgd2lsbCBiZSBqb2luZWQgd2l0aCAnT1InLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbZmluZE9wdGlvbnNdIC0gZmluZE9wdGlvbnMgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbZmluZE9wdGlvbnMuJGFzc29jaWF0aW9uXSAtIEpvaW5pbmdzXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R9IFtmaW5kT3B0aW9ucy4kcHJvamVjdGlvbl0gLSBTZWxlY3RlZCBmaWVsZHNcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW2ZpbmRPcHRpb25zLiRxdWVyeV0gLSBFeHRyYSBjb25kaXRpb25cbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW2ZpbmRPcHRpb25zLiRncm91cEJ5XSAtIEdyb3VwIGJ5IGZpZWxkc1xuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbZmluZE9wdGlvbnMuJG9yZGVyQnldIC0gT3JkZXIgYnkgZmllbGRzXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFtmaW5kT3B0aW9ucy4kb2Zmc2V0XSAtIE9mZnNldFxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbZmluZE9wdGlvbnMuJGxpbWl0XSAtIExpbWl0ICAgICAgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW2ZpbmRPcHRpb25zLiRpbmNsdWRlRGVsZXRlZD1mYWxzZV0gLSBJbmNsdWRlIHRob3NlIG1hcmtlZCBhcyBsb2dpY2FsIGRlbGV0ZWQuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtjb25uT3B0aW9uc11cbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW2Nvbm5PcHRpb25zLmNvbm5lY3Rpb25dXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGZpbmRPbmVfKGZpbmRPcHRpb25zLCBjb25uT3B0aW9ucykgeyBcbiAgICAgICAgcHJlOiBmaW5kT3B0aW9ucztcblxuICAgICAgICBmaW5kT3B0aW9ucyA9IHRoaXMuX3ByZXBhcmVRdWVyaWVzKGZpbmRPcHRpb25zLCB0cnVlIC8qIGZvciBzaW5nbGUgcmVjb3JkICovKTtcbiAgICAgICAgXG4gICAgICAgIGxldCBjb250ZXh0ID0geyAgICAgICAgICAgICBcbiAgICAgICAgICAgIG9wdGlvbnM6IGZpbmRPcHRpb25zLFxuICAgICAgICAgICAgY29ubk9wdGlvbnNcbiAgICAgICAgfTsgXG5cbiAgICAgICAgYXdhaXQgRmVhdHVyZXMuYXBwbHlSdWxlc18oUnVsZXMuUlVMRV9CRUZPUkVfRklORCwgdGhpcywgY29udGV4dCk7ICBcblxuICAgICAgICByZXR1cm4gdGhpcy5fc2FmZUV4ZWN1dGVfKGFzeW5jIChjb250ZXh0KSA9PiB7ICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgcmVjb3JkcyA9IGF3YWl0IHRoaXMuZGIuY29ubmVjdG9yLmZpbmRfKFxuICAgICAgICAgICAgICAgIHRoaXMubWV0YS5uYW1lLCBcbiAgICAgICAgICAgICAgICBjb250ZXh0Lm9wdGlvbnMsIFxuICAgICAgICAgICAgICAgIGNvbnRleHQuY29ubk9wdGlvbnNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoIXJlY29yZHMpIHRocm93IG5ldyBEYXRhYmFzZUVycm9yKCdjb25uZWN0b3IuZmluZF8oKSByZXR1cm5zIHVuZGVmaW5lZCBkYXRhIHJlY29yZC4nKTtcblxuICAgICAgICAgICAgaWYgKGZpbmRPcHRpb25zLiRyZWxhdGlvbnNoaXBzICYmICFmaW5kT3B0aW9ucy4kc2tpcE9ybSkgeyAgXG4gICAgICAgICAgICAgICAgLy9yb3dzLCBjb2xvdW1ucywgYWxpYXNNYXAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChyZWNvcmRzWzBdLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgIHJlY29yZHMgPSB0aGlzLl9tYXBSZWNvcmRzVG9PYmplY3RzKHJlY29yZHMsIGZpbmRPcHRpb25zLiRyZWxhdGlvbnNoaXBzKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVjb3Jkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocmVjb3Jkcy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRiLmNvbm5lY3Rvci5sb2coJ2Vycm9yJywgYGZpbmRPbmUoKSByZXR1cm5zIG1vcmUgdGhhbiBvbmUgcmVjb3JkLmAsIHsgZW50aXR5OiB0aGlzLm1ldGEubmFtZSwgb3B0aW9uczogY29udGV4dC5vcHRpb25zIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gcmVjb3Jkc1swXTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSwgY29udGV4dCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluZCByZWNvcmRzIG1hdGNoaW5nIHRoZSBjb25kaXRpb24sIHJldHVybnMgYW4gYXJyYXkgb2YgcmVjb3Jkcy4gICAgIFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbZmluZE9wdGlvbnNdIC0gZmluZE9wdGlvbnMgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbZmluZE9wdGlvbnMuJGFzc29jaWF0aW9uXSAtIEpvaW5pbmdzXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R9IFtmaW5kT3B0aW9ucy4kcHJvamVjdGlvbl0gLSBTZWxlY3RlZCBmaWVsZHNcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW2ZpbmRPcHRpb25zLiRxdWVyeV0gLSBFeHRyYSBjb25kaXRpb25cbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW2ZpbmRPcHRpb25zLiRncm91cEJ5XSAtIEdyb3VwIGJ5IGZpZWxkc1xuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbZmluZE9wdGlvbnMuJG9yZGVyQnldIC0gT3JkZXIgYnkgZmllbGRzXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFtmaW5kT3B0aW9ucy4kb2Zmc2V0XSAtIE9mZnNldFxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbZmluZE9wdGlvbnMuJGxpbWl0XSAtIExpbWl0IFxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbZmluZE9wdGlvbnMuJHRvdGFsQ291bnRdIC0gUmV0dXJuIHRvdGFsQ291bnQgICAgICAgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW2ZpbmRPcHRpb25zLiRpbmNsdWRlRGVsZXRlZD1mYWxzZV0gLSBJbmNsdWRlIHRob3NlIG1hcmtlZCBhcyBsb2dpY2FsIGRlbGV0ZWQuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtjb25uT3B0aW9uc11cbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW2Nvbm5PcHRpb25zLmNvbm5lY3Rpb25dXG4gICAgICogQHJldHVybnMge2FycmF5fVxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBmaW5kQWxsXyhmaW5kT3B0aW9ucywgY29ubk9wdGlvbnMpIHsgIFxuICAgICAgICBmaW5kT3B0aW9ucyA9IHRoaXMuX3ByZXBhcmVRdWVyaWVzKGZpbmRPcHRpb25zKTtcblxuICAgICAgICBsZXQgY29udGV4dCA9IHsgICAgICAgICAgICAgXG4gICAgICAgICAgICBvcHRpb25zOiBmaW5kT3B0aW9ucyxcbiAgICAgICAgICAgIGNvbm5PcHRpb25zXG4gICAgICAgIH07IFxuXG4gICAgICAgIGF3YWl0IEZlYXR1cmVzLmFwcGx5UnVsZXNfKFJ1bGVzLlJVTEVfQkVGT1JFX0ZJTkQsIHRoaXMsIGNvbnRleHQpOyAgXG5cbiAgICAgICAgbGV0IHRvdGFsQ291bnQ7XG5cbiAgICAgICAgbGV0IHJvd3MgPSBhd2FpdCB0aGlzLl9zYWZlRXhlY3V0ZV8oYXN5bmMgKGNvbnRleHQpID0+IHsgICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgcmVjb3JkcyA9IGF3YWl0IHRoaXMuZGIuY29ubmVjdG9yLmZpbmRfKFxuICAgICAgICAgICAgICAgIHRoaXMubWV0YS5uYW1lLCBcbiAgICAgICAgICAgICAgICBjb250ZXh0Lm9wdGlvbnMsIFxuICAgICAgICAgICAgICAgIGNvbnRleHQuY29ubk9wdGlvbnNcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmICghcmVjb3JkcykgdGhyb3cgbmV3IERhdGFiYXNlRXJyb3IoJ2Nvbm5lY3Rvci5maW5kXygpIHJldHVybnMgdW5kZWZpbmVkIGRhdGEgcmVjb3JkLicpO1xuXG4gICAgICAgICAgICBpZiAoZmluZE9wdGlvbnMuJHJlbGF0aW9uc2hpcHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZmluZE9wdGlvbnMuJHRvdGFsQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdG90YWxDb3VudCA9IHJlY29yZHNbM107XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFmaW5kT3B0aW9ucy4kc2tpcE9ybSkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHJlY29yZHMgPSB0aGlzLl9tYXBSZWNvcmRzVG9PYmplY3RzKHJlY29yZHMsIGZpbmRPcHRpb25zLiRyZWxhdGlvbnNoaXBzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWNvcmRzID0gcmVjb3Jkc1swXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChmaW5kT3B0aW9ucy4kdG90YWxDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICB0b3RhbENvdW50ID0gcmVjb3Jkc1sxXTtcbiAgICAgICAgICAgICAgICAgICAgcmVjb3JkcyA9IHJlY29yZHNbMF07XG4gICAgICAgICAgICAgICAgfSAgICBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWZ0ZXJGaW5kQWxsXyhjb250ZXh0LCByZWNvcmRzKTsgICAgICAgICAgICBcbiAgICAgICAgfSwgY29udGV4dCk7XG5cbiAgICAgICAgaWYgKGZpbmRPcHRpb25zLiR0b3RhbENvdW50KSB7XG4gICAgICAgICAgICBsZXQgcmV0ID0geyB0b3RhbEl0ZW1zOiB0b3RhbENvdW50LCBpdGVtczogcm93cyB9O1xuXG4gICAgICAgICAgICBpZiAoIWlzTm90aGluZyhmaW5kT3B0aW9ucy4kb2Zmc2V0KSkge1xuICAgICAgICAgICAgICAgIHJldC5vZmZzZXQgPSBmaW5kT3B0aW9ucy4kb2Zmc2V0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWlzTm90aGluZyhmaW5kT3B0aW9ucy4kbGltaXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0LmxpbWl0ID0gZmluZE9wdGlvbnMuJGxpbWl0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJvd3M7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGVudGl0eSB3aXRoIGdpdmVuIGRhdGEuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBFbnRpdHkgZGF0YSBcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW2NyZWF0ZU9wdGlvbnNdIC0gQ3JlYXRlIG9wdGlvbnMgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW2NyZWF0ZU9wdGlvbnMuJHJldHJpZXZlQ3JlYXRlZD1mYWxzZV0gLSBSZXRyaWV2ZSB0aGUgbmV3bHkgY3JlYXRlZCByZWNvcmQgZnJvbSBkYi4gICAgIFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbY29ubk9wdGlvbnNdXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R9IFtjb25uT3B0aW9ucy5jb25uZWN0aW9uXVxuICAgICAqIEByZXR1cm5zIHtFbnRpdHlNb2RlbH1cbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgY3JlYXRlXyhkYXRhLCBjcmVhdGVPcHRpb25zLCBjb25uT3B0aW9ucykge1xuICAgICAgICBsZXQgcmF3T3B0aW9ucyA9IGNyZWF0ZU9wdGlvbnM7XG5cbiAgICAgICAgaWYgKCFjcmVhdGVPcHRpb25zKSB7IFxuICAgICAgICAgICAgY3JlYXRlT3B0aW9ucyA9IHt9OyBcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBbIHJhdywgYXNzb2NpYXRpb25zIF0gPSB0aGlzLl9leHRyYWN0QXNzb2NpYXRpb25zKGRhdGEpO1xuXG4gICAgICAgIGxldCBjb250ZXh0ID0geyBcbiAgICAgICAgICAgIHJhdywgXG4gICAgICAgICAgICByYXdPcHRpb25zLFxuICAgICAgICAgICAgb3B0aW9uczogY3JlYXRlT3B0aW9ucyxcbiAgICAgICAgICAgIGNvbm5PcHRpb25zXG4gICAgICAgIH07ICAgICAgIFxuICAgICAgICBcbiAgICAgICAgbGV0IG5lZWRDcmVhdGVBc3NvY3MgPSAhXy5pc0VtcHR5KGFzc29jaWF0aW9ucyk7XG5cbiAgICAgICAgaWYgKCEoYXdhaXQgdGhpcy5iZWZvcmVDcmVhdGVfKGNvbnRleHQpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQucmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHN1Y2Nlc3MgPSBhd2FpdCB0aGlzLl9zYWZlRXhlY3V0ZV8oYXN5bmMgKGNvbnRleHQpID0+IHsgXG4gICAgICAgICAgICBpZiAobmVlZENyZWF0ZUFzc29jcykge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZW5zdXJlVHJhbnNhY3Rpb25fKGNvbnRleHQpOyAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3ByZXBhcmVFbnRpdHlEYXRhXyhjb250ZXh0KTsgICAgICAgICAgXG5cbiAgICAgICAgICAgIGlmICghKGF3YWl0IEZlYXR1cmVzLmFwcGx5UnVsZXNfKFJ1bGVzLlJVTEVfQkVGT1JFX0NSRUFURSwgdGhpcywgY29udGV4dCkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIShhd2FpdCB0aGlzLl9pbnRlcm5hbEJlZm9yZUNyZWF0ZV8oY29udGV4dCkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250ZXh0LmxhdGVzdCA9IE9iamVjdC5mcmVlemUoY29udGV4dC5sYXRlc3QpO1xuXG4gICAgICAgICAgICBjb250ZXh0LnJlc3VsdCA9IGF3YWl0IHRoaXMuZGIuY29ubmVjdG9yLmNyZWF0ZV8oXG4gICAgICAgICAgICAgICAgdGhpcy5tZXRhLm5hbWUsIFxuICAgICAgICAgICAgICAgIGNvbnRleHQubGF0ZXN0LCBcbiAgICAgICAgICAgICAgICBjb250ZXh0LmNvbm5PcHRpb25zXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBjb250ZXh0LnJldHVybiA9IGNvbnRleHQubGF0ZXN0O1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9pbnRlcm5hbEFmdGVyQ3JlYXRlXyhjb250ZXh0KTtcblxuICAgICAgICAgICAgaWYgKCFjb250ZXh0LnF1ZXJ5S2V5KSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5xdWVyeUtleSA9IHRoaXMuZ2V0VW5pcXVlS2V5VmFsdWVQYWlyc0Zyb20oY29udGV4dC5sYXRlc3QpO1xuICAgICAgICAgICAgfSAgICAgICAgICAgIFxuXG4gICAgICAgICAgICBhd2FpdCBGZWF0dXJlcy5hcHBseVJ1bGVzXyhSdWxlcy5SVUxFX0FGVEVSX0NSRUFURSwgdGhpcywgY29udGV4dCk7XG5cbiAgICAgICAgICAgIGlmIChuZWVkQ3JlYXRlQXNzb2NzKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fY3JlYXRlQXNzb2NzXyhjb250ZXh0LCBhc3NvY2lhdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSwgY29udGV4dCk7XG5cbiAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYWZ0ZXJDcmVhdGVfKGNvbnRleHQpOyAgICAgICAgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbnRleHQucmV0dXJuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBhbiBleGlzdGluZyBlbnRpdHkgd2l0aCBnaXZlbiBkYXRhLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gRW50aXR5IGRhdGEgd2l0aCBhdCBsZWFzdCBvbmUgdW5pcXVlIGtleSAocGFpcikgZ2l2ZW5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW3VwZGF0ZU9wdGlvbnNdIC0gVXBkYXRlIG9wdGlvbnNcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW3VwZGF0ZU9wdGlvbnMuJHF1ZXJ5XSAtIEV4dHJhIGNvbmRpdGlvblxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW3VwZGF0ZU9wdGlvbnMuJHJldHJpZXZlVXBkYXRlZD1mYWxzZV0gLSBSZXRyaWV2ZSB0aGUgdXBkYXRlZCBlbnRpdHkgZnJvbSBkYXRhYmFzZSAgICAgXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtjb25uT3B0aW9uc11cbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW2Nvbm5PcHRpb25zLmNvbm5lY3Rpb25dXG4gICAgICogQHJldHVybnMge29iamVjdH1cbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgdXBkYXRlT25lXyhkYXRhLCB1cGRhdGVPcHRpb25zLCBjb25uT3B0aW9ucykge1xuICAgICAgICBpZiAodXBkYXRlT3B0aW9ucyAmJiB1cGRhdGVPcHRpb25zLiRieXBhc3NSZWFkT25seSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFwcGxpY2F0aW9uRXJyb3IoJ1VuZXhwZWN0ZWQgdXNhZ2UuJywgeyBcbiAgICAgICAgICAgICAgICBlbnRpdHk6IHRoaXMubWV0YS5uYW1lLCBcbiAgICAgICAgICAgICAgICByZWFzb246ICckYnlwYXNzUmVhZE9ubHkgb3B0aW9uIGlzIG5vdCBhbGxvdyB0byBiZSBzZXQgZnJvbSBwdWJsaWMgdXBkYXRlXyBtZXRob2QuJyxcbiAgICAgICAgICAgICAgICB1cGRhdGVPcHRpb25zXG4gICAgICAgICAgICB9KTsgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0ZV8oZGF0YSwgdXBkYXRlT3B0aW9ucywgY29ubk9wdGlvbnMsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBtYW55IGV4aXN0aW5nIGVudGl0ZXMgd2l0aCBnaXZlbiBkYXRhLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBcbiAgICAgKiBAcGFyYW0geyp9IHVwZGF0ZU9wdGlvbnMgXG4gICAgICogQHBhcmFtIHsqfSBjb25uT3B0aW9ucyBcbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgdXBkYXRlTWFueV8oZGF0YSwgdXBkYXRlT3B0aW9ucywgY29ubk9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHVwZGF0ZU9wdGlvbnMgJiYgdXBkYXRlT3B0aW9ucy4kYnlwYXNzUmVhZE9ubHkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBcHBsaWNhdGlvbkVycm9yKCdVbmV4cGVjdGVkIHVzYWdlLicsIHsgXG4gICAgICAgICAgICAgICAgZW50aXR5OiB0aGlzLm1ldGEubmFtZSwgXG4gICAgICAgICAgICAgICAgcmVhc29uOiAnJGJ5cGFzc1JlYWRPbmx5IG9wdGlvbiBpcyBub3QgYWxsb3cgdG8gYmUgc2V0IGZyb20gcHVibGljIHVwZGF0ZV8gbWV0aG9kLicsXG4gICAgICAgICAgICAgICAgdXBkYXRlT3B0aW9uc1xuICAgICAgICAgICAgfSk7ICAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl91cGRhdGVfKGRhdGEsIHVwZGF0ZU9wdGlvbnMsIGNvbm5PcHRpb25zLCBmYWxzZSk7XG4gICAgfVxuICAgIFxuICAgIHN0YXRpYyBhc3luYyBfdXBkYXRlXyhkYXRhLCB1cGRhdGVPcHRpb25zLCBjb25uT3B0aW9ucywgZm9yU2luZ2xlUmVjb3JkKSB7XG4gICAgICAgIGxldCByYXdPcHRpb25zID0gdXBkYXRlT3B0aW9ucztcblxuICAgICAgICBpZiAoIXVwZGF0ZU9wdGlvbnMpIHtcbiAgICAgICAgICAgIGxldCBjb25kaXRpb25GaWVsZHMgPSB0aGlzLmdldFVuaXF1ZUtleUZpZWxkc0Zyb20oZGF0YSk7XG4gICAgICAgICAgICBpZiAoXy5pc0VtcHR5KGNvbmRpdGlvbkZpZWxkcykpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXBwbGljYXRpb25FcnJvcignUHJpbWFyeSBrZXkgdmFsdWUocykgb3IgYXQgbGVhc3Qgb25lIGdyb3VwIG9mIHVuaXF1ZSBrZXkgdmFsdWUocykgaXMgcmVxdWlyZWQgZm9yIHVwZGF0aW5nIGFuIGVudGl0eS4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZU9wdGlvbnMgPSB7ICRxdWVyeTogXy5waWNrKGRhdGEsIGNvbmRpdGlvbkZpZWxkcykgfTtcbiAgICAgICAgICAgIGRhdGEgPSBfLm9taXQoZGF0YSwgY29uZGl0aW9uRmllbGRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBbIHJhdywgYXNzb2NpYXRpb25zIF0gPSB0aGlzLl9leHRyYWN0QXNzb2NpYXRpb25zKGRhdGEpO1xuXG4gICAgICAgIGxldCBjb250ZXh0ID0geyBcbiAgICAgICAgICAgIHJhdywgXG4gICAgICAgICAgICByYXdPcHRpb25zLFxuICAgICAgICAgICAgb3B0aW9uczogdGhpcy5fcHJlcGFyZVF1ZXJpZXModXBkYXRlT3B0aW9ucywgZm9yU2luZ2xlUmVjb3JkIC8qIGZvciBzaW5nbGUgcmVjb3JkICovKSwgICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbm5PcHRpb25zXG4gICAgICAgIH07ICAgICAgIFxuICAgICAgICBcbiAgICAgICAgbGV0IG5lZWRDcmVhdGVBc3NvY3MgPSAhXy5pc0VtcHR5KGFzc29jaWF0aW9ucyk7XG5cbiAgICAgICAgbGV0IHRvVXBkYXRlO1xuXG4gICAgICAgIGlmIChmb3JTaW5nbGVSZWNvcmQpIHtcbiAgICAgICAgICAgIHRvVXBkYXRlID0gYXdhaXQgdGhpcy5iZWZvcmVVcGRhdGVfKGNvbnRleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9VcGRhdGUgPSBhd2FpdCB0aGlzLmJlZm9yZVVwZGF0ZU1hbnlfKGNvbnRleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0b1VwZGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQucmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBsZXQgc3VjY2VzcyA9IGF3YWl0IHRoaXMuX3NhZmVFeGVjdXRlXyhhc3luYyAoY29udGV4dCkgPT4ge1xuICAgICAgICAgICAgaWYgKG5lZWRDcmVhdGVBc3NvY3MpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmVuc3VyZVRyYW5zYWN0aW9uXyhjb250ZXh0KTsgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9wcmVwYXJlRW50aXR5RGF0YV8oY29udGV4dCwgdHJ1ZSAvKiBpcyB1cGRhdGluZyAqLywgZm9yU2luZ2xlUmVjb3JkKTsgICAgICAgICAgXG5cbiAgICAgICAgICAgIGlmICghKGF3YWl0IEZlYXR1cmVzLmFwcGx5UnVsZXNfKFJ1bGVzLlJVTEVfQkVGT1JFX1VQREFURSwgdGhpcywgY29udGV4dCkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZm9yU2luZ2xlUmVjb3JkKSB7XG4gICAgICAgICAgICAgICAgdG9VcGRhdGUgPSBhd2FpdCB0aGlzLl9pbnRlcm5hbEJlZm9yZVVwZGF0ZV8oY29udGV4dCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRvVXBkYXRlID0gYXdhaXQgdGhpcy5faW50ZXJuYWxCZWZvcmVVcGRhdGVNYW55Xyhjb250ZXh0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF0b1VwZGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udGV4dC5sYXRlc3QgPSBPYmplY3QuZnJlZXplKGNvbnRleHQubGF0ZXN0KTtcblxuICAgICAgICAgICAgY29udGV4dC5yZXN1bHQgPSBhd2FpdCB0aGlzLmRiLmNvbm5lY3Rvci51cGRhdGVfKFxuICAgICAgICAgICAgICAgIHRoaXMubWV0YS5uYW1lLCBcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxhdGVzdCwgXG4gICAgICAgICAgICAgICAgY29udGV4dC5vcHRpb25zLiRxdWVyeSxcbiAgICAgICAgICAgICAgICBjb250ZXh0Lm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgY29udGV4dC5jb25uT3B0aW9uc1xuICAgICAgICAgICAgKTsgIFxuXG4gICAgICAgICAgICBjb250ZXh0LnJldHVybiA9IGNvbnRleHQubGF0ZXN0O1xuXG4gICAgICAgICAgICBpZiAoZm9yU2luZ2xlUmVjb3JkKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5faW50ZXJuYWxBZnRlclVwZGF0ZV8oY29udGV4dCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX2ludGVybmFsQWZ0ZXJVcGRhdGVNYW55Xyhjb250ZXh0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFjb250ZXh0LnF1ZXJ5S2V5KSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5xdWVyeUtleSA9IHRoaXMuZ2V0VW5pcXVlS2V5VmFsdWVQYWlyc0Zyb20oY29udGV4dC5vcHRpb25zLiRxdWVyeSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGF3YWl0IEZlYXR1cmVzLmFwcGx5UnVsZXNfKFJ1bGVzLlJVTEVfQUZURVJfVVBEQVRFLCB0aGlzLCBjb250ZXh0KTtcblxuICAgICAgICAgICAgaWYgKG5lZWRDcmVhdGVBc3NvY3MpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl91cGRhdGVBc3NvY3NfKGNvbnRleHQsIGFzc29jaWF0aW9ucyk7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LCBjb250ZXh0KTtcblxuICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgaWYgKGZvclNpbmdsZVJlY29yZCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYWZ0ZXJVcGRhdGVfKGNvbnRleHQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFmdGVyVXBkYXRlTWFueV8oY29udGV4dCk7XG4gICAgICAgICAgICB9ICAgICAgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbnRleHQucmV0dXJuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBhbiBleGlzdGluZyBlbnRpdHkgd2l0aCBnaXZlbiBkYXRhLCBvciBjcmVhdGUgb25lIGlmIG5vdCBmb3VuZC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgXG4gICAgICogQHBhcmFtIHsqfSB1cGRhdGVPcHRpb25zIFxuICAgICAqIEBwYXJhbSB7Kn0gY29ubk9wdGlvbnMgXG4gICAgICovICAgIFxuICAgIHN0YXRpYyBhc3luYyByZXBsYWNlT25lXyhkYXRhLCB1cGRhdGVPcHRpb25zLCBjb25uT3B0aW9ucykge1xuICAgICAgICBsZXQgcmF3T3B0aW9ucyA9IHVwZGF0ZU9wdGlvbnM7XG5cbiAgICAgICAgaWYgKCF1cGRhdGVPcHRpb25zKSB7XG4gICAgICAgICAgICBsZXQgY29uZGl0aW9uRmllbGRzID0gdGhpcy5nZXRVbmlxdWVLZXlGaWVsZHNGcm9tKGRhdGEpO1xuICAgICAgICAgICAgaWYgKF8uaXNFbXB0eShjb25kaXRpb25GaWVsZHMpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFwcGxpY2F0aW9uRXJyb3IoJ1ByaW1hcnkga2V5IHZhbHVlKHMpIG9yIGF0IGxlYXN0IG9uZSBncm91cCBvZiB1bmlxdWUga2V5IHZhbHVlKHMpIGlzIHJlcXVpcmVkIGZvciByZXBsYWNpbmcgYW4gZW50aXR5LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB1cGRhdGVPcHRpb25zID0geyAuLi51cGRhdGVPcHRpb25zLCAkcXVlcnk6IF8ucGljayhkYXRhLCBjb25kaXRpb25GaWVsZHMpIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cGRhdGVPcHRpb25zID0gdGhpcy5fcHJlcGFyZVF1ZXJpZXModXBkYXRlT3B0aW9ucywgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY29udGV4dCA9IHsgXG4gICAgICAgICAgICByYXc6IGRhdGEsIFxuICAgICAgICAgICAgcmF3T3B0aW9ucyxcbiAgICAgICAgICAgIG9wdGlvbnM6IHVwZGF0ZU9wdGlvbnMsXG4gICAgICAgICAgICBjb25uT3B0aW9uc1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9zYWZlRXhlY3V0ZV8oYXN5bmMgKGNvbnRleHQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kb1JlcGxhY2VPbmVfKGNvbnRleHQpOyAvLyBkaWZmZXJlbnQgZGJtcyBoYXMgZGlmZmVyZW50IHJlcGxhY2luZyBzdHJhdGVneVxuICAgICAgICB9LCBjb250ZXh0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYW4gZXhpc3RpbmcgZW50aXR5IHdpdGggZ2l2ZW4gZGF0YS4gICAgIFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbZGVsZXRlT3B0aW9uc10gLSBVcGRhdGUgb3B0aW9uc1xuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbZGVsZXRlT3B0aW9ucy4kcXVlcnldIC0gRXh0cmEgY29uZGl0aW9uXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbZGVsZXRlT3B0aW9ucy4kcmV0cmlldmVEZWxldGVkPWZhbHNlXSAtIFJldHJpZXZlIHRoZSBkZWxldGVkIGVudGl0eSBmcm9tIGRhdGFiYXNlICAgICBcbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFtkZWxldGVPcHRpb25zLiRwaHlzaWNhbERlbGV0aW9uPWZhbHNlXSAtIFdoZW4gZmV0Y2hBcnJheSA9IHRydWUsIHRoZSByZXN1bHQgd2lsbCBiZSByZXR1cm5lZCBkaXJlY3RseSB3aXRob3V0IGNyZWF0aW5nIG1vZGVsIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtjb25uT3B0aW9uc11cbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW2Nvbm5PcHRpb25zLmNvbm5lY3Rpb25dIFxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBkZWxldGVPbmVfKGRlbGV0ZU9wdGlvbnMsIGNvbm5PcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWxldGVfKGRlbGV0ZU9wdGlvbnMsIGNvbm5PcHRpb25zLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYW4gZXhpc3RpbmcgZW50aXR5IHdpdGggZ2l2ZW4gZGF0YS4gICAgIFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbZGVsZXRlT3B0aW9uc10gLSBVcGRhdGUgb3B0aW9uc1xuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbZGVsZXRlT3B0aW9ucy4kcXVlcnldIC0gRXh0cmEgY29uZGl0aW9uXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbZGVsZXRlT3B0aW9ucy4kcmV0cmlldmVEZWxldGVkPWZhbHNlXSAtIFJldHJpZXZlIHRoZSBkZWxldGVkIGVudGl0eSBmcm9tIGRhdGFiYXNlICAgICBcbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFtkZWxldGVPcHRpb25zLiRwaHlzaWNhbERlbGV0aW9uPWZhbHNlXSAtIFdoZW4gZmV0Y2hBcnJheSA9IHRydWUsIHRoZSByZXN1bHQgd2lsbCBiZSByZXR1cm5lZCBkaXJlY3RseSB3aXRob3V0IGNyZWF0aW5nIG1vZGVsIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtjb25uT3B0aW9uc11cbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gW2Nvbm5PcHRpb25zLmNvbm5lY3Rpb25dIFxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBkZWxldGVNYW55XyhkZWxldGVPcHRpb25zLCBjb25uT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVsZXRlXyhkZWxldGVPcHRpb25zLCBjb25uT3B0aW9ucywgZmFsc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbiBleGlzdGluZyBlbnRpdHkgd2l0aCBnaXZlbiBkYXRhLiAgICAgXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtkZWxldGVPcHRpb25zXSAtIFVwZGF0ZSBvcHRpb25zXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R9IFtkZWxldGVPcHRpb25zLiRxdWVyeV0gLSBFeHRyYSBjb25kaXRpb25cbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFtkZWxldGVPcHRpb25zLiRyZXRyaWV2ZURlbGV0ZWQ9ZmFsc2VdIC0gUmV0cmlldmUgdGhlIGRlbGV0ZWQgZW50aXR5IGZyb20gZGF0YWJhc2UgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW2RlbGV0ZU9wdGlvbnMuJHBoeXNpY2FsRGVsZXRpb249ZmFsc2VdIC0gV2hlbiBmZXRjaEFycmF5ID0gdHJ1ZSwgdGhlIHJlc3VsdCB3aWxsIGJlIHJldHVybmVkIGRpcmVjdGx5IHdpdGhvdXQgY3JlYXRpbmcgbW9kZWwgb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW2Nvbm5PcHRpb25zXVxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbY29ubk9wdGlvbnMuY29ubmVjdGlvbl0gXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIF9kZWxldGVfKGRlbGV0ZU9wdGlvbnMsIGNvbm5PcHRpb25zLCBmb3JTaW5nbGVSZWNvcmQpIHtcbiAgICAgICAgbGV0IHJhd09wdGlvbnMgPSBkZWxldGVPcHRpb25zO1xuXG4gICAgICAgIGRlbGV0ZU9wdGlvbnMgPSB0aGlzLl9wcmVwYXJlUXVlcmllcyhkZWxldGVPcHRpb25zLCBmb3JTaW5nbGVSZWNvcmQgLyogZm9yIHNpbmdsZSByZWNvcmQgKi8pO1xuXG4gICAgICAgIGlmIChfLmlzRW1wdHkoZGVsZXRlT3B0aW9ucy4kcXVlcnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXBwbGljYXRpb25FcnJvcignRW1wdHkgY29uZGl0aW9uIGlzIG5vdCBhbGxvd2VkIGZvciBkZWxldGluZyBhbiBlbnRpdHkuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY29udGV4dCA9IHsgXG4gICAgICAgICAgICByYXdPcHRpb25zLFxuICAgICAgICAgICAgb3B0aW9uczogZGVsZXRlT3B0aW9ucyxcbiAgICAgICAgICAgIGNvbm5PcHRpb25zXG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IHRvRGVsZXRlO1xuXG4gICAgICAgIGlmIChmb3JTaW5nbGVSZWNvcmQpIHtcbiAgICAgICAgICAgIHRvRGVsZXRlID0gYXdhaXQgdGhpcy5iZWZvcmVEZWxldGVfKGNvbnRleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9EZWxldGUgPSBhd2FpdCB0aGlzLmJlZm9yZURlbGV0ZU1hbnlfKGNvbnRleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0b0RlbGV0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQucmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBsZXQgc3VjY2VzcyA9IGF3YWl0IHRoaXMuX3NhZmVFeGVjdXRlXyhhc3luYyAoY29udGV4dCkgPT4ge1xuICAgICAgICAgICAgaWYgKCEoYXdhaXQgRmVhdHVyZXMuYXBwbHlSdWxlc18oUnVsZXMuUlVMRV9CRUZPUkVfREVMRVRFLCB0aGlzLCBjb250ZXh0KSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9ICAgICAgICBcblxuICAgICAgICAgICAgaWYgKGZvclNpbmdsZVJlY29yZCkge1xuICAgICAgICAgICAgICAgIHRvRGVsZXRlID0gYXdhaXQgdGhpcy5faW50ZXJuYWxCZWZvcmVEZWxldGVfKGNvbnRleHQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0b0RlbGV0ZSA9IGF3YWl0IHRoaXMuX2ludGVybmFsQmVmb3JlRGVsZXRlTWFueV8oY29udGV4dCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdG9EZWxldGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnRleHQucmVzdWx0ID0gYXdhaXQgdGhpcy5kYi5jb25uZWN0b3IuZGVsZXRlXyhcbiAgICAgICAgICAgICAgICB0aGlzLm1ldGEubmFtZSwgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnRleHQub3B0aW9ucy4kcXVlcnksXG4gICAgICAgICAgICAgICAgY29udGV4dC5jb25uT3B0aW9uc1xuICAgICAgICAgICAgKTsgXG5cbiAgICAgICAgICAgIGlmIChmb3JTaW5nbGVSZWNvcmQpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9pbnRlcm5hbEFmdGVyRGVsZXRlXyhjb250ZXh0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5faW50ZXJuYWxBZnRlckRlbGV0ZU1hbnlfKGNvbnRleHQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWNvbnRleHQucXVlcnlLZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZm9yU2luZ2xlUmVjb3JkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQucXVlcnlLZXkgPSB0aGlzLmdldFVuaXF1ZUtleVZhbHVlUGFpcnNGcm9tKGNvbnRleHQub3B0aW9ucy4kcXVlcnkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQucXVlcnlLZXkgPSBjb250ZXh0Lm9wdGlvbnMuJHF1ZXJ5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXdhaXQgRmVhdHVyZXMuYXBwbHlSdWxlc18oUnVsZXMuUlVMRV9BRlRFUl9ERUxFVEUsIHRoaXMsIGNvbnRleHQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSwgY29udGV4dCk7XG5cbiAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIGlmIChmb3JTaW5nbGVSZWNvcmQpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFmdGVyRGVsZXRlXyhjb250ZXh0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hZnRlckRlbGV0ZU1hbnlfKGNvbnRleHQpO1xuICAgICAgICAgICAgfSAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb250ZXh0LnJldHVybjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayB3aGV0aGVyIGEgZGF0YSByZWNvcmQgY29udGFpbnMgcHJpbWFyeSBrZXkgb3IgYXQgbGVhc3Qgb25lIHVuaXF1ZSBrZXkgcGFpci5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSBcbiAgICAgKi9cbiAgICBzdGF0aWMgX2NvbnRhaW5zVW5pcXVlS2V5KGRhdGEpIHtcbiAgICAgICAgbGV0IGhhc0tleU5hbWVPbmx5ID0gZmFsc2U7XG5cbiAgICAgICAgbGV0IGhhc05vdE51bGxLZXkgPSBfLmZpbmQodGhpcy5tZXRhLnVuaXF1ZUtleXMsIGZpZWxkcyA9PiB7XG4gICAgICAgICAgICBsZXQgaGFzS2V5cyA9IF8uZXZlcnkoZmllbGRzLCBmID0+IGYgaW4gZGF0YSk7XG4gICAgICAgICAgICBoYXNLZXlOYW1lT25seSA9IGhhc0tleU5hbWVPbmx5IHx8IGhhc0tleXM7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBfLmV2ZXJ5KGZpZWxkcywgZiA9PiAhXy5pc05pbChkYXRhW2ZdKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBbIGhhc05vdE51bGxLZXksIGhhc0tleU5hbWVPbmx5IF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5zdXJlIHRoZSBjb25kaXRpb24gY29udGFpbnMgb25lIG9mIHRoZSB1bmlxdWUga2V5cy5cbiAgICAgKiBAcGFyYW0geyp9IGNvbmRpdGlvbiBcbiAgICAgKi9cbiAgICBzdGF0aWMgX2Vuc3VyZUNvbnRhaW5zVW5pcXVlS2V5KGNvbmRpdGlvbikge1xuICAgICAgICBsZXQgWyBjb250YWluc1VuaXF1ZUtleUFuZFZhbHVlLCBjb250YWluc1VuaXF1ZUtleU9ubHkgXSA9IHRoaXMuX2NvbnRhaW5zVW5pcXVlS2V5KGNvbmRpdGlvbik7ICAgICAgICBcblxuICAgICAgICBpZiAoIWNvbnRhaW5zVW5pcXVlS2V5QW5kVmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChjb250YWluc1VuaXF1ZUtleU9ubHkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKCdPbmUgb2YgdGhlIHVuaXF1ZSBrZXkgZmllbGQgYXMgcXVlcnkgY29uZGl0aW9uIGlzIG51bGwuIENvbmRpdGlvbjogJyArIEpTT04uc3RyaW5naWZ5KGNvbmRpdGlvbikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBuZXcgQXBwbGljYXRpb25FcnJvcignU2luZ2xlIHJlY29yZCBvcGVyYXRpb24gcmVxdWlyZXMgYXQgbGVhc3Qgb25lIHVuaXF1ZSBrZXkgdmFsdWUgcGFpciBpbiB0aGUgcXVlcnkgY29uZGl0aW9uLicsIHsgXG4gICAgICAgICAgICAgICAgICAgIGVudGl0eTogdGhpcy5tZXRhLm5hbWUsICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9ICAgIFxuXG4gICAgLyoqXG4gICAgICogUHJlcGFyZSB2YWxpZCBhbmQgc2FuaXRpemVkIGVudGl0eSBkYXRhIGZvciBzZW5kaW5nIHRvIGRhdGFiYXNlLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0IC0gT3BlcmF0aW9uIGNvbnRleHQuXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R9IGNvbnRleHQucmF3IC0gUmF3IGlucHV0IGRhdGEuXG4gICAgICogQHByb3BlcnR5IHtvYmplY3R9IFtjb250ZXh0LmNvbm5PcHRpb25zXVxuICAgICAqIEBwYXJhbSB7Ym9vbH0gaXNVcGRhdGluZyAtIEZsYWcgZm9yIHVwZGF0aW5nIGV4aXN0aW5nIGVudGl0eS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgX3ByZXBhcmVFbnRpdHlEYXRhXyhjb250ZXh0LCBpc1VwZGF0aW5nID0gZmFsc2UsIGZvclNpbmdsZVJlY29yZCA9IHRydWUpIHtcbiAgICAgICAgbGV0IG1ldGEgPSB0aGlzLm1ldGE7XG4gICAgICAgIGxldCBpMThuID0gdGhpcy5pMThuO1xuICAgICAgICBsZXQgeyBuYW1lLCBmaWVsZHMgfSA9IG1ldGE7ICAgICAgICBcblxuICAgICAgICBsZXQgeyByYXcgfSA9IGNvbnRleHQ7XG4gICAgICAgIGxldCBsYXRlc3QgPSB7fSwgZXhpc3RpbmcgPSBjb250ZXh0Lm9wdGlvbnMuJGV4aXN0aW5nO1xuICAgICAgICBjb250ZXh0LmxhdGVzdCA9IGxhdGVzdDsgICAgICAgXG5cbiAgICAgICAgaWYgKCFjb250ZXh0LmkxOG4pIHtcbiAgICAgICAgICAgIGNvbnRleHQuaTE4biA9IGkxOG47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgb3BPcHRpb25zID0gY29udGV4dC5vcHRpb25zO1xuXG4gICAgICAgIGlmIChpc1VwZGF0aW5nICYmIF8uaXNFbXB0eShleGlzdGluZykgJiYgKHRoaXMuX2RlcGVuZHNPbkV4aXN0aW5nRGF0YShyYXcpIHx8IG9wT3B0aW9ucy4kcmV0cmlldmVFeGlzdGluZykpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZW5zdXJlVHJhbnNhY3Rpb25fKGNvbnRleHQpOyAgICAgICAgICBcblxuICAgICAgICAgICAgaWYgKGZvclNpbmdsZVJlY29yZCkge1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nID0gYXdhaXQgdGhpcy5maW5kT25lXyh7ICRxdWVyeTogb3BPcHRpb25zLiRxdWVyeSB9LCBjb250ZXh0LmNvbm5PcHRpb25zKTsgICAgICAgICAgICBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXhpc3RpbmcgPSBhd2FpdCB0aGlzLmZpbmRBbGxfKHsgJHF1ZXJ5OiBvcE9wdGlvbnMuJHF1ZXJ5IH0sIGNvbnRleHQuY29ubk9wdGlvbnMpOyAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRleHQuZXhpc3RpbmcgPSBleGlzdGluZzsgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgfSAgICAgICAgXG5cbiAgICAgICAgaWYgKG9wT3B0aW9ucy4kcmV0cmlldmVFeGlzdGluZyAmJiAhY29udGV4dC5yYXdPcHRpb25zLiRleGlzdGluZykge1xuICAgICAgICAgICAgY29udGV4dC5yYXdPcHRpb25zLiRleGlzdGluZyA9IGV4aXN0aW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgZWFjaEFzeW5jXyhmaWVsZHMsIGFzeW5jIChmaWVsZEluZm8sIGZpZWxkTmFtZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGZpZWxkTmFtZSBpbiByYXcpIHtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSByYXdbZmllbGROYW1lXTtcblxuICAgICAgICAgICAgICAgIC8vZmllbGQgdmFsdWUgZ2l2ZW4gaW4gcmF3IGRhdGFcbiAgICAgICAgICAgICAgICBpZiAoZmllbGRJbmZvLnJlYWRPbmx5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNVcGRhdGluZyB8fCAhb3BPcHRpb25zLiRieXBhc3NSZWFkT25seS5oYXMoZmllbGROYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9yZWFkIG9ubHksIG5vdCBhbGxvdyB0byBzZXQgYnkgaW5wdXQgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoYFJlYWQtb25seSBmaWVsZCBcIiR7ZmllbGROYW1lfVwiIGlzIG5vdCBhbGxvd2VkIHRvIGJlIHNldCBieSBtYW51YWwgaW5wdXQuYCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eTogbmFtZSwgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZEluZm86IGZpZWxkSW5mbyBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSAgXG5cbiAgICAgICAgICAgICAgICBpZiAoaXNVcGRhdGluZyAmJiBmaWVsZEluZm8uZnJlZXplQWZ0ZXJOb25EZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydDogZXhpc3RpbmcsICdcImZyZWV6ZUFmdGVyTm9uRGVmYXVsdFwiIHF1YWxpZmllciByZXF1aXJlcyBleGlzdGluZyBkYXRhLic7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nW2ZpZWxkTmFtZV0gIT09IGZpZWxkSW5mby5kZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2ZyZWV6ZUFmdGVyTm9uRGVmYXVsdCwgbm90IGFsbG93IHRvIGNoYW5nZSBpZiB2YWx1ZSBpcyBub24tZGVmYXVsdFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihgRnJlZXplQWZ0ZXJOb25EZWZhdWx0IGZpZWxkIFwiJHtmaWVsZE5hbWV9XCIgaXMgbm90IGFsbG93ZWQgdG8gYmUgY2hhbmdlZC5gLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5OiBuYW1lLCAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkSW5mbzogZmllbGRJbmZvIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKiogIHRvZG86IGZpeCBkZXBlbmRlbmN5LCBjaGVjayB3cml0ZVByb3RlY3QgXG4gICAgICAgICAgICAgICAgaWYgKGlzVXBkYXRpbmcgJiYgZmllbGRJbmZvLndyaXRlT25jZSkgeyAgICAgXG4gICAgICAgICAgICAgICAgICAgIGFzc2VydDogZXhpc3RpbmcsICdcIndyaXRlT25jZVwiIHF1YWxpZmllciByZXF1aXJlcyBleGlzdGluZyBkYXRhLic7XG4gICAgICAgICAgICAgICAgICAgIGlmICghXy5pc05pbChleGlzdGluZ1tmaWVsZE5hbWVdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihgV3JpdGUtb25jZSBmaWVsZCBcIiR7ZmllbGROYW1lfVwiIGlzIG5vdCBhbGxvd2VkIHRvIGJlIHVwZGF0ZSBvbmNlIGl0IHdhcyBzZXQuYCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZEluZm86IGZpZWxkSW5mbyBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSAqL1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vc2FuaXRpemUgZmlyc3RcbiAgICAgICAgICAgICAgICBpZiAoaXNOb3RoaW5nKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWZpZWxkSW5mby5vcHRpb25hbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihgVGhlIFwiJHtmaWVsZE5hbWV9XCIgdmFsdWUgb2YgXCIke25hbWV9XCIgZW50aXR5IGNhbm5vdCBiZSBudWxsLmAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHk6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRJbmZvOiBmaWVsZEluZm8gXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGxhdGVzdFtmaWVsZE5hbWVdID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KHZhbHVlKSAmJiB2YWx1ZS5vb3JUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXRlc3RbZmllbGROYW1lXSA9IHZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF0ZXN0W2ZpZWxkTmFtZV0gPSBUeXBlcy5zYW5pdGl6ZSh2YWx1ZSwgZmllbGRJbmZvLCBpMThuKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoYEludmFsaWQgXCIke2ZpZWxkTmFtZX1cIiB2YWx1ZSBvZiBcIiR7bmFtZX1cIiBlbnRpdHkuYCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZEluZm86IGZpZWxkSW5mbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSB8fCBlcnJvci5zdGFjayBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9ICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vbm90IGdpdmVuIGluIHJhdyBkYXRhXG4gICAgICAgICAgICBpZiAoaXNVcGRhdGluZykge1xuICAgICAgICAgICAgICAgIGlmIChmaWVsZEluZm8uZm9yY2VVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9oYXMgZm9yY2UgdXBkYXRlIHBvbGljeSwgZS5nLiB1cGRhdGVUaW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkSW5mby51cGRhdGVCeURiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvL3JlcXVpcmUgZ2VuZXJhdG9yIHRvIHJlZnJlc2ggYXV0byBnZW5lcmF0ZWQgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkSW5mby5hdXRvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXRlc3RbZmllbGROYW1lXSA9IGF3YWl0IEdlbmVyYXRvcnMuZGVmYXVsdChmaWVsZEluZm8sIGkxOG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9IFxuXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICBgXCIke2ZpZWxkTmFtZX1cIiBvZiBcIiR7bmFtZX1cIiBlbnR0aXkgaXMgcmVxdWlyZWQgZm9yIGVhY2ggdXBkYXRlLmAsIHsgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHk6IG5hbWUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZEluZm86IGZpZWxkSW5mb1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApOyAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IFxuXG4gICAgICAgICAgICAvL25ldyByZWNvcmRcbiAgICAgICAgICAgIGlmICghZmllbGRJbmZvLmNyZWF0ZUJ5RGIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZmllbGRJbmZvLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9oYXMgZGVmYXVsdCBzZXR0aW5nIGluIG1ldGEgZGF0YVxuICAgICAgICAgICAgICAgICAgICBsYXRlc3RbZmllbGROYW1lXSA9IGZpZWxkSW5mby5kZWZhdWx0O1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmaWVsZEluZm8ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmllbGRJbmZvLmF1dG8pIHtcbiAgICAgICAgICAgICAgICAgICAgLy9hdXRvbWF0aWNhbGx5IGdlbmVyYXRlZFxuICAgICAgICAgICAgICAgICAgICBsYXRlc3RbZmllbGROYW1lXSA9IGF3YWl0IEdlbmVyYXRvcnMuZGVmYXVsdChmaWVsZEluZm8sIGkxOG4pO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9taXNzaW5nIHJlcXVpcmVkXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoYFwiJHtmaWVsZE5hbWV9XCIgb2YgXCIke25hbWV9XCIgZW50aXR5IGlzIHJlcXVpcmVkLmAsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkSW5mbzogZmllbGRJbmZvIFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IC8vIGVsc2UgZGVmYXVsdCB2YWx1ZSBzZXQgYnkgZGF0YWJhc2Ugb3IgYnkgcnVsZXNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGF0ZXN0ID0gY29udGV4dC5sYXRlc3QgPSB0aGlzLl90cmFuc2xhdGVWYWx1ZShsYXRlc3QsIG9wT3B0aW9ucy4kdmFyaWFibGVzLCB0cnVlKTtcblxuICAgICAgICBhd2FpdCBGZWF0dXJlcy5hcHBseVJ1bGVzXyhSdWxlcy5SVUxFX0FGVEVSX1ZBTElEQVRJT04sIHRoaXMsIGNvbnRleHQpOyAgICBcblxuICAgICAgICBhd2FpdCB0aGlzLmFwcGx5TW9kaWZpZXJzXyhjb250ZXh0LCBpc1VwZGF0aW5nKTtcblxuICAgICAgICAvL2ZpbmFsIHJvdW5kIHByb2Nlc3MgYmVmb3JlIGVudGVyaW5nIGRhdGFiYXNlXG4gICAgICAgIGNvbnRleHQubGF0ZXN0ID0gXy5tYXBWYWx1ZXMobGF0ZXN0LCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgbGV0IGZpZWxkSW5mbyA9IGZpZWxkc1trZXldO1xuICAgICAgICAgICAgYXNzZXJ0OiBmaWVsZEluZm87XG5cbiAgICAgICAgICAgIGlmIChfLmlzUGxhaW5PYmplY3QodmFsdWUpICYmIHZhbHVlLm9vclR5cGUpIHtcbiAgICAgICAgICAgICAgICAvL3RoZXJlIGlzIHNwZWNpYWwgaW5wdXQgY29sdW1uIHdoaWNoIG1heWJlIGEgZnVuY3Rpb24gb3IgYW4gZXhwcmVzc2lvblxuICAgICAgICAgICAgICAgIG9wT3B0aW9ucy4kcmVxdWlyZVNwbGl0Q29sdW1ucyA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2VyaWFsaXplQnlUeXBlSW5mbyh2YWx1ZSwgZmllbGRJbmZvKTtcbiAgICAgICAgfSk7ICAgICAgICBcblxuICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbnN1cmUgY29tbWl0IG9yIHJvbGxiYWNrIGlzIGNhbGxlZCBpZiB0cmFuc2FjdGlvbiBpcyBjcmVhdGVkIHdpdGhpbiB0aGUgZXhlY3V0b3IuXG4gICAgICogQHBhcmFtIHsqfSBleGVjdXRvciBcbiAgICAgKiBAcGFyYW0geyp9IGNvbnRleHQgXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIF9zYWZlRXhlY3V0ZV8oZXhlY3V0b3IsIGNvbnRleHQpIHtcbiAgICAgICAgZXhlY3V0b3IgPSBleGVjdXRvci5iaW5kKHRoaXMpO1xuXG4gICAgICAgIGlmIChjb250ZXh0LmNvbm5PcHRpb25zICYmIGNvbnRleHQuY29ubk9wdGlvbnMuY29ubmVjdGlvbikge1xuICAgICAgICAgICAgIHJldHVybiBleGVjdXRvcihjb250ZXh0KTtcbiAgICAgICAgfSBcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IGV4ZWN1dG9yKGNvbnRleHQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2lmIHRoZSBleGVjdXRvciBoYXZlIGluaXRpYXRlZCBhIHRyYW5zYWN0aW9uXG4gICAgICAgICAgICBpZiAoY29udGV4dC5jb25uT3B0aW9ucyAmJiBjb250ZXh0LmNvbm5PcHRpb25zLmNvbm5lY3Rpb24pIHsgXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5kYi5jb25uZWN0b3IuY29tbWl0Xyhjb250ZXh0LmNvbm5PcHRpb25zLmNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBjb250ZXh0LmNvbm5PcHRpb25zLmNvbm5lY3Rpb247ICAgICAgIFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy93ZSBoYXZlIHRvIHJvbGxiYWNrIGlmIGVycm9yIG9jY3VycmVkIGluIGEgdHJhbnNhY3Rpb25cbiAgICAgICAgICAgIGlmIChjb250ZXh0LmNvbm5PcHRpb25zICYmIGNvbnRleHQuY29ubk9wdGlvbnMuY29ubmVjdGlvbikgeyBcbiAgICAgICAgICAgICAgICB0aGlzLmRiLmNvbm5lY3Rvci5sb2coJ2Vycm9yJywgYFJvbGxiYWNrZWQsIHJlYXNvbjogJHtlcnJvci5tZXNzYWdlfWAsIHsgIFxuICAgICAgICAgICAgICAgICAgICBlbnRpdHk6IHRoaXMubWV0YS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiBjb250ZXh0Lm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIHJhd0RhdGE6IGNvbnRleHQucmF3LFxuICAgICAgICAgICAgICAgICAgICBsYXRlc3REYXRhOiBjb250ZXh0LmxhdGVzdFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZGIuY29ubmVjdG9yLnJvbGxiYWNrXyhjb250ZXh0LmNvbm5PcHRpb25zLmNvbm5lY3Rpb24pOyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZGVsZXRlIGNvbnRleHQuY29ubk9wdGlvbnMuY29ubmVjdGlvbjsgICBcbiAgICAgICAgICAgIH0gICAgIFxuXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSBcbiAgICB9XG5cbiAgICBzdGF0aWMgX2RlcGVuZGVuY3lDaGFuZ2VkKGZpZWxkTmFtZSwgY29udGV4dCkge1xuICAgICAgICBsZXQgZGVwcyA9IHRoaXMubWV0YS5maWVsZERlcGVuZGVuY2llc1tmaWVsZE5hbWVdO1xuXG4gICAgICAgIHJldHVybiBfLmZpbmQoZGVwcywgZCA9PiBfLmlzUGxhaW5PYmplY3QoZCkgPyBoYXNLZXlCeVBhdGgoY29udGV4dCwgZC5yZWZlcmVuY2UpIDogaGFzS2V5QnlQYXRoKGNvbnRleHQsIGQpKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgX3JlZmVyZW5jZUV4aXN0KGlucHV0LCByZWYpIHtcbiAgICAgICAgbGV0IHBvcyA9IHJlZi5pbmRleE9mKCcuJyk7XG5cbiAgICAgICAgaWYgKHBvcyA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiByZWYuc3Vic3RyKHBvcysxKSBpbiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZWYgaW4gaW5wdXQ7XG4gICAgfVxuXG4gICAgc3RhdGljIF9kZXBlbmRzT25FeGlzdGluZ0RhdGEoaW5wdXQpIHtcbiAgICAgICAgLy9jaGVjayBtb2RpZmllciBkZXBlbmRlbmNpZXNcbiAgICAgICAgbGV0IGRlcHMgPSB0aGlzLm1ldGEuZmllbGREZXBlbmRlbmNpZXM7XG4gICAgICAgIGxldCBoYXNEZXBlbmRzID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGRlcHMpIHsgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IG51bGxEZXBlbmRzID0gbmV3IFNldCgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBoYXNEZXBlbmRzID0gXy5maW5kKGRlcHMsIChkZXAsIGZpZWxkTmFtZSkgPT4gXG4gICAgICAgICAgICAgICAgXy5maW5kKGRlcCwgZCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLmlzUGxhaW5PYmplY3QoZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLndoZW5OdWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8uaXNOaWwoaW5wdXRbZmllbGROYW1lXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbERlcGVuZHMuYWRkKGRlcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBkID0gZC5yZWZlcmVuY2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmllbGROYW1lIGluIGlucHV0ICYmICF0aGlzLl9yZWZlcmVuY2VFeGlzdChpbnB1dCwgZCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmIChoYXNEZXBlbmRzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAobGV0IGRlcCBvZiBudWxsRGVwZW5kcykge1xuICAgICAgICAgICAgICAgIGlmIChfLmZpbmQoZGVwLCBkID0+ICF0aGlzLl9yZWZlcmVuY2VFeGlzdChpbnB1dCwgZC5yZWZlcmVuY2UpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvL2NoZWNrIGJ5IHNwZWNpYWwgcnVsZXNcbiAgICAgICAgbGV0IGF0TGVhc3RPbmVOb3ROdWxsID0gdGhpcy5tZXRhLmZlYXR1cmVzLmF0TGVhc3RPbmVOb3ROdWxsO1xuICAgICAgICBpZiAoYXRMZWFzdE9uZU5vdE51bGwpIHtcbiAgICAgICAgICAgIGhhc0RlcGVuZHMgPSBfLmZpbmQoYXRMZWFzdE9uZU5vdE51bGwsIGZpZWxkcyA9PiBfLmZpbmQoZmllbGRzLCBmaWVsZCA9PiAoZmllbGQgaW4gaW5wdXQpICYmIF8uaXNOaWwoaW5wdXRbZmllbGRdKSkpO1xuICAgICAgICAgICAgaWYgKGhhc0RlcGVuZHMpIHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgX2hhc1Jlc2VydmVkS2V5cyhvYmopIHtcbiAgICAgICAgcmV0dXJuIF8uZmluZChvYmosICh2LCBrKSA9PiBrWzBdID09PSAnJCcpO1xuICAgIH1cblxuICAgIHN0YXRpYyBfcHJlcGFyZVF1ZXJpZXMob3B0aW9ucywgZm9yU2luZ2xlUmVjb3JkID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKCFfLmlzUGxhaW5PYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgICAgIGlmIChmb3JTaW5nbGVSZWNvcmQgJiYgQXJyYXkuaXNBcnJheSh0aGlzLm1ldGEua2V5RmllbGQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFwcGxpY2F0aW9uRXJyb3IoJ0Nhbm5vdCB1c2UgYSBzaW5ndWxhciB2YWx1ZSBhcyBjb25kaXRpb24gdG8gcXVlcnkgYWdhaW5zdCBhIGVudGl0eSB3aXRoIGNvbWJpbmVkIHByaW1hcnkga2V5LicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucyA/IHsgJHF1ZXJ5OiB7IFt0aGlzLm1ldGEua2V5RmllbGRdOiB0aGlzLl90cmFuc2xhdGVWYWx1ZShvcHRpb25zKSB9IH0gOiB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBub3JtYWxpemVkT3B0aW9ucyA9IHt9LCBxdWVyeSA9IHt9O1xuXG4gICAgICAgIF8uZm9yT3duKG9wdGlvbnMsICh2LCBrKSA9PiB7XG4gICAgICAgICAgICBpZiAoa1swXSA9PT0gJyQnKSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZE9wdGlvbnNba10gPSB2O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBxdWVyeVtrXSA9IHY7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBub3JtYWxpemVkT3B0aW9ucy4kcXVlcnkgPSB7IC4uLnF1ZXJ5LCAuLi5ub3JtYWxpemVkT3B0aW9ucy4kcXVlcnkgfTtcblxuICAgICAgICBpZiAoZm9yU2luZ2xlUmVjb3JkICYmICFvcHRpb25zLiRieXBhc3NFbnN1cmVVbmlxdWUpIHsgICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX2Vuc3VyZUNvbnRhaW5zVW5pcXVlS2V5KG5vcm1hbGl6ZWRPcHRpb25zLiRxdWVyeSk7XG4gICAgICAgIH0gICAgICAgIFxuXG4gICAgICAgIG5vcm1hbGl6ZWRPcHRpb25zLiRxdWVyeSA9IHRoaXMuX3RyYW5zbGF0ZVZhbHVlKG5vcm1hbGl6ZWRPcHRpb25zLiRxdWVyeSwgbm9ybWFsaXplZE9wdGlvbnMuJHZhcmlhYmxlcywgbnVsbCwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKG5vcm1hbGl6ZWRPcHRpb25zLiRncm91cEJ5KSB7XG4gICAgICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KG5vcm1hbGl6ZWRPcHRpb25zLiRncm91cEJ5KSkge1xuICAgICAgICAgICAgICAgIGlmIChub3JtYWxpemVkT3B0aW9ucy4kZ3JvdXBCeS5oYXZpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplZE9wdGlvbnMuJGdyb3VwQnkuaGF2aW5nID0gdGhpcy5fdHJhbnNsYXRlVmFsdWUobm9ybWFsaXplZE9wdGlvbnMuJGdyb3VwQnkuaGF2aW5nLCBub3JtYWxpemVkT3B0aW9ucy4kdmFyaWFibGVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobm9ybWFsaXplZE9wdGlvbnMuJHByb2plY3Rpb24pIHtcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRPcHRpb25zLiRwcm9qZWN0aW9uID0gdGhpcy5fdHJhbnNsYXRlVmFsdWUobm9ybWFsaXplZE9wdGlvbnMuJHByb2plY3Rpb24sIG5vcm1hbGl6ZWRPcHRpb25zLiR2YXJpYWJsZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5vcm1hbGl6ZWRPcHRpb25zLiRhc3NvY2lhdGlvbiAmJiAhbm9ybWFsaXplZE9wdGlvbnMuJHJlbGF0aW9uc2hpcHMpIHtcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRPcHRpb25zLiRyZWxhdGlvbnNoaXBzID0gdGhpcy5fcHJlcGFyZUFzc29jaWF0aW9ucyhub3JtYWxpemVkT3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9ybWFsaXplZE9wdGlvbnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJlIGNyZWF0ZSBwcm9jZXNzaW5nLCByZXR1cm4gZmFsc2UgdG8gc3RvcCB1cGNvbWluZyBvcGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBjb250ZXh0ICAgICAgXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGJlZm9yZUNyZWF0ZV8oY29udGV4dCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcmUgdXBkYXRlIHByb2Nlc3NpbmcsIHJldHVybiBmYWxzZSB0byBzdG9wIHVwY29taW5nIG9wZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IGNvbnRleHQgICAgICBcbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgYmVmb3JlVXBkYXRlXyhjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByZSB1cGRhdGUgcHJvY2Vzc2luZywgbXVsdGlwbGUgcmVjb3JkcywgcmV0dXJuIGZhbHNlIHRvIHN0b3AgdXBjb21pbmcgb3BlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gY29udGV4dCAgICAgIFxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBiZWZvcmVVcGRhdGVNYW55Xyhjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByZSBkZWxldGUgcHJvY2Vzc2luZywgcmV0dXJuIGZhbHNlIHRvIHN0b3AgdXBjb21pbmcgb3BlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gY29udGV4dCAgICAgIFxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBiZWZvcmVEZWxldGVfKGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJlIGRlbGV0ZSBwcm9jZXNzaW5nLCBtdWx0aXBsZSByZWNvcmRzLCByZXR1cm4gZmFsc2UgdG8gc3RvcCB1cGNvbWluZyBvcGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBjb250ZXh0ICAgICAgXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGJlZm9yZURlbGV0ZU1hbnlfKGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUG9zdCBjcmVhdGUgcHJvY2Vzc2luZy5cbiAgICAgKiBAcGFyYW0geyp9IGNvbnRleHQgICAgICBcbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgYWZ0ZXJDcmVhdGVfKGNvbnRleHQpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQb3N0IHVwZGF0ZSBwcm9jZXNzaW5nLlxuICAgICAqIEBwYXJhbSB7Kn0gY29udGV4dCAgICAgIFxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBhZnRlclVwZGF0ZV8oY29udGV4dCkge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBvc3QgdXBkYXRlIHByb2Nlc3NpbmcsIG11bHRpcGxlIHJlY29yZHMgXG4gICAgICogQHBhcmFtIHsqfSBjb250ZXh0ICAgICAgXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGFmdGVyVXBkYXRlTWFueV8oY29udGV4dCkge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBvc3QgZGVsZXRlIHByb2Nlc3NpbmcuXG4gICAgICogQHBhcmFtIHsqfSBjb250ZXh0ICAgICAgXG4gICAgICovXG4gICAgc3RhdGljIGFzeW5jIGFmdGVyRGVsZXRlXyhjb250ZXh0KSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUG9zdCBkZWxldGUgcHJvY2Vzc2luZywgbXVsdGlwbGUgcmVjb3JkcyBcbiAgICAgKiBAcGFyYW0geyp9IGNvbnRleHQgICAgICBcbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgYWZ0ZXJEZWxldGVNYW55Xyhjb250ZXh0KSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUG9zdCBmaW5kQWxsIHByb2Nlc3NpbmdcbiAgICAgKiBAcGFyYW0geyp9IGNvbnRleHQgXG4gICAgICogQHBhcmFtIHsqfSByZWNvcmRzIFxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBhZnRlckZpbmRBbGxfKGNvbnRleHQsIHJlY29yZHMpIHtcbiAgICAgICAgaWYgKGNvbnRleHQub3B0aW9ucy4kdG9EaWN0aW9uYXJ5KSB7XG4gICAgICAgICAgICBsZXQga2V5RmllbGQgPSB0aGlzLm1ldGEua2V5RmllbGQ7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGV4dC5vcHRpb25zLiR0b0RpY3Rpb25hcnkgPT09ICdzdHJpbmcnKSB7IFxuICAgICAgICAgICAgICAgIGtleUZpZWxkID0gY29udGV4dC5vcHRpb25zLiR0b0RpY3Rpb25hcnk7IFxuXG4gICAgICAgICAgICAgICAgaWYgKCEoa2V5RmllbGQgaW4gdGhpcy5tZXRhLmZpZWxkcykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFwcGxpY2F0aW9uRXJyb3IoYFRoZSBrZXkgZmllbGQgXCIke2tleUZpZWxkfVwiIHByb3ZpZGVkIHRvIGluZGV4IHRoZSBjYWNoZWQgZGljdGlvbmFyeSBpcyBub3QgYSBmaWVsZCBvZiBlbnRpdHkgXCIke3RoaXMubWV0YS5uYW1lfVwiLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9EaWN0aW9uYXJ5KHJlY29yZHMsIGtleUZpZWxkKTtcbiAgICAgICAgfSBcblxuICAgICAgICByZXR1cm4gcmVjb3JkcztcbiAgICB9XG5cbiAgICBzdGF0aWMgX3ByZXBhcmVBc3NvY2lhdGlvbnMoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihORUVEX09WRVJSSURFKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgX21hcFJlY29yZHNUb09iamVjdHMoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihORUVEX09WRVJSSURFKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgX2V4dHJhY3RBc3NvY2lhdGlvbnMoZGF0YSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoTkVFRF9PVkVSUklERSk7ICAgIFxuICAgIH1cblxuICAgIHN0YXRpYyBhc3luYyBfY3JlYXRlQXNzb2NzXyhjb250ZXh0LCBhc3NvY3MpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKE5FRURfT1ZFUlJJREUpO1xuICAgIH1cblxuICAgIHN0YXRpYyBhc3luYyBfdXBkYXRlQXNzb2NzXyhjb250ZXh0LCBhc3NvY3MpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKE5FRURfT1ZFUlJJREUpO1xuICAgIH1cblxuICAgIHN0YXRpYyBfdHJhbnNsYXRlU3ltYm9sVG9rZW4obmFtZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoTkVFRF9PVkVSUklERSk7XG4gICAgfVxuXG4gICAgc3RhdGljIF9zZXJpYWxpemUodmFsdWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKE5FRURfT1ZFUlJJREUpO1xuICAgIH1cblxuICAgIHN0YXRpYyBfc2VyaWFsaXplQnlUeXBlSW5mbyh2YWx1ZSwgaW5mbykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoTkVFRF9PVkVSUklERSk7XG4gICAgfVxuXG4gICAgc3RhdGljIF90cmFuc2xhdGVWYWx1ZSh2YWx1ZSwgdmFyaWFibGVzLCBza2lwU2VyaWFsaXplLCBhcnJheVRvSW5PcGVyYXRvcikge1xuICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlLm9vclR5cGUpIHtcbiAgICAgICAgICAgICAgICBpZiAob29yVHlwZXNUb0J5cGFzcy5oYXModmFsdWUub29yVHlwZSkpIHJldHVybiB2YWx1ZTtcblxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5vb3JUeXBlID09PSAnU2Vzc2lvblZhcmlhYmxlJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhcmlhYmxlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFwcGxpY2F0aW9uRXJyb3IoJ1ZhcmlhYmxlcyBjb250ZXh0IG1pc3NpbmcuJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoKCF2YXJpYWJsZXMuc2Vzc2lvbiB8fCAhKHZhbHVlLm5hbWUgaW4gIHZhcmlhYmxlcy5zZXNzaW9uKSkgJiYgIXZhbHVlLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZXJyQXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLm1pc3NpbmdNZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyQXJncy5wdXNoKHZhbHVlLm1pc3NpbmdNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5taXNzaW5nU3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyQXJncy5wdXNoKHZhbHVlLm1pc3NpbmdTdGF0dXMgfHwgSHR0cENvZGUuQkFEX1JFUVVFU1QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWVzdEVycm9yKC4uLmVyckFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhcmlhYmxlcy5zZXNzaW9uW3ZhbHVlLm5hbWVdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUub29yVHlwZSA9PT0gJ1F1ZXJ5VmFyaWFibGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdmFyaWFibGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXBwbGljYXRpb25FcnJvcignVmFyaWFibGVzIGNvbnRleHQgbWlzc2luZy4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdmFyaWFibGVzLnF1ZXJ5IHx8ICEodmFsdWUubmFtZSBpbiB2YXJpYWJsZXMucXVlcnkpKSB7ICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXBwbGljYXRpb25FcnJvcihgUXVlcnkgcGFyYW1ldGVyIFwiJHt2YWx1ZS5uYW1lfVwiIGluIGNvbmZpZ3VyYXRpb24gbm90IGZvdW5kLmApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFyaWFibGVzLnF1ZXJ5W3ZhbHVlLm5hbWVdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUub29yVHlwZSA9PT0gJ1N5bWJvbFRva2VuJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNsYXRlU3ltYm9sVG9rZW4odmFsdWUubmFtZSk7XG4gICAgICAgICAgICAgICAgfSBcblxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGltcGxldGVtZW50ZWQgeWV0LiAnICsgdmFsdWUub29yVHlwZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBfLm1hcFZhbHVlcyh2YWx1ZSwgKHYsIGspID0+IHRoaXMuX3RyYW5zbGF0ZVZhbHVlKHYsIHZhcmlhYmxlcywgc2tpcFNlcmlhbGl6ZSwgYXJyYXlUb0luT3BlcmF0b3IgJiYga1swXSAhPT0gJyQnKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHsgIFxuICAgICAgICAgICAgbGV0IHJldCA9IHZhbHVlLm1hcCh2ID0+IHRoaXMuX3RyYW5zbGF0ZVZhbHVlKHYsIHZhcmlhYmxlcywgc2tpcFNlcmlhbGl6ZSwgYXJyYXlUb0luT3BlcmF0b3IpKTtcbiAgICAgICAgICAgIHJldHVybiBhcnJheVRvSW5PcGVyYXRvciA/IHsgJGluOiByZXQgfSA6IHJldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChza2lwU2VyaWFsaXplKSByZXR1cm4gdmFsdWU7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlcmlhbGl6ZSh2YWx1ZSk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVudGl0eU1vZGVsOyJdfQ==