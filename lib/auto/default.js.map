{"version":3,"sources":["../../src/auto/default.js"],"names":["Types","require","auto","info","i18n","pre","Builtin","has","type","name","generator","options","Array","isArray","assert","length","G","gtor","typeObjerct","generate","module","exports"],"mappings":";;;;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAArB;;AAEA,SAASC,IAAT,CAAcC,IAAd,EAAoBC,IAApB,EAA0B;AACtBC,EAAAA,GAAG,EAAE;AACDL,IAAAA,KAAK,CAACM,OAAN,CAAcC,GAAd,CAAkBJ,IAAI,CAACK,IAAvB,GACK,4BAA2BL,IAAI,CAACK,IAAK,KAD1C;AAEAL,IAAAA,IAAI,CAACD,IAAL,EAAY,yCAAwCC,IAAI,CAACM,IAAK,IAA9D;AACH;;AAED,MAAIN,IAAI,CAACO,SAAT,EAAoB;AAChB,QAAID,IAAJ,EAAUE,OAAV;;AAGA,QAAI,OAAOR,IAAI,CAACO,SAAZ,KAA0B,QAA9B,EAAwC;AACpCD,MAAAA,IAAI,GAAGN,IAAI,CAACO,SAAZ;AACH,KAFD,MAEO,IAAIE,KAAK,CAACC,OAAN,CAAcV,IAAI,CAACO,SAAnB,CAAJ,EAAmC;AACtCI,MAAAA,MAAM,EAAEX,IAAI,CAACO,SAAL,CAAeK,MAAf,GAAwB,CAAxB;;AACRN,MAAAA,IAAI,GAAGN,IAAI,CAACO,SAAL,CAAe,CAAf,CAAP;;AAEA,UAAIP,IAAI,CAACO,SAAL,CAAeK,MAAf,GAAwB,CAA5B,EAA+B;AAC3BJ,QAAAA,OAAO,GAAGR,IAAI,CAACO,SAAL,CAAe,CAAf,CAAV;AACH;AACJ,KAPM,MAOA;AACHD,MAAAA,IAAI,GAAGN,IAAI,CAACO,SAAL,CAAeD,IAAtB;AACAE,MAAAA,OAAO,GAAGR,IAAI,CAACO,SAAL,CAAeC,OAAzB;AACH;;AAED,UAAMK,CAAC,GAAGf,OAAO,CAAC,eAAD,CAAjB;;AACA,QAAIgB,IAAI,GAAGD,CAAC,CAACP,IAAD,CAAZ;AACA,WAAOQ,IAAI,CAACd,IAAD,EAAOC,IAAP,EAAaO,OAAb,CAAX;AACH;;AAED,MAAIO,WAAW,GAAGlB,KAAK,CAACG,IAAI,CAACK,IAAN,CAAvB;AACA,SAAOU,WAAW,CAACC,QAAZ,CAAqBhB,IAArB,EAA2BC,IAA3B,CAAP;AACH;;AAEDgB,MAAM,CAACC,OAAP,GAAiBnB,IAAjB","sourcesContent":["const Types = require('../types');\n\nfunction auto(info, i18n) {\n    pre: {\n        Types.Builtin.has(info.type),\n            `Unknown primitive type: \"${info.type}\".\"`;\n        info.auto, `Not an automatically generated field \"${info.name}\".`;\n    }\n\n    if (info.generator) {\n        let name, options;\n\n        //customized generator\n        if (typeof info.generator === 'string') {\n            name = info.generator;\n        } else if (Array.isArray(info.generator)) {\n            assert: info.generator.length > 0;\n            name = info.generator[0];\n\n            if (info.generator.length > 1) {\n                options = info.generator[1];\n            }\n        } else {\n            name = info.generator.name;\n            options = info.generator.options;\n        }\n\n        const G = require('../Generators');\n        let gtor = G[name];\n        return gtor(info, i18n, options);\n    }\n\n    let typeObjerct = Types[info.type];\n    return typeObjerct.generate(info, i18n);\n}\n\nmodule.exports = auto;\n"],"file":"default.js"}