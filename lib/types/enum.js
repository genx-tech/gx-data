"use strict";

require("source-map-support/register");

const any = require('./any');

const {
  ValidationError
} = require('../utils/Errors');

module.exports = {
  name: 'enum',
  sanitize: (value, info) => {
    let raw = value;
    value = (typeof value !== 'string' ? value.toString() : value).trim();

    if (info.values && info.values.indexOf(value) === -1) {
      throw new ValidationError('Invalid enum value', {
        value: raw,
        field: info
      });
    }

    return value;
  },
  defaultValue: 0,
  generate: info => info.values && info.values.length > 0 && info.values[0],
  serialize: value => value,
  qualifiers: any.qualifiers.concat(['values'])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9lbnVtLmpzIl0sIm5hbWVzIjpbImFueSIsInJlcXVpcmUiLCJWYWxpZGF0aW9uRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwibmFtZSIsInNhbml0aXplIiwidmFsdWUiLCJpbmZvIiwicmF3IiwidG9TdHJpbmciLCJ0cmltIiwidmFsdWVzIiwiaW5kZXhPZiIsImZpZWxkIiwiZGVmYXVsdFZhbHVlIiwiZ2VuZXJhdGUiLCJsZW5ndGgiLCJzZXJpYWxpemUiLCJxdWFsaWZpZXJzIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLEdBQUcsR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBbkI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQXNCRCxPQUFPLENBQUMsaUJBQUQsQ0FBbkM7O0FBRUFFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNiQyxFQUFBQSxJQUFJLEVBQUUsTUFETztBQUdiQyxFQUFBQSxRQUFRLEVBQUUsQ0FBQ0MsS0FBRCxFQUFRQyxJQUFSLEtBQWlCO0FBQ3ZCLFFBQUlDLEdBQUcsR0FBR0YsS0FBVjtBQUNBQSxJQUFBQSxLQUFLLEdBQUcsQ0FBQyxPQUFPQSxLQUFQLEtBQWlCLFFBQWpCLEdBQTRCQSxLQUFLLENBQUNHLFFBQU4sRUFBNUIsR0FBK0NILEtBQWhELEVBQXVESSxJQUF2RCxFQUFSOztBQUVBLFFBQUlILElBQUksQ0FBQ0ksTUFBTCxJQUFlSixJQUFJLENBQUNJLE1BQUwsQ0FBWUMsT0FBWixDQUFvQk4sS0FBcEIsTUFBK0IsQ0FBQyxDQUFuRCxFQUFzRDtBQUNsRCxZQUFNLElBQUlMLGVBQUosQ0FBb0Isb0JBQXBCLEVBQTBDO0FBQUVLLFFBQUFBLEtBQUssRUFBRUUsR0FBVDtBQUFjSyxRQUFBQSxLQUFLLEVBQUVOO0FBQXJCLE9BQTFDLENBQU47QUFDSDs7QUFFRCxXQUFPRCxLQUFQO0FBQ0gsR0FaWTtBQWNiUSxFQUFBQSxZQUFZLEVBQUUsQ0FkRDtBQWdCYkMsRUFBQUEsUUFBUSxFQUFHUixJQUFELElBQVVBLElBQUksQ0FBQ0ksTUFBTCxJQUFlSixJQUFJLENBQUNJLE1BQUwsQ0FBWUssTUFBWixHQUFxQixDQUFwQyxJQUF5Q1QsSUFBSSxDQUFDSSxNQUFMLENBQVksQ0FBWixDQWhCaEQ7QUFrQmJNLEVBQUFBLFNBQVMsRUFBRVgsS0FBSyxJQUFJQSxLQWxCUDtBQW9CYlksRUFBQUEsVUFBVSxFQUFFbkIsR0FBRyxDQUFDbUIsVUFBSixDQUFlQyxNQUFmLENBQXNCLENBQzlCLFFBRDhCLENBQXRCO0FBcEJDLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IGFueSA9IHJlcXVpcmUoJy4vYW55Jyk7XG5jb25zdCB7IFZhbGlkYXRpb25FcnJvciB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvRXJyb3JzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIG5hbWU6ICdlbnVtJywgICAgXG5cbiAgICBzYW5pdGl6ZTogKHZhbHVlLCBpbmZvKSA9PiB7XG4gICAgICAgIGxldCByYXcgPSB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyA/IHZhbHVlLnRvU3RyaW5nKCkgOiB2YWx1ZSkudHJpbSgpO1xuXG4gICAgICAgIGlmIChpbmZvLnZhbHVlcyAmJiBpbmZvLnZhbHVlcy5pbmRleE9mKHZhbHVlKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoJ0ludmFsaWQgZW51bSB2YWx1ZScsIHsgdmFsdWU6IHJhdywgZmllbGQ6IGluZm8gfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcblxuICAgIGRlZmF1bHRWYWx1ZTogMCxcblxuICAgIGdlbmVyYXRlOiAoaW5mbykgPT4gaW5mby52YWx1ZXMgJiYgaW5mby52YWx1ZXMubGVuZ3RoID4gMCAmJiBpbmZvLnZhbHVlc1swXSxcblxuICAgIHNlcmlhbGl6ZTogdmFsdWUgPT4gdmFsdWUsXG5cbiAgICBxdWFsaWZpZXJzOiBhbnkucXVhbGlmaWVycy5jb25jYXQoW1xuICAgICAgICAndmFsdWVzJ1xuICAgIF0pXG59OyJdfQ==