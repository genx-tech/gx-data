"use strict";

require("source-map-support/register");

const _ = require('rk-utils')._;

const {
  isNothing
} = require('../utils/lang');

const {
  ValidationError
} = require('../utils/Errors');

const any = require('./any');

const jsonStarter = new Set('"', '[', '{');
const jsonEnding = {
  '"': '"',
  '[': ']',
  '{': '}'
};
module.exports = {
  name: 'object',
  alias: ['json'],
  sanitize: (value, info, i18n, prefix) => {
    if (value == null) return null;
    let raw = value;
    let type = typeof value;

    switch (type) {
      case 'string':
        if (!info.dontParse && value.length > 0 && jsonStarter.has(value[0]) && jsonEnding[value[0]] === value[value.length - 1]) {
          value = JSON.parse(value);
        }

        break;

      case 'boolean':
      case 'number':
      case 'bigint':
        break;

      case 'object':
        if (!Array.isArray(value)) {
          value = _.toPlainObject(value);
        }

        break;

      default:
        throw new ValidationError('Invalid object value', {
          value: raw,
          feild: info
        });
    }

    if (info.schema) {
      const Validators = require('../Validators');

      return Validators.validateObjectBySchema(value, info.schema, i18n, prefix);
    }

    return value;
  },
  defaultValue: {},
  generate: (info, i18n) => ({}),
  serialize: value => isNothing(value) ? null : JSON.stringify(value),
  qualifiers: any.qualifiers.concat(['schema'])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9vYmplY3QuanMiXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJpc05vdGhpbmciLCJWYWxpZGF0aW9uRXJyb3IiLCJhbnkiLCJqc29uU3RhcnRlciIsIlNldCIsImpzb25FbmRpbmciLCJtb2R1bGUiLCJleHBvcnRzIiwibmFtZSIsImFsaWFzIiwic2FuaXRpemUiLCJ2YWx1ZSIsImluZm8iLCJpMThuIiwicHJlZml4IiwicmF3IiwidHlwZSIsImRvbnRQYXJzZSIsImxlbmd0aCIsImhhcyIsIkpTT04iLCJwYXJzZSIsIkFycmF5IiwiaXNBcnJheSIsInRvUGxhaW5PYmplY3QiLCJmZWlsZCIsInNjaGVtYSIsIlZhbGlkYXRvcnMiLCJ2YWxpZGF0ZU9iamVjdEJ5U2NoZW1hIiwiZGVmYXVsdFZhbHVlIiwiZ2VuZXJhdGUiLCJzZXJpYWxpemUiLCJzdHJpbmdpZnkiLCJxdWFsaWZpZXJzIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLENBQUMsR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBUCxDQUFvQkQsQ0FBOUI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQTtBQUFGLElBQWdCRCxPQUFPLENBQUMsZUFBRCxDQUE3Qjs7QUFDQSxNQUFNO0FBQUVFLEVBQUFBO0FBQUYsSUFBc0JGLE9BQU8sQ0FBQyxpQkFBRCxDQUFuQzs7QUFDQSxNQUFNRyxHQUFHLEdBQUdILE9BQU8sQ0FBQyxPQUFELENBQW5COztBQUVBLE1BQU1JLFdBQVcsR0FBRyxJQUFJQyxHQUFKLENBQVEsR0FBUixFQUFhLEdBQWIsRUFBa0IsR0FBbEIsQ0FBcEI7QUFDQSxNQUFNQyxVQUFVLEdBQUc7QUFDZixPQUFLLEdBRFU7QUFFZixPQUFLLEdBRlU7QUFHZixPQUFLO0FBSFUsQ0FBbkI7QUFTQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2JDLEVBQUFBLElBQUksRUFBRSxRQURPO0FBR2JDLEVBQUFBLEtBQUssRUFBRSxDQUFFLE1BQUYsQ0FITTtBQUtiQyxFQUFBQSxRQUFRLEVBQUUsQ0FBQ0MsS0FBRCxFQUFRQyxJQUFSLEVBQWNDLElBQWQsRUFBb0JDLE1BQXBCLEtBQStCO0FBQ3JDLFFBQUlILEtBQUssSUFBSSxJQUFiLEVBQW1CLE9BQU8sSUFBUDtBQUVuQixRQUFJSSxHQUFHLEdBQUdKLEtBQVY7QUFDQSxRQUFJSyxJQUFJLEdBQUcsT0FBT0wsS0FBbEI7O0FBRUEsWUFBUUssSUFBUjtBQUNJLFdBQUssUUFBTDtBQUNJLFlBQUksQ0FBQ0osSUFBSSxDQUFDSyxTQUFOLElBQW1CTixLQUFLLENBQUNPLE1BQU4sR0FBZSxDQUFsQyxJQUF1Q2YsV0FBVyxDQUFDZ0IsR0FBWixDQUFnQlIsS0FBSyxDQUFDLENBQUQsQ0FBckIsQ0FBdkMsSUFBb0VOLFVBQVUsQ0FBQ00sS0FBSyxDQUFDLENBQUQsQ0FBTixDQUFWLEtBQXlCQSxLQUFLLENBQUNBLEtBQUssQ0FBQ08sTUFBTixHQUFhLENBQWQsQ0FBdEcsRUFBd0g7QUFDcEhQLFVBQUFBLEtBQUssR0FBR1MsSUFBSSxDQUFDQyxLQUFMLENBQVdWLEtBQVgsQ0FBUjtBQUNIOztBQUNEOztBQUVKLFdBQUssU0FBTDtBQUNBLFdBQUssUUFBTDtBQUNBLFdBQUssUUFBTDtBQUVJOztBQUVKLFdBQUssUUFBTDtBQUNJLFlBQUksQ0FBQ1csS0FBSyxDQUFDQyxPQUFOLENBQWNaLEtBQWQsQ0FBTCxFQUEyQjtBQUN2QkEsVUFBQUEsS0FBSyxHQUFHYixDQUFDLENBQUMwQixhQUFGLENBQWdCYixLQUFoQixDQUFSO0FBQ0g7O0FBQ0Q7O0FBRUo7QUFDSSxjQUFNLElBQUlWLGVBQUosQ0FBb0Isc0JBQXBCLEVBQTRDO0FBQUVVLFVBQUFBLEtBQUssRUFBRUksR0FBVDtBQUFjVSxVQUFBQSxLQUFLLEVBQUViO0FBQXJCLFNBQTVDLENBQU47QUFwQlI7O0FBdUJBLFFBQUlBLElBQUksQ0FBQ2MsTUFBVCxFQUFpQjtBQUNiLFlBQU1DLFVBQVUsR0FBRzVCLE9BQU8sQ0FBQyxlQUFELENBQTFCOztBQUNBLGFBQU80QixVQUFVLENBQUNDLHNCQUFYLENBQWtDakIsS0FBbEMsRUFBeUNDLElBQUksQ0FBQ2MsTUFBOUMsRUFBc0RiLElBQXRELEVBQTREQyxNQUE1RCxDQUFQO0FBQ0g7O0FBRUQsV0FBT0gsS0FBUDtBQUNILEdBeENZO0FBMENia0IsRUFBQUEsWUFBWSxFQUFFLEVBMUNEO0FBNENiQyxFQUFBQSxRQUFRLEVBQUUsQ0FBQ2xCLElBQUQsRUFBT0MsSUFBUCxNQUFpQixFQUFqQixDQTVDRztBQThDYmtCLEVBQUFBLFNBQVMsRUFBR3BCLEtBQUQsSUFBV1gsU0FBUyxDQUFDVyxLQUFELENBQVQsR0FBbUIsSUFBbkIsR0FBMEJTLElBQUksQ0FBQ1ksU0FBTCxDQUFlckIsS0FBZixDQTlDbkM7QUFnRGJzQixFQUFBQSxVQUFVLEVBQUUvQixHQUFHLENBQUMrQixVQUFKLENBQWVDLE1BQWYsQ0FBc0IsQ0FDOUIsUUFEOEIsQ0FBdEI7QUFoREMsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgXyA9IHJlcXVpcmUoJ3JrLXV0aWxzJykuXztcbmNvbnN0IHsgaXNOb3RoaW5nIH0gPSByZXF1aXJlKCcuLi91dGlscy9sYW5nJyk7XG5jb25zdCB7IFZhbGlkYXRpb25FcnJvciB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvRXJyb3JzJyk7XG5jb25zdCBhbnkgPSByZXF1aXJlKCcuL2FueScpO1xuXG5jb25zdCBqc29uU3RhcnRlciA9IG5ldyBTZXQoJ1wiJywgJ1snLCAneycpO1xuY29uc3QganNvbkVuZGluZyA9IHtcbiAgICAnXCInOiAnXCInLCBcbiAgICAnWyc6ICddJywgXG4gICAgJ3snOiAnfSdcbn07XG5cbi8vIGluZm8uZG9udFBhcnNlXG4vLyBpbmZvLnNjaGVtYVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBuYW1lOiAnb2JqZWN0JyxcblxuICAgIGFsaWFzOiBbICdqc29uJyBdLFxuXG4gICAgc2FuaXRpemU6ICh2YWx1ZSwgaW5mbywgaTE4biwgcHJlZml4KSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gbnVsbDtcblxuICAgICAgICBsZXQgcmF3ID0gdmFsdWU7XG4gICAgICAgIGxldCB0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgICAgICBpZiAoIWluZm8uZG9udFBhcnNlICYmIHZhbHVlLmxlbmd0aCA+IDAgJiYganNvblN0YXJ0ZXIuaGFzKHZhbHVlWzBdKSAmJiBqc29uRW5kaW5nW3ZhbHVlWzBdXSA9PT0gdmFsdWVbdmFsdWUubGVuZ3RoLTFdKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgICAgICBjYXNlICdudW1iZXInOiAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FzZSAnYmlnaW50JzpcbiAgICAgICAgICAgICAgICAvL3NraXAsIGtlZXAgb3JpZ2luYWwgdmFsdWVcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gXy50b1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoJ0ludmFsaWQgb2JqZWN0IHZhbHVlJywgeyB2YWx1ZTogcmF3LCBmZWlsZDogaW5mbyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmZvLnNjaGVtYSkge1xuICAgICAgICAgICAgY29uc3QgVmFsaWRhdG9ycyA9IHJlcXVpcmUoJy4uL1ZhbGlkYXRvcnMnKTtcbiAgICAgICAgICAgIHJldHVybiBWYWxpZGF0b3JzLnZhbGlkYXRlT2JqZWN0QnlTY2hlbWEodmFsdWUsIGluZm8uc2NoZW1hLCBpMThuLCBwcmVmaXgpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcblxuICAgIGRlZmF1bHRWYWx1ZToge30sXG5cbiAgICBnZW5lcmF0ZTogKGluZm8sIGkxOG4pID0+ICh7fSksXG5cbiAgICBzZXJpYWxpemU6ICh2YWx1ZSkgPT4gaXNOb3RoaW5nKHZhbHVlKSA/IG51bGwgOiBKU09OLnN0cmluZ2lmeSh2YWx1ZSksXG5cbiAgICBxdWFsaWZpZXJzOiBhbnkucXVhbGlmaWVycy5jb25jYXQoW1xuICAgICAgICAnc2NoZW1hJ1xuICAgIF0pXG59OyJdfQ==