"use strict";

require("source-map-support/register");

const _ = require('rk-utils')._;

const {
  isNothing
} = require('../utils/lang');

const {
  ValidationError
} = require('../utils/Errors');

const any = require('./any');

module.exports = {
  name: 'object',
  alias: ['json'],
  sanitize: (value, info, i18n, prefix) => {
    let raw = value;
    let type = typeof value;

    if (type === 'string') {
      value = JSON.parse(value);
    } else if (type === 'boolean' || type === 'number') {} else if (type !== 'object') {
      throw new ValidationError('Invalid object value', {
        value: raw,
        feild: info
      });
    }

    if (info.schema) {
      const Validators = require('../Validators');

      return Validators.validateObjectBySchema(value, info.schema, i18n, prefix);
    }

    return _.toPlainObject(value);
  },
  defaultValue: {},
  generate: (info, i18n) => ({}),
  serialize: value => isNothing(value) ? null : JSON.stringify(value),
  qualifiers: any.qualifiers.concat(['schema'])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9vYmplY3QuanMiXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJpc05vdGhpbmciLCJWYWxpZGF0aW9uRXJyb3IiLCJhbnkiLCJtb2R1bGUiLCJleHBvcnRzIiwibmFtZSIsImFsaWFzIiwic2FuaXRpemUiLCJ2YWx1ZSIsImluZm8iLCJpMThuIiwicHJlZml4IiwicmF3IiwidHlwZSIsIkpTT04iLCJwYXJzZSIsImZlaWxkIiwic2NoZW1hIiwiVmFsaWRhdG9ycyIsInZhbGlkYXRlT2JqZWN0QnlTY2hlbWEiLCJ0b1BsYWluT2JqZWN0IiwiZGVmYXVsdFZhbHVlIiwiZ2VuZXJhdGUiLCJzZXJpYWxpemUiLCJzdHJpbmdpZnkiLCJxdWFsaWZpZXJzIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLENBQUMsR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBUCxDQUFvQkQsQ0FBOUI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQTtBQUFGLElBQWdCRCxPQUFPLENBQUMsZUFBRCxDQUE3Qjs7QUFDQSxNQUFNO0FBQUVFLEVBQUFBO0FBQUYsSUFBc0JGLE9BQU8sQ0FBQyxpQkFBRCxDQUFuQzs7QUFDQSxNQUFNRyxHQUFHLEdBQUdILE9BQU8sQ0FBQyxPQUFELENBQW5COztBQUVBSSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDYkMsRUFBQUEsSUFBSSxFQUFFLFFBRE87QUFHYkMsRUFBQUEsS0FBSyxFQUFFLENBQUUsTUFBRixDQUhNO0FBS2JDLEVBQUFBLFFBQVEsRUFBRSxDQUFDQyxLQUFELEVBQVFDLElBQVIsRUFBY0MsSUFBZCxFQUFvQkMsTUFBcEIsS0FBK0I7QUFDckMsUUFBSUMsR0FBRyxHQUFHSixLQUFWO0FBQ0EsUUFBSUssSUFBSSxHQUFHLE9BQU9MLEtBQWxCOztBQUVBLFFBQUlLLElBQUksS0FBSyxRQUFiLEVBQXVCO0FBQ25CTCxNQUFBQSxLQUFLLEdBQUdNLElBQUksQ0FBQ0MsS0FBTCxDQUFXUCxLQUFYLENBQVI7QUFDSCxLQUZELE1BRU8sSUFBSUssSUFBSSxLQUFLLFNBQVQsSUFBc0JBLElBQUksS0FBSyxRQUFuQyxFQUE2QyxDQUVuRCxDQUZNLE1BRUEsSUFBSUEsSUFBSSxLQUFLLFFBQWIsRUFBdUI7QUFDMUIsWUFBTSxJQUFJWixlQUFKLENBQW9CLHNCQUFwQixFQUE0QztBQUFFTyxRQUFBQSxLQUFLLEVBQUVJLEdBQVQ7QUFBY0ksUUFBQUEsS0FBSyxFQUFFUDtBQUFyQixPQUE1QyxDQUFOO0FBQ0g7O0FBRUQsUUFBSUEsSUFBSSxDQUFDUSxNQUFULEVBQWlCO0FBQ2IsWUFBTUMsVUFBVSxHQUFHbkIsT0FBTyxDQUFDLGVBQUQsQ0FBMUI7O0FBQ0EsYUFBT21CLFVBQVUsQ0FBQ0Msc0JBQVgsQ0FBa0NYLEtBQWxDLEVBQXlDQyxJQUFJLENBQUNRLE1BQTlDLEVBQXNEUCxJQUF0RCxFQUE0REMsTUFBNUQsQ0FBUDtBQUNIOztBQUVELFdBQU9iLENBQUMsQ0FBQ3NCLGFBQUYsQ0FBZ0JaLEtBQWhCLENBQVA7QUFDSCxHQXZCWTtBQXlCYmEsRUFBQUEsWUFBWSxFQUFFLEVBekJEO0FBMkJiQyxFQUFBQSxRQUFRLEVBQUUsQ0FBQ2IsSUFBRCxFQUFPQyxJQUFQLE1BQWlCLEVBQWpCLENBM0JHO0FBNkJiYSxFQUFBQSxTQUFTLEVBQUdmLEtBQUQsSUFBV1IsU0FBUyxDQUFDUSxLQUFELENBQVQsR0FBbUIsSUFBbkIsR0FBMEJNLElBQUksQ0FBQ1UsU0FBTCxDQUFlaEIsS0FBZixDQTdCbkM7QUErQmJpQixFQUFBQSxVQUFVLEVBQUV2QixHQUFHLENBQUN1QixVQUFKLENBQWVDLE1BQWYsQ0FBc0IsQ0FDOUIsUUFEOEIsQ0FBdEI7QUEvQkMsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgXyA9IHJlcXVpcmUoJ3JrLXV0aWxzJykuXztcbmNvbnN0IHsgaXNOb3RoaW5nIH0gPSByZXF1aXJlKCcuLi91dGlscy9sYW5nJyk7XG5jb25zdCB7IFZhbGlkYXRpb25FcnJvciB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvRXJyb3JzJyk7XG5jb25zdCBhbnkgPSByZXF1aXJlKCcuL2FueScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBuYW1lOiAnb2JqZWN0JyxcblxuICAgIGFsaWFzOiBbICdqc29uJyBdLFxuXG4gICAgc2FuaXRpemU6ICh2YWx1ZSwgaW5mbywgaTE4biwgcHJlZml4KSA9PiB7XG4gICAgICAgIGxldCByYXcgPSB2YWx1ZTtcbiAgICAgICAgbGV0IHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cbiAgICAgICAgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdib29sZWFuJyB8fCB0eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgLy9za2lwXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoJ0ludmFsaWQgb2JqZWN0IHZhbHVlJywgeyB2YWx1ZTogcmF3LCBmZWlsZDogaW5mbyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmZvLnNjaGVtYSkge1xuICAgICAgICAgICAgY29uc3QgVmFsaWRhdG9ycyA9IHJlcXVpcmUoJy4uL1ZhbGlkYXRvcnMnKTtcbiAgICAgICAgICAgIHJldHVybiBWYWxpZGF0b3JzLnZhbGlkYXRlT2JqZWN0QnlTY2hlbWEodmFsdWUsIGluZm8uc2NoZW1hLCBpMThuLCBwcmVmaXgpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gXy50b1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgICB9LFxuXG4gICAgZGVmYXVsdFZhbHVlOiB7fSxcblxuICAgIGdlbmVyYXRlOiAoaW5mbywgaTE4bikgPT4gKHt9KSxcblxuICAgIHNlcmlhbGl6ZTogKHZhbHVlKSA9PiBpc05vdGhpbmcodmFsdWUpID8gbnVsbCA6IEpTT04uc3RyaW5naWZ5KHZhbHVlKSxcblxuICAgIHF1YWxpZmllcnM6IGFueS5xdWFsaWZpZXJzLmNvbmNhdChbXG4gICAgICAgICdzY2hlbWEnXG4gICAgXSlcbn07Il19