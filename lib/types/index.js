"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  Set
} = require('immutable');

const ARRAY = require('./array');

const BINARY = require('./binary');

const BOOLEAN = require('./boolean');

const ENUM = require('./enum');

const DATETIME = require('./datetime');

const INTEGER = require('./integer');

const NUMBER = require('./number');

const OBJECT = require('./object');

const TEXT = require('./text');

const types = {
  ARRAY,
  BINARY,
  BOOLEAN,
  ENUM,
  DATETIME,
  INTEGER,
  NUMBER,
  OBJECT,
  TEXT
};
const Types = { ...types,
  ..._.mapKeys(types, (v, k) => v.name),
  Builtin: Set(_.map(types, t => t.name)),
  FunctionalQualifiers: Object.freeze(['optional', 'default', 'auto', 'readOnly', 'writeOnce', 'forceUpdate', 'freezeAfterNonDefault']),
  sanitize: function (value, info, i18n) {
    if (!Types.Builtin.has(info.type)) {
      throw new Error(`Unknown primitive type: "${info.type}"."`);
    }

    let typeObjerct = Types[info.type];
    return typeObjerct.sanitize(value, info, i18n);
  }
};
module.exports = Types;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9pbmRleC5qcyJdLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsIlNldCIsIkFSUkFZIiwiQklOQVJZIiwiQk9PTEVBTiIsIkVOVU0iLCJEQVRFVElNRSIsIklOVEVHRVIiLCJOVU1CRVIiLCJPQkpFQ1QiLCJURVhUIiwidHlwZXMiLCJUeXBlcyIsIm1hcEtleXMiLCJ2IiwiayIsIm5hbWUiLCJCdWlsdGluIiwibWFwIiwidCIsIkZ1bmN0aW9uYWxRdWFsaWZpZXJzIiwiT2JqZWN0IiwiZnJlZXplIiwic2FuaXRpemUiLCJ2YWx1ZSIsImluZm8iLCJpMThuIiwiaGFzIiwidHlwZSIsInR5cGVPYmplcmN0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFDLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFRQyxPQUFPLENBQUMsVUFBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBVUQsT0FBTyxDQUFDLFdBQUQsQ0FBdkI7O0FBRUQsTUFBTUUsS0FBSyxHQUFHRixPQUFPLENBQUMsU0FBRCxDQUFyQjs7QUFDQSxNQUFNRyxNQUFNLEdBQUdILE9BQU8sQ0FBQyxVQUFELENBQXRCOztBQUNBLE1BQU1JLE9BQU8sR0FBR0osT0FBTyxDQUFDLFdBQUQsQ0FBdkI7O0FBQ0EsTUFBTUssSUFBSSxHQUFHTCxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFDQSxNQUFNTSxRQUFRLEdBQUdOLE9BQU8sQ0FBQyxZQUFELENBQXhCOztBQUNBLE1BQU1PLE9BQU8sR0FBR1AsT0FBTyxDQUFDLFdBQUQsQ0FBdkI7O0FBQ0EsTUFBTVEsTUFBTSxHQUFHUixPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFDQSxNQUFNUyxNQUFNLEdBQUdULE9BQU8sQ0FBQyxVQUFELENBQXRCOztBQUNBLE1BQU1VLElBQUksR0FBR1YsT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBRUEsTUFBTVcsS0FBSyxHQUFHO0FBQ1ZULEVBQUFBLEtBRFU7QUFDSEMsRUFBQUEsTUFERztBQUNLQyxFQUFBQSxPQURMO0FBQ2NDLEVBQUFBLElBRGQ7QUFDb0JDLEVBQUFBLFFBRHBCO0FBQzhCQyxFQUFBQSxPQUQ5QjtBQUN1Q0MsRUFBQUEsTUFEdkM7QUFDK0NDLEVBQUFBLE1BRC9DO0FBQ3VEQyxFQUFBQTtBQUR2RCxDQUFkO0FBSUEsTUFBTUUsS0FBSyxHQUFHLEVBQ1YsR0FBR0QsS0FETztBQUVWLEtBQUdaLENBQUMsQ0FBQ2MsT0FBRixDQUFVRixLQUFWLEVBQWlCLENBQUNHLENBQUQsRUFBSUMsQ0FBSixLQUFVRCxDQUFDLENBQUNFLElBQTdCLENBRk87QUFJVkMsRUFBQUEsT0FBTyxFQUFFaEIsR0FBRyxDQUFDRixDQUFDLENBQUNtQixHQUFGLENBQU1QLEtBQU4sRUFBYVEsQ0FBQyxJQUFJQSxDQUFDLENBQUNILElBQXBCLENBQUQsQ0FKRjtBQU1WSSxFQUFBQSxvQkFBb0IsRUFBRUMsTUFBTSxDQUFDQyxNQUFQLENBQWMsQ0FDaEMsVUFEZ0MsRUFFaEMsU0FGZ0MsRUFHaEMsTUFIZ0MsRUFJaEMsVUFKZ0MsRUFLaEMsV0FMZ0MsRUFNaEMsYUFOZ0MsRUFPaEMsdUJBUGdDLENBQWQsQ0FOWjtBQWdCVkMsRUFBQUEsUUFBUSxFQUFFLFVBQVVDLEtBQVYsRUFBaUJDLElBQWpCLEVBQXVCQyxJQUF2QixFQUE2QjtBQUFBLFNBRS9CZCxLQUFLLENBQUNLLE9BQU4sQ0FBY1UsR0FBZCxDQUFrQkYsSUFBSSxDQUFDRyxJQUF2QixDQUYrQjtBQUFBLHNCQUVBLDRCQUEyQkgsSUFBSSxDQUFDRyxJQUFLLEtBRnJDO0FBQUE7O0FBS25DLFFBQUlDLFdBQVcsR0FBR2pCLEtBQUssQ0FBQ2EsSUFBSSxDQUFDRyxJQUFOLENBQXZCO0FBQ0EsV0FBT0MsV0FBVyxDQUFDTixRQUFaLENBQXFCQyxLQUFyQixFQUE0QkMsSUFBNUIsRUFBa0NDLElBQWxDLENBQVA7QUFDSDtBQXZCUyxDQUFkO0FBMEJBSSxNQUFNLENBQUNDLE9BQVAsR0FBaUJuQixLQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIiBjb25zdCB7IF8gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG4gY29uc3QgeyBTZXQgfSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xuXG5jb25zdCBBUlJBWSA9IHJlcXVpcmUoJy4vYXJyYXknKTtcbmNvbnN0IEJJTkFSWSA9IHJlcXVpcmUoJy4vYmluYXJ5Jyk7XG5jb25zdCBCT09MRUFOID0gcmVxdWlyZSgnLi9ib29sZWFuJyk7XG5jb25zdCBFTlVNID0gcmVxdWlyZSgnLi9lbnVtJyk7ICAgIFxuY29uc3QgREFURVRJTUUgPSByZXF1aXJlKCcuL2RhdGV0aW1lJyk7XG5jb25zdCBJTlRFR0VSID0gcmVxdWlyZSgnLi9pbnRlZ2VyJyk7XG5jb25zdCBOVU1CRVIgPSByZXF1aXJlKCcuL251bWJlcicpO1xuY29uc3QgT0JKRUNUID0gcmVxdWlyZSgnLi9vYmplY3QnKTtcbmNvbnN0IFRFWFQgPSByZXF1aXJlKCcuL3RleHQnKTtcblxuY29uc3QgdHlwZXMgPSB7XG4gICAgQVJSQVksIEJJTkFSWSwgQk9PTEVBTiwgRU5VTSwgREFURVRJTUUsIElOVEVHRVIsIE5VTUJFUiwgT0JKRUNULCBURVhUXG59O1xuXG5jb25zdCBUeXBlcyA9IHsgXG4gICAgLi4udHlwZXMsIFxuICAgIC4uLl8ubWFwS2V5cyh0eXBlcywgKHYsIGspID0+IHYubmFtZSksIFxuICAgIFxuICAgIEJ1aWx0aW46IFNldChfLm1hcCh0eXBlcywgdCA9PiB0Lm5hbWUpKSxcblxuICAgIEZ1bmN0aW9uYWxRdWFsaWZpZXJzOiBPYmplY3QuZnJlZXplKFtcbiAgICAgICAgJ29wdGlvbmFsJyxcbiAgICAgICAgJ2RlZmF1bHQnLFxuICAgICAgICAnYXV0bycsXG4gICAgICAgICdyZWFkT25seScsXG4gICAgICAgICd3cml0ZU9uY2UnLFxuICAgICAgICAnZm9yY2VVcGRhdGUnLFxuICAgICAgICAnZnJlZXplQWZ0ZXJOb25EZWZhdWx0JyxcbiAgICBdKSxcblxuICAgIHNhbml0aXplOiBmdW5jdGlvbiAodmFsdWUsIGluZm8sIGkxOG4pIHtcbiAgICAgICAgcHJlOiB7XG4gICAgICAgICAgICBUeXBlcy5CdWlsdGluLmhhcyhpbmZvLnR5cGUpLCBgVW5rbm93biBwcmltaXRpdmUgdHlwZTogXCIke2luZm8udHlwZX1cIi5cImA7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgbGV0IHR5cGVPYmplcmN0ID0gVHlwZXNbaW5mby50eXBlXTtcbiAgICAgICAgcmV0dXJuIHR5cGVPYmplcmN0LnNhbml0aXplKHZhbHVlLCBpbmZvLCBpMThuKTtcbiAgICB9IFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUeXBlczsiXX0=