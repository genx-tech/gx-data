"use strict";

require("source-map-support/register");

const {
  _
} = require('@genx/july');

const {
  Set
} = require('immutable');

const ARRAY = require('./array');

const BINARY = require('./binary');

const BOOLEAN = require('./boolean');

const ENUM = require('./enum');

const DATETIME = require('./datetime');

const INTEGER = require('./integer');

const NUMBER = require('./number');

const OBJECT = require('./object');

const TEXT = require('./text');

const types = {
  ARRAY,
  BINARY,
  BOOLEAN,
  ENUM,
  DATETIME,
  INTEGER,
  NUMBER,
  OBJECT,
  TEXT
};
const Types = { ...types,
  ..._.mapKeys(types, (v, k) => v.name),
  Builtin: Set(_.map(types, t => t.name)),
  FunctionalQualifiers: Object.freeze(['optional', 'default', 'auto', 'readOnly', 'writeOnce', 'forceUpdate', 'freezeAfterNonDefault']),
  sanitize: function (value, info, ...others) {
    if (!Types.Builtin.has(info.type)) {
      throw new Error(`Unknown primitive type: "${info.type}"."`);
    }

    let typeObjerct = Types[info.type];
    return typeObjerct.sanitize(value, info, ...others);
  }
};
module.exports = Types;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9pbmRleC5qcyJdLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsIlNldCIsIkFSUkFZIiwiQklOQVJZIiwiQk9PTEVBTiIsIkVOVU0iLCJEQVRFVElNRSIsIklOVEVHRVIiLCJOVU1CRVIiLCJPQkpFQ1QiLCJURVhUIiwidHlwZXMiLCJUeXBlcyIsIm1hcEtleXMiLCJ2IiwiayIsIm5hbWUiLCJCdWlsdGluIiwibWFwIiwidCIsIkZ1bmN0aW9uYWxRdWFsaWZpZXJzIiwiT2JqZWN0IiwiZnJlZXplIiwic2FuaXRpemUiLCJ2YWx1ZSIsImluZm8iLCJvdGhlcnMiLCJoYXMiLCJ0eXBlIiwidHlwZU9iamVyY3QiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUMsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVFDLE9BQU8sQ0FBQyxZQUFELENBQXJCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFVRCxPQUFPLENBQUMsV0FBRCxDQUF2Qjs7QUFFRCxNQUFNRSxLQUFLLEdBQUdGLE9BQU8sQ0FBQyxTQUFELENBQXJCOztBQUNBLE1BQU1HLE1BQU0sR0FBR0gsT0FBTyxDQUFDLFVBQUQsQ0FBdEI7O0FBQ0EsTUFBTUksT0FBTyxHQUFHSixPQUFPLENBQUMsV0FBRCxDQUF2Qjs7QUFDQSxNQUFNSyxJQUFJLEdBQUdMLE9BQU8sQ0FBQyxRQUFELENBQXBCOztBQUNBLE1BQU1NLFFBQVEsR0FBR04sT0FBTyxDQUFDLFlBQUQsQ0FBeEI7O0FBQ0EsTUFBTU8sT0FBTyxHQUFHUCxPQUFPLENBQUMsV0FBRCxDQUF2Qjs7QUFDQSxNQUFNUSxNQUFNLEdBQUdSLE9BQU8sQ0FBQyxVQUFELENBQXRCOztBQUNBLE1BQU1TLE1BQU0sR0FBR1QsT0FBTyxDQUFDLFVBQUQsQ0FBdEI7O0FBQ0EsTUFBTVUsSUFBSSxHQUFHVixPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFFQSxNQUFNVyxLQUFLLEdBQUc7QUFDVlQsRUFBQUEsS0FEVTtBQUNIQyxFQUFBQSxNQURHO0FBQ0tDLEVBQUFBLE9BREw7QUFDY0MsRUFBQUEsSUFEZDtBQUNvQkMsRUFBQUEsUUFEcEI7QUFDOEJDLEVBQUFBLE9BRDlCO0FBQ3VDQyxFQUFBQSxNQUR2QztBQUMrQ0MsRUFBQUEsTUFEL0M7QUFDdURDLEVBQUFBO0FBRHZELENBQWQ7QUFJQSxNQUFNRSxLQUFLLEdBQUcsRUFDVixHQUFHRCxLQURPO0FBRVYsS0FBR1osQ0FBQyxDQUFDYyxPQUFGLENBQVVGLEtBQVYsRUFBaUIsQ0FBQ0csQ0FBRCxFQUFJQyxDQUFKLEtBQVVELENBQUMsQ0FBQ0UsSUFBN0IsQ0FGTztBQUlWQyxFQUFBQSxPQUFPLEVBQUVoQixHQUFHLENBQUNGLENBQUMsQ0FBQ21CLEdBQUYsQ0FBTVAsS0FBTixFQUFhUSxDQUFDLElBQUlBLENBQUMsQ0FBQ0gsSUFBcEIsQ0FBRCxDQUpGO0FBTVZJLEVBQUFBLG9CQUFvQixFQUFFQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxDQUNoQyxVQURnQyxFQUVoQyxTQUZnQyxFQUdoQyxNQUhnQyxFQUloQyxVQUpnQyxFQUtoQyxXQUxnQyxFQU1oQyxhQU5nQyxFQU9oQyx1QkFQZ0MsQ0FBZCxDQU5aO0FBZ0JWQyxFQUFBQSxRQUFRLEVBQUUsVUFBVUMsS0FBVixFQUFpQkMsSUFBakIsRUFBdUIsR0FBR0MsTUFBMUIsRUFBa0M7QUFBQSxTQUVwQ2QsS0FBSyxDQUFDSyxPQUFOLENBQWNVLEdBQWQsQ0FBa0JGLElBQUksQ0FBQ0csSUFBdkIsQ0FGb0M7QUFBQSxzQkFFTCw0QkFBMkJILElBQUksQ0FBQ0csSUFBSyxLQUZoQztBQUFBOztBQUt4QyxRQUFJQyxXQUFXLEdBQUdqQixLQUFLLENBQUNhLElBQUksQ0FBQ0csSUFBTixDQUF2QjtBQUNBLFdBQU9DLFdBQVcsQ0FBQ04sUUFBWixDQUFxQkMsS0FBckIsRUFBNEJDLElBQTVCLEVBQWtDLEdBQUdDLE1BQXJDLENBQVA7QUFDSDtBQXZCUyxDQUFkO0FBMEJBSSxNQUFNLENBQUNDLE9BQVAsR0FBaUJuQixLQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIiBjb25zdCB7IF8gfSA9IHJlcXVpcmUoJ0BnZW54L2p1bHknKTtcbiBjb25zdCB7IFNldCB9ID0gcmVxdWlyZSgnaW1tdXRhYmxlJyk7XG5cbmNvbnN0IEFSUkFZID0gcmVxdWlyZSgnLi9hcnJheScpO1xuY29uc3QgQklOQVJZID0gcmVxdWlyZSgnLi9iaW5hcnknKTtcbmNvbnN0IEJPT0xFQU4gPSByZXF1aXJlKCcuL2Jvb2xlYW4nKTtcbmNvbnN0IEVOVU0gPSByZXF1aXJlKCcuL2VudW0nKTsgICAgXG5jb25zdCBEQVRFVElNRSA9IHJlcXVpcmUoJy4vZGF0ZXRpbWUnKTtcbmNvbnN0IElOVEVHRVIgPSByZXF1aXJlKCcuL2ludGVnZXInKTtcbmNvbnN0IE5VTUJFUiA9IHJlcXVpcmUoJy4vbnVtYmVyJyk7XG5jb25zdCBPQkpFQ1QgPSByZXF1aXJlKCcuL29iamVjdCcpO1xuY29uc3QgVEVYVCA9IHJlcXVpcmUoJy4vdGV4dCcpO1xuXG5jb25zdCB0eXBlcyA9IHtcbiAgICBBUlJBWSwgQklOQVJZLCBCT09MRUFOLCBFTlVNLCBEQVRFVElNRSwgSU5URUdFUiwgTlVNQkVSLCBPQkpFQ1QsIFRFWFRcbn07XG5cbmNvbnN0IFR5cGVzID0geyBcbiAgICAuLi50eXBlcywgXG4gICAgLi4uXy5tYXBLZXlzKHR5cGVzLCAodiwgaykgPT4gdi5uYW1lKSwgXG4gICAgXG4gICAgQnVpbHRpbjogU2V0KF8ubWFwKHR5cGVzLCB0ID0+IHQubmFtZSkpLFxuXG4gICAgRnVuY3Rpb25hbFF1YWxpZmllcnM6IE9iamVjdC5mcmVlemUoW1xuICAgICAgICAnb3B0aW9uYWwnLFxuICAgICAgICAnZGVmYXVsdCcsXG4gICAgICAgICdhdXRvJyxcbiAgICAgICAgJ3JlYWRPbmx5JyxcbiAgICAgICAgJ3dyaXRlT25jZScsXG4gICAgICAgICdmb3JjZVVwZGF0ZScsXG4gICAgICAgICdmcmVlemVBZnRlck5vbkRlZmF1bHQnLFxuICAgIF0pLFxuXG4gICAgc2FuaXRpemU6IGZ1bmN0aW9uICh2YWx1ZSwgaW5mbywgLi4ub3RoZXJzKSB7XG4gICAgICAgIHByZToge1xuICAgICAgICAgICAgVHlwZXMuQnVpbHRpbi5oYXMoaW5mby50eXBlKSwgYFVua25vd24gcHJpbWl0aXZlIHR5cGU6IFwiJHtpbmZvLnR5cGV9XCIuXCJgO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGxldCB0eXBlT2JqZXJjdCA9IFR5cGVzW2luZm8udHlwZV07XG4gICAgICAgIHJldHVybiB0eXBlT2JqZXJjdC5zYW5pdGl6ZSh2YWx1ZSwgaW5mbywgLi4ub3RoZXJzKTtcbiAgICB9IFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUeXBlczsiXX0=