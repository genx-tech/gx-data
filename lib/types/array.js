"use strict";

require("source-map-support/register");

const {
  _,
  quote
} = require('rk-utils');

const {
  isNothing
} = require('../utils/lang');

const any = require('./any');

const {
  ValidationError
} = require('../utils/Errors');

function sanitize(value, info, i18n, prefix) {
  let raw = value;

  if (typeof value === 'string') {
    if (info.csv) {
      return value;
    } else {
      let trimmed = value.trim();

      if (trimmed.startsWith('[') && trimmed.endsWith(']')) {
        value = sanitize(JSON.parse(trimmed), info, i18n, prefix);
      }
    }
  }

  if (Array.isArray(value)) {
    if (info.elementSchema) {
      const Validators = require('../Validators');

      return value.map((a, i) => Validators.validateObjectBySchema(a, info.elementSchema, i18n, prefix + `[${i}]`));
    }

    return value;
  }

  throw new ValidationError('Invalid array value', {
    value: raw,
    field: info
  });
}

module.exports = {
  name: 'array',
  alias: ['list'],
  sanitize: sanitize,
  defaultValue: [],
  generate: (info, i18n) => [],
  serialize: value => isNothing(value) ? null : JSON.stringify(value),
  qualifiers: any.qualifiers.concat(['csv', 'of', 'elementSchema']),
  toCsv: (data, separator = ',') => data.map(elem => {
    elem = elem.toString();
    return elem.indexOf(separator) != -1 ? quote(elem, '"') : elem;
  }).join(separator)
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9hcnJheS5qcyJdLCJuYW1lcyI6WyJfIiwicXVvdGUiLCJyZXF1aXJlIiwiaXNOb3RoaW5nIiwiYW55IiwiVmFsaWRhdGlvbkVycm9yIiwic2FuaXRpemUiLCJ2YWx1ZSIsImluZm8iLCJpMThuIiwicHJlZml4IiwicmF3IiwiY3N2IiwidHJpbW1lZCIsInRyaW0iLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJKU09OIiwicGFyc2UiLCJBcnJheSIsImlzQXJyYXkiLCJlbGVtZW50U2NoZW1hIiwiVmFsaWRhdG9ycyIsIm1hcCIsImEiLCJpIiwidmFsaWRhdGVPYmplY3RCeVNjaGVtYSIsImZpZWxkIiwibW9kdWxlIiwiZXhwb3J0cyIsIm5hbWUiLCJhbGlhcyIsImRlZmF1bHRWYWx1ZSIsImdlbmVyYXRlIiwic2VyaWFsaXplIiwic3RyaW5naWZ5IiwicXVhbGlmaWVycyIsImNvbmNhdCIsInRvQ3N2IiwiZGF0YSIsInNlcGFyYXRvciIsImVsZW0iLCJ0b1N0cmluZyIsImluZGV4T2YiLCJqb2luIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU07QUFBRUEsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQTtBQUFMLElBQWVDLE9BQU8sQ0FBQyxVQUFELENBQTVCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFnQkQsT0FBTyxDQUFDLGVBQUQsQ0FBN0I7O0FBQ0EsTUFBTUUsR0FBRyxHQUFHRixPQUFPLENBQUMsT0FBRCxDQUFuQjs7QUFDQSxNQUFNO0FBQUVHLEVBQUFBO0FBQUYsSUFBc0JILE9BQU8sQ0FBQyxpQkFBRCxDQUFuQzs7QUFFQSxTQUFTSSxRQUFULENBQWtCQyxLQUFsQixFQUF5QkMsSUFBekIsRUFBK0JDLElBQS9CLEVBQXFDQyxNQUFyQyxFQUE2QztBQUN6QyxNQUFJQyxHQUFHLEdBQUdKLEtBQVY7O0FBRUEsTUFBSSxPQUFPQSxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzNCLFFBQUlDLElBQUksQ0FBQ0ksR0FBVCxFQUFjO0FBQ1YsYUFBT0wsS0FBUDtBQUNILEtBRkQsTUFFTztBQUNILFVBQUlNLE9BQU8sR0FBR04sS0FBSyxDQUFDTyxJQUFOLEVBQWQ7O0FBQ0EsVUFBSUQsT0FBTyxDQUFDRSxVQUFSLENBQW1CLEdBQW5CLEtBQTJCRixPQUFPLENBQUNHLFFBQVIsQ0FBaUIsR0FBakIsQ0FBL0IsRUFBc0Q7QUFDbERULFFBQUFBLEtBQUssR0FBR0QsUUFBUSxDQUFDVyxJQUFJLENBQUNDLEtBQUwsQ0FBV0wsT0FBWCxDQUFELEVBQXNCTCxJQUF0QixFQUE0QkMsSUFBNUIsRUFBa0NDLE1BQWxDLENBQWhCO0FBQ0g7QUFDSjtBQUNKOztBQUVELE1BQUlTLEtBQUssQ0FBQ0MsT0FBTixDQUFjYixLQUFkLENBQUosRUFBMEI7QUFDdEIsUUFBSUMsSUFBSSxDQUFDYSxhQUFULEVBQXdCO0FBQ3BCLFlBQU1DLFVBQVUsR0FBR3BCLE9BQU8sQ0FBQyxlQUFELENBQTFCOztBQUNBLGFBQU9LLEtBQUssQ0FBQ2dCLEdBQU4sQ0FBVSxDQUFDQyxDQUFELEVBQUlDLENBQUosS0FBVUgsVUFBVSxDQUFDSSxzQkFBWCxDQUFrQ0YsQ0FBbEMsRUFBcUNoQixJQUFJLENBQUNhLGFBQTFDLEVBQXlEWixJQUF6RCxFQUErREMsTUFBTSxHQUFJLElBQUdlLENBQUUsR0FBOUUsQ0FBcEIsQ0FBUDtBQUNIOztBQUVELFdBQU9sQixLQUFQO0FBQ0g7O0FBRUQsUUFBTSxJQUFJRixlQUFKLENBQW9CLHFCQUFwQixFQUEyQztBQUFFRSxJQUFBQSxLQUFLLEVBQUVJLEdBQVQ7QUFBY2dCLElBQUFBLEtBQUssRUFBRW5CO0FBQXJCLEdBQTNDLENBQU47QUFDSDs7QUFFRG9CLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNiQyxFQUFBQSxJQUFJLEVBQUUsT0FETztBQUdiQyxFQUFBQSxLQUFLLEVBQUUsQ0FBRSxNQUFGLENBSE07QUFLYnpCLEVBQUFBLFFBQVEsRUFBRUEsUUFMRztBQU9iMEIsRUFBQUEsWUFBWSxFQUFFLEVBUEQ7QUFTYkMsRUFBQUEsUUFBUSxFQUFFLENBQUN6QixJQUFELEVBQU9DLElBQVAsS0FBaUIsRUFUZDtBQVlieUIsRUFBQUEsU0FBUyxFQUFHM0IsS0FBRCxJQUFXSixTQUFTLENBQUNJLEtBQUQsQ0FBVCxHQUFtQixJQUFuQixHQUEyQlUsSUFBSSxDQUFDa0IsU0FBTCxDQUFlNUIsS0FBZixDQVpwQztBQWNiNkIsRUFBQUEsVUFBVSxFQUFFaEMsR0FBRyxDQUFDZ0MsVUFBSixDQUFlQyxNQUFmLENBQXNCLENBQzlCLEtBRDhCLEVBRTlCLElBRjhCLEVBRzlCLGVBSDhCLENBQXRCLENBZEM7QUFvQmJDLEVBQUFBLEtBQUssRUFBRSxDQUFDQyxJQUFELEVBQU9DLFNBQVMsR0FBRyxHQUFuQixLQUEyQkQsSUFBSSxDQUFDaEIsR0FBTCxDQUM5QmtCLElBQUksSUFBSTtBQUFFQSxJQUFBQSxJQUFJLEdBQUdBLElBQUksQ0FBQ0MsUUFBTCxFQUFQO0FBQXdCLFdBQU9ELElBQUksQ0FBQ0UsT0FBTCxDQUFhSCxTQUFiLEtBQTJCLENBQUMsQ0FBNUIsR0FBZ0N2QyxLQUFLLENBQUN3QyxJQUFELEVBQU8sR0FBUCxDQUFyQyxHQUFtREEsSUFBMUQ7QUFBaUUsR0FEckUsRUFFNUJHLElBRjRCLENBRXZCSixTQUZ1QjtBQXBCckIsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgeyBfLCBxdW90ZSB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHsgaXNOb3RoaW5nIH0gPSByZXF1aXJlKCcuLi91dGlscy9sYW5nJyk7XG5jb25zdCBhbnkgPSByZXF1aXJlKCcuL2FueScpO1xuY29uc3QgeyBWYWxpZGF0aW9uRXJyb3IgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL0Vycm9ycycpO1xuXG5mdW5jdGlvbiBzYW5pdGl6ZSh2YWx1ZSwgaW5mbywgaTE4biwgcHJlZml4KSB7XG4gICAgbGV0IHJhdyA9IHZhbHVlO1xuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKGluZm8uY3N2KSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgdHJpbW1lZCA9IHZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgIGlmICh0cmltbWVkLnN0YXJ0c1dpdGgoJ1snKSAmJiB0cmltbWVkLmVuZHNXaXRoKCddJykpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHNhbml0aXplKEpTT04ucGFyc2UodHJpbW1lZCksIGluZm8sIGkxOG4sIHByZWZpeCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGluZm8uZWxlbWVudFNjaGVtYSkge1xuICAgICAgICAgICAgY29uc3QgVmFsaWRhdG9ycyA9IHJlcXVpcmUoJy4uL1ZhbGlkYXRvcnMnKTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5tYXAoKGEsIGkpID0+IFZhbGlkYXRvcnMudmFsaWRhdGVPYmplY3RCeVNjaGVtYShhLCBpbmZvLmVsZW1lbnRTY2hlbWEsIGkxOG4sIHByZWZpeCArIGBbJHtpfV1gKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSAgICBcblxuICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoJ0ludmFsaWQgYXJyYXkgdmFsdWUnLCB7IHZhbHVlOiByYXcsIGZpZWxkOiBpbmZvIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBuYW1lOiAnYXJyYXknLFxuXG4gICAgYWxpYXM6IFsgJ2xpc3QnIF0sXG5cbiAgICBzYW5pdGl6ZTogc2FuaXRpemUsXG5cbiAgICBkZWZhdWx0VmFsdWU6IFtdLFxuXG4gICAgZ2VuZXJhdGU6IChpbmZvLCBpMThuKSA9PiAoW10pLFxuXG4gICAgLy93aGVuIGl0J3MgY3N2LCBzaG91bGQgY2FsbCB0b0NzdiBpbiBkcml2ZXIgc3BlY2lmaWMgRW50aXR5TW9kZWxcbiAgICBzZXJpYWxpemU6ICh2YWx1ZSkgPT4gaXNOb3RoaW5nKHZhbHVlKSA/IG51bGwgOiAgSlNPTi5zdHJpbmdpZnkodmFsdWUpLFxuXG4gICAgcXVhbGlmaWVyczogYW55LnF1YWxpZmllcnMuY29uY2F0KFtcbiAgICAgICAgJ2NzdicsXG4gICAgICAgICdvZicsXG4gICAgICAgICdlbGVtZW50U2NoZW1hJ1xuICAgIF0pLFxuXG4gICAgdG9Dc3Y6IChkYXRhLCBzZXBhcmF0b3IgPSAnLCcpID0+IGRhdGEubWFwKFxuICAgICAgICBlbGVtID0+IHsgZWxlbSA9IGVsZW0udG9TdHJpbmcoKTsgcmV0dXJuIGVsZW0uaW5kZXhPZihzZXBhcmF0b3IpICE9IC0xID8gcXVvdGUoZWxlbSwgJ1wiJykgOiBlbGVtOyB9XG4gICAgICAgICkuam9pbihzZXBhcmF0b3IpXG59OyJdfQ==