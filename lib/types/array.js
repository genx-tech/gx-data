"use strict";

require("source-map-support/register");

const {
  _,
  quote
} = require('rk-utils');

const {
  isNothing
} = require('../utils/lang');

const any = require('./any');

const {
  ValidationError
} = require('../utils/Errors');

function sanitize(value, info, i18n, prefix) {
  let raw = value;

  if (typeof value === 'string') {
    let trimmed = value.trim();

    if (trimmed.startsWith('[') && trimmed.endsWith(']')) {
      value = sanitize(JSON.parse(trimmed), info, i18n, prefix);
    }
  }

  if (Array.isArray(value)) {
    if (info.elementSchema) {
      const Validators = require('../Validators');

      return value.map((a, i) => Validators.validateObjectBySchema(a, info.elementSchema, i18n, prefix + `[${i}]`));
    }

    return value;
  }

  throw new ValidationError('Invalid array value', {
    value: raw,
    field: info
  });
}

module.exports = {
  name: 'array',
  alias: ['list'],
  sanitize: sanitize,
  defaultValue: [],
  generate: (info, i18n) => [],
  serialize: value => isNothing(value) ? null : JSON.stringify(value),
  qualifiers: any.qualifiers.concat(['csv', 'of', 'elementSchema']),
  toCsv: (data, separator = ',') => data.map(elem => {
    elem = elem.toString();
    return elem.indexOf(separator) != -1 ? quote(elem, '"') : elem;
  }).join(separator)
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9hcnJheS5qcyJdLCJuYW1lcyI6WyJfIiwicXVvdGUiLCJyZXF1aXJlIiwiaXNOb3RoaW5nIiwiYW55IiwiVmFsaWRhdGlvbkVycm9yIiwic2FuaXRpemUiLCJ2YWx1ZSIsImluZm8iLCJpMThuIiwicHJlZml4IiwicmF3IiwidHJpbW1lZCIsInRyaW0iLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJKU09OIiwicGFyc2UiLCJBcnJheSIsImlzQXJyYXkiLCJlbGVtZW50U2NoZW1hIiwiVmFsaWRhdG9ycyIsIm1hcCIsImEiLCJpIiwidmFsaWRhdGVPYmplY3RCeVNjaGVtYSIsImZpZWxkIiwibW9kdWxlIiwiZXhwb3J0cyIsIm5hbWUiLCJhbGlhcyIsImRlZmF1bHRWYWx1ZSIsImdlbmVyYXRlIiwic2VyaWFsaXplIiwic3RyaW5naWZ5IiwicXVhbGlmaWVycyIsImNvbmNhdCIsInRvQ3N2IiwiZGF0YSIsInNlcGFyYXRvciIsImVsZW0iLCJ0b1N0cmluZyIsImluZGV4T2YiLCJqb2luIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU07QUFBRUEsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQTtBQUFMLElBQWVDLE9BQU8sQ0FBQyxVQUFELENBQTVCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFnQkQsT0FBTyxDQUFDLGVBQUQsQ0FBN0I7O0FBQ0EsTUFBTUUsR0FBRyxHQUFHRixPQUFPLENBQUMsT0FBRCxDQUFuQjs7QUFDQSxNQUFNO0FBQUVHLEVBQUFBO0FBQUYsSUFBc0JILE9BQU8sQ0FBQyxpQkFBRCxDQUFuQzs7QUFFQSxTQUFTSSxRQUFULENBQWtCQyxLQUFsQixFQUF5QkMsSUFBekIsRUFBK0JDLElBQS9CLEVBQXFDQyxNQUFyQyxFQUE2QztBQUN6QyxNQUFJQyxHQUFHLEdBQUdKLEtBQVY7O0FBRUEsTUFBSSxPQUFPQSxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzNCLFFBQUlLLE9BQU8sR0FBR0wsS0FBSyxDQUFDTSxJQUFOLEVBQWQ7O0FBQ0EsUUFBSUQsT0FBTyxDQUFDRSxVQUFSLENBQW1CLEdBQW5CLEtBQTJCRixPQUFPLENBQUNHLFFBQVIsQ0FBaUIsR0FBakIsQ0FBL0IsRUFBc0Q7QUFDbERSLE1BQUFBLEtBQUssR0FBR0QsUUFBUSxDQUFDVSxJQUFJLENBQUNDLEtBQUwsQ0FBV0wsT0FBWCxDQUFELEVBQXNCSixJQUF0QixFQUE0QkMsSUFBNUIsRUFBa0NDLE1BQWxDLENBQWhCO0FBQ0g7QUFDSjs7QUFFRCxNQUFJUSxLQUFLLENBQUNDLE9BQU4sQ0FBY1osS0FBZCxDQUFKLEVBQTBCO0FBQ3RCLFFBQUlDLElBQUksQ0FBQ1ksYUFBVCxFQUF3QjtBQUNwQixZQUFNQyxVQUFVLEdBQUduQixPQUFPLENBQUMsZUFBRCxDQUExQjs7QUFDQSxhQUFPSyxLQUFLLENBQUNlLEdBQU4sQ0FBVSxDQUFDQyxDQUFELEVBQUlDLENBQUosS0FBVUgsVUFBVSxDQUFDSSxzQkFBWCxDQUFrQ0YsQ0FBbEMsRUFBcUNmLElBQUksQ0FBQ1ksYUFBMUMsRUFBeURYLElBQXpELEVBQStEQyxNQUFNLEdBQUksSUFBR2MsQ0FBRSxHQUE5RSxDQUFwQixDQUFQO0FBQ0g7O0FBRUQsV0FBT2pCLEtBQVA7QUFDSDs7QUFFRCxRQUFNLElBQUlGLGVBQUosQ0FBb0IscUJBQXBCLEVBQTJDO0FBQUVFLElBQUFBLEtBQUssRUFBRUksR0FBVDtBQUFjZSxJQUFBQSxLQUFLLEVBQUVsQjtBQUFyQixHQUEzQyxDQUFOO0FBQ0g7O0FBRURtQixNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDYkMsRUFBQUEsSUFBSSxFQUFFLE9BRE87QUFHYkMsRUFBQUEsS0FBSyxFQUFFLENBQUUsTUFBRixDQUhNO0FBS2J4QixFQUFBQSxRQUFRLEVBQUVBLFFBTEc7QUFPYnlCLEVBQUFBLFlBQVksRUFBRSxFQVBEO0FBU2JDLEVBQUFBLFFBQVEsRUFBRSxDQUFDeEIsSUFBRCxFQUFPQyxJQUFQLEtBQWlCLEVBVGQ7QUFXYndCLEVBQUFBLFNBQVMsRUFBRzFCLEtBQUQsSUFBV0osU0FBUyxDQUFDSSxLQUFELENBQVQsR0FBbUIsSUFBbkIsR0FBMEJTLElBQUksQ0FBQ2tCLFNBQUwsQ0FBZTNCLEtBQWYsQ0FYbkM7QUFhYjRCLEVBQUFBLFVBQVUsRUFBRS9CLEdBQUcsQ0FBQytCLFVBQUosQ0FBZUMsTUFBZixDQUFzQixDQUM5QixLQUQ4QixFQUU5QixJQUY4QixFQUc5QixlQUg4QixDQUF0QixDQWJDO0FBbUJiQyxFQUFBQSxLQUFLLEVBQUUsQ0FBQ0MsSUFBRCxFQUFPQyxTQUFTLEdBQUcsR0FBbkIsS0FBMkJELElBQUksQ0FBQ2hCLEdBQUwsQ0FDOUJrQixJQUFJLElBQUk7QUFBRUEsSUFBQUEsSUFBSSxHQUFHQSxJQUFJLENBQUNDLFFBQUwsRUFBUDtBQUF3QixXQUFPRCxJQUFJLENBQUNFLE9BQUwsQ0FBYUgsU0FBYixLQUEyQixDQUFDLENBQTVCLEdBQWdDdEMsS0FBSyxDQUFDdUMsSUFBRCxFQUFPLEdBQVAsQ0FBckMsR0FBbURBLElBQTFEO0FBQWlFLEdBRHJFLEVBRTVCRyxJQUY0QixDQUV2QkosU0FGdUI7QUFuQnJCLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHsgXywgcXVvdGUgfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IGlzTm90aGluZyB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvbGFuZycpO1xuY29uc3QgYW55ID0gcmVxdWlyZSgnLi9hbnknKTtcbmNvbnN0IHsgVmFsaWRhdGlvbkVycm9yIH0gPSByZXF1aXJlKCcuLi91dGlscy9FcnJvcnMnKTtcblxuZnVuY3Rpb24gc2FuaXRpemUodmFsdWUsIGluZm8sIGkxOG4sIHByZWZpeCkge1xuICAgIGxldCByYXcgPSB2YWx1ZTtcblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGxldCB0cmltbWVkID0gdmFsdWUudHJpbSgpO1xuICAgICAgICBpZiAodHJpbW1lZC5zdGFydHNXaXRoKCdbJykgJiYgdHJpbW1lZC5lbmRzV2l0aCgnXScpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHNhbml0aXplKEpTT04ucGFyc2UodHJpbW1lZCksIGluZm8sIGkxOG4sIHByZWZpeCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGluZm8uZWxlbWVudFNjaGVtYSkge1xuICAgICAgICAgICAgY29uc3QgVmFsaWRhdG9ycyA9IHJlcXVpcmUoJy4uL1ZhbGlkYXRvcnMnKTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5tYXAoKGEsIGkpID0+IFZhbGlkYXRvcnMudmFsaWRhdGVPYmplY3RCeVNjaGVtYShhLCBpbmZvLmVsZW1lbnRTY2hlbWEsIGkxOG4sIHByZWZpeCArIGBbJHtpfV1gKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSAgICBcblxuICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoJ0ludmFsaWQgYXJyYXkgdmFsdWUnLCB7IHZhbHVlOiByYXcsIGZpZWxkOiBpbmZvIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBuYW1lOiAnYXJyYXknLFxuXG4gICAgYWxpYXM6IFsgJ2xpc3QnIF0sXG5cbiAgICBzYW5pdGl6ZTogc2FuaXRpemUsXG5cbiAgICBkZWZhdWx0VmFsdWU6IFtdLFxuXG4gICAgZ2VuZXJhdGU6IChpbmZvLCBpMThuKSA9PiAoW10pLFxuXG4gICAgc2VyaWFsaXplOiAodmFsdWUpID0+IGlzTm90aGluZyh2YWx1ZSkgPyBudWxsIDogSlNPTi5zdHJpbmdpZnkodmFsdWUpLFxuXG4gICAgcXVhbGlmaWVyczogYW55LnF1YWxpZmllcnMuY29uY2F0KFtcbiAgICAgICAgJ2NzdicsXG4gICAgICAgICdvZicsXG4gICAgICAgICdlbGVtZW50U2NoZW1hJ1xuICAgIF0pLFxuXG4gICAgdG9Dc3Y6IChkYXRhLCBzZXBhcmF0b3IgPSAnLCcpID0+IGRhdGEubWFwKFxuICAgICAgICBlbGVtID0+IHsgZWxlbSA9IGVsZW0udG9TdHJpbmcoKTsgcmV0dXJuIGVsZW0uaW5kZXhPZihzZXBhcmF0b3IpICE9IC0xID8gcXVvdGUoZWxlbSwgJ1wiJykgOiBlbGVtOyB9XG4gICAgICAgICkuam9pbihzZXBhcmF0b3IpXG59OyJdfQ==