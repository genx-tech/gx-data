"use strict";

require("source-map-support/register");

const {
  _,
  quote
} = require('@genx/july');

const {
  isNothing
} = require('../utils/lang');

const any = require('./any');

const {
  ValidationError
} = require('../utils/Errors');

function sanitize(value, info, i18n, prefix) {
  if (value == null) return null;
  let raw = value;

  if (typeof value === 'string') {
    if (info.csv) {
      return value;
    } else {
      let trimmed = value.trim();

      if (trimmed.startsWith('[') && trimmed.endsWith(']')) {
        value = sanitize(JSON.parse(trimmed), info, i18n, prefix);
      }
    }
  }

  if (Array.isArray(value)) {
    if (info.elementSchema) {
      const Validators = require('../Validators');

      return value.map((a, i) => Validators.validateAny(a, info.elementSchema, i18n, prefix + `[${i}]`));
    }

    return value;
  }

  throw new ValidationError('Invalid array value', {
    value: raw,
    field: info
  });
}

module.exports = {
  name: 'array',
  alias: ['list'],
  sanitize: sanitize,
  defaultValue: [],
  generate: (info, i18n) => [],
  serialize: value => isNothing(value) ? null : JSON.stringify(value),
  qualifiers: any.qualifiers.concat(['csv', 'of', 'elementSchema']),
  toCsv: (data, separator = ',') => data.map(elem => {
    elem = elem.toString();
    return elem.indexOf(separator) != -1 ? quote(elem, '"') : elem;
  }).join(separator)
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9hcnJheS5qcyJdLCJuYW1lcyI6WyJfIiwicXVvdGUiLCJyZXF1aXJlIiwiaXNOb3RoaW5nIiwiYW55IiwiVmFsaWRhdGlvbkVycm9yIiwic2FuaXRpemUiLCJ2YWx1ZSIsImluZm8iLCJpMThuIiwicHJlZml4IiwicmF3IiwiY3N2IiwidHJpbW1lZCIsInRyaW0iLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJKU09OIiwicGFyc2UiLCJBcnJheSIsImlzQXJyYXkiLCJlbGVtZW50U2NoZW1hIiwiVmFsaWRhdG9ycyIsIm1hcCIsImEiLCJpIiwidmFsaWRhdGVBbnkiLCJmaWVsZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJuYW1lIiwiYWxpYXMiLCJkZWZhdWx0VmFsdWUiLCJnZW5lcmF0ZSIsInNlcmlhbGl6ZSIsInN0cmluZ2lmeSIsInF1YWxpZmllcnMiLCJjb25jYXQiLCJ0b0NzdiIsImRhdGEiLCJzZXBhcmF0b3IiLCJlbGVtIiwidG9TdHJpbmciLCJpbmRleE9mIiwiam9pbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNO0FBQUVBLEVBQUFBLENBQUY7QUFBS0MsRUFBQUE7QUFBTCxJQUFlQyxPQUFPLENBQUMsWUFBRCxDQUE1Qjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBZ0JELE9BQU8sQ0FBQyxlQUFELENBQTdCOztBQUNBLE1BQU1FLEdBQUcsR0FBR0YsT0FBTyxDQUFDLE9BQUQsQ0FBbkI7O0FBQ0EsTUFBTTtBQUFFRyxFQUFBQTtBQUFGLElBQXNCSCxPQUFPLENBQUMsaUJBQUQsQ0FBbkM7O0FBRUEsU0FBU0ksUUFBVCxDQUFrQkMsS0FBbEIsRUFBeUJDLElBQXpCLEVBQStCQyxJQUEvQixFQUFxQ0MsTUFBckMsRUFBNkM7QUFDekMsTUFBSUgsS0FBSyxJQUFJLElBQWIsRUFBbUIsT0FBTyxJQUFQO0FBRW5CLE1BQUlJLEdBQUcsR0FBR0osS0FBVjs7QUFFQSxNQUFJLE9BQU9BLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDM0IsUUFBSUMsSUFBSSxDQUFDSSxHQUFULEVBQWM7QUFDVixhQUFPTCxLQUFQO0FBQ0gsS0FGRCxNQUVPO0FBQ0gsVUFBSU0sT0FBTyxHQUFHTixLQUFLLENBQUNPLElBQU4sRUFBZDs7QUFDQSxVQUFJRCxPQUFPLENBQUNFLFVBQVIsQ0FBbUIsR0FBbkIsS0FBMkJGLE9BQU8sQ0FBQ0csUUFBUixDQUFpQixHQUFqQixDQUEvQixFQUFzRDtBQUNsRFQsUUFBQUEsS0FBSyxHQUFHRCxRQUFRLENBQUNXLElBQUksQ0FBQ0MsS0FBTCxDQUFXTCxPQUFYLENBQUQsRUFBc0JMLElBQXRCLEVBQTRCQyxJQUE1QixFQUFrQ0MsTUFBbEMsQ0FBaEI7QUFDSDtBQUNKO0FBQ0o7O0FBRUQsTUFBSVMsS0FBSyxDQUFDQyxPQUFOLENBQWNiLEtBQWQsQ0FBSixFQUEwQjtBQUN0QixRQUFJQyxJQUFJLENBQUNhLGFBQVQsRUFBd0I7QUFDcEIsWUFBTUMsVUFBVSxHQUFHcEIsT0FBTyxDQUFDLGVBQUQsQ0FBMUI7O0FBQ0EsYUFBT0ssS0FBSyxDQUFDZ0IsR0FBTixDQUFVLENBQUNDLENBQUQsRUFBSUMsQ0FBSixLQUFVSCxVQUFVLENBQUNJLFdBQVgsQ0FBdUJGLENBQXZCLEVBQTBCaEIsSUFBSSxDQUFDYSxhQUEvQixFQUE4Q1osSUFBOUMsRUFBb0RDLE1BQU0sR0FBSSxJQUFHZSxDQUFFLEdBQW5FLENBQXBCLENBQVA7QUFDSDs7QUFFRCxXQUFPbEIsS0FBUDtBQUNIOztBQUVELFFBQU0sSUFBSUYsZUFBSixDQUFvQixxQkFBcEIsRUFBMkM7QUFBRUUsSUFBQUEsS0FBSyxFQUFFSSxHQUFUO0FBQWNnQixJQUFBQSxLQUFLLEVBQUVuQjtBQUFyQixHQUEzQyxDQUFOO0FBQ0g7O0FBRURvQixNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDYkMsRUFBQUEsSUFBSSxFQUFFLE9BRE87QUFHYkMsRUFBQUEsS0FBSyxFQUFFLENBQUUsTUFBRixDQUhNO0FBS2J6QixFQUFBQSxRQUFRLEVBQUVBLFFBTEc7QUFPYjBCLEVBQUFBLFlBQVksRUFBRSxFQVBEO0FBU2JDLEVBQUFBLFFBQVEsRUFBRSxDQUFDekIsSUFBRCxFQUFPQyxJQUFQLEtBQWlCLEVBVGQ7QUFZYnlCLEVBQUFBLFNBQVMsRUFBRzNCLEtBQUQsSUFBV0osU0FBUyxDQUFDSSxLQUFELENBQVQsR0FBbUIsSUFBbkIsR0FBMkJVLElBQUksQ0FBQ2tCLFNBQUwsQ0FBZTVCLEtBQWYsQ0FacEM7QUFjYjZCLEVBQUFBLFVBQVUsRUFBRWhDLEdBQUcsQ0FBQ2dDLFVBQUosQ0FBZUMsTUFBZixDQUFzQixDQUM5QixLQUQ4QixFQUU5QixJQUY4QixFQUc5QixlQUg4QixDQUF0QixDQWRDO0FBb0JiQyxFQUFBQSxLQUFLLEVBQUUsQ0FBQ0MsSUFBRCxFQUFPQyxTQUFTLEdBQUcsR0FBbkIsS0FBMkJELElBQUksQ0FBQ2hCLEdBQUwsQ0FDOUJrQixJQUFJLElBQUk7QUFBRUEsSUFBQUEsSUFBSSxHQUFHQSxJQUFJLENBQUNDLFFBQUwsRUFBUDtBQUF3QixXQUFPRCxJQUFJLENBQUNFLE9BQUwsQ0FBYUgsU0FBYixLQUEyQixDQUFDLENBQTVCLEdBQWdDdkMsS0FBSyxDQUFDd0MsSUFBRCxFQUFPLEdBQVAsQ0FBckMsR0FBbURBLElBQTFEO0FBQWlFLEdBRHJFLEVBRTVCRyxJQUY0QixDQUV2QkosU0FGdUI7QUFwQnJCLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHsgXywgcXVvdGUgfSA9IHJlcXVpcmUoJ0BnZW54L2p1bHknKTtcbmNvbnN0IHsgaXNOb3RoaW5nIH0gPSByZXF1aXJlKCcuLi91dGlscy9sYW5nJyk7XG5jb25zdCBhbnkgPSByZXF1aXJlKCcuL2FueScpO1xuY29uc3QgeyBWYWxpZGF0aW9uRXJyb3IgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL0Vycm9ycycpO1xuXG5mdW5jdGlvbiBzYW5pdGl6ZSh2YWx1ZSwgaW5mbywgaTE4biwgcHJlZml4KSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBudWxsO1xuXG4gICAgbGV0IHJhdyA9IHZhbHVlO1xuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKGluZm8uY3N2KSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgdHJpbW1lZCA9IHZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgIGlmICh0cmltbWVkLnN0YXJ0c1dpdGgoJ1snKSAmJiB0cmltbWVkLmVuZHNXaXRoKCddJykpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHNhbml0aXplKEpTT04ucGFyc2UodHJpbW1lZCksIGluZm8sIGkxOG4sIHByZWZpeCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGluZm8uZWxlbWVudFNjaGVtYSkge1xuICAgICAgICAgICAgY29uc3QgVmFsaWRhdG9ycyA9IHJlcXVpcmUoJy4uL1ZhbGlkYXRvcnMnKTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5tYXAoKGEsIGkpID0+IFZhbGlkYXRvcnMudmFsaWRhdGVBbnkoYSwgaW5mby5lbGVtZW50U2NoZW1hLCBpMThuLCBwcmVmaXggKyBgWyR7aX1dYCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0gICAgXG5cbiAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKCdJbnZhbGlkIGFycmF5IHZhbHVlJywgeyB2YWx1ZTogcmF3LCBmaWVsZDogaW5mbyB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbmFtZTogJ2FycmF5JyxcblxuICAgIGFsaWFzOiBbICdsaXN0JyBdLFxuXG4gICAgc2FuaXRpemU6IHNhbml0aXplLFxuXG4gICAgZGVmYXVsdFZhbHVlOiBbXSxcblxuICAgIGdlbmVyYXRlOiAoaW5mbywgaTE4bikgPT4gKFtdKSxcblxuICAgIC8vd2hlbiBpdCdzIGNzdiwgc2hvdWxkIGNhbGwgdG9Dc3YgaW4gZHJpdmVyIHNwZWNpZmljIEVudGl0eU1vZGVsXG4gICAgc2VyaWFsaXplOiAodmFsdWUpID0+IGlzTm90aGluZyh2YWx1ZSkgPyBudWxsIDogIEpTT04uc3RyaW5naWZ5KHZhbHVlKSxcblxuICAgIHF1YWxpZmllcnM6IGFueS5xdWFsaWZpZXJzLmNvbmNhdChbXG4gICAgICAgICdjc3YnLFxuICAgICAgICAnb2YnLFxuICAgICAgICAnZWxlbWVudFNjaGVtYSdcbiAgICBdKSxcblxuICAgIHRvQ3N2OiAoZGF0YSwgc2VwYXJhdG9yID0gJywnKSA9PiBkYXRhLm1hcChcbiAgICAgICAgZWxlbSA9PiB7IGVsZW0gPSBlbGVtLnRvU3RyaW5nKCk7IHJldHVybiBlbGVtLmluZGV4T2Yoc2VwYXJhdG9yKSAhPSAtMSA/IHF1b3RlKGVsZW0sICdcIicpIDogZWxlbTsgfVxuICAgICAgICApLmpvaW4oc2VwYXJhdG9yKVxufTsiXX0=