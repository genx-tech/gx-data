"use strict";

require("source-map-support/register");

const _ = require('rk-utils')._;

const {
  DateTime
} = require('luxon');

const any = require('./any');

module.exports = {
  name: 'datetime',
  typeObject: DateTime,
  alias: ['date', 'time', 'timestamp'],
  sanitize: (value, info, i18n) => {
    if (value instanceof Date) {
      return i18n ? i18n.datetime.fromJSDate(value) : DateTime.fromJSDate(value);
    }

    if (value instanceof DateTime) {
      return value;
    }

    if (typeof value === 'string') {
      return i18n ? i18n.datetime.fromISO(value) : DateTime.fromISO(value, {
        setZone: true
      });
    }

    if (typeof value === 'number') {
      return i18n ? i18n.datetime.fromMillis(value) : DateTime.fromMillis(value);
    }

    if (_.isPlainObject(value)) {
      return i18n ? i18n.datetime.fromObject(value) : DateTime.fromObject(value);
    }

    throw new TypeError(`Invalid datetime: ${value}`);
  },
  defaultValue: 0,
  generate: (info, i18n) => i18n ? i18n.now() : DateTime.local(),
  serialize: value => value.toISO({
    includeOffset: false
  }),
  qualifiers: any.qualifiers.concat(['timezone', 'dateOnly', 'timeOnly'])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9kYXRldGltZS5qcyJdLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsIkRhdGVUaW1lIiwiYW55IiwibW9kdWxlIiwiZXhwb3J0cyIsIm5hbWUiLCJ0eXBlT2JqZWN0IiwiYWxpYXMiLCJzYW5pdGl6ZSIsInZhbHVlIiwiaW5mbyIsImkxOG4iLCJEYXRlIiwiZGF0ZXRpbWUiLCJmcm9tSlNEYXRlIiwiZnJvbUlTTyIsInNldFpvbmUiLCJmcm9tTWlsbGlzIiwiaXNQbGFpbk9iamVjdCIsImZyb21PYmplY3QiLCJUeXBlRXJyb3IiLCJkZWZhdWx0VmFsdWUiLCJnZW5lcmF0ZSIsIm5vdyIsImxvY2FsIiwic2VyaWFsaXplIiwidG9JU08iLCJpbmNsdWRlT2Zmc2V0IiwicXVhbGlmaWVycyIsImNvbmNhdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQVAsQ0FBb0JELENBQTlCOztBQUNBLE1BQU07QUFBRUUsRUFBQUE7QUFBRixJQUFlRCxPQUFPLENBQUMsT0FBRCxDQUE1Qjs7QUFDQSxNQUFNRSxHQUFHLEdBQUdGLE9BQU8sQ0FBQyxPQUFELENBQW5COztBQUVBRyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDYkMsRUFBQUEsSUFBSSxFQUFFLFVBRE87QUFHYkMsRUFBQUEsVUFBVSxFQUFFTCxRQUhDO0FBS2JNLEVBQUFBLEtBQUssRUFBRSxDQUFFLE1BQUYsRUFBVSxNQUFWLEVBQWtCLFdBQWxCLENBTE07QUFPYkMsRUFBQUEsUUFBUSxFQUFFLENBQUNDLEtBQUQsRUFBUUMsSUFBUixFQUFjQyxJQUFkLEtBQXVCO0FBQzdCLFFBQUlGLEtBQUssWUFBWUcsSUFBckIsRUFBMkI7QUFDdkIsYUFBT0QsSUFBSSxHQUFHQSxJQUFJLENBQUNFLFFBQUwsQ0FBY0MsVUFBZCxDQUF5QkwsS0FBekIsQ0FBSCxHQUFxQ1IsUUFBUSxDQUFDYSxVQUFULENBQW9CTCxLQUFwQixDQUFoRDtBQUNIOztBQUVELFFBQUlBLEtBQUssWUFBWVIsUUFBckIsRUFBK0I7QUFDM0IsYUFBT1EsS0FBUDtBQUNIOztBQUVELFFBQUksT0FBT0EsS0FBUCxLQUFpQixRQUFyQixFQUErQjtBQUMzQixhQUFPRSxJQUFJLEdBQUdBLElBQUksQ0FBQ0UsUUFBTCxDQUFjRSxPQUFkLENBQXNCTixLQUF0QixDQUFILEdBQWtDUixRQUFRLENBQUNjLE9BQVQsQ0FBaUJOLEtBQWpCLEVBQXdCO0FBQUNPLFFBQUFBLE9BQU8sRUFBRTtBQUFWLE9BQXhCLENBQTdDO0FBQ0g7O0FBRUQsUUFBSSxPQUFPUCxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzNCLGFBQU9FLElBQUksR0FBR0EsSUFBSSxDQUFDRSxRQUFMLENBQWNJLFVBQWQsQ0FBeUJSLEtBQXpCLENBQUgsR0FBcUNSLFFBQVEsQ0FBQ2dCLFVBQVQsQ0FBb0JSLEtBQXBCLENBQWhEO0FBQ0g7O0FBRUQsUUFBSVYsQ0FBQyxDQUFDbUIsYUFBRixDQUFnQlQsS0FBaEIsQ0FBSixFQUE0QjtBQUN4QixhQUFPRSxJQUFJLEdBQUdBLElBQUksQ0FBQ0UsUUFBTCxDQUFjTSxVQUFkLENBQXlCVixLQUF6QixDQUFILEdBQXFDUixRQUFRLENBQUNrQixVQUFULENBQW9CVixLQUFwQixDQUFoRDtBQUNIOztBQUVELFVBQU0sSUFBSVcsU0FBSixDQUFlLHFCQUFvQlgsS0FBTSxFQUF6QyxDQUFOO0FBQ0gsR0E3Qlk7QUErQmJZLEVBQUFBLFlBQVksRUFBRSxDQS9CRDtBQWlDYkMsRUFBQUEsUUFBUSxFQUFFLENBQUNaLElBQUQsRUFBT0MsSUFBUCxLQUFnQkEsSUFBSSxHQUFHQSxJQUFJLENBQUNZLEdBQUwsRUFBSCxHQUFnQnRCLFFBQVEsQ0FBQ3VCLEtBQVQsRUFqQ2pDO0FBbUNiQyxFQUFBQSxTQUFTLEVBQUVoQixLQUFLLElBQUlBLEtBQUssQ0FBQ2lCLEtBQU4sQ0FBWTtBQUFFQyxJQUFBQSxhQUFhLEVBQUU7QUFBakIsR0FBWixDQW5DUDtBQXFDYkMsRUFBQUEsVUFBVSxFQUFFMUIsR0FBRyxDQUFDMEIsVUFBSixDQUFlQyxNQUFmLENBQXNCLENBQzlCLFVBRDhCLEVBRTlCLFVBRjhCLEVBRzlCLFVBSDhCLENBQXRCO0FBckNDLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IF8gPSByZXF1aXJlKCdyay11dGlscycpLl87XG5jb25zdCB7IERhdGVUaW1lIH0gPSByZXF1aXJlKCdsdXhvbicpO1xuY29uc3QgYW55ID0gcmVxdWlyZSgnLi9hbnknKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbmFtZTogJ2RhdGV0aW1lJyxcblxuICAgIHR5cGVPYmplY3Q6IERhdGVUaW1lLFxuXG4gICAgYWxpYXM6IFsgJ2RhdGUnLCAndGltZScsICd0aW1lc3RhbXAnIF0sXG5cbiAgICBzYW5pdGl6ZTogKHZhbHVlLCBpbmZvLCBpMThuKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBpMThuID8gaTE4bi5kYXRldGltZS5mcm9tSlNEYXRlKHZhbHVlKSA6IERhdGVUaW1lLmZyb21KU0RhdGUodmFsdWUpO1xuICAgICAgICB9IFxuXG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGVUaW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gaTE4biA/IGkxOG4uZGF0ZXRpbWUuZnJvbUlTTyh2YWx1ZSkgOiBEYXRlVGltZS5mcm9tSVNPKHZhbHVlLCB7c2V0Wm9uZTogdHJ1ZX0pO1xuICAgICAgICB9IFxuICAgICAgICBcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBpMThuID8gaTE4bi5kYXRldGltZS5mcm9tTWlsbGlzKHZhbHVlKSA6IERhdGVUaW1lLmZyb21NaWxsaXModmFsdWUpO1xuICAgICAgICB9IFxuICAgICAgICBcbiAgICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpMThuID8gaTE4bi5kYXRldGltZS5mcm9tT2JqZWN0KHZhbHVlKSA6IERhdGVUaW1lLmZyb21PYmplY3QodmFsdWUpO1xuICAgICAgICB9ICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgZGF0ZXRpbWU6ICR7dmFsdWV9YCk7XG4gICAgfSxcblxuICAgIGRlZmF1bHRWYWx1ZTogMCxcblxuICAgIGdlbmVyYXRlOiAoaW5mbywgaTE4bikgPT4gaTE4biA/IGkxOG4ubm93KCkgOiBEYXRlVGltZS5sb2NhbCgpLFxuXG4gICAgc2VyaWFsaXplOiB2YWx1ZSA9PiB2YWx1ZS50b0lTTyh7IGluY2x1ZGVPZmZzZXQ6IGZhbHNlIH0pLFxuXG4gICAgcXVhbGlmaWVyczogYW55LnF1YWxpZmllcnMuY29uY2F0KFtcbiAgICAgICAgJ3RpbWV6b25lJyxcbiAgICAgICAgJ2RhdGVPbmx5JyxcbiAgICAgICAgJ3RpbWVPbmx5J1xuICAgIF0pXG59OyJdfQ==