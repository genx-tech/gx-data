"use strict";

require("source-map-support/register");

const _ = require('rk-utils')._;

const {
  DateTime
} = require('luxon');

const any = require('./any');

const {
  ValidationError
} = require('../utils/Errors');

module.exports = {
  name: 'datetime',
  typeObject: DateTime,
  alias: ['date', 'time', 'timestamp'],
  sanitize: (value, info, i18n) => {
    let opts = {
      zone: (i18n === null || i18n === void 0 ? void 0 : i18n.timezone) || 'local'
    };
    let raw = value;

    if (value instanceof Date) {
      value = DateTime.fromJSDate(value, opts);
    } else {
      let type = typeof value;

      if (type === 'string' && !info.dontParse) {
        if (info.inputFormat) {
          value = DateTime.fromFormat(value, info.inputFormat, opts);
        } else {
          value = DateTime.fromISO(value, opts);
        }
      } else if (type === 'number') {
        value = DateTime.fromMillis(value, opts);
      } else if (type !== 'object' || value.constructor.name !== 'DateTime') {
        throw new ValidationError('Invalid datetime object.', {
          value: raw,
          field: info
        });
      }
    }

    if (!value.isValid) {
      throw new ValidationError('Invalid datetime object.', {
        value: raw,
        field: info
      });
    }

    return value;
  },
  defaultValue: 0,
  generate: (info, i18n) => i18n ? i18n.now() : DateTime.local(),
  serialize: value => {
    if (value.toISO) {
      return value.toISO({
        includeOffset: false
      });
    }

    return value;
  },
  qualifiers: any.qualifiers.concat(['timezone', 'dateOnly', 'timeOnly', 'inputFormat', 'dontParse'])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9kYXRldGltZS5qcyJdLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsIkRhdGVUaW1lIiwiYW55IiwiVmFsaWRhdGlvbkVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsIm5hbWUiLCJ0eXBlT2JqZWN0IiwiYWxpYXMiLCJzYW5pdGl6ZSIsInZhbHVlIiwiaW5mbyIsImkxOG4iLCJvcHRzIiwiem9uZSIsInRpbWV6b25lIiwicmF3IiwiRGF0ZSIsImZyb21KU0RhdGUiLCJ0eXBlIiwiZG9udFBhcnNlIiwiaW5wdXRGb3JtYXQiLCJmcm9tRm9ybWF0IiwiZnJvbUlTTyIsImZyb21NaWxsaXMiLCJjb25zdHJ1Y3RvciIsImZpZWxkIiwiaXNWYWxpZCIsImRlZmF1bHRWYWx1ZSIsImdlbmVyYXRlIiwibm93IiwibG9jYWwiLCJzZXJpYWxpemUiLCJ0b0lTTyIsImluY2x1ZGVPZmZzZXQiLCJxdWFsaWZpZXJzIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLENBQUMsR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBUCxDQUFvQkQsQ0FBOUI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQTtBQUFGLElBQWVELE9BQU8sQ0FBQyxPQUFELENBQTVCOztBQUNBLE1BQU1FLEdBQUcsR0FBR0YsT0FBTyxDQUFDLE9BQUQsQ0FBbkI7O0FBQ0EsTUFBTTtBQUFFRyxFQUFBQTtBQUFGLElBQXNCSCxPQUFPLENBQUMsaUJBQUQsQ0FBbkM7O0FBRUFJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNiQyxFQUFBQSxJQUFJLEVBQUUsVUFETztBQUdiQyxFQUFBQSxVQUFVLEVBQUVOLFFBSEM7QUFLYk8sRUFBQUEsS0FBSyxFQUFFLENBQUUsTUFBRixFQUFVLE1BQVYsRUFBa0IsV0FBbEIsQ0FMTTtBQU9iQyxFQUFBQSxRQUFRLEVBQUUsQ0FBQ0MsS0FBRCxFQUFRQyxJQUFSLEVBQWNDLElBQWQsS0FBdUI7QUFDN0IsUUFBSUMsSUFBSSxHQUFHO0FBQUVDLE1BQUFBLElBQUksRUFBRSxDQUFBRixJQUFJLFNBQUosSUFBQUEsSUFBSSxXQUFKLFlBQUFBLElBQUksQ0FBRUcsUUFBTixLQUFrQjtBQUExQixLQUFYO0FBRUEsUUFBSUMsR0FBRyxHQUFHTixLQUFWOztBQUVBLFFBQUlBLEtBQUssWUFBWU8sSUFBckIsRUFBMkI7QUFDdkJQLE1BQUFBLEtBQUssR0FBR1QsUUFBUSxDQUFDaUIsVUFBVCxDQUFvQlIsS0FBcEIsRUFBMkJHLElBQTNCLENBQVI7QUFDSCxLQUZELE1BRU87QUFDSCxVQUFJTSxJQUFJLEdBQUcsT0FBT1QsS0FBbEI7O0FBRUEsVUFBSVMsSUFBSSxLQUFLLFFBQVQsSUFBcUIsQ0FBQ1IsSUFBSSxDQUFDUyxTQUEvQixFQUEwQztBQUN0QyxZQUFJVCxJQUFJLENBQUNVLFdBQVQsRUFBc0I7QUFDbEJYLFVBQUFBLEtBQUssR0FBR1QsUUFBUSxDQUFDcUIsVUFBVCxDQUFvQlosS0FBcEIsRUFBMkJDLElBQUksQ0FBQ1UsV0FBaEMsRUFBNkNSLElBQTdDLENBQVI7QUFDSCxTQUZELE1BRU87QUFDSEgsVUFBQUEsS0FBSyxHQUFHVCxRQUFRLENBQUNzQixPQUFULENBQWlCYixLQUFqQixFQUF3QkcsSUFBeEIsQ0FBUjtBQUNIO0FBQ0osT0FORCxNQU1PLElBQUlNLElBQUksS0FBSyxRQUFiLEVBQXVCO0FBQzFCVCxRQUFBQSxLQUFLLEdBQUdULFFBQVEsQ0FBQ3VCLFVBQVQsQ0FBb0JkLEtBQXBCLEVBQTJCRyxJQUEzQixDQUFSO0FBQ0gsT0FGTSxNQUVBLElBQUlNLElBQUksS0FBSyxRQUFULElBQXFCVCxLQUFLLENBQUNlLFdBQU4sQ0FBa0JuQixJQUFsQixLQUEyQixVQUFwRCxFQUFnRTtBQUNuRSxjQUFNLElBQUlILGVBQUosQ0FBb0IsMEJBQXBCLEVBQWdEO0FBQUVPLFVBQUFBLEtBQUssRUFBRU0sR0FBVDtBQUFjVSxVQUFBQSxLQUFLLEVBQUVmO0FBQXJCLFNBQWhELENBQU47QUFDSDtBQUNKOztBQUVELFFBQUksQ0FBQ0QsS0FBSyxDQUFDaUIsT0FBWCxFQUFvQjtBQUNoQixZQUFNLElBQUl4QixlQUFKLENBQW9CLDBCQUFwQixFQUFnRDtBQUFFTyxRQUFBQSxLQUFLLEVBQUVNLEdBQVQ7QUFBY1UsUUFBQUEsS0FBSyxFQUFFZjtBQUFyQixPQUFoRCxDQUFOO0FBQ0g7O0FBRUQsV0FBT0QsS0FBUDtBQUNILEdBbkNZO0FBcUNia0IsRUFBQUEsWUFBWSxFQUFFLENBckNEO0FBdUNiQyxFQUFBQSxRQUFRLEVBQUUsQ0FBQ2xCLElBQUQsRUFBT0MsSUFBUCxLQUFnQkEsSUFBSSxHQUFHQSxJQUFJLENBQUNrQixHQUFMLEVBQUgsR0FBZ0I3QixRQUFRLENBQUM4QixLQUFULEVBdkNqQztBQXlDYkMsRUFBQUEsU0FBUyxFQUFFdEIsS0FBSyxJQUFJO0FBQ2hCLFFBQUlBLEtBQUssQ0FBQ3VCLEtBQVYsRUFBaUI7QUFDYixhQUFPdkIsS0FBSyxDQUFDdUIsS0FBTixDQUFZO0FBQUVDLFFBQUFBLGFBQWEsRUFBRTtBQUFqQixPQUFaLENBQVA7QUFDSDs7QUFFRCxXQUFPeEIsS0FBUDtBQUNILEdBL0NZO0FBaURieUIsRUFBQUEsVUFBVSxFQUFFakMsR0FBRyxDQUFDaUMsVUFBSixDQUFlQyxNQUFmLENBQXNCLENBQzlCLFVBRDhCLEVBRTlCLFVBRjhCLEVBRzlCLFVBSDhCLEVBSTlCLGFBSjhCLEVBSzlCLFdBTDhCLENBQXRCO0FBakRDLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IF8gPSByZXF1aXJlKCdyay11dGlscycpLl87XG5jb25zdCB7IERhdGVUaW1lIH0gPSByZXF1aXJlKCdsdXhvbicpO1xuY29uc3QgYW55ID0gcmVxdWlyZSgnLi9hbnknKTtcbmNvbnN0IHsgVmFsaWRhdGlvbkVycm9yIH0gPSByZXF1aXJlKCcuLi91dGlscy9FcnJvcnMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbmFtZTogJ2RhdGV0aW1lJyxcblxuICAgIHR5cGVPYmplY3Q6IERhdGVUaW1lLFxuXG4gICAgYWxpYXM6IFsgJ2RhdGUnLCAndGltZScsICd0aW1lc3RhbXAnIF0sXG5cbiAgICBzYW5pdGl6ZTogKHZhbHVlLCBpbmZvLCBpMThuKSA9PiB7ICAgICAgICAgICBcbiAgICAgICAgbGV0IG9wdHMgPSB7IHpvbmU6IGkxOG4/LnRpbWV6b25lIHx8ICdsb2NhbCcgfTtcblxuICAgICAgICBsZXQgcmF3ID0gdmFsdWU7XG5cbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgdmFsdWUgPSBEYXRlVGltZS5mcm9tSlNEYXRlKHZhbHVlLCBvcHRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgICBcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiAhaW5mby5kb250UGFyc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5mby5pbnB1dEZvcm1hdCkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IERhdGVUaW1lLmZyb21Gb3JtYXQodmFsdWUsIGluZm8uaW5wdXRGb3JtYXQsIG9wdHMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gRGF0ZVRpbWUuZnJvbUlTTyh2YWx1ZSwgb3B0cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gRGF0ZVRpbWUuZnJvbU1pbGxpcyh2YWx1ZSwgb3B0cyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgIT09ICdvYmplY3QnIHx8IHZhbHVlLmNvbnN0cnVjdG9yLm5hbWUgIT09ICdEYXRlVGltZScpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKCdJbnZhbGlkIGRhdGV0aW1lIG9iamVjdC4nLCB7IHZhbHVlOiByYXcsIGZpZWxkOiBpbmZvIH0pO1xuICAgICAgICAgICAgfSAgICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKCF2YWx1ZS5pc1ZhbGlkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKCdJbnZhbGlkIGRhdGV0aW1lIG9iamVjdC4nLCB7IHZhbHVlOiByYXcsIGZpZWxkOiBpbmZvIH0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcblxuICAgIGRlZmF1bHRWYWx1ZTogMCxcblxuICAgIGdlbmVyYXRlOiAoaW5mbywgaTE4bikgPT4gaTE4biA/IGkxOG4ubm93KCkgOiBEYXRlVGltZS5sb2NhbCgpLFxuXG4gICAgc2VyaWFsaXplOiB2YWx1ZSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZS50b0lTTykge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPKHsgaW5jbHVkZU9mZnNldDogZmFsc2UgfSk7IFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG5cbiAgICBxdWFsaWZpZXJzOiBhbnkucXVhbGlmaWVycy5jb25jYXQoW1xuICAgICAgICAndGltZXpvbmUnLFxuICAgICAgICAnZGF0ZU9ubHknLFxuICAgICAgICAndGltZU9ubHknLFxuICAgICAgICAnaW5wdXRGb3JtYXQnLFxuICAgICAgICAnZG9udFBhcnNlJ1xuICAgIF0pXG59OyJdfQ==