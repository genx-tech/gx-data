{"version":3,"file":"object.js","names":["_","require","isNothing","ValidationError","any","jsonStarter","Set","jsonEnding","module","exports","name","alias","sanitize","value","info","i18n","prefix","raw","type","dontParse","length","has","JSON","parse","Array","isArray","toPlainObject","feild","schema","Validators","validateObjectBySchema","defaultValue","generate","serialize","stringify","qualifiers","concat"],"sources":["../../src/types/object.js"],"sourcesContent":["const { _ } = require('@genx/july');\nconst { isNothing } = require('../utils/lang');\nconst { ValidationError } = require('../utils/Errors');\nconst any = require('./any');\n\nconst jsonStarter = new Set('\"', '[', '{');\nconst jsonEnding = {\n    '\"': '\"',\n    '[': ']',\n    '{': '}',\n};\n\n// info.dontParse\n// info.schema\n\nmodule.exports = {\n    name: 'object',\n\n    alias: ['json'],\n\n    sanitize: (value, info, i18n, prefix) => {\n        if (value == null) return null;\n\n        const raw = value;\n        const type = typeof value;\n\n        switch (type) {\n            case 'string':\n                if (\n                    !info.dontParse &&\n                    value.length > 0 &&\n                    jsonStarter.has(value[0]) &&\n                    jsonEnding[value[0]] === value[value.length - 1]\n                ) {\n                    value = JSON.parse(value);\n                }\n                break;\n\n            case 'boolean':\n            case 'number':\n            case 'bigint':\n                // skip, keep original value\n                break;\n\n            case 'object':\n                if (!Array.isArray(value)) {\n                    value = _.toPlainObject(value);\n                }\n                break;\n\n            default:\n                throw new ValidationError('Invalid object value', {\n                    value: raw,\n                    feild: info,\n                });\n        }\n\n        if (info.schema) {\n            const Validators = require('../Validators');\n            return Validators.validateObjectBySchema(\n                value,\n                info.schema,\n                i18n,\n                prefix\n            );\n        }\n\n        return value;\n    },\n\n    defaultValue: {},\n\n    generate: (info, i18n) => ({}),\n\n    serialize: (value) => (isNothing(value) ? null : JSON.stringify(value)),\n\n    qualifiers: any.qualifiers.concat(['schema']),\n};\n"],"mappings":";;;;AAAA,MAAM;EAAEA;AAAF,IAAQC,OAAO,CAAC,YAAD,CAArB;;AACA,MAAM;EAAEC;AAAF,IAAgBD,OAAO,CAAC,eAAD,CAA7B;;AACA,MAAM;EAAEE;AAAF,IAAsBF,OAAO,CAAC,iBAAD,CAAnC;;AACA,MAAMG,GAAG,GAAGH,OAAO,CAAC,OAAD,CAAnB;;AAEA,MAAMI,WAAW,GAAG,IAAIC,GAAJ,CAAQ,GAAR,EAAa,GAAb,EAAkB,GAAlB,CAApB;AACA,MAAMC,UAAU,GAAG;EACf,KAAK,GADU;EAEf,KAAK,GAFU;EAGf,KAAK;AAHU,CAAnB;AASAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE,QADO;EAGbC,KAAK,EAAE,CAAC,MAAD,CAHM;EAKbC,QAAQ,EAAE,CAACC,KAAD,EAAQC,IAAR,EAAcC,IAAd,EAAoBC,MAApB,KAA+B;IACrC,IAAIH,KAAK,IAAI,IAAb,EAAmB,OAAO,IAAP;IAEnB,MAAMI,GAAG,GAAGJ,KAAZ;IACA,MAAMK,IAAI,GAAG,OAAOL,KAApB;;IAEA,QAAQK,IAAR;MACI,KAAK,QAAL;QACI,IACI,CAACJ,IAAI,CAACK,SAAN,IACAN,KAAK,CAACO,MAAN,GAAe,CADf,IAEAf,WAAW,CAACgB,GAAZ,CAAgBR,KAAK,CAAC,CAAD,CAArB,CAFA,IAGAN,UAAU,CAACM,KAAK,CAAC,CAAD,CAAN,CAAV,KAAyBA,KAAK,CAACA,KAAK,CAACO,MAAN,GAAe,CAAhB,CAJlC,EAKE;UACEP,KAAK,GAAGS,IAAI,CAACC,KAAL,CAAWV,KAAX,CAAR;QACH;;QACD;;MAEJ,KAAK,SAAL;MACA,KAAK,QAAL;MACA,KAAK,QAAL;QAEI;;MAEJ,KAAK,QAAL;QACI,IAAI,CAACW,KAAK,CAACC,OAAN,CAAcZ,KAAd,CAAL,EAA2B;UACvBA,KAAK,GAAGb,CAAC,CAAC0B,aAAF,CAAgBb,KAAhB,CAAR;QACH;;QACD;;MAEJ;QACI,MAAM,IAAIV,eAAJ,CAAoB,sBAApB,EAA4C;UAC9CU,KAAK,EAAEI,GADuC;UAE9CU,KAAK,EAAEb;QAFuC,CAA5C,CAAN;IAzBR;;IA+BA,IAAIA,IAAI,CAACc,MAAT,EAAiB;MACb,MAAMC,UAAU,GAAG5B,OAAO,CAAC,eAAD,CAA1B;;MACA,OAAO4B,UAAU,CAACC,sBAAX,CACHjB,KADG,EAEHC,IAAI,CAACc,MAFF,EAGHb,IAHG,EAIHC,MAJG,CAAP;IAMH;;IAED,OAAOH,KAAP;EACH,CArDY;EAuDbkB,YAAY,EAAE,EAvDD;EAyDbC,QAAQ,EAAE,CAAClB,IAAD,EAAOC,IAAP,MAAiB,EAAjB,CAzDG;EA2DbkB,SAAS,EAAGpB,KAAD,IAAYX,SAAS,CAACW,KAAD,CAAT,GAAmB,IAAnB,GAA0BS,IAAI,CAACY,SAAL,CAAerB,KAAf,CA3DpC;EA6DbsB,UAAU,EAAE/B,GAAG,CAAC+B,UAAJ,CAAeC,MAAf,CAAsB,CAAC,QAAD,CAAtB;AA7DC,CAAjB"}