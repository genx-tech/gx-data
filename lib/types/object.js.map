{"version":3,"file":"object.js","names":["_","require","isNothing","ValidationError","any","jsonStarter","Set","jsonEnding","module","exports","name","alias","sanitize","value","info","i18n","prefix","raw","type","dontParse","length","has","JSON","parse","Array","isArray","toPlainObject","feild","schema","Validators","validateObjectBySchema","defaultValue","generate","serialize","stringify","qualifiers","concat"],"sources":["../../src/types/object.js"],"sourcesContent":["const { _ } = require('@genx/july');\nconst { isNothing } = require('../utils/lang');\nconst { ValidationError } = require('../utils/Errors');\nconst any = require('./any');\n\nconst jsonStarter = new Set('\"', '[', '{');\nconst jsonEnding = {\n    '\"': '\"',\n    '[': ']',\n    '{': '}',\n};\n\n// info.dontParse\n// info.schema\n\nmodule.exports = {\n    name: 'object',\n\n    alias: ['json'],\n\n    sanitize: (value, info, i18n, prefix) => {\n        if (value == null) return null;\n\n        const raw = value;\n        const type = typeof value;\n\n        switch (type) {\n            case 'string':\n                if (\n                    !info.dontParse &&\n                    value.length > 0 &&\n                    jsonStarter.has(value[0]) &&\n                    jsonEnding[value[0]] === value[value.length - 1]\n                ) {\n                    value = JSON.parse(value);\n                }\n                break;\n\n            case 'boolean':\n            case 'number':\n            case 'bigint':\n                // skip, keep original value\n                break;\n\n            case 'object':\n                if (!Array.isArray(value)) {\n                    value = _.toPlainObject(value);\n                }\n                break;\n\n            default:\n                throw new ValidationError('Invalid object value', {\n                    value: raw,\n                    feild: info,\n                });\n        }\n\n        if (info.schema) {\n            const Validators = require('../Validators');\n            return Validators.validateObjectBySchema(\n                value,\n                info.schema,\n                i18n,\n                prefix\n            );\n        }\n\n        return value;\n    },\n\n    defaultValue: {},\n\n    generate: (info, i18n) => ({}),\n\n    serialize: (value) => (isNothing(value) ? null : JSON.stringify(value)),\n\n    qualifiers: any.qualifiers.concat(['schema']),\n};\n"],"mappings":";;;AAAA,MAAM;EAAEA;AAAE,CAAC,GAAGC,OAAO,CAAC,YAAY,CAAC;AACnC,MAAM;EAAEC;AAAU,CAAC,GAAGD,OAAO,CAAC,eAAe,CAAC;AAC9C,MAAM;EAAEE;AAAgB,CAAC,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AACtD,MAAMG,GAAG,GAAGH,OAAO,CAAC,OAAO,CAAC;AAE5B,MAAMI,WAAW,GAAG,IAAIC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AAC1C,MAAMC,UAAU,GAAG;EACf,GAAG,EAAE,GAAG;EACR,GAAG,EAAE,GAAG;EACR,GAAG,EAAE;AACT,CAAC;AAKDC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE,QAAQ;EAEdC,KAAK,EAAE,CAAC,MAAM,CAAC;EAEfC,QAAQ,EAAEA,CAACC,KAAK,EAAEC,IAAI,EAAEC,IAAI,EAAEC,MAAM,KAAK;IACrC,IAAIH,KAAK,IAAI,IAAI,EAAE,OAAO,IAAI;IAE9B,MAAMI,GAAG,GAAGJ,KAAK;IACjB,MAAMK,IAAI,GAAG,OAAOL,KAAK;IAEzB,QAAQK,IAAI;MACR,KAAK,QAAQ;QACT,IACI,CAACJ,IAAI,CAACK,SAAS,IACfN,KAAK,CAACO,MAAM,GAAG,CAAC,IAChBf,WAAW,CAACgB,GAAG,CAACR,KAAK,CAAC,CAAC,CAAC,CAAC,IACzBN,UAAU,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC,KAAKA,KAAK,CAACA,KAAK,CAACO,MAAM,GAAG,CAAC,CAAC,EAClD;UACEP,KAAK,GAAGS,IAAI,CAACC,KAAK,CAACV,KAAK,CAAC;QAC7B;QACA;MAEJ,KAAK,SAAS;MACd,KAAK,QAAQ;MACb,KAAK,QAAQ;QAET;MAEJ,KAAK,QAAQ;QACT,IAAI,CAACW,KAAK,CAACC,OAAO,CAACZ,KAAK,CAAC,EAAE;UACvBA,KAAK,GAAGb,CAAC,CAAC0B,aAAa,CAACb,KAAK,CAAC;QAClC;QACA;MAEJ;QACI,MAAM,IAAIV,eAAe,CAAC,sBAAsB,EAAE;UAC9CU,KAAK,EAAEI,GAAG;UACVU,KAAK,EAAEb;QACX,CAAC,CAAC;IAAC;IAGX,IAAIA,IAAI,CAACc,MAAM,EAAE;MACb,MAAMC,UAAU,GAAG5B,OAAO,CAAC,eAAe,CAAC;MAC3C,OAAO4B,UAAU,CAACC,sBAAsB,CACpCjB,KAAK,EACLC,IAAI,CAACc,MAAM,EACXb,IAAI,EACJC,MAAM,CACT;IACL;IAEA,OAAOH,KAAK;EAChB,CAAC;EAEDkB,YAAY,EAAE,CAAC,CAAC;EAEhBC,QAAQ,EAAEA,CAAClB,IAAI,EAAEC,IAAI,MAAM,CAAC,CAAC,CAAC;EAE9BkB,SAAS,EAAGpB,KAAK,IAAMX,SAAS,CAACW,KAAK,CAAC,GAAG,IAAI,GAAGS,IAAI,CAACY,SAAS,CAACrB,KAAK,CAAE;EAEvEsB,UAAU,EAAE/B,GAAG,CAAC+B,UAAU,CAACC,MAAM,CAAC,CAAC,QAAQ,CAAC;AAChD,CAAC"}