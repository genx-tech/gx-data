{"version":3,"sources":["../../src/types/index.js"],"names":["_","require","ARRAY","BINARY","BOOLEAN","ENUM","DATETIME","INTEGER","NUMBER","OBJECT","TEXT","types","Types","mapKeys","v","k","name","Builtin","Set","map","t","FunctionalQualifiers","Object","freeze","sanitize","value","info","others","pre","has","type","typeObjerct","module","exports"],"mappings":";;;;AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAQC,OAAO,CAAC,YAAD,CAArB;;AAEA,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMK,QAAQ,GAAGL,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAMM,OAAO,GAAGN,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMO,MAAM,GAAGP,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMQ,MAAM,GAAGR,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMS,IAAI,GAAGT,OAAO,CAAC,QAAD,CAApB;;AAEA,MAAMU,KAAK,GAAG;AACVT,EAAAA,KADU;AAEVC,EAAAA,MAFU;AAGVC,EAAAA,OAHU;AAIVC,EAAAA,IAJU;AAKVC,EAAAA,QALU;AAMVC,EAAAA,OANU;AAOVC,EAAAA,MAPU;AAQVC,EAAAA,MARU;AASVC,EAAAA;AATU,CAAd;AAYA,MAAME,KAAK,GAAG,EACV,GAAGD,KADO;AAEV,KAAGX,CAAC,CAACa,OAAF,CAAUF,KAAV,EAAiB,CAACG,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,IAA7B,CAFO;AAIVC,EAAAA,OAAO,EAAE,IAAIC,GAAJ,CAAQlB,CAAC,CAACmB,GAAF,CAAMR,KAAN,EAAcS,CAAD,IAAOA,CAAC,CAACJ,IAAtB,CAAR,CAJC;AAMVK,EAAAA,oBAAoB,EAAEC,MAAM,CAACC,MAAP,CAAc,CAChC,UADgC,EAEhC,SAFgC,EAGhC,MAHgC,EAIhC,UAJgC,EAKhC,WALgC,EAMhC,aANgC,EAOhC,uBAPgC,CAAd,CANZ;AAgBVC,EAAAA,QAAQ,EAAE,UAAUC,KAAV,EAAiBC,IAAjB,EAAuB,GAAGC,MAA1B,EAAkC;AACxCC,IAAAA,GAAG,EAAE;AACDhB,MAAAA,KAAK,CAACK,OAAN,CAAcY,GAAd,CAAkBH,IAAI,CAACI,IAAvB,GACK,4BAA2BJ,IAAI,CAACI,IAAK,KAD1C;AAEH;;AAED,QAAIC,WAAW,GAAGnB,KAAK,CAACc,IAAI,CAACI,IAAN,CAAvB;AACA,WAAOC,WAAW,CAACP,QAAZ,CAAqBC,KAArB,EAA4BC,IAA5B,EAAkC,GAAGC,MAArC,CAAP;AACH;AAxBS,CAAd;AA2BAK,MAAM,CAACC,OAAP,GAAiBrB,KAAjB","sourcesContent":["const { _ } = require('@genx/july');\n\nconst ARRAY = require('./array');\nconst BINARY = require('./binary');\nconst BOOLEAN = require('./boolean');\nconst ENUM = require('./enum');\nconst DATETIME = require('./datetime');\nconst INTEGER = require('./integer');\nconst NUMBER = require('./number');\nconst OBJECT = require('./object');\nconst TEXT = require('./text');\n\nconst types = {\n    ARRAY,\n    BINARY,\n    BOOLEAN,\n    ENUM,\n    DATETIME,\n    INTEGER,\n    NUMBER,\n    OBJECT,\n    TEXT,\n};\n\nconst Types = {\n    ...types,\n    ..._.mapKeys(types, (v, k) => v.name),\n\n    Builtin: new Set(_.map(types, (t) => t.name)),\n\n    FunctionalQualifiers: Object.freeze([\n        'optional',\n        'default',\n        'auto',\n        'readOnly',\n        'writeOnce',\n        'forceUpdate',\n        'freezeAfterNonDefault',\n    ]),\n\n    sanitize: function (value, info, ...others) {\n        pre: {\n            Types.Builtin.has(info.type),\n                `Unknown primitive type: \"${info.type}\".\"`;\n        }\n\n        let typeObjerct = Types[info.type];\n        return typeObjerct.sanitize(value, info, ...others);\n    },\n};\n\nmodule.exports = Types;\n"],"file":"index.js"}