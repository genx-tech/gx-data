"use strict";

require("source-map-support/register");

const Convertors = require('../Convertors');

const randomstring = require("randomstring");

const {
  _
} = require('rk-utils');

const {
  ValidationError
} = require('../utils/Errors');

const any = require('./any');

module.exports = {
  name: 'text',
  alias: ['string', 'char'],
  sanitize: (value, info, i18n) => {
    if (value == null) return null;
    value = Convertors.toText(value, info && info.noTrim);

    if (value === '' && info.emptyAsNull) {
      return null;
    }

    if (!_.isNil(value)) {
      if (info && info.fixedLength && value.length !== info.fixedLength) {
        throw new ValidationError(`The length of the ${info.name || 'text'} value is not correct (expected: ${info.fixedLength}, actual: ${value.length}).`, {
          value,
          feild: info
        });
      }

      if (info && info.maxLength && value.length > info.maxLength) {
        throw new ValidationError(`The length of the ${info.name || 'text'} value exceeds max limit (maximum: ${info.maxLength}, actual: ${value.length}).`, {
          value,
          feild: info
        });
      }
    }

    return value;
  },
  defaultValue: '',
  generate: (info, i18n) => {
    let randOpt = {};

    if (info.fixedLength) {
      randOpt.length = info.fixedLength;
    }

    if (info.maxLength) {
      randOpt.length = info.maxLength > 32 ? 32 : info.maxLength;
    }

    if (info.allowedChars) {
      randOpt.charset = info.allowedChars;
    }

    if (info.caps) {
      randOpt.capitalization = info.caps;
    }

    return randomstring.generate(randOpt);
  },
  serialize: value => value,
  qualifiers: any.qualifiers.concat(['fixedLength', 'maxLength', 'encoding', 'allowedChars', 'caps', 'noTrim', 'emptyAsNull'])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy90ZXh0LmpzIl0sIm5hbWVzIjpbIkNvbnZlcnRvcnMiLCJyZXF1aXJlIiwicmFuZG9tc3RyaW5nIiwiXyIsIlZhbGlkYXRpb25FcnJvciIsImFueSIsIm1vZHVsZSIsImV4cG9ydHMiLCJuYW1lIiwiYWxpYXMiLCJzYW5pdGl6ZSIsInZhbHVlIiwiaW5mbyIsImkxOG4iLCJ0b1RleHQiLCJub1RyaW0iLCJlbXB0eUFzTnVsbCIsImlzTmlsIiwiZml4ZWRMZW5ndGgiLCJsZW5ndGgiLCJmZWlsZCIsIm1heExlbmd0aCIsImRlZmF1bHRWYWx1ZSIsImdlbmVyYXRlIiwicmFuZE9wdCIsImFsbG93ZWRDaGFycyIsImNoYXJzZXQiLCJjYXBzIiwiY2FwaXRhbGl6YXRpb24iLCJzZXJpYWxpemUiLCJxdWFsaWZpZXJzIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLFVBQVUsR0FBR0MsT0FBTyxDQUFDLGVBQUQsQ0FBMUI7O0FBQ0EsTUFBTUMsWUFBWSxHQUFHRCxPQUFPLENBQUMsY0FBRCxDQUE1Qjs7QUFDQSxNQUFNO0FBQUVFLEVBQUFBO0FBQUYsSUFBUUYsT0FBTyxDQUFDLFVBQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFFRyxFQUFBQTtBQUFGLElBQXNCSCxPQUFPLENBQUMsaUJBQUQsQ0FBbkM7O0FBQ0EsTUFBTUksR0FBRyxHQUFHSixPQUFPLENBQUMsT0FBRCxDQUFuQjs7QUFFQUssTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2JDLEVBQUFBLElBQUksRUFBRSxNQURPO0FBR2JDLEVBQUFBLEtBQUssRUFBRSxDQUFFLFFBQUYsRUFBWSxNQUFaLENBSE07QUFLYkMsRUFBQUEsUUFBUSxFQUFFLENBQUNDLEtBQUQsRUFBUUMsSUFBUixFQUFjQyxJQUFkLEtBQXVCO0FBQzdCLFFBQUlGLEtBQUssSUFBSSxJQUFiLEVBQW1CLE9BQU8sSUFBUDtBQUVuQkEsSUFBQUEsS0FBSyxHQUFHWCxVQUFVLENBQUNjLE1BQVgsQ0FBa0JILEtBQWxCLEVBQXlCQyxJQUFJLElBQUlBLElBQUksQ0FBQ0csTUFBdEMsQ0FBUjs7QUFFQSxRQUFJSixLQUFLLEtBQUssRUFBVixJQUFnQkMsSUFBSSxDQUFDSSxXQUF6QixFQUFzQztBQUNsQyxhQUFPLElBQVA7QUFDSDs7QUFFRCxRQUFJLENBQUNiLENBQUMsQ0FBQ2MsS0FBRixDQUFRTixLQUFSLENBQUwsRUFBcUI7QUFDakIsVUFBSUMsSUFBSSxJQUFJQSxJQUFJLENBQUNNLFdBQWIsSUFBNEJQLEtBQUssQ0FBQ1EsTUFBTixLQUFpQlAsSUFBSSxDQUFDTSxXQUF0RCxFQUFtRTtBQUMvRCxjQUFNLElBQUlkLGVBQUosQ0FBcUIscUJBQW9CUSxJQUFJLENBQUNKLElBQUwsSUFBYSxNQUFPLG9DQUFtQ0ksSUFBSSxDQUFDTSxXQUFZLGFBQVlQLEtBQUssQ0FBQ1EsTUFBTyxJQUExSSxFQUErSTtBQUFFUixVQUFBQSxLQUFGO0FBQVNTLFVBQUFBLEtBQUssRUFBRVI7QUFBaEIsU0FBL0ksQ0FBTjtBQUNIOztBQUVELFVBQUlBLElBQUksSUFBSUEsSUFBSSxDQUFDUyxTQUFiLElBQTBCVixLQUFLLENBQUNRLE1BQU4sR0FBZVAsSUFBSSxDQUFDUyxTQUFsRCxFQUE2RDtBQUN6RCxjQUFNLElBQUlqQixlQUFKLENBQXFCLHFCQUFvQlEsSUFBSSxDQUFDSixJQUFMLElBQWEsTUFBTyxzQ0FBcUNJLElBQUksQ0FBQ1MsU0FBVSxhQUFZVixLQUFLLENBQUNRLE1BQU8sSUFBMUksRUFBK0k7QUFBRVIsVUFBQUEsS0FBRjtBQUFTUyxVQUFBQSxLQUFLLEVBQUVSO0FBQWhCLFNBQS9JLENBQU47QUFDSDtBQUNKOztBQUVELFdBQU9ELEtBQVA7QUFDSCxHQXpCWTtBQTJCYlcsRUFBQUEsWUFBWSxFQUFFLEVBM0JEO0FBNkJiQyxFQUFBQSxRQUFRLEVBQUUsQ0FBQ1gsSUFBRCxFQUFPQyxJQUFQLEtBQWdCO0FBQ3RCLFFBQUlXLE9BQU8sR0FBRyxFQUFkOztBQUVBLFFBQUlaLElBQUksQ0FBQ00sV0FBVCxFQUFzQjtBQUNsQk0sTUFBQUEsT0FBTyxDQUFDTCxNQUFSLEdBQWlCUCxJQUFJLENBQUNNLFdBQXRCO0FBQ0g7O0FBRUQsUUFBSU4sSUFBSSxDQUFDUyxTQUFULEVBQW9CO0FBQ2hCRyxNQUFBQSxPQUFPLENBQUNMLE1BQVIsR0FBaUJQLElBQUksQ0FBQ1MsU0FBTCxHQUFpQixFQUFqQixHQUFzQixFQUF0QixHQUEyQlQsSUFBSSxDQUFDUyxTQUFqRDtBQUNIOztBQUVELFFBQUlULElBQUksQ0FBQ2EsWUFBVCxFQUF1QjtBQUNuQkQsTUFBQUEsT0FBTyxDQUFDRSxPQUFSLEdBQWtCZCxJQUFJLENBQUNhLFlBQXZCO0FBQ0g7O0FBRUQsUUFBSWIsSUFBSSxDQUFDZSxJQUFULEVBQWU7QUFDWEgsTUFBQUEsT0FBTyxDQUFDSSxjQUFSLEdBQXlCaEIsSUFBSSxDQUFDZSxJQUE5QjtBQUNIOztBQUVELFdBQU96QixZQUFZLENBQUNxQixRQUFiLENBQXNCQyxPQUF0QixDQUFQO0FBQ0gsR0FqRFk7QUFtRGJLLEVBQUFBLFNBQVMsRUFBRWxCLEtBQUssSUFBSUEsS0FuRFA7QUFxRGJtQixFQUFBQSxVQUFVLEVBQUV6QixHQUFHLENBQUN5QixVQUFKLENBQWVDLE1BQWYsQ0FBc0IsQ0FDOUIsYUFEOEIsRUFFOUIsV0FGOEIsRUFHOUIsVUFIOEIsRUFJOUIsY0FKOEIsRUFLOUIsTUFMOEIsRUFNOUIsUUFOOEIsRUFPOUIsYUFQOEIsQ0FBdEI7QUFyREMsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgQ29udmVydG9ycyA9IHJlcXVpcmUoJy4uL0NvbnZlcnRvcnMnKTtcbmNvbnN0IHJhbmRvbXN0cmluZyA9IHJlcXVpcmUoXCJyYW5kb21zdHJpbmdcIik7XG5jb25zdCB7IF8gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IFZhbGlkYXRpb25FcnJvciB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvRXJyb3JzJyk7XG5jb25zdCBhbnkgPSByZXF1aXJlKCcuL2FueScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBuYW1lOiAndGV4dCcsXG5cbiAgICBhbGlhczogWyAnc3RyaW5nJywgJ2NoYXInIF0sXG5cbiAgICBzYW5pdGl6ZTogKHZhbHVlLCBpbmZvLCBpMThuKSA9PiB7ICAgIFxuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgICAgIFxuICAgICAgICB2YWx1ZSA9IENvbnZlcnRvcnMudG9UZXh0KHZhbHVlLCBpbmZvICYmIGluZm8ubm9UcmltKTtcblxuICAgICAgICBpZiAodmFsdWUgPT09ICcnICYmIGluZm8uZW1wdHlBc051bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFfLmlzTmlsKHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKGluZm8gJiYgaW5mby5maXhlZExlbmd0aCAmJiB2YWx1ZS5sZW5ndGggIT09IGluZm8uZml4ZWRMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKGBUaGUgbGVuZ3RoIG9mIHRoZSAke2luZm8ubmFtZSB8fCAndGV4dCd9IHZhbHVlIGlzIG5vdCBjb3JyZWN0IChleHBlY3RlZDogJHtpbmZvLmZpeGVkTGVuZ3RofSwgYWN0dWFsOiAke3ZhbHVlLmxlbmd0aH0pLmAsIHsgdmFsdWUsIGZlaWxkOiBpbmZvIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpbmZvICYmIGluZm8ubWF4TGVuZ3RoICYmIHZhbHVlLmxlbmd0aCA+IGluZm8ubWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihgVGhlIGxlbmd0aCBvZiB0aGUgJHtpbmZvLm5hbWUgfHwgJ3RleHQnfSB2YWx1ZSBleGNlZWRzIG1heCBsaW1pdCAobWF4aW11bTogJHtpbmZvLm1heExlbmd0aH0sIGFjdHVhbDogJHt2YWx1ZS5sZW5ndGh9KS5gLCB7IHZhbHVlLCBmZWlsZDogaW5mbyB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG5cbiAgICBkZWZhdWx0VmFsdWU6ICcnLFxuXG4gICAgZ2VuZXJhdGU6IChpbmZvLCBpMThuKSA9PiB7XG4gICAgICAgIGxldCByYW5kT3B0ID0ge307XG5cbiAgICAgICAgaWYgKGluZm8uZml4ZWRMZW5ndGgpIHtcbiAgICAgICAgICAgIHJhbmRPcHQubGVuZ3RoID0gaW5mby5maXhlZExlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmZvLm1heExlbmd0aCkge1xuICAgICAgICAgICAgcmFuZE9wdC5sZW5ndGggPSBpbmZvLm1heExlbmd0aCA+IDMyID8gMzIgOiBpbmZvLm1heExlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmZvLmFsbG93ZWRDaGFycykge1xuICAgICAgICAgICAgcmFuZE9wdC5jaGFyc2V0ID0gaW5mby5hbGxvd2VkQ2hhcnM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5mby5jYXBzKSB7XG4gICAgICAgICAgICByYW5kT3B0LmNhcGl0YWxpemF0aW9uID0gaW5mby5jYXBzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJhbmRvbXN0cmluZy5nZW5lcmF0ZShyYW5kT3B0KTtcbiAgICB9LCAgXG5cbiAgICBzZXJpYWxpemU6IHZhbHVlID0+IHZhbHVlLFxuXG4gICAgcXVhbGlmaWVyczogYW55LnF1YWxpZmllcnMuY29uY2F0KFtcbiAgICAgICAgJ2ZpeGVkTGVuZ3RoJyxcbiAgICAgICAgJ21heExlbmd0aCcsXG4gICAgICAgICdlbmNvZGluZycsXG4gICAgICAgICdhbGxvd2VkQ2hhcnMnLFxuICAgICAgICAnY2FwcycsXG4gICAgICAgICdub1RyaW0nLFxuICAgICAgICAnZW1wdHlBc051bGwnXG4gICAgXSlcbn07Il19