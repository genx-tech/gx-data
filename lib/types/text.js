"use strict";

require("source-map-support/register");

const Convertors = require('../Convertors');

const randomstring = require("randomstring");

const {
  _
} = require('rk-utils');

const {
  ValidationError
} = require('../utils/Errors');

const any = require('./any');

module.exports = {
  name: 'text',
  alias: ['string', 'char'],
  sanitize: (value, info, i18n) => {
    value = Convertors.toText(value, info.noTrim);

    if (!_.isNil(value)) {
      if (info.fixedLength && value.length !== info.fixedLength) {
        throw new ValidationError(`The length of the ${info.name || 'text'} value is not correct (expected: ${info.fixedLength}, actual: ${value.length}).`, {
          value,
          feild: info
        });
      }

      if (info.maxLength && value.length > info.maxLength) {
        throw new ValidationError(`The length of the ${info.name || 'text'} value exceeds max limit (maximum: ${info.maxLength}, actual: ${value.length}).`, {
          value,
          feild: info
        });
      }
    }

    return value;
  },
  defaultValue: '',
  generate: (info, i18n) => {
    let randOpt = {};

    if (info.fixedLength) {
      randOpt.length = info.fixedLength;
    }

    if (info.maxLength) {
      randOpt.length = info.maxLength > 32 ? 32 : info.maxLength;
    }

    if (info.allowedChars) {
      randOpt.charset = info.allowedChars;
    }

    if (info.caps) {
      randOpt.capitalization = info.caps;
    }

    return randomstring.generate(randOpt);
  },
  serialize: value => value,
  qualifiers: any.qualifiers.concat(['fixedLength', 'maxLength', 'encoding', 'allowedChars', 'caps', 'noTrim'])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy90ZXh0LmpzIl0sIm5hbWVzIjpbIkNvbnZlcnRvcnMiLCJyZXF1aXJlIiwicmFuZG9tc3RyaW5nIiwiXyIsIlZhbGlkYXRpb25FcnJvciIsImFueSIsIm1vZHVsZSIsImV4cG9ydHMiLCJuYW1lIiwiYWxpYXMiLCJzYW5pdGl6ZSIsInZhbHVlIiwiaW5mbyIsImkxOG4iLCJ0b1RleHQiLCJub1RyaW0iLCJpc05pbCIsImZpeGVkTGVuZ3RoIiwibGVuZ3RoIiwiZmVpbGQiLCJtYXhMZW5ndGgiLCJkZWZhdWx0VmFsdWUiLCJnZW5lcmF0ZSIsInJhbmRPcHQiLCJhbGxvd2VkQ2hhcnMiLCJjaGFyc2V0IiwiY2FwcyIsImNhcGl0YWxpemF0aW9uIiwic2VyaWFsaXplIiwicXVhbGlmaWVycyIsImNvbmNhdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxVQUFVLEdBQUdDLE9BQU8sQ0FBQyxlQUFELENBQTFCOztBQUNBLE1BQU1DLFlBQVksR0FBR0QsT0FBTyxDQUFDLGNBQUQsQ0FBNUI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQTtBQUFGLElBQVFGLE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUNBLE1BQU07QUFBRUcsRUFBQUE7QUFBRixJQUFzQkgsT0FBTyxDQUFDLGlCQUFELENBQW5DOztBQUNBLE1BQU1JLEdBQUcsR0FBR0osT0FBTyxDQUFDLE9BQUQsQ0FBbkI7O0FBRUFLLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNiQyxFQUFBQSxJQUFJLEVBQUUsTUFETztBQUdiQyxFQUFBQSxLQUFLLEVBQUUsQ0FBRSxRQUFGLEVBQVksTUFBWixDQUhNO0FBS2JDLEVBQUFBLFFBQVEsRUFBRSxDQUFDQyxLQUFELEVBQVFDLElBQVIsRUFBY0MsSUFBZCxLQUF1QjtBQUM3QkYsSUFBQUEsS0FBSyxHQUFHWCxVQUFVLENBQUNjLE1BQVgsQ0FBa0JILEtBQWxCLEVBQXlCQyxJQUFJLENBQUNHLE1BQTlCLENBQVI7O0FBRUEsUUFBSSxDQUFDWixDQUFDLENBQUNhLEtBQUYsQ0FBUUwsS0FBUixDQUFMLEVBQXFCO0FBQ2pCLFVBQUlDLElBQUksQ0FBQ0ssV0FBTCxJQUFvQk4sS0FBSyxDQUFDTyxNQUFOLEtBQWlCTixJQUFJLENBQUNLLFdBQTlDLEVBQTJEO0FBQ3ZELGNBQU0sSUFBSWIsZUFBSixDQUFxQixxQkFBb0JRLElBQUksQ0FBQ0osSUFBTCxJQUFhLE1BQU8sb0NBQW1DSSxJQUFJLENBQUNLLFdBQVksYUFBWU4sS0FBSyxDQUFDTyxNQUFPLElBQTFJLEVBQStJO0FBQUVQLFVBQUFBLEtBQUY7QUFBU1EsVUFBQUEsS0FBSyxFQUFFUDtBQUFoQixTQUEvSSxDQUFOO0FBQ0g7O0FBRUQsVUFBSUEsSUFBSSxDQUFDUSxTQUFMLElBQWtCVCxLQUFLLENBQUNPLE1BQU4sR0FBZU4sSUFBSSxDQUFDUSxTQUExQyxFQUFxRDtBQUNqRCxjQUFNLElBQUloQixlQUFKLENBQXFCLHFCQUFvQlEsSUFBSSxDQUFDSixJQUFMLElBQWEsTUFBTyxzQ0FBcUNJLElBQUksQ0FBQ1EsU0FBVSxhQUFZVCxLQUFLLENBQUNPLE1BQU8sSUFBMUksRUFBK0k7QUFBRVAsVUFBQUEsS0FBRjtBQUFTUSxVQUFBQSxLQUFLLEVBQUVQO0FBQWhCLFNBQS9JLENBQU47QUFDSDtBQUNKOztBQUVELFdBQU9ELEtBQVA7QUFDSCxHQW5CWTtBQXFCYlUsRUFBQUEsWUFBWSxFQUFFLEVBckJEO0FBdUJiQyxFQUFBQSxRQUFRLEVBQUUsQ0FBQ1YsSUFBRCxFQUFPQyxJQUFQLEtBQWdCO0FBQ3RCLFFBQUlVLE9BQU8sR0FBRyxFQUFkOztBQUVBLFFBQUlYLElBQUksQ0FBQ0ssV0FBVCxFQUFzQjtBQUNsQk0sTUFBQUEsT0FBTyxDQUFDTCxNQUFSLEdBQWlCTixJQUFJLENBQUNLLFdBQXRCO0FBQ0g7O0FBRUQsUUFBSUwsSUFBSSxDQUFDUSxTQUFULEVBQW9CO0FBQ2hCRyxNQUFBQSxPQUFPLENBQUNMLE1BQVIsR0FBaUJOLElBQUksQ0FBQ1EsU0FBTCxHQUFpQixFQUFqQixHQUFzQixFQUF0QixHQUEyQlIsSUFBSSxDQUFDUSxTQUFqRDtBQUNIOztBQUVELFFBQUlSLElBQUksQ0FBQ1ksWUFBVCxFQUF1QjtBQUNuQkQsTUFBQUEsT0FBTyxDQUFDRSxPQUFSLEdBQWtCYixJQUFJLENBQUNZLFlBQXZCO0FBQ0g7O0FBRUQsUUFBSVosSUFBSSxDQUFDYyxJQUFULEVBQWU7QUFDWEgsTUFBQUEsT0FBTyxDQUFDSSxjQUFSLEdBQXlCZixJQUFJLENBQUNjLElBQTlCO0FBQ0g7O0FBRUQsV0FBT3hCLFlBQVksQ0FBQ29CLFFBQWIsQ0FBc0JDLE9BQXRCLENBQVA7QUFDSCxHQTNDWTtBQTZDYkssRUFBQUEsU0FBUyxFQUFFakIsS0FBSyxJQUFJQSxLQTdDUDtBQStDYmtCLEVBQUFBLFVBQVUsRUFBRXhCLEdBQUcsQ0FBQ3dCLFVBQUosQ0FBZUMsTUFBZixDQUFzQixDQUM5QixhQUQ4QixFQUU5QixXQUY4QixFQUc5QixVQUg4QixFQUk5QixjQUo4QixFQUs5QixNQUw4QixFQU05QixRQU44QixDQUF0QjtBQS9DQyxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBDb252ZXJ0b3JzID0gcmVxdWlyZSgnLi4vQ29udmVydG9ycycpO1xuY29uc3QgcmFuZG9tc3RyaW5nID0gcmVxdWlyZShcInJhbmRvbXN0cmluZ1wiKTtcbmNvbnN0IHsgXyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHsgVmFsaWRhdGlvbkVycm9yIH0gPSByZXF1aXJlKCcuLi91dGlscy9FcnJvcnMnKTtcbmNvbnN0IGFueSA9IHJlcXVpcmUoJy4vYW55Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIG5hbWU6ICd0ZXh0JyxcblxuICAgIGFsaWFzOiBbICdzdHJpbmcnLCAnY2hhcicgXSxcblxuICAgIHNhbml0aXplOiAodmFsdWUsIGluZm8sIGkxOG4pID0+IHsgICAgICAgIFxuICAgICAgICB2YWx1ZSA9IENvbnZlcnRvcnMudG9UZXh0KHZhbHVlLCBpbmZvLm5vVHJpbSk7XG5cbiAgICAgICAgaWYgKCFfLmlzTmlsKHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKGluZm8uZml4ZWRMZW5ndGggJiYgdmFsdWUubGVuZ3RoICE9PSBpbmZvLmZpeGVkTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihgVGhlIGxlbmd0aCBvZiB0aGUgJHtpbmZvLm5hbWUgfHwgJ3RleHQnfSB2YWx1ZSBpcyBub3QgY29ycmVjdCAoZXhwZWN0ZWQ6ICR7aW5mby5maXhlZExlbmd0aH0sIGFjdHVhbDogJHt2YWx1ZS5sZW5ndGh9KS5gLCB7IHZhbHVlLCBmZWlsZDogaW5mbyB9KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaW5mby5tYXhMZW5ndGggJiYgdmFsdWUubGVuZ3RoID4gaW5mby5tYXhMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKGBUaGUgbGVuZ3RoIG9mIHRoZSAke2luZm8ubmFtZSB8fCAndGV4dCd9IHZhbHVlIGV4Y2VlZHMgbWF4IGxpbWl0IChtYXhpbXVtOiAke2luZm8ubWF4TGVuZ3RofSwgYWN0dWFsOiAke3ZhbHVlLmxlbmd0aH0pLmAsIHsgdmFsdWUsIGZlaWxkOiBpbmZvIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcblxuICAgIGRlZmF1bHRWYWx1ZTogJycsXG5cbiAgICBnZW5lcmF0ZTogKGluZm8sIGkxOG4pID0+IHtcbiAgICAgICAgbGV0IHJhbmRPcHQgPSB7fTtcblxuICAgICAgICBpZiAoaW5mby5maXhlZExlbmd0aCkge1xuICAgICAgICAgICAgcmFuZE9wdC5sZW5ndGggPSBpbmZvLmZpeGVkTGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZm8ubWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICByYW5kT3B0Lmxlbmd0aCA9IGluZm8ubWF4TGVuZ3RoID4gMzIgPyAzMiA6IGluZm8ubWF4TGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZm8uYWxsb3dlZENoYXJzKSB7XG4gICAgICAgICAgICByYW5kT3B0LmNoYXJzZXQgPSBpbmZvLmFsbG93ZWRDaGFycztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmZvLmNhcHMpIHtcbiAgICAgICAgICAgIHJhbmRPcHQuY2FwaXRhbGl6YXRpb24gPSBpbmZvLmNhcHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmFuZG9tc3RyaW5nLmdlbmVyYXRlKHJhbmRPcHQpO1xuICAgIH0sICBcblxuICAgIHNlcmlhbGl6ZTogdmFsdWUgPT4gdmFsdWUsXG5cbiAgICBxdWFsaWZpZXJzOiBhbnkucXVhbGlmaWVycy5jb25jYXQoW1xuICAgICAgICAnZml4ZWRMZW5ndGgnLFxuICAgICAgICAnbWF4TGVuZ3RoJyxcbiAgICAgICAgJ2VuY29kaW5nJyxcbiAgICAgICAgJ2FsbG93ZWRDaGFycycsXG4gICAgICAgICdjYXBzJyxcbiAgICAgICAgJ25vVHJpbSdcbiAgICBdKVxufTsiXX0=