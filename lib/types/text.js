"use strict";

require("source-map-support/register");

const Convertors = require('../Convertors');

const randomstring = require("randomstring");

const {
  _
} = require('@genx/july');

const {
  ValidationError
} = require('../utils/Errors');

const any = require('./any');

module.exports = {
  name: 'text',
  alias: ['string', 'char'],
  sanitize: (value, info, i18n) => {
    if (value == null) return null;

    if (!info || !info.skipTypeCast) {
      value = Convertors.toText(value, info && info.noTrim);
    }

    if (value === '' && info.emptyAsNull) {
      return null;
    }

    if (!_.isNil(value)) {
      if (info && info.fixedLength && value.length !== info.fixedLength) {
        throw new ValidationError(`The length of the ${info.name || 'text'} value is not correct (expected: ${info.fixedLength}, actual: ${value.length}).`, {
          value,
          feild: info
        });
      }

      if (info && info.maxLength && value.length > info.maxLength) {
        throw new ValidationError(`The length of the ${info.name || 'text'} value exceeds max limit (maximum: ${info.maxLength}, actual: ${value.length}).`, {
          value,
          feild: info
        });
      }

      if (info && info.minLength && value.length < info.minLength) {
        throw new ValidationError(`The length of the ${info.name || 'text'} value does not reach min requirement (minimum: ${info.minLength}, actual: ${value.length}).`, {
          value,
          feild: info
        });
      }
    }

    return value;
  },
  defaultValue: '',
  generate: (info, i18n) => {
    let randOpt = {};

    if (info.fixedLength) {
      randOpt.length = info.fixedLength;
    }

    if (info.maxLength) {
      randOpt.length = info.maxLength > 32 ? 32 : info.maxLength;
    }

    if (info.allowedChars) {
      randOpt.charset = info.allowedChars;
    }

    if (info.caps) {
      randOpt.capitalization = info.caps;
    }

    return randomstring.generate(randOpt);
  },
  serialize: value => value,
  qualifiers: any.qualifiers.concat(['fixedLength', 'maxLength', 'encoding', 'allowedChars', 'caps', 'noTrim', 'emptyAsNull'])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy90ZXh0LmpzIl0sIm5hbWVzIjpbIkNvbnZlcnRvcnMiLCJyZXF1aXJlIiwicmFuZG9tc3RyaW5nIiwiXyIsIlZhbGlkYXRpb25FcnJvciIsImFueSIsIm1vZHVsZSIsImV4cG9ydHMiLCJuYW1lIiwiYWxpYXMiLCJzYW5pdGl6ZSIsInZhbHVlIiwiaW5mbyIsImkxOG4iLCJza2lwVHlwZUNhc3QiLCJ0b1RleHQiLCJub1RyaW0iLCJlbXB0eUFzTnVsbCIsImlzTmlsIiwiZml4ZWRMZW5ndGgiLCJsZW5ndGgiLCJmZWlsZCIsIm1heExlbmd0aCIsIm1pbkxlbmd0aCIsImRlZmF1bHRWYWx1ZSIsImdlbmVyYXRlIiwicmFuZE9wdCIsImFsbG93ZWRDaGFycyIsImNoYXJzZXQiLCJjYXBzIiwiY2FwaXRhbGl6YXRpb24iLCJzZXJpYWxpemUiLCJxdWFsaWZpZXJzIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLFVBQVUsR0FBR0MsT0FBTyxDQUFDLGVBQUQsQ0FBMUI7O0FBQ0EsTUFBTUMsWUFBWSxHQUFHRCxPQUFPLENBQUMsY0FBRCxDQUE1Qjs7QUFDQSxNQUFNO0FBQUVFLEVBQUFBO0FBQUYsSUFBUUYsT0FBTyxDQUFDLFlBQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFFRyxFQUFBQTtBQUFGLElBQXNCSCxPQUFPLENBQUMsaUJBQUQsQ0FBbkM7O0FBQ0EsTUFBTUksR0FBRyxHQUFHSixPQUFPLENBQUMsT0FBRCxDQUFuQjs7QUFFQUssTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2JDLEVBQUFBLElBQUksRUFBRSxNQURPO0FBR2JDLEVBQUFBLEtBQUssRUFBRSxDQUFFLFFBQUYsRUFBWSxNQUFaLENBSE07QUFLYkMsRUFBQUEsUUFBUSxFQUFFLENBQUNDLEtBQUQsRUFBUUMsSUFBUixFQUFjQyxJQUFkLEtBQXVCO0FBQzdCLFFBQUlGLEtBQUssSUFBSSxJQUFiLEVBQW1CLE9BQU8sSUFBUDs7QUFFbkIs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QUFKLENBQWVDLE1BQWYsQ0FBc0IsQ0FDOUIsYUFEOEIsRUFFOUIsV0FGOEIsRUFHOUIsVUFIOEIsRUFJOUIsY0FKOEIsRUFLOUIsTUFMOEIsRUFNOUIsUUFOOEIsRUFPOUIsYUFQOEIsQ0FBdEI7QUEzREMsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgQ29udmVydG9ycyA9IHJlcXVpcmUoJy4uL0NvbnZlcnRvcnMnKTtcbmNvbnN0IHJhbmRvbXN0cmluZyA9IHJlcXVpcmUoXCJyYW5kb21zdHJpbmdcIik7XG5jb25zdCB7IF8gfSA9IHJlcXVpcmUoJ0BnZW54L2p1bHknKTtcbmNvbnN0IHsgVmFsaWRhdGlvbkVycm9yIH0gPSByZXF1aXJlKCcuLi91dGlscy9FcnJvcnMnKTtcbmNvbnN0IGFueSA9IHJlcXVpcmUoJy4vYW55Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIG5hbWU6ICd0ZXh0JyxcblxuICAgIGFsaWFzOiBbICdzdHJpbmcnLCAnY2hhcicgXSxcblxuICAgIHNhbml0aXplOiAodmFsdWUsIGluZm8sIGkxOG4pID0+IHsgICAgXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICBcbiAgICAgICAgaWYgKCFpbmZvIHx8ICFpbmZvLnNraXBUeXBlQ2FzdCkge1xuICAgICAgICAgICAgdmFsdWUgPSBDb252ZXJ0b3JzLnRvVGV4dCh2YWx1ZSwgaW5mbyAmJiBpbmZvLm5vVHJpbSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUgPT09ICcnICYmIGluZm8uZW1wdHlBc051bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFfLmlzTmlsKHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKGluZm8gJiYgaW5mby5maXhlZExlbmd0aCAmJiB2YWx1ZS5sZW5ndGggIT09IGluZm8uZml4ZWRMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKGBUaGUgbGVuZ3RoIG9mIHRoZSAke2luZm8ubmFtZSB8fCAndGV4dCd9IHZhbHVlIGlzIG5vdCBjb3JyZWN0IChleHBlY3RlZDogJHtpbmZvLmZpeGVkTGVuZ3RofSwgYWN0dWFsOiAke3ZhbHVlLmxlbmd0aH0pLmAsIHsgdmFsdWUsIGZlaWxkOiBpbmZvIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpbmZvICYmIGluZm8ubWF4TGVuZ3RoICYmIHZhbHVlLmxlbmd0aCA+IGluZm8ubWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihgVGhlIGxlbmd0aCBvZiB0aGUgJHtpbmZvLm5hbWUgfHwgJ3RleHQnfSB2YWx1ZSBleGNlZWRzIG1heCBsaW1pdCAobWF4aW11bTogJHtpbmZvLm1heExlbmd0aH0sIGFjdHVhbDogJHt2YWx1ZS5sZW5ndGh9KS5gLCB7IHZhbHVlLCBmZWlsZDogaW5mbyB9KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaW5mbyAmJiBpbmZvLm1pbkxlbmd0aCAmJiB2YWx1ZS5sZW5ndGggPCBpbmZvLm1pbkxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoYFRoZSBsZW5ndGggb2YgdGhlICR7aW5mby5uYW1lIHx8ICd0ZXh0J30gdmFsdWUgZG9lcyBub3QgcmVhY2ggbWluIHJlcXVpcmVtZW50IChtaW5pbXVtOiAke2luZm8ubWluTGVuZ3RofSwgYWN0dWFsOiAke3ZhbHVlLmxlbmd0aH0pLmAsIHsgdmFsdWUsIGZlaWxkOiBpbmZvIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcblxuICAgIGRlZmF1bHRWYWx1ZTogJycsXG5cbiAgICBnZW5lcmF0ZTogKGluZm8sIGkxOG4pID0+IHtcbiAgICAgICAgbGV0IHJhbmRPcHQgPSB7fTtcblxuICAgICAgICBpZiAoaW5mby5maXhlZExlbmd0aCkge1xuICAgICAgICAgICAgcmFuZE9wdC5sZW5ndGggPSBpbmZvLmZpeGVkTGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZm8ubWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICByYW5kT3B0Lmxlbmd0aCA9IGluZm8ubWF4TGVuZ3RoID4gMzIgPyAzMiA6IGluZm8ubWF4TGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZm8uYWxsb3dlZENoYXJzKSB7XG4gICAgICAgICAgICByYW5kT3B0LmNoYXJzZXQgPSBpbmZvLmFsbG93ZWRDaGFycztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmZvLmNhcHMpIHtcbiAgICAgICAgICAgIHJhbmRPcHQuY2FwaXRhbGl6YXRpb24gPSBpbmZvLmNhcHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmFuZG9tc3RyaW5nLmdlbmVyYXRlKHJhbmRPcHQpO1xuICAgIH0sICBcblxuICAgIHNlcmlhbGl6ZTogdmFsdWUgPT4gdmFsdWUsXG5cbiAgICBxdWFsaWZpZXJzOiBhbnkucXVhbGlmaWVycy5jb25jYXQoW1xuICAgICAgICAnZml4ZWRMZW5ndGgnLFxuICAgICAgICAnbWF4TGVuZ3RoJyxcbiAgICAgICAgJ2VuY29kaW5nJyxcbiAgICAgICAgJ2FsbG93ZWRDaGFycycsXG4gICAgICAgICdjYXBzJyxcbiAgICAgICAgJ25vVHJpbScsXG4gICAgICAgICdlbXB0eUFzTnVsbCdcbiAgICBdKVxufTsiXX0=