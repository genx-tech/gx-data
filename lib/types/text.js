"use strict";

require("source-map-support/register");

const randomstring = require("randomstring");

const any = require('./any');

module.exports = {
  name: 'text',
  alias: ['string', 'char'],
  sanitize: (value, info, i18n) => value && (typeof value !== 'string' ? value.toString() : value).trim(),
  defaultValue: '',
  generate: (info, i18n) => {
    let randOpt = {};

    if (info.fixedLength) {
      randOpt.length = info.fixedLength;
    }

    if (info.maxLength) {
      randOpt.length = info.maxLength > 32 ? 32 : info.maxLength;
    }

    if (info.allowedChars) {
      randOpt.charset = info.allowedChars;
    }

    return randomstring.generate(randOpt);
  },
  serialize: value => value,
  qualifiers: any.qualifiers.concat(['fixedLength', 'maxLength', 'encoding', 'allowedChars'])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy90ZXh0LmpzIl0sIm5hbWVzIjpbInJhbmRvbXN0cmluZyIsInJlcXVpcmUiLCJhbnkiLCJtb2R1bGUiLCJleHBvcnRzIiwibmFtZSIsImFsaWFzIiwic2FuaXRpemUiLCJ2YWx1ZSIsImluZm8iLCJpMThuIiwidG9TdHJpbmciLCJ0cmltIiwiZGVmYXVsdFZhbHVlIiwiZ2VuZXJhdGUiLCJyYW5kT3B0IiwiZml4ZWRMZW5ndGgiLCJsZW5ndGgiLCJtYXhMZW5ndGgiLCJhbGxvd2VkQ2hhcnMiLCJjaGFyc2V0Iiwic2VyaWFsaXplIiwicXVhbGlmaWVycyIsImNvbmNhdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxZQUFZLEdBQUdDLE9BQU8sQ0FBQyxjQUFELENBQTVCOztBQUNBLE1BQU1DLEdBQUcsR0FBR0QsT0FBTyxDQUFDLE9BQUQsQ0FBbkI7O0FBRUFFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNiQyxFQUFBQSxJQUFJLEVBQUUsTUFETztBQUdiQyxFQUFBQSxLQUFLLEVBQUUsQ0FBRSxRQUFGLEVBQVksTUFBWixDQUhNO0FBS2JDLEVBQUFBLFFBQVEsRUFBRSxDQUFDQyxLQUFELEVBQVFDLElBQVIsRUFBY0MsSUFBZCxLQUF1QkYsS0FBSyxJQUFJLENBQUMsT0FBT0EsS0FBUCxLQUFpQixRQUFqQixHQUE0QkEsS0FBSyxDQUFDRyxRQUFOLEVBQTVCLEdBQStDSCxLQUFoRCxFQUF1REksSUFBdkQsRUFMN0I7QUFPYkMsRUFBQUEsWUFBWSxFQUFFLEVBUEQ7QUFTYkMsRUFBQUEsUUFBUSxFQUFFLENBQUNMLElBQUQsRUFBT0MsSUFBUCxLQUFnQjtBQUN0QixRQUFJSyxPQUFPLEdBQUcsRUFBZDs7QUFFQSxRQUFJTixJQUFJLENBQUNPLFdBQVQsRUFBc0I7QUFDbEJELE1BQUFBLE9BQU8sQ0FBQ0UsTUFBUixHQUFpQlIsSUFBSSxDQUFDTyxXQUF0QjtBQUNIOztBQUVELFFBQUlQLElBQUksQ0FBQ1MsU0FBVCxFQUFvQjtBQUNoQkgsTUFBQUEsT0FBTyxDQUFDRSxNQUFSLEdBQWlCUixJQUFJLENBQUNTLFNBQUwsR0FBaUIsRUFBakIsR0FBc0IsRUFBdEIsR0FBMkJULElBQUksQ0FBQ1MsU0FBakQ7QUFDSDs7QUFFRCxRQUFJVCxJQUFJLENBQUNVLFlBQVQsRUFBdUI7QUFDbkJKLE1BQUFBLE9BQU8sQ0FBQ0ssT0FBUixHQUFrQlgsSUFBSSxDQUFDVSxZQUF2QjtBQUNIOztBQUVELFdBQU9uQixZQUFZLENBQUNjLFFBQWIsQ0FBc0JDLE9BQXRCLENBQVA7QUFDSCxHQXpCWTtBQTJCYk0sRUFBQUEsU0FBUyxFQUFFYixLQUFLLElBQUlBLEtBM0JQO0FBNkJiYyxFQUFBQSxVQUFVLEVBQUVwQixHQUFHLENBQUNvQixVQUFKLENBQWVDLE1BQWYsQ0FBc0IsQ0FDOUIsYUFEOEIsRUFFOUIsV0FGOEIsRUFHOUIsVUFIOEIsRUFJOUIsY0FKOEIsQ0FBdEI7QUE3QkMsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgcmFuZG9tc3RyaW5nID0gcmVxdWlyZShcInJhbmRvbXN0cmluZ1wiKTtcbmNvbnN0IGFueSA9IHJlcXVpcmUoJy4vYW55Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIG5hbWU6ICd0ZXh0JyxcblxuICAgIGFsaWFzOiBbICdzdHJpbmcnLCAnY2hhcicgXSxcblxuICAgIHNhbml0aXplOiAodmFsdWUsIGluZm8sIGkxOG4pID0+IHZhbHVlICYmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnID8gdmFsdWUudG9TdHJpbmcoKSA6IHZhbHVlKS50cmltKCksXG5cbiAgICBkZWZhdWx0VmFsdWU6ICcnLFxuXG4gICAgZ2VuZXJhdGU6IChpbmZvLCBpMThuKSA9PiB7XG4gICAgICAgIGxldCByYW5kT3B0ID0ge307XG5cbiAgICAgICAgaWYgKGluZm8uZml4ZWRMZW5ndGgpIHtcbiAgICAgICAgICAgIHJhbmRPcHQubGVuZ3RoID0gaW5mby5maXhlZExlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmZvLm1heExlbmd0aCkge1xuICAgICAgICAgICAgcmFuZE9wdC5sZW5ndGggPSBpbmZvLm1heExlbmd0aCA+IDMyID8gMzIgOiBpbmZvLm1heExlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmZvLmFsbG93ZWRDaGFycykge1xuICAgICAgICAgICAgcmFuZE9wdC5jaGFyc2V0ID0gaW5mby5hbGxvd2VkQ2hhcnM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmFuZG9tc3RyaW5nLmdlbmVyYXRlKHJhbmRPcHQpO1xuICAgIH0sICBcblxuICAgIHNlcmlhbGl6ZTogdmFsdWUgPT4gdmFsdWUsXG5cbiAgICBxdWFsaWZpZXJzOiBhbnkucXVhbGlmaWVycy5jb25jYXQoW1xuICAgICAgICAnZml4ZWRMZW5ndGgnLFxuICAgICAgICAnbWF4TGVuZ3RoJyxcbiAgICAgICAgJ2VuY29kaW5nJyxcbiAgICAgICAgJ2FsbG93ZWRDaGFycydcbiAgICBdKVxufTsiXX0=