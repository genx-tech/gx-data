"use strict";

require("source-map-support/register");

const Convertors = require('../Convertors');

const randomstring = require("randomstring");

const {
  _
} = require('rk-utils');

const {
  ValidationError
} = require('../utils/Errors');

const any = require('./any');

module.exports = {
  name: 'text',
  alias: ['string', 'char'],
  sanitize: (value, info, i18n) => {
    if (value == null) return null;

    if (!info.skipTypeCast) {
      value = Convertors.toText(value, info && info.noTrim);
    }

    if (value === '' && info.emptyAsNull) {
      return null;
    }

    if (!_.isNil(value)) {
      if (info && info.fixedLength && value.length !== info.fixedLength) {
        throw new ValidationError(`The length of the ${info.name || 'text'} value is not correct (expected: ${info.fixedLength}, actual: ${value.length}).`, {
          value,
          feild: info
        });
      }

      if (info && info.maxLength && value.length > info.maxLength) {
        throw new ValidationError(`The length of the ${info.name || 'text'} value exceeds max limit (maximum: ${info.maxLength}, actual: ${value.length}).`, {
          value,
          feild: info
        });
      }

      if (info && info.minLength && value.length < info.minLength) {
        throw new ValidationError(`The length of the ${info.name || 'text'} value does not reach min requirement (minimum: ${info.minLength}, actual: ${value.length}).`, {
          value,
          feild: info
        });
      }
    }

    return value;
  },
  defaultValue: '',
  generate: (info, i18n) => {
    let randOpt = {};

    if (info.fixedLength) {
      randOpt.length = info.fixedLength;
    }

    if (info.maxLength) {
      randOpt.length = info.maxLength > 32 ? 32 : info.maxLength;
    }

    if (info.allowedChars) {
      randOpt.charset = info.allowedChars;
    }

    if (info.caps) {
      randOpt.capitalization = info.caps;
    }

    return randomstring.generate(randOpt);
  },
  serialize: value => value,
  qualifiers: any.qualifiers.concat(['fixedLength', 'maxLength', 'encoding', 'allowedChars', 'caps', 'noTrim', 'emptyAsNull'])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy90ZXh0LmpzIl0sIm5hbWVzIjpbIkNvbnZlcnRvcnMiLCJyZXF1aXJlIiwicmFuZG9tc3RyaW5nIiwiXyIsIlZhbGlkYXRpb25FcnJvciIsImFueSIsIm1vZHVsZSIsImV4cG9ydHMiLCJuYW1lIiwiYWxpYXMiLCJzYW5pdGl6ZSIsInZhbHVlIiwiaW5mbyIsImkxOG4iLCJza2lwVHlwZUNhc3QiLCJ0b1RleHQiLCJub1RyaW0iLCJlbXB0eUFzTnVsbCIsImlzTmlsIiwiZml4ZWRMZW5ndGgiLCJsZW5ndGgiLCJmZWlsZCIsIm1heExlbmd0aCIsIm1pbkxlbmd0aCIsImRlZmF1bHRWYWx1ZSIsImdlbmVyYXRlIiwicmFuZE9wdCIsImFsbG93ZWRDaGFycyIsImNoYXJzZXQiLCJjYXBzIiwiY2FwaXRhbGl6YXRpb24iLCJzZXJpYWxpemUiLCJxdWFsaWZpZXJzIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLFVBQVUsR0FBR0MsT0FBTyxDQUFDLGVBQUQsQ0FBMUI7O0FBQ0EsTUFBTUMsWUFBWSxHQUFHRCxPQUFPLENBQUMsY0FBRCxDQUE1Qjs7QUFDQSxNQUFNO0FBQUVFLEVBQUFBO0FBQUYsSUFBUUYsT0FBTyxDQUFDLFVBQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFFRyxFQUFBQTtBQUFGLElBQXNCSCxPQUFPLENBQUMsaUJBQUQsQ0FBbkM7O0FBQ0EsTUFBTUksR0FBRyxHQUFHSixPQUFPLENBQUMsT0FBRCxDQUFuQjs7QUFFQUssTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2JDLEVBQUFBLElBQUksRUFBRSxNQURPO0FBR2JDLEVBQUFBLEtBQUssRUFBRSxDQUFFLFFBQUYsRUFBWSxNQUFaLENBSE07QUFLYkMsRUFBQUEsUUFBUSxFQUFFLENBQUNDLEtBQUQsRUFBUUMsSUFBUixFQUFjQyxJQUFkLEtBQXVCO0FBQzdCLFFBQUlGLEtBQUssSUFBSSxJQUFiLEVBQW1CLE9BQU8sSUFBUDs7QUFFbkIsUUFBSSxDQUFDQyxJQUFJLENBQUNFLFlBQVYsRUFBd0I7QUFDcEJILE1BQUFBLEtBQUssR0FBR1gsVUFBVSxDQUFDZSxNQUFYLENBQWtCSixLQUFsQixFQUF5QkMsSUFBSSxJQUFJQSxJQUFJLENBQUNJLE1BQXRDLENBQVI7QUFDSDs7QUFFRCxRQUFJTCxLQUFLLEtBQUssRUFBVixJQUFnQkMsSUFBSSxDQUFDSyxXQUF6QixFQUFzQztBQUNsQyxhQUFPLElBQVA7QUFDSDs7QUFFRCxRQUFJLENBQUNkLENBQUMsQ0FBQ2UsS0FBRixDQUFRUCxLQUFSLENBQUwsRUFBcUI7QUFDakIsVUFBSUMsSUFBSSxJQUFJQSxJQUFJLENBQUNPLFdBQWIsSUFBNEJSLEtBQUssQ0FBQ1MsTUFBTixLQUFpQlIsSUFBSSxDQUFDTyxXQUF0RCxFQUFtRTtBQUMvRCxjQUFNLElBQUlmLGVBQUosQ0FBcUIscUJBQW9CUSxJQUFJLENBQUNKLElBQUwsSUFBYSxNQUFPLG9DQUFtQ0ksSUFBSSxDQUFDTyxXQUFZLGFBQVlSLEtBQUssQ0FBQ1MsTUFBTyxJQUExSSxFQUErSTtBQUFFVCxVQUFBQSxLQUFGO0FBQVNVLFVBQUFBLEtBQUssRUFBRVQ7QUFBaEIsU0FBL0ksQ0FBTjtBQUNIOztBQUVELFVBQUlBLElBQUksSUFBSUEsSUFBSSxDQUFDVSxTQUFiLElBQTBCWCxLQUFLLENBQUNTLE1BQU4sR0FBZVIsSUFBSSxDQUFDVSxTQUFsRCxFQUE2RDtBQUN6RCxjQUFNLElBQUlsQixlQUFKLENBQXFCLHFCQUFvQlEsSUFBSSxDQUFDSixJQUFMLElBQWEsTUFBTyxzQ0FBcUNJLElBQUksQ0FBQ1UsU0FBVSxhQUFZWCxLQUFLLENBQUNTLE1BQU8sSUFBMUksRUFBK0k7QUFBRVQsVUFBQUEsS0FBRjtBQUFTVSxVQUFBQSxLQUFLLEVBQUVUO0FBQWhCLFNBQS9JLENBQU47QUFDSDs7QUFFRCxVQUFJQSxJQUFJLElBQUlBLElBQUksQ0FBQ1csU0FBYixJQUEwQlosS0FBSyxDQUFDUyxNQUFOLEdBQWVSLElBQUksQ0FBQ1csU0FBbEQsRUFBNkQ7QUFDekQsY0FBTSxJQUFJbkIsZUFBSixDQUFxQixxQkFBb0JRLElBQUksQ0FBQ0osSUFBTCxJQUFhLE1BQU8sbURBQWtESSxJQUFJLENBQUNXLFNBQVUsYUFBWVosS0FBSyxDQUFDUyxNQUFPLElBQXZKLEVBQTRKO0FBQUVULFVBQUFBLEtBQUY7QUFBU1UsVUFBQUEsS0FBSyxFQUFFVDtBQUFoQixTQUE1SixDQUFOO0FBQ0g7QUFDSjs7QUFFRCxXQUFPRCxLQUFQO0FBQ0gsR0EvQlk7QUFpQ2JhLEVBQUFBLFlBQVksRUFBRSxFQWpDRDtBQW1DYkMsRUFBQUEsUUFBUSxFQUFFLENBQUNiLElBQUQsRUFBT0MsSUFBUCxLQUFnQjtBQUN0QixRQUFJYSxPQUFPLEdBQUcsRUFBZDs7QUFFQSxRQUFJZCxJQUFJLENBQUNPLFdBQVQsRUFBc0I7QUFDbEJPLE1BQUFBLE9BQU8sQ0FBQ04sTUFBUixHQUFpQlIsSUFBSSxDQUFDTyxXQUF0QjtBQUNIOztBQUVELFFBQUlQLElBQUksQ0FBQ1UsU0FBVCxFQUFvQjtBQUNoQkksTUFBQUEsT0FBTyxDQUFDTixNQUFSLEdBQWlCUixJQUFJLENBQUNVLFNBQUwsR0FBaUIsRUFBakIsR0FBc0IsRUFBdEIsR0FBMkJWLElBQUksQ0FBQ1UsU0FBakQ7QUFDSDs7QUFFRCxRQUFJVixJQUFJLENBQUNlLFlBQVQsRUFBdUI7QUFDbkJELE1BQUFBLE9BQU8sQ0FBQ0UsT0FBUixHQUFrQmhCLElBQUksQ0FBQ2UsWUFBdkI7QUFDSDs7QUFFRCxRQUFJZixJQUFJLENBQUNpQixJQUFULEVBQWU7QUFDWEgsTUFBQUEsT0FBTyxDQUFDSSxjQUFSLEdBQXlCbEIsSUFBSSxDQUFDaUIsSUFBOUI7QUFDSDs7QUFFRCxXQUFPM0IsWUFBWSxDQUFDdUIsUUFBYixDQUFzQkMsT0FBdEIsQ0FBUDtBQUNILEdBdkRZO0FBeURiSyxFQUFBQSxTQUFTLEVBQUVwQixLQUFLLElBQUlBLEtBekRQO0FBMkRicUIsRUFBQUEsVUFBVSxFQUFFM0IsR0FBRyxDQUFDMkIsVUFBSixDQUFlQyxNQUFmLENBQXNCLENBQzlCLGFBRDhCLEVBRTlCLFdBRjhCLEVBRzlCLFVBSDhCLEVBSTlCLGNBSjhCLEVBSzlCLE1BTDhCLEVBTTlCLFFBTjhCLEVBTzlCLGFBUDhCLENBQXRCO0FBM0RDLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IENvbnZlcnRvcnMgPSByZXF1aXJlKCcuLi9Db252ZXJ0b3JzJyk7XG5jb25zdCByYW5kb21zdHJpbmcgPSByZXF1aXJlKFwicmFuZG9tc3RyaW5nXCIpO1xuY29uc3QgeyBfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyBWYWxpZGF0aW9uRXJyb3IgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL0Vycm9ycycpO1xuY29uc3QgYW55ID0gcmVxdWlyZSgnLi9hbnknKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbmFtZTogJ3RleHQnLFxuXG4gICAgYWxpYXM6IFsgJ3N0cmluZycsICdjaGFyJyBdLFxuXG4gICAgc2FuaXRpemU6ICh2YWx1ZSwgaW5mbywgaTE4bikgPT4geyAgICBcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBudWxsO1xuICAgIFxuICAgICAgICBpZiAoIWluZm8uc2tpcFR5cGVDYXN0KSB7XG4gICAgICAgICAgICB2YWx1ZSA9IENvbnZlcnRvcnMudG9UZXh0KHZhbHVlLCBpbmZvICYmIGluZm8ubm9UcmltKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJycgJiYgaW5mby5lbXB0eUFzTnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIV8uaXNOaWwodmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAoaW5mbyAmJiBpbmZvLmZpeGVkTGVuZ3RoICYmIHZhbHVlLmxlbmd0aCAhPT0gaW5mby5maXhlZExlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoYFRoZSBsZW5ndGggb2YgdGhlICR7aW5mby5uYW1lIHx8ICd0ZXh0J30gdmFsdWUgaXMgbm90IGNvcnJlY3QgKGV4cGVjdGVkOiAke2luZm8uZml4ZWRMZW5ndGh9LCBhY3R1YWw6ICR7dmFsdWUubGVuZ3RofSkuYCwgeyB2YWx1ZSwgZmVpbGQ6IGluZm8gfSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGluZm8gJiYgaW5mby5tYXhMZW5ndGggJiYgdmFsdWUubGVuZ3RoID4gaW5mby5tYXhMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKGBUaGUgbGVuZ3RoIG9mIHRoZSAke2luZm8ubmFtZSB8fCAndGV4dCd9IHZhbHVlIGV4Y2VlZHMgbWF4IGxpbWl0IChtYXhpbXVtOiAke2luZm8ubWF4TGVuZ3RofSwgYWN0dWFsOiAke3ZhbHVlLmxlbmd0aH0pLmAsIHsgdmFsdWUsIGZlaWxkOiBpbmZvIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpbmZvICYmIGluZm8ubWluTGVuZ3RoICYmIHZhbHVlLmxlbmd0aCA8IGluZm8ubWluTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihgVGhlIGxlbmd0aCBvZiB0aGUgJHtpbmZvLm5hbWUgfHwgJ3RleHQnfSB2YWx1ZSBkb2VzIG5vdCByZWFjaCBtaW4gcmVxdWlyZW1lbnQgKG1pbmltdW06ICR7aW5mby5taW5MZW5ndGh9LCBhY3R1YWw6ICR7dmFsdWUubGVuZ3RofSkuYCwgeyB2YWx1ZSwgZmVpbGQ6IGluZm8gfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuXG4gICAgZGVmYXVsdFZhbHVlOiAnJyxcblxuICAgIGdlbmVyYXRlOiAoaW5mbywgaTE4bikgPT4ge1xuICAgICAgICBsZXQgcmFuZE9wdCA9IHt9O1xuXG4gICAgICAgIGlmIChpbmZvLmZpeGVkTGVuZ3RoKSB7XG4gICAgICAgICAgICByYW5kT3B0Lmxlbmd0aCA9IGluZm8uZml4ZWRMZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5mby5tYXhMZW5ndGgpIHtcbiAgICAgICAgICAgIHJhbmRPcHQubGVuZ3RoID0gaW5mby5tYXhMZW5ndGggPiAzMiA/IDMyIDogaW5mby5tYXhMZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5mby5hbGxvd2VkQ2hhcnMpIHtcbiAgICAgICAgICAgIHJhbmRPcHQuY2hhcnNldCA9IGluZm8uYWxsb3dlZENoYXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZm8uY2Fwcykge1xuICAgICAgICAgICAgcmFuZE9wdC5jYXBpdGFsaXphdGlvbiA9IGluZm8uY2FwcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByYW5kb21zdHJpbmcuZ2VuZXJhdGUocmFuZE9wdCk7XG4gICAgfSwgIFxuXG4gICAgc2VyaWFsaXplOiB2YWx1ZSA9PiB2YWx1ZSxcblxuICAgIHF1YWxpZmllcnM6IGFueS5xdWFsaWZpZXJzLmNvbmNhdChbXG4gICAgICAgICdmaXhlZExlbmd0aCcsXG4gICAgICAgICdtYXhMZW5ndGgnLFxuICAgICAgICAnZW5jb2RpbmcnLFxuICAgICAgICAnYWxsb3dlZENoYXJzJyxcbiAgICAgICAgJ2NhcHMnLFxuICAgICAgICAnbm9UcmltJyxcbiAgICAgICAgJ2VtcHR5QXNOdWxsJ1xuICAgIF0pXG59OyJdfQ==