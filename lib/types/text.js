"use strict";

require("source-map-support/register");

const Convertors = require('../Convertors');

const randomstring = require("randomstring");

const {
  _
} = require('rk-utils');

const {
  ValidationError
} = require('../utils/Errors');

const any = require('./any');

module.exports = {
  name: 'text',
  alias: ['string', 'char'],
  sanitize: (value, info, i18n) => {
    value = Convertors.toText(value, info.noTrim);

    if (!_.isNil(value)) {
      if (info.fixedLength && value.length !== info.fixedLength) {
        throw new ValidationError(`The length of the ${info.name || 'text'} value is not correct (expected: ${info.fixedLength}, actual: ${value.length}).`, {
          value,
          feild: info
        });
      }

      if (info.maxLength && value.length > info.maxLength) {
        throw new ValidationError(`The length of the ${info.name || 'text'} value exceeds max limit (maximum: ${info.maxLength}, actual: ${value.length}).`, {
          value,
          feild: info
        });
      }
    }

    return value;
  },
  defaultValue: '',
  generate: (info, i18n) => {
    let randOpt = {};

    if (info.fixedLength) {
      randOpt.length = info.fixedLength;
    }

    if (info.maxLength) {
      randOpt.length = info.maxLength > 32 ? 32 : info.maxLength;
    }

    if (info.allowedChars) {
      randOpt.charset = info.allowedChars;
    }

    return randomstring.generate(randOpt);
  },
  serialize: value => value,
  qualifiers: any.qualifiers.concat(['fixedLength', 'maxLength', 'encoding', 'allowedChars', 'noTrim'])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy90ZXh0LmpzIl0sIm5hbWVzIjpbIkNvbnZlcnRvcnMiLCJyZXF1aXJlIiwicmFuZG9tc3RyaW5nIiwiXyIsIlZhbGlkYXRpb25FcnJvciIsImFueSIsIm1vZHVsZSIsImV4cG9ydHMiLCJuYW1lIiwiYWxpYXMiLCJzYW5pdGl6ZSIsInZhbHVlIiwiaW5mbyIsImkxOG4iLCJ0b1RleHQiLCJub1RyaW0iLCJpc05pbCIsImZpeGVkTGVuZ3RoIiwibGVuZ3RoIiwiZmVpbGQiLCJtYXhMZW5ndGgiLCJkZWZhdWx0VmFsdWUiLCJnZW5lcmF0ZSIsInJhbmRPcHQiLCJhbGxvd2VkQ2hhcnMiLCJjaGFyc2V0Iiwic2VyaWFsaXplIiwicXVhbGlmaWVycyIsImNvbmNhdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxVQUFVLEdBQUdDLE9BQU8sQ0FBQyxlQUFELENBQTFCOztBQUNBLE1BQU1DLFlBQVksR0FBR0QsT0FBTyxDQUFDLGNBQUQsQ0FBNUI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQTtBQUFGLElBQVFGLE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUNBLE1BQU07QUFBRUcsRUFBQUE7QUFBRixJQUFzQkgsT0FBTyxDQUFDLGlCQUFELENBQW5DOztBQUNBLE1BQU1JLEdBQUcsR0FBR0osT0FBTyxDQUFDLE9BQUQsQ0FBbkI7O0FBRUFLLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNiQyxFQUFBQSxJQUFJLEVBQUUsTUFETztBQUdiQyxFQUFBQSxLQUFLLEVBQUUsQ0FBRSxRQUFGLEVBQVksTUFBWixDQUhNO0FBS2JDLEVBQUFBLFFBQVEsRUFBRSxDQUFDQyxLQUFELEVBQVFDLElBQVIsRUFBY0MsSUFBZCxLQUF1QjtBQUM3QkYsSUFBQUEsS0FBSyxHQUFHWCxVQUFVLENBQUNjLE1BQVgsQ0FBa0JILEtBQWxCLEVBQXlCQyxJQUFJLENBQUNHLE1BQTlCLENBQVI7O0FBRUEsUUFBSSxDQUFDWixDQUFDLENBQUNhLEtBQUYsQ0FBUUwsS0FBUixDQUFMLEVBQXFCO0FBQ2pCLFVBQUlDLElBQUksQ0FBQ0ssV0FBTCxJQUFvQk4sS0FBSyxDQUFDTyxNQUFOLEtBQWlCTixJQUFJLENBQUNLLFdBQTlDLEVBQTJEO0FBQ3ZELGNBQU0sSUFBSWIsZUFBSixDQUFxQixxQkFBb0JRLElBQUksQ0FBQ0osSUFBTCxJQUFhLE1BQU8sb0NBQW1DSSxJQUFJLENBQUNLLFdBQVksYUFBWU4sS0FBSyxDQUFDTyxNQUFPLElBQTFJLEVBQStJO0FBQUVQLFVBQUFBLEtBQUY7QUFBU1EsVUFBQUEsS0FBSyxFQUFFUDtBQUFoQixTQUEvSSxDQUFOO0FBQ0g7O0FBRUQsVUFBSUEsSUFBSSxDQUFDUSxTQUFMLElBQWtCVCxLQUFLLENBQUNPLE1BQU4sR0FBZU4sSUFBSSxDQUFDUSxTQUExQyxFQUFxRDtBQUNqRCxjQUFNLElBQUloQixlQUFKLENBQXFCLHFCQUFvQlEsSUFBSSxDQUFDSixJQUFMLElBQWEsTUFBTyxzQ0FBcUNJLElBQUksQ0FBQ1EsU0FBVSxhQUFZVCxLQUFLLENBQUNPLE1BQU8sSUFBMUksRUFBK0k7QUFBRVAsVUFBQUEsS0FBRjtBQUFTUSxVQUFBQSxLQUFLLEVBQUVQO0FBQWhCLFNBQS9JLENBQU47QUFDSDtBQUNKOztBQUVELFdBQU9ELEtBQVA7QUFDSCxHQW5CWTtBQXFCYlUsRUFBQUEsWUFBWSxFQUFFLEVBckJEO0FBdUJiQyxFQUFBQSxRQUFRLEVBQUUsQ0FBQ1YsSUFBRCxFQUFPQyxJQUFQLEtBQWdCO0FBQ3RCLFFBQUlVLE9BQU8sR0FBRyxFQUFkOztBQUVBLFFBQUlYLElBQUksQ0FBQ0ssV0FBVCxFQUFzQjtBQUNsQk0sTUFBQUEsT0FBTyxDQUFDTCxNQUFSLEdBQWlCTixJQUFJLENBQUNLLFdBQXRCO0FBQ0g7O0FBRUQsUUFBSUwsSUFBSSxDQUFDUSxTQUFULEVBQW9CO0FBQ2hCRyxNQUFBQSxPQUFPLENBQUNMLE1BQVIsR0FBaUJOLElBQUksQ0FBQ1EsU0FBTCxHQUFpQixFQUFqQixHQUFzQixFQUF0QixHQUEyQlIsSUFBSSxDQUFDUSxTQUFqRDtBQUNIOztBQUVELFFBQUlSLElBQUksQ0FBQ1ksWUFBVCxFQUF1QjtBQUNuQkQsTUFBQUEsT0FBTyxDQUFDRSxPQUFSLEdBQWtCYixJQUFJLENBQUNZLFlBQXZCO0FBQ0g7O0FBRUQsV0FBT3RCLFlBQVksQ0FBQ29CLFFBQWIsQ0FBc0JDLE9BQXRCLENBQVA7QUFDSCxHQXZDWTtBQXlDYkcsRUFBQUEsU0FBUyxFQUFFZixLQUFLLElBQUlBLEtBekNQO0FBMkNiZ0IsRUFBQUEsVUFBVSxFQUFFdEIsR0FBRyxDQUFDc0IsVUFBSixDQUFlQyxNQUFmLENBQXNCLENBQzlCLGFBRDhCLEVBRTlCLFdBRjhCLEVBRzlCLFVBSDhCLEVBSTlCLGNBSjhCLEVBSzlCLFFBTDhCLENBQXRCO0FBM0NDLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IENvbnZlcnRvcnMgPSByZXF1aXJlKCcuLi9Db252ZXJ0b3JzJyk7XG5jb25zdCByYW5kb21zdHJpbmcgPSByZXF1aXJlKFwicmFuZG9tc3RyaW5nXCIpO1xuY29uc3QgeyBfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyBWYWxpZGF0aW9uRXJyb3IgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL0Vycm9ycycpO1xuY29uc3QgYW55ID0gcmVxdWlyZSgnLi9hbnknKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbmFtZTogJ3RleHQnLFxuXG4gICAgYWxpYXM6IFsgJ3N0cmluZycsICdjaGFyJyBdLFxuXG4gICAgc2FuaXRpemU6ICh2YWx1ZSwgaW5mbywgaTE4bikgPT4geyAgICAgICAgXG4gICAgICAgIHZhbHVlID0gQ29udmVydG9ycy50b1RleHQodmFsdWUsIGluZm8ubm9UcmltKTtcblxuICAgICAgICBpZiAoIV8uaXNOaWwodmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAoaW5mby5maXhlZExlbmd0aCAmJiB2YWx1ZS5sZW5ndGggIT09IGluZm8uZml4ZWRMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKGBUaGUgbGVuZ3RoIG9mIHRoZSAke2luZm8ubmFtZSB8fCAndGV4dCd9IHZhbHVlIGlzIG5vdCBjb3JyZWN0IChleHBlY3RlZDogJHtpbmZvLmZpeGVkTGVuZ3RofSwgYWN0dWFsOiAke3ZhbHVlLmxlbmd0aH0pLmAsIHsgdmFsdWUsIGZlaWxkOiBpbmZvIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpbmZvLm1heExlbmd0aCAmJiB2YWx1ZS5sZW5ndGggPiBpbmZvLm1heExlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoYFRoZSBsZW5ndGggb2YgdGhlICR7aW5mby5uYW1lIHx8ICd0ZXh0J30gdmFsdWUgZXhjZWVkcyBtYXggbGltaXQgKG1heGltdW06ICR7aW5mby5tYXhMZW5ndGh9LCBhY3R1YWw6ICR7dmFsdWUubGVuZ3RofSkuYCwgeyB2YWx1ZSwgZmVpbGQ6IGluZm8gfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuXG4gICAgZGVmYXVsdFZhbHVlOiAnJyxcblxuICAgIGdlbmVyYXRlOiAoaW5mbywgaTE4bikgPT4ge1xuICAgICAgICBsZXQgcmFuZE9wdCA9IHt9O1xuXG4gICAgICAgIGlmIChpbmZvLmZpeGVkTGVuZ3RoKSB7XG4gICAgICAgICAgICByYW5kT3B0Lmxlbmd0aCA9IGluZm8uZml4ZWRMZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5mby5tYXhMZW5ndGgpIHtcbiAgICAgICAgICAgIHJhbmRPcHQubGVuZ3RoID0gaW5mby5tYXhMZW5ndGggPiAzMiA/IDMyIDogaW5mby5tYXhMZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5mby5hbGxvd2VkQ2hhcnMpIHtcbiAgICAgICAgICAgIHJhbmRPcHQuY2hhcnNldCA9IGluZm8uYWxsb3dlZENoYXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJhbmRvbXN0cmluZy5nZW5lcmF0ZShyYW5kT3B0KTtcbiAgICB9LCAgXG5cbiAgICBzZXJpYWxpemU6IHZhbHVlID0+IHZhbHVlLFxuXG4gICAgcXVhbGlmaWVyczogYW55LnF1YWxpZmllcnMuY29uY2F0KFtcbiAgICAgICAgJ2ZpeGVkTGVuZ3RoJyxcbiAgICAgICAgJ21heExlbmd0aCcsXG4gICAgICAgICdlbmNvZGluZycsXG4gICAgICAgICdhbGxvd2VkQ2hhcnMnLFxuICAgICAgICAnbm9UcmltJ1xuICAgIF0pXG59OyJdfQ==