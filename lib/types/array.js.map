{"version":3,"sources":["../../src/types/array.js"],"names":["_","quote","require","isNothing","any","ValidationError","sanitize","value","info","i18n","prefix","raw","csv","trimmed","trim","startsWith","endsWith","JSON","parse","Array","isArray","elementSchema","Validators","map","a","i","validateAny","field","module","exports","name","alias","defaultValue","generate","serialize","stringify","qualifiers","concat","toCsv","data","separator","elem","toString","indexOf","join"],"mappings":";;;;AAAA,MAAM;AAAEA,EAAAA,CAAF;AAAKC,EAAAA;AAAL,IAAeC,OAAO,CAAC,YAAD,CAA5B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAgBD,OAAO,CAAC,eAAD,CAA7B;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,OAAD,CAAnB;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAsBH,OAAO,CAAC,iBAAD,CAAnC;;AAEA,SAASI,QAAT,CAAkBC,KAAlB,EAAyBC,IAAzB,EAA+BC,IAA/B,EAAqCC,MAArC,EAA6C;AACzC,MAAIH,KAAK,IAAI,IAAb,EAAmB,OAAO,IAAP;AAEnB,MAAII,GAAG,GAAGJ,KAAV;;AAEA,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,QAAIC,IAAI,CAACI,GAAT,EAAc;AACV,aAAOL,KAAP;AACH,KAFD,MAEO;AACH,UAAIM,OAAO,GAAGN,KAAK,CAACO,IAAN,EAAd;;AACA,UAAID,OAAO,CAACE,UAAR,CAAmB,GAAnB,KAA2BF,OAAO,CAACG,QAAR,CAAiB,GAAjB,CAA/B,EAAsD;AAClDT,QAAAA,KAAK,GAAGD,QAAQ,CAACW,IAAI,CAACC,KAAL,CAAWL,OAAX,CAAD,EAAsBL,IAAtB,EAA4BC,IAA5B,EAAkCC,MAAlC,CAAhB;AACH;AACJ;AACJ;;AAED,MAAIS,KAAK,CAACC,OAAN,CAAcb,KAAd,CAAJ,EAA0B;AACtB,QAAIC,IAAI,CAACa,aAAT,EAAwB;AACpB,YAAMC,UAAU,GAAGpB,OAAO,CAAC,eAAD,CAA1B;;AACA,aAAOK,KAAK,CAACgB,GAAN,CAAU,CAACC,CAAD,EAAIC,CAAJ,KACbH,UAAU,CAACI,WAAX,CACIF,CADJ,EAEIhB,IAAI,CAACa,aAFT,EAGIZ,IAHJ,EAIIC,MAAM,GAAI,IAAGe,CAAE,GAJnB,CADG,CAAP;AAQH;;AAED,WAAOlB,KAAP;AACH;;AAED,QAAM,IAAIF,eAAJ,CAAoB,qBAApB,EAA2C;AAC7CE,IAAAA,KAAK,EAAEI,GADsC;AAE7CgB,IAAAA,KAAK,EAAEnB;AAFsC,GAA3C,CAAN;AAIH;;AAEDoB,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE,OADO;AAGbC,EAAAA,KAAK,EAAE,CAAC,MAAD,CAHM;AAKbzB,EAAAA,QAAQ,EAAEA,QALG;AAOb0B,EAAAA,YAAY,EAAE,EAPD;AASbC,EAAAA,QAAQ,EAAE,CAACzB,IAAD,EAAOC,IAAP,KAAgB,EATb;AAYbyB,EAAAA,SAAS,EAAG3B,KAAD,IAAYJ,SAAS,CAACI,KAAD,CAAT,GAAmB,IAAnB,GAA0BU,IAAI,CAACkB,SAAL,CAAe5B,KAAf,CAZpC;AAcb6B,EAAAA,UAAU,EAAEhC,GAAG,CAACgC,UAAJ,CAAeC,MAAf,CAAsB,CAAC,KAAD,EAAQ,IAAR,EAAc,eAAd,CAAtB,CAdC;AAgBbC,EAAAA,KAAK,EAAE,CAACC,IAAD,EAAOC,SAAS,GAAG,GAAnB,KACHD,IAAI,CACChB,GADL,CACUkB,IAAD,IAAU;AACXA,IAAAA,IAAI,GAAGA,IAAI,CAACC,QAAL,EAAP;AACA,WAAOD,IAAI,CAACE,OAAL,CAAaH,SAAb,KAA2B,CAAC,CAA5B,GAAgCvC,KAAK,CAACwC,IAAD,EAAO,GAAP,CAArC,GAAmDA,IAA1D;AACH,GAJL,EAKKG,IALL,CAKUJ,SALV;AAjBS,CAAjB","sourcesContent":["const { _, quote } = require('@genx/july');\nconst { isNothing } = require('../utils/lang');\nconst any = require('./any');\nconst { ValidationError } = require('../utils/Errors');\n\nfunction sanitize(value, info, i18n, prefix) {\n    if (value == null) return null;\n\n    let raw = value;\n\n    if (typeof value === 'string') {\n        if (info.csv) {\n            return value;\n        } else {\n            let trimmed = value.trim();\n            if (trimmed.startsWith('[') && trimmed.endsWith(']')) {\n                value = sanitize(JSON.parse(trimmed), info, i18n, prefix);\n            }\n        }\n    }\n\n    if (Array.isArray(value)) {\n        if (info.elementSchema) {\n            const Validators = require('../Validators');\n            return value.map((a, i) =>\n                Validators.validateAny(\n                    a,\n                    info.elementSchema,\n                    i18n,\n                    prefix + `[${i}]`\n                )\n            );\n        }\n\n        return value;\n    }\n\n    throw new ValidationError('Invalid array value', {\n        value: raw,\n        field: info,\n    });\n}\n\nmodule.exports = {\n    name: 'array',\n\n    alias: ['list'],\n\n    sanitize: sanitize,\n\n    defaultValue: [],\n\n    generate: (info, i18n) => [],\n\n    //when it's csv, should call toCsv in driver specific EntityModel\n    serialize: (value) => (isNothing(value) ? null : JSON.stringify(value)),\n\n    qualifiers: any.qualifiers.concat(['csv', 'of', 'elementSchema']),\n\n    toCsv: (data, separator = ',') =>\n        data\n            .map((elem) => {\n                elem = elem.toString();\n                return elem.indexOf(separator) != -1 ? quote(elem, '\"') : elem;\n            })\n            .join(separator),\n};\n"],"file":"array.js"}