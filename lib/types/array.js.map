{"version":3,"file":"array.js","names":["quote","require","isNothing","any","ValidationError","sanitize","value","info","i18n","prefix","raw","csv","trimmed","trim","startsWith","endsWith","JSON","parse","Array","isArray","elementSchema","schema","Types","map","a","i","field","module","exports","name","alias","defaultValue","generate","serialize","stringify","qualifiers","concat","toCsv","data","separator","elem","toString","indexOf","join"],"sources":["../../src/types/array.js"],"sourcesContent":["const { quote } = require('@genx/july');\nconst { isNothing } = require('../utils/lang');\nconst any = require('./any');\nconst { ValidationError } = require('../utils/Errors');\n\nfunction sanitize(value, info, i18n, prefix) {\n    if (value == null) return null;\n\n    const raw = value;\n\n    if (typeof value === 'string') {\n        if (info.csv) {\n            return value;\n        } else {\n            const trimmed = value.trim();\n            if (trimmed.startsWith('[') && trimmed.endsWith(']')) {\n                value = sanitize(JSON.parse(trimmed), info, i18n, prefix);\n            }\n        }\n    }\n\n    if (Array.isArray(value)) {\n        if (info.elementSchema) {\n            const schema =\n                typeof info.elementSchema === 'function'\n                    ? info.elementSchema()\n                    : info.elementSchema;\n            const Types = require('.');\n            return value.map((a, i) =>\n                Types.sanitize(a, schema, i18n, prefix + `[${i}]`)\n            );\n        }\n\n        return value;\n    }\n\n    throw new ValidationError('Invalid array value', {\n        value: raw,\n        field: info,\n    });\n}\n\nmodule.exports = {\n    name: 'array',\n\n    alias: ['list'],\n\n    sanitize: sanitize,\n\n    defaultValue: [],\n\n    generate: (info, i18n) => [],\n\n    // when it's csv, should call toCsv in driver specific EntityModel\n    serialize: (value) => (isNothing(value) ? null : JSON.stringify(value)),\n\n    qualifiers: any.qualifiers.concat(['csv', 'of', 'elementSchema']),\n\n    toCsv: (data, separator = ',') =>\n        data\n            .map((elem) => {\n                elem = elem.toString();\n                return elem.indexOf(separator) !== -1 ? quote(elem, '\"') : elem;\n            })\n            .join(separator),\n};\n"],"mappings":";;;AAAA,MAAM;EAAEA;AAAM,CAAC,GAAGC,OAAO,CAAC,YAAY,CAAC;AACvC,MAAM;EAAEC;AAAU,CAAC,GAAGD,OAAO,CAAC,eAAe,CAAC;AAC9C,MAAME,GAAG,GAAGF,OAAO,CAAC,OAAO,CAAC;AAC5B,MAAM;EAAEG;AAAgB,CAAC,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AAEtD,SAASI,QAAQA,CAACC,KAAK,EAAEC,IAAI,EAAEC,IAAI,EAAEC,MAAM,EAAE;EACzC,IAAIH,KAAK,IAAI,IAAI,EAAE,OAAO,IAAI;EAE9B,MAAMI,GAAG,GAAGJ,KAAK;EAEjB,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC3B,IAAIC,IAAI,CAACI,GAAG,EAAE;MACV,OAAOL,KAAK;IAChB,CAAC,MAAM;MACH,MAAMM,OAAO,GAAGN,KAAK,CAACO,IAAI,EAAE;MAC5B,IAAID,OAAO,CAACE,UAAU,CAAC,GAAG,CAAC,IAAIF,OAAO,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;QAClDT,KAAK,GAAGD,QAAQ,CAACW,IAAI,CAACC,KAAK,CAACL,OAAO,CAAC,EAAEL,IAAI,EAAEC,IAAI,EAAEC,MAAM,CAAC;MAC7D;IACJ;EACJ;EAEA,IAAIS,KAAK,CAACC,OAAO,CAACb,KAAK,CAAC,EAAE;IACtB,IAAIC,IAAI,CAACa,aAAa,EAAE;MACpB,MAAMC,MAAM,GACR,OAAOd,IAAI,CAACa,aAAa,KAAK,UAAU,GAClCb,IAAI,CAACa,aAAa,EAAE,GACpBb,IAAI,CAACa,aAAa;MAC5B,MAAME,KAAK,GAAGrB,OAAO,CAAC,GAAG,CAAC;MAC1B,OAAOK,KAAK,CAACiB,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAClBH,KAAK,CAACjB,QAAQ,CAACmB,CAAC,EAAEH,MAAM,EAAEb,IAAI,EAAEC,MAAM,GAAI,IAAGgB,CAAE,GAAE,CAAC,CACrD;IACL;IAEA,OAAOnB,KAAK;EAChB;EAEA,MAAM,IAAIF,eAAe,CAAC,qBAAqB,EAAE;IAC7CE,KAAK,EAAEI,GAAG;IACVgB,KAAK,EAAEnB;EACX,CAAC,CAAC;AACN;AAEAoB,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE,OAAO;EAEbC,KAAK,EAAE,CAAC,MAAM,CAAC;EAEfzB,QAAQ,EAAEA,QAAQ;EAElB0B,YAAY,EAAE,EAAE;EAEhBC,QAAQ,EAAEA,CAACzB,IAAI,EAAEC,IAAI,KAAK,EAAE;EAG5ByB,SAAS,EAAG3B,KAAK,IAAMJ,SAAS,CAACI,KAAK,CAAC,GAAG,IAAI,GAAGU,IAAI,CAACkB,SAAS,CAAC5B,KAAK,CAAE;EAEvE6B,UAAU,EAAEhC,GAAG,CAACgC,UAAU,CAACC,MAAM,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,eAAe,CAAC,CAAC;EAEjEC,KAAK,EAAEA,CAACC,IAAI,EAAEC,SAAS,GAAG,GAAG,KACzBD,IAAI,CACCf,GAAG,CAAEiB,IAAI,IAAK;IACXA,IAAI,GAAGA,IAAI,CAACC,QAAQ,EAAE;IACtB,OAAOD,IAAI,CAACE,OAAO,CAACH,SAAS,CAAC,KAAK,CAAC,CAAC,GAAGvC,KAAK,CAACwC,IAAI,EAAE,GAAG,CAAC,GAAGA,IAAI;EACnE,CAAC,CAAC,CACDG,IAAI,CAACJ,SAAS;AAC3B,CAAC"}