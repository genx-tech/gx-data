{"version":3,"file":"datetime.js","names":["DateTime","require","any","ValidationError","module","exports","name","typeObject","alias","sanitize","value","info","i18n","opts","zone","timezone","raw","Date","fromJSDate","type","dontParse","inputFormat","fromFormat","fromISO","fromMillis","isLuxonDateTime","field","isValid","defaultValue","generate","now","local","serialize","toISO","includeOffset","qualifiers","concat"],"sources":["../../src/types/datetime.js"],"sourcesContent":["const { DateTime } = require('luxon');\nconst any = require('./any');\nconst { ValidationError } = require('../utils/Errors');\n\nmodule.exports = {\n    name: 'datetime',\n\n    typeObject: DateTime,\n\n    alias: ['date', 'time', 'timestamp'],\n\n    sanitize: (value, info, i18n) => {\n        if (value == null) return null;\n\n        const opts = { zone: i18n?.timezone || 'local' };\n\n        const raw = value;\n\n        if (value instanceof Date) {\n            value = DateTime.fromJSDate(value, opts);\n        } else {\n            const type = typeof value;\n\n            if (type === 'string' && !info.dontParse) {\n                if (info.inputFormat) {\n                    value = DateTime.fromFormat(value, info.inputFormat, opts);\n                } else {\n                    value = DateTime.fromISO(value, opts);\n                }\n            } else if (type === 'number') {\n                value = DateTime.fromMillis(value, opts);\n            } else if (type !== 'object' || !value.isLuxonDateTime) {\n                throw new ValidationError('Invalid datetime object.', {\n                    value: raw,\n                    field: info,\n                });\n            }\n        }\n\n        if (!value.isValid) {\n            throw new ValidationError('Invalid datetime object.', {\n                value: raw,\n                field: info,\n            });\n        }\n\n        return value;\n    },\n\n    defaultValue: 0,\n\n    generate: (info, i18n) => (i18n ? i18n.now() : DateTime.local()),\n\n    serialize: (value) => {\n        if (value && value.toISO) {\n            return value.toISO({ includeOffset: false });\n        }\n\n        return value;\n    },\n\n    qualifiers: any.qualifiers.concat([\n        'timezone',\n        'dateOnly',\n        'timeOnly',\n        'inputFormat',\n        'dontParse',\n    ]),\n};\n"],"mappings":";;;AAAA,MAAM;EAAEA;AAAS,CAAC,GAAGC,OAAO,CAAC,OAAO,CAAC;AACrC,MAAMC,GAAG,GAAGD,OAAO,CAAC,OAAO,CAAC;AAC5B,MAAM;EAAEE;AAAgB,CAAC,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AAEtDG,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE,UAAU;EAEhBC,UAAU,EAAEP,QAAQ;EAEpBQ,KAAK,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC;EAEpCC,QAAQ,EAAEA,CAACC,KAAK,EAAEC,IAAI,EAAEC,IAAI,KAAK;IAC7B,IAAIF,KAAK,IAAI,IAAI,EAAE,OAAO,IAAI;IAE9B,MAAMG,IAAI,GAAG;MAAEC,IAAI,EAAE,CAAAF,IAAI,oBAAJA,IAAI,CAAEG,QAAQ,KAAI;IAAQ,CAAC;IAEhD,MAAMC,GAAG,GAAGN,KAAK;IAEjB,IAAIA,KAAK,YAAYO,IAAI,EAAE;MACvBP,KAAK,GAAGV,QAAQ,CAACkB,UAAU,CAACR,KAAK,EAAEG,IAAI,CAAC;IAC5C,CAAC,MAAM;MACH,MAAMM,IAAI,GAAG,OAAOT,KAAK;MAEzB,IAAIS,IAAI,KAAK,QAAQ,IAAI,CAACR,IAAI,CAACS,SAAS,EAAE;QACtC,IAAIT,IAAI,CAACU,WAAW,EAAE;UAClBX,KAAK,GAAGV,QAAQ,CAACsB,UAAU,CAACZ,KAAK,EAAEC,IAAI,CAACU,WAAW,EAAER,IAAI,CAAC;QAC9D,CAAC,MAAM;UACHH,KAAK,GAAGV,QAAQ,CAACuB,OAAO,CAACb,KAAK,EAAEG,IAAI,CAAC;QACzC;MACJ,CAAC,MAAM,IAAIM,IAAI,KAAK,QAAQ,EAAE;QAC1BT,KAAK,GAAGV,QAAQ,CAACwB,UAAU,CAACd,KAAK,EAAEG,IAAI,CAAC;MAC5C,CAAC,MAAM,IAAIM,IAAI,KAAK,QAAQ,IAAI,CAACT,KAAK,CAACe,eAAe,EAAE;QACpD,MAAM,IAAItB,eAAe,CAAC,0BAA0B,EAAE;UAClDO,KAAK,EAAEM,GAAG;UACVU,KAAK,EAAEf;QACX,CAAC,CAAC;MACN;IACJ;IAEA,IAAI,CAACD,KAAK,CAACiB,OAAO,EAAE;MAChB,MAAM,IAAIxB,eAAe,CAAC,0BAA0B,EAAE;QAClDO,KAAK,EAAEM,GAAG;QACVU,KAAK,EAAEf;MACX,CAAC,CAAC;IACN;IAEA,OAAOD,KAAK;EAChB,CAAC;EAEDkB,YAAY,EAAE,CAAC;EAEfC,QAAQ,EAAEA,CAAClB,IAAI,EAAEC,IAAI,KAAMA,IAAI,GAAGA,IAAI,CAACkB,GAAG,EAAE,GAAG9B,QAAQ,CAAC+B,KAAK,EAAG;EAEhEC,SAAS,EAAGtB,KAAK,IAAK;IAClB,IAAIA,KAAK,IAAIA,KAAK,CAACuB,KAAK,EAAE;MACtB,OAAOvB,KAAK,CAACuB,KAAK,CAAC;QAAEC,aAAa,EAAE;MAAM,CAAC,CAAC;IAChD;IAEA,OAAOxB,KAAK;EAChB,CAAC;EAEDyB,UAAU,EAAEjC,GAAG,CAACiC,UAAU,CAACC,MAAM,CAAC,CAC9B,UAAU,EACV,UAAU,EACV,UAAU,EACV,aAAa,EACb,WAAW,CACd;AACL,CAAC"}