{"version":3,"sources":["../../src/types/datetime.js"],"names":["_","require","DateTime","any","ValidationError","module","exports","name","typeObject","alias","sanitize","value","info","i18n","opts","zone","timezone","raw","Date","fromJSDate","type","dontParse","inputFormat","fromFormat","fromISO","fromMillis","isLuxonDateTime","field","isValid","defaultValue","generate","now","local","serialize","toISO","includeOffset","qualifiers","concat"],"mappings":"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","sourcesContent":["const { _ } = require('@genx/july');\nconst { DateTime } = require('luxon');\nconst any = require('./any');\nconst { ValidationError } = require('../utils/Errors');\n\nmodule.exports = {\n    name: 'datetime',\n\n    typeObject: DateTime,\n\n    alias: ['date', 'time', 'timestamp'],\n\n    sanitize: (value, info, i18n) => {\n        if (value == null) return null;\n\n        let opts = { zone: i18n?.timezone || 'local' };\n\n        let raw = value;\n\n        if (value instanceof Date) {\n            value = DateTime.fromJSDate(value, opts);\n        } else {\n            let type = typeof value;\n\n            if (type === 'string' && !info.dontParse) {\n                if (info.inputFormat) {\n                    value = DateTime.fromFormat(value, info.inputFormat, opts);\n                } else {\n                    value = DateTime.fromISO(value, opts);\n                }\n            } else if (type === 'number') {\n                value = DateTime.fromMillis(value, opts);\n            } else if (type !== 'object' || !value.isLuxonDateTime) {\n                throw new ValidationError('Invalid datetime object.', {\n                    value: raw,\n                    field: info,\n                });\n            }\n        }\n\n        if (!value.isValid) {\n            throw new ValidationError('Invalid datetime object.', {\n                value: raw,\n                field: info,\n            });\n        }\n\n        return value;\n    },\n\n    defaultValue: 0,\n\n    generate: (info, i18n) => (i18n ? i18n.now() : DateTime.local()),\n\n    serialize: (value) => {\n        if (value && value.toISO) {\n            return value.toISO({ includeOffset: false });\n        }\n\n        return value;\n    },\n\n    qualifiers: any.qualifiers.concat([\n        'timezone',\n        'dateOnly',\n        'timeOnly',\n        'inputFormat',\n        'dontParse',\n    ]),\n};\n"],"file":"datetime.js"}