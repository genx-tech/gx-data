"use strict";

require("source-map-support/register");

const Convertors = require('../Convertors');

const {
  ValidationError
} = require('../utils/Errors');

const any = require('./any');

module.exports = {
  name: 'integer',
  alias: ['int'],
  sanitize: (value, info, i18n) => {
    if (value == null) return null;
    let raw = value;
    value = Convertors.toInt(value);

    if (isNaN(value)) {
      throw new ValidationError('Invalid integer value', {
        value: raw,
        field: info
      });
    }

    return value;
  },
  defaultValue: 0,
  generate: (info, i18n) => 0,
  serialize: value => value,
  qualifiers: any.qualifiers.concat(['bytes', 'digits', 'unsigned'])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9pbnRlZ2VyLmpzIl0sIm5hbWVzIjpbIkNvbnZlcnRvcnMiLCJyZXF1aXJlIiwiVmFsaWRhdGlvbkVycm9yIiwiYW55IiwibW9kdWxlIiwiZXhwb3J0cyIsIm5hbWUiLCJhbGlhcyIsInNhbml0aXplIiwidmFsdWUiLCJpbmZvIiwiaTE4biIsInJhdyIsInRvSW50IiwiaXNOYU4iLCJmaWVsZCIsImRlZmF1bHRWYWx1ZSIsImdlbmVyYXRlIiwic2VyaWFsaXplIiwicXVhbGlmaWVycyIsImNvbmNhdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxVQUFVLEdBQUdDLE9BQU8sQ0FBQyxlQUFELENBQTFCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFzQkQsT0FBTyxDQUFDLGlCQUFELENBQW5DOztBQUNBLE1BQU1FLEdBQUcsR0FBR0YsT0FBTyxDQUFDLE9BQUQsQ0FBbkI7O0FBRUFHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNiQyxFQUFBQSxJQUFJLEVBQUUsU0FETztBQUdiQyxFQUFBQSxLQUFLLEVBQUUsQ0FBRSxLQUFGLENBSE07QUFLYkMsRUFBQUEsUUFBUSxFQUFFLENBQUNDLEtBQUQsRUFBUUMsSUFBUixFQUFjQyxJQUFkLEtBQXVCO0FBQzdCLFFBQUlGLEtBQUssSUFBSSxJQUFiLEVBQW1CLE9BQU8sSUFBUDtBQUVuQixRQUFJRyxHQUFHLEdBQUdILEtBQVY7QUFDQUEsSUFBQUEsS0FBSyxHQUFHVCxVQUFVLENBQUNhLEtBQVgsQ0FBaUJKLEtBQWpCLENBQVI7O0FBQ0EsUUFBSUssS0FBSyxDQUFDTCxLQUFELENBQVQsRUFBa0I7QUFDZCxZQUFNLElBQUlQLGVBQUosQ0FBb0IsdUJBQXBCLEVBQTZDO0FBQUVPLFFBQUFBLEtBQUssRUFBRUcsR0FBVDtBQUFjRyxRQUFBQSxLQUFLLEVBQUVMO0FBQXJCLE9BQTdDLENBQU47QUFDSDs7QUFFRCxXQUFPRCxLQUFQO0FBQ0gsR0FmWTtBQWlCYk8sRUFBQUEsWUFBWSxFQUFFLENBakJEO0FBbUJiQyxFQUFBQSxRQUFRLEVBQUUsQ0FBQ1AsSUFBRCxFQUFPQyxJQUFQLEtBQWdCLENBbkJiO0FBcUJiTyxFQUFBQSxTQUFTLEVBQUVULEtBQUssSUFBSUEsS0FyQlA7QUF1QmJVLEVBQUFBLFVBQVUsRUFBRWhCLEdBQUcsQ0FBQ2dCLFVBQUosQ0FBZUMsTUFBZixDQUFzQixDQUM5QixPQUQ4QixFQUU5QixRQUY4QixFQUc5QixVQUg4QixDQUF0QjtBQXZCQyxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBDb252ZXJ0b3JzID0gcmVxdWlyZSgnLi4vQ29udmVydG9ycycpO1xuY29uc3QgeyBWYWxpZGF0aW9uRXJyb3IgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL0Vycm9ycycpO1xuY29uc3QgYW55ID0gcmVxdWlyZSgnLi9hbnknKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbmFtZTogJ2ludGVnZXInLFxuXG4gICAgYWxpYXM6IFsgJ2ludCcgXSxcblxuICAgIHNhbml0aXplOiAodmFsdWUsIGluZm8sIGkxOG4pID0+IHtcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiBudWxsO1xuXG4gICAgICAgIGxldCByYXcgPSB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSBDb252ZXJ0b3JzLnRvSW50KHZhbHVlKTtcbiAgICAgICAgaWYgKGlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcignSW52YWxpZCBpbnRlZ2VyIHZhbHVlJywgeyB2YWx1ZTogcmF3LCBmaWVsZDogaW5mbyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuXG4gICAgZGVmYXVsdFZhbHVlOiAwLFxuXG4gICAgZ2VuZXJhdGU6IChpbmZvLCBpMThuKSA9PiAwLFxuXG4gICAgc2VyaWFsaXplOiB2YWx1ZSA9PiB2YWx1ZSxcblxuICAgIHF1YWxpZmllcnM6IGFueS5xdWFsaWZpZXJzLmNvbmNhdChbXG4gICAgICAgICdieXRlcycsXG4gICAgICAgICdkaWdpdHMnLCAgICAgICAgXG4gICAgICAgICd1bnNpZ25lZCdcbiAgICBdKVxufTsiXX0=