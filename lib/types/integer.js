"use strict";

require("source-map-support/register");

const Convertors = require('../Convertors');

const {
  _
} = require('rk-utils');

const {
  ValidationError
} = require('../utils/Errors');

const any = require('./any');

module.exports = {
  name: 'integer',
  alias: ['int'],
  sanitize: (value, info, i18n) => {
    if (value == null) return null;
    let raw = value;
    value = Convertors.toInt(value);

    if (isNaN(value)) {
      throw new ValidationError('Invalid integer value', {
        value: raw,
        field: info
      });
    }

    return value;
  },
  defaultValue: 0,
  generate: (info, i18n) => 0,
  serialize: value => value,
  qualifiers: any.qualifiers.concat(['bytes', 'digits', 'unsigned'])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9pbnRlZ2VyLmpzIl0sIm5hbWVzIjpbIkNvbnZlcnRvcnMiLCJyZXF1aXJlIiwiXyIsIlZhbGlkYXRpb25FcnJvciIsImFueSIsIm1vZHVsZSIsImV4cG9ydHMiLCJuYW1lIiwiYWxpYXMiLCJzYW5pdGl6ZSIsInZhbHVlIiwiaW5mbyIsImkxOG4iLCJyYXciLCJ0b0ludCIsImlzTmFOIiwiZmllbGQiLCJkZWZhdWx0VmFsdWUiLCJnZW5lcmF0ZSIsInNlcmlhbGl6ZSIsInF1YWxpZmllcnMiLCJjb25jYXQiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsVUFBVSxHQUFHQyxPQUFPLENBQUMsZUFBRCxDQUExQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBUUQsT0FBTyxDQUFDLFVBQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQTtBQUFGLElBQXNCRixPQUFPLENBQUMsaUJBQUQsQ0FBbkM7O0FBQ0EsTUFBTUcsR0FBRyxHQUFHSCxPQUFPLENBQUMsT0FBRCxDQUFuQjs7QUFFQUksTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2JDLEVBQUFBLElBQUksRUFBRSxTQURPO0FBR2JDLEVBQUFBLEtBQUssRUFBRSxDQUFFLEtBQUYsQ0FITTtBQUtiQyxFQUFBQSxRQUFRLEVBQUUsQ0FBQ0MsS0FBRCxFQUFRQyxJQUFSLEVBQWNDLElBQWQsS0FBdUI7QUFDN0IsUUFBSUYsS0FBSyxJQUFJLElBQWIsRUFBbUIsT0FBTyxJQUFQO0FBRW5CLFFBQUlHLEdBQUcsR0FBR0gsS0FBVjtBQUNBQSxJQUFBQSxLQUFLLEdBQUdWLFVBQVUsQ0FBQ2MsS0FBWCxDQUFpQkosS0FBakIsQ0FBUjs7QUFDQSxRQUFJSyxLQUFLLENBQUNMLEtBQUQsQ0FBVCxFQUFrQjtBQUNkLFlBQU0sSUFBSVAsZUFBSixDQUFvQix1QkFBcEIsRUFBNkM7QUFBRU8sUUFBQUEsS0FBSyxFQUFFRyxHQUFUO0FBQWNHLFFBQUFBLEtBQUssRUFBRUw7QUFBckIsT0FBN0MsQ0FBTjtBQUNIOztBQUVELFdBQU9ELEtBQVA7QUFDSCxHQWZZO0FBaUJiTyxFQUFBQSxZQUFZLEVBQUUsQ0FqQkQ7QUFtQmJDLEVBQUFBLFFBQVEsRUFBRSxDQUFDUCxJQUFELEVBQU9DLElBQVAsS0FBZ0IsQ0FuQmI7QUFxQmJPLEVBQUFBLFNBQVMsRUFBRVQsS0FBSyxJQUFJQSxLQXJCUDtBQXVCYlUsRUFBQUEsVUFBVSxFQUFFaEIsR0FBRyxDQUFDZ0IsVUFBSixDQUFlQyxNQUFmLENBQXNCLENBQzlCLE9BRDhCLEVBRTlCLFFBRjhCLEVBRzlCLFVBSDhCLENBQXRCO0FBdkJDLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IENvbnZlcnRvcnMgPSByZXF1aXJlKCcuLi9Db252ZXJ0b3JzJyk7XG5jb25zdCB7IF8gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IFZhbGlkYXRpb25FcnJvciB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvRXJyb3JzJyk7XG5jb25zdCBhbnkgPSByZXF1aXJlKCcuL2FueScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBuYW1lOiAnaW50ZWdlcicsXG5cbiAgICBhbGlhczogWyAnaW50JyBdLFxuXG4gICAgc2FuaXRpemU6ICh2YWx1ZSwgaW5mbywgaTE4bikgPT4ge1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgbGV0IHJhdyA9IHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IENvbnZlcnRvcnMudG9JbnQodmFsdWUpO1xuICAgICAgICBpZiAoaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKCdJbnZhbGlkIGludGVnZXIgdmFsdWUnLCB7IHZhbHVlOiByYXcsIGZpZWxkOiBpbmZvIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG5cbiAgICBkZWZhdWx0VmFsdWU6IDAsXG5cbiAgICBnZW5lcmF0ZTogKGluZm8sIGkxOG4pID0+IDAsXG5cbiAgICBzZXJpYWxpemU6IHZhbHVlID0+IHZhbHVlLFxuXG4gICAgcXVhbGlmaWVyczogYW55LnF1YWxpZmllcnMuY29uY2F0KFtcbiAgICAgICAgJ2J5dGVzJyxcbiAgICAgICAgJ2RpZ2l0cycsICAgICAgICBcbiAgICAgICAgJ3Vuc2lnbmVkJ1xuICAgIF0pXG59OyJdfQ==