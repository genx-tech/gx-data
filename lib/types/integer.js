"use strict";

require("source-map-support/register");

const Convertors = require('../Convertors');

const {
  _
} = require('rk-utils');

const {
  ValidationError
} = require('../utils/Errors');

const any = require('./any');

module.exports = {
  name: 'integer',
  alias: ['int'],
  sanitize: (value, info, i18n) => {
    if (value == null) return value;
    let raw = value;
    value = Convertors.toInt(value);

    if (isNaN(value)) {
      throw new ValidationError('Invalid integer value', {
        value: raw,
        field: info
      });
    }

    return value;
  },
  defaultValue: 0,
  generate: (info, i18n) => 0,
  serialize: value => value,
  qualifiers: any.qualifiers.concat(['bytes', 'digits', 'unsigned'])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9pbnRlZ2VyLmpzIl0sIm5hbWVzIjpbIkNvbnZlcnRvcnMiLCJyZXF1aXJlIiwiXyIsIlZhbGlkYXRpb25FcnJvciIsImFueSIsIm1vZHVsZSIsImV4cG9ydHMiLCJuYW1lIiwiYWxpYXMiLCJzYW5pdGl6ZSIsInZhbHVlIiwiaW5mbyIsImkxOG4iLCJyYXciLCJ0b0ludCIsImlzTmFOIiwiZmllbGQiLCJkZWZhdWx0VmFsdWUiLCJnZW5lcmF0ZSIsInNlcmlhbGl6ZSIsInF1YWxpZmllcnMiLCJjb25jYXQiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsVUFBVSxHQUFHQyxPQUFPLENBQUMsZUFBRCxDQUExQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBUUQsT0FBTyxDQUFDLFVBQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQTtBQUFGLElBQXNCRixPQUFPLENBQUMsaUJBQUQsQ0FBbkM7O0FBQ0EsTUFBTUcsR0FBRyxHQUFHSCxPQUFPLENBQUMsT0FBRCxDQUFuQjs7QUFFQUksTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2JDLEVBQUFBLElBQUksRUFBRSxTQURPO0FBR2JDLEVBQUFBLEtBQUssRUFBRSxDQUFFLEtBQUYsQ0FITTtBQUtiQyxFQUFBQSxRQUFRLEVBQUUsQ0FBQ0MsS0FBRCxFQUFRQyxJQUFSLEVBQWNDLElBQWQsS0FBdUI7QUFDN0IsUUFBSUYsS0FBSyxJQUFJLElBQWIsRUFBbUIsT0FBT0EsS0FBUDtBQUVuQixRQUFJRyxHQUFHLEdBQUdILEtBQVY7QUFDQUEsSUFBQUEsS0FBSyxHQUFHVixVQUFVLENBQUNjLEtBQVgsQ0FBaUJKLEtBQWpCLENBQVI7O0FBQ0EsUUFBSUssS0FBSyxDQUFDTCxLQUFELENBQVQsRUFBa0I7QUFDZCxZQUFNLElBQUlQLGVBQUosQ0FBb0IsdUJBQXBCLEVBQTZDO0FBQUVPLFFBQUFBLEtBQUssRUFBRUcsR0FBVDtBQUFjRyxRQUFBQSxLQUFLLEVBQUVMO0FBQXJCLE9BQTdDLENBQU47QUFDSDs7QUFFRCxXQUFPRCxLQUFQO0FBQ0gsR0FmWTtBQWlCYk8sRUFBQUEsWUFBWSxFQUFFLENBakJEO0FBbUJiQyxFQUFBQSxRQUFRLEVBQUUsQ0FBQ1AsSUFBRCxFQUFPQyxJQUFQLEtBQWdCLENBbkJiO0FBcUJiTyxFQUFBQSxTQUFTLEVBQUVULEtBQUssSUFBSUEsS0FyQlA7QUF1QmJVLEVBQUFBLFVBQVUsRUFBRWhCLEdBQUcsQ0FBQ2dCLFVBQUosQ0FBZUMsTUFBZixDQUFzQixDQUM5QixPQUQ4QixFQUU5QixRQUY4QixFQUc5QixVQUg4QixDQUF0QjtBQXZCQyxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBDb252ZXJ0b3JzID0gcmVxdWlyZSgnLi4vQ29udmVydG9ycycpO1xuY29uc3QgeyBfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyBWYWxpZGF0aW9uRXJyb3IgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL0Vycm9ycycpO1xuY29uc3QgYW55ID0gcmVxdWlyZSgnLi9hbnknKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbmFtZTogJ2ludGVnZXInLFxuXG4gICAgYWxpYXM6IFsgJ2ludCcgXSxcblxuICAgIHNhbml0aXplOiAodmFsdWUsIGluZm8sIGkxOG4pID0+IHtcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB2YWx1ZTtcblxuICAgICAgICBsZXQgcmF3ID0gdmFsdWU7XG4gICAgICAgIHZhbHVlID0gQ29udmVydG9ycy50b0ludCh2YWx1ZSk7XG4gICAgICAgIGlmIChpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoJ0ludmFsaWQgaW50ZWdlciB2YWx1ZScsIHsgdmFsdWU6IHJhdywgZmllbGQ6IGluZm8gfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcblxuICAgIGRlZmF1bHRWYWx1ZTogMCxcblxuICAgIGdlbmVyYXRlOiAoaW5mbywgaTE4bikgPT4gMCxcblxuICAgIHNlcmlhbGl6ZTogdmFsdWUgPT4gdmFsdWUsXG5cbiAgICBxdWFsaWZpZXJzOiBhbnkucXVhbGlmaWVycy5jb25jYXQoW1xuICAgICAgICAnYnl0ZXMnLFxuICAgICAgICAnZGlnaXRzJywgICAgICAgIFxuICAgICAgICAndW5zaWduZWQnXG4gICAgXSlcbn07Il19