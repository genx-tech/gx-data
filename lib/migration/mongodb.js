"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  fs,
  eachAsync_,
  pascalCase,
  quote
} = require('rk-utils');

class MongoDbMigration {
  constructor(context, schemaName, connector) {
    this.appModule = context.appModule;
    this.logger = context.logger;
    this.modelPath = context.modelPath;
    this.scriptSourcePath = context.scriptSourcePath;
    this.schemaName = schemaName;
    this.connector = connector;
    this.dbScriptPath = path.join(this.scriptSourcePath, this.connector.driver, this.connector.database);
  }

  async reset_() {
    return this.connector.execute_(db => db.dropDatabase());
  }

  async create_(extraOptions) {}

  async load_(dataFile) {
    let ext = path.extname(dataFile);
    this.logger.log('verbose', `Loading data file "${dataFile}" ...`);
    let collection = path.basename(dataFile, ext);

    if (ext === '.json') {
      let docs = fs.readJsonSync(dataFile, {
        encoding: 'utf8'
      });
      await this._loadData_(collection, docs);
    } else if (ext === '.js') {
      let executor = require(dataFile);

      await executor(this.appModule, this.connector);
    } else {
      throw new Error('Unsupported data file format.');
    }
  }

  async _loadData_(collection, docs) {
    await eachAsync_(docs, doc => this.connector.insertOne_(collection, doc));
  }

}

module.exports = MongoDbMigration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWdyYXRpb24vbW9uZ29kYi5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIl8iLCJmcyIsImVhY2hBc3luY18iLCJwYXNjYWxDYXNlIiwicXVvdGUiLCJNb25nb0RiTWlncmF0aW9uIiwiY29uc3RydWN0b3IiLCJjb250ZXh0Iiwic2NoZW1hTmFtZSIsImNvbm5lY3RvciIsImFwcE1vZHVsZSIsImxvZ2dlciIsIm1vZGVsUGF0aCIsInNjcmlwdFNvdXJjZVBhdGgiLCJkYlNjcmlwdFBhdGgiLCJqb2luIiwiZHJpdmVyIiwiZGF0YWJhc2UiLCJyZXNldF8iLCJleGVjdXRlXyIsImRiIiwiZHJvcERhdGFiYXNlIiwiY3JlYXRlXyIsImV4dHJhT3B0aW9ucyIsImxvYWRfIiwiZGF0YUZpbGUiLCJleHQiLCJleHRuYW1lIiwibG9nIiwiY29sbGVjdGlvbiIsImJhc2VuYW1lIiwiZG9jcyIsInJlYWRKc29uU3luYyIsImVuY29kaW5nIiwiX2xvYWREYXRhXyIsImV4ZWN1dG9yIiwiRXJyb3IiLCJkb2MiLCJpbnNlcnRPbmVfIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQSxFQUFMO0FBQVNDLEVBQUFBLFVBQVQ7QUFBcUJDLEVBQUFBLFVBQXJCO0FBQWlDQyxFQUFBQTtBQUFqQyxJQUEyQ0wsT0FBTyxDQUFDLFVBQUQsQ0FBeEQ7O0FBTUEsTUFBTU0sZ0JBQU4sQ0FBdUI7QUFLbkJDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVQyxVQUFWLEVBQXNCQyxTQUF0QixFQUFpQztBQUN4QyxTQUFLQyxTQUFMLEdBQWlCSCxPQUFPLENBQUNHLFNBQXpCO0FBQ0EsU0FBS0MsTUFBTCxHQUFjSixPQUFPLENBQUNJLE1BQXRCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQkwsT0FBTyxDQUFDSyxTQUF6QjtBQUNBLFNBQUtDLGdCQUFMLEdBQXdCTixPQUFPLENBQUNNLGdCQUFoQztBQUNBLFNBQUtMLFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQkEsU0FBakI7QUFFQSxTQUFLSyxZQUFMLEdBQW9CaEIsSUFBSSxDQUFDaUIsSUFBTCxDQUFVLEtBQUtGLGdCQUFmLEVBQWlDLEtBQUtKLFNBQUwsQ0FBZU8sTUFBaEQsRUFBd0QsS0FBS1AsU0FBTCxDQUFlUSxRQUF2RSxDQUFwQjtBQUNIOztBQUVELFFBQU1DLE1BQU4sR0FBZTtBQUNYLFdBQU8sS0FBS1QsU0FBTCxDQUFlVSxRQUFmLENBQXdCQyxFQUFFLElBQUlBLEVBQUUsQ0FBQ0MsWUFBSCxFQUE5QixDQUFQO0FBQ0g7O0FBRUQsUUFBTUMsT0FBTixDQUFjQyxZQUFkLEVBQTRCLENBRTNCOztBQUVELFFBQU1DLEtBQU4sQ0FBWUMsUUFBWixFQUFzQjtBQUNsQixRQUFJQyxHQUFHLEdBQUc1QixJQUFJLENBQUM2QixPQUFMLENBQWFGLFFBQWIsQ0FBVjtBQUNBLFNBQUtkLE1BQUwsQ0FBWWlCLEdBQVosQ0FBZ0IsU0FBaEIsRUFBNEIsc0JBQXFCSCxRQUFTLE9BQTFEO0FBRUEsUUFBSUksVUFBVSxHQUFHL0IsSUFBSSxDQUFDZ0MsUUFBTCxDQUFjTCxRQUFkLEVBQXdCQyxHQUF4QixDQUFqQjs7QUFFQSxRQUFJQSxHQUFHLEtBQUssT0FBWixFQUFxQjtBQUNqQixVQUFJSyxJQUFJLEdBQUc5QixFQUFFLENBQUMrQixZQUFILENBQWdCUCxRQUFoQixFQUEwQjtBQUFDUSxRQUFBQSxRQUFRLEVBQUU7QUFBWCxPQUExQixDQUFYO0FBRUEsWUFBTSxLQUFLQyxVQUFMLENBQWdCTCxVQUFoQixFQUE0QkUsSUFBNUIsQ0FBTjtBQUNILEtBSkQsTUFJTyxJQUFJTCxHQUFHLEtBQUssS0FBWixFQUFtQjtBQUN0QixVQUFJUyxRQUFRLEdBQUdwQyxPQUFPLENBQUMwQixRQUFELENBQXRCOztBQUNBLFlBQU1VLFFBQVEsQ0FBQyxLQUFLekIsU0FBTixFQUFpQixLQUFLRCxTQUF0QixDQUFkO0FBQ0gsS0FITSxNQUdBO0FBQ0gsWUFBTSxJQUFJMkIsS0FBSixDQUFVLCtCQUFWLENBQU47QUFDSDtBQUNKOztBQUVELFFBQU1GLFVBQU4sQ0FBaUJMLFVBQWpCLEVBQTZCRSxJQUE3QixFQUFtQztBQUMvQixVQUFNN0IsVUFBVSxDQUFDNkIsSUFBRCxFQUFPTSxHQUFHLElBQUksS0FBSzVCLFNBQUwsQ0FBZTZCLFVBQWYsQ0FBMEJULFVBQTFCLEVBQXNDUSxHQUF0QyxDQUFkLENBQWhCO0FBQ0g7O0FBNUNrQjs7QUErQ3ZCRSxNQUFNLENBQUNDLE9BQVAsR0FBaUJuQyxnQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgXywgZnMsIGVhY2hBc3luY18sIHBhc2NhbENhc2UsIHF1b3RlIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuXG4vKipcbiAqIE15U1FMIG1pZ3JhdGlvbi5cbiAqIEBjbGFzc1xuICovXG5jbGFzcyBNb25nb0RiTWlncmF0aW9uIHtcbiAgICAvKiogICAgIFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAgICogQHBhcmFtIHtDb25uZWN0b3J9IGNvbm5lY3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIHNjaGVtYU5hbWUsIGNvbm5lY3Rvcikge1xuICAgICAgICB0aGlzLmFwcE1vZHVsZSA9IGNvbnRleHQuYXBwTW9kdWxlO1xuICAgICAgICB0aGlzLmxvZ2dlciA9IGNvbnRleHQubG9nZ2VyO1xuICAgICAgICB0aGlzLm1vZGVsUGF0aCA9IGNvbnRleHQubW9kZWxQYXRoO1xuICAgICAgICB0aGlzLnNjcmlwdFNvdXJjZVBhdGggPSBjb250ZXh0LnNjcmlwdFNvdXJjZVBhdGg7XG4gICAgICAgIHRoaXMuc2NoZW1hTmFtZSA9IHNjaGVtYU5hbWU7XG4gICAgICAgIHRoaXMuY29ubmVjdG9yID0gY29ubmVjdG9yO1xuXG4gICAgICAgIHRoaXMuZGJTY3JpcHRQYXRoID0gcGF0aC5qb2luKHRoaXMuc2NyaXB0U291cmNlUGF0aCwgdGhpcy5jb25uZWN0b3IuZHJpdmVyLCB0aGlzLmNvbm5lY3Rvci5kYXRhYmFzZSk7XG4gICAgfVxuXG4gICAgYXN5bmMgcmVzZXRfKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0b3IuZXhlY3V0ZV8oZGIgPT4gZGIuZHJvcERhdGFiYXNlKCkpO1xuICAgIH1cblxuICAgIGFzeW5jIGNyZWF0ZV8oZXh0cmFPcHRpb25zKSB7ICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZF8oZGF0YUZpbGUpIHtcbiAgICAgICAgbGV0IGV4dCA9IHBhdGguZXh0bmFtZShkYXRhRmlsZSk7XG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZygndmVyYm9zZScsIGBMb2FkaW5nIGRhdGEgZmlsZSBcIiR7ZGF0YUZpbGV9XCIgLi4uYCk7XG4gICAgICAgIFxuICAgICAgICBsZXQgY29sbGVjdGlvbiA9IHBhdGguYmFzZW5hbWUoZGF0YUZpbGUsIGV4dCk7XG5cbiAgICAgICAgaWYgKGV4dCA9PT0gJy5qc29uJykge1xuICAgICAgICAgICAgbGV0IGRvY3MgPSBmcy5yZWFkSnNvblN5bmMoZGF0YUZpbGUsIHtlbmNvZGluZzogJ3V0ZjgnfSk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2xvYWREYXRhXyhjb2xsZWN0aW9uLCBkb2NzKTtcbiAgICAgICAgfSBlbHNlIGlmIChleHQgPT09ICcuanMnKSB7ICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCBleGVjdXRvciA9IHJlcXVpcmUoZGF0YUZpbGUpO1xuICAgICAgICAgICAgYXdhaXQgZXhlY3V0b3IodGhpcy5hcHBNb2R1bGUsIHRoaXMuY29ubmVjdG9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgZGF0YSBmaWxlIGZvcm1hdC4nKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIF9sb2FkRGF0YV8oY29sbGVjdGlvbiwgZG9jcykgeyBcbiAgICAgICAgYXdhaXQgZWFjaEFzeW5jXyhkb2NzLCBkb2MgPT4gdGhpcy5jb25uZWN0b3IuaW5zZXJ0T25lXyhjb2xsZWN0aW9uLCBkb2MpKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTW9uZ29EYk1pZ3JhdGlvbjsiXX0=