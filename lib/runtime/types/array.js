"use strict";

require("source-map-support/register");

const {
  _,
  quote
} = require('rk-utils');

const {
  isNothing
} = require('../../utils/lang');

const any = require('./any');

const {
  DataValidationError
} = require('../../runtime/Errors');

module.exports = {
  name: 'array',
  alias: ['list'],
  sanitize: (value, info, i18n) => {
    if (Array.isArray(value)) return value;

    if (typeof value === 'string') {
      let trimmed = value.trim();

      if (trimmed.startsWith('[') && trimmed.endsWith(']')) {
        return JSON.parse(trimmed);
      }

      throw new DataValidationError(`Invalid array format: ${value}`);
    }

    return [value];
  },
  defaultValue: [],
  generate: (info, i18n) => null,
  serialize: value => isNothing(value) ? null : JSON.stringify(value),
  qualifiers: any.qualifiers.concat(['csv', 'of']),
  toCsv: (data, separator = ',') => data.map(elem => {
    elem = elem.toString();
    return elem.indexOf(separator) != -1 ? quote(elem, '"') : elem;
  }).join(separator)
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ydW50aW1lL3R5cGVzL2FycmF5LmpzIl0sIm5hbWVzIjpbIl8iLCJxdW90ZSIsInJlcXVpcmUiLCJpc05vdGhpbmciLCJhbnkiLCJEYXRhVmFsaWRhdGlvbkVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsIm5hbWUiLCJhbGlhcyIsInNhbml0aXplIiwidmFsdWUiLCJpbmZvIiwiaTE4biIsIkFycmF5IiwiaXNBcnJheSIsInRyaW1tZWQiLCJ0cmltIiwic3RhcnRzV2l0aCIsImVuZHNXaXRoIiwiSlNPTiIsInBhcnNlIiwiZGVmYXVsdFZhbHVlIiwiZ2VuZXJhdGUiLCJzZXJpYWxpemUiLCJzdHJpbmdpZnkiLCJxdWFsaWZpZXJzIiwiY29uY2F0IiwidG9Dc3YiLCJkYXRhIiwic2VwYXJhdG9yIiwibWFwIiwiZWxlbSIsInRvU3RyaW5nIiwiaW5kZXhPZiIsImpvaW4iXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTTtBQUFFQSxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBO0FBQUwsSUFBZUMsT0FBTyxDQUFDLFVBQUQsQ0FBNUI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQWdCRCxPQUFPLENBQUMsa0JBQUQsQ0FBN0I7O0FBQ0EsTUFBTUUsR0FBRyxHQUFHRixPQUFPLENBQUMsT0FBRCxDQUFuQjs7QUFDQSxNQUFNO0FBQUVHLEVBQUFBO0FBQUYsSUFBMEJILE9BQU8sQ0FBQyxzQkFBRCxDQUF2Qzs7QUFFQUksTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2JDLEVBQUFBLElBQUksRUFBRSxPQURPO0FBR2JDLEVBQUFBLEtBQUssRUFBRSxDQUFFLE1BQUYsQ0FITTtBQUtiQyxFQUFBQSxRQUFRLEVBQUUsQ0FBQ0MsS0FBRCxFQUFRQyxJQUFSLEVBQWNDLElBQWQsS0FBdUI7QUFDN0IsUUFBSUMsS0FBSyxDQUFDQyxPQUFOLENBQWNKLEtBQWQsQ0FBSixFQUEwQixPQUFPQSxLQUFQOztBQUUxQixRQUFJLE9BQU9BLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDM0IsVUFBSUssT0FBTyxHQUFHTCxLQUFLLENBQUNNLElBQU4sRUFBZDs7QUFDQSxVQUFJRCxPQUFPLENBQUNFLFVBQVIsQ0FBbUIsR0FBbkIsS0FBMkJGLE9BQU8sQ0FBQ0csUUFBUixDQUFpQixHQUFqQixDQUEvQixFQUFzRDtBQUNsRCxlQUFPQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0wsT0FBWCxDQUFQO0FBQ0g7O0FBRUQsWUFBTSxJQUFJWCxtQkFBSixDQUF5Qix5QkFBd0JNLEtBQU0sRUFBdkQsQ0FBTjtBQUNIOztBQUVELFdBQU8sQ0FBRUEsS0FBRixDQUFQO0FBQ0gsR0FsQlk7QUFvQmJXLEVBQUFBLFlBQVksRUFBRSxFQXBCRDtBQXNCYkMsRUFBQUEsUUFBUSxFQUFFLENBQUNYLElBQUQsRUFBT0MsSUFBUCxLQUFnQixJQXRCYjtBQXdCYlcsRUFBQUEsU0FBUyxFQUFHYixLQUFELElBQVdSLFNBQVMsQ0FBQ1EsS0FBRCxDQUFULEdBQW1CLElBQW5CLEdBQTBCUyxJQUFJLENBQUNLLFNBQUwsQ0FBZWQsS0FBZixDQXhCbkM7QUEwQmJlLEVBQUFBLFVBQVUsRUFBRXRCLEdBQUcsQ0FBQ3NCLFVBQUosQ0FBZUMsTUFBZixDQUFzQixDQUM5QixLQUQ4QixFQUU5QixJQUY4QixDQUF0QixDQTFCQztBQStCYkMsRUFBQUEsS0FBSyxFQUFFLENBQUNDLElBQUQsRUFBT0MsU0FBUyxHQUFHLEdBQW5CLEtBQTJCRCxJQUFJLENBQUNFLEdBQUwsQ0FDOUJDLElBQUksSUFBSTtBQUFFQSxJQUFBQSxJQUFJLEdBQUdBLElBQUksQ0FBQ0MsUUFBTCxFQUFQO0FBQXdCLFdBQU9ELElBQUksQ0FBQ0UsT0FBTCxDQUFhSixTQUFiLEtBQTJCLENBQUMsQ0FBNUIsR0FBZ0M3QixLQUFLLENBQUMrQixJQUFELEVBQU8sR0FBUCxDQUFyQyxHQUFtREEsSUFBMUQ7QUFBaUUsR0FEckUsRUFFNUJHLElBRjRCLENBRXZCTCxTQUZ1QjtBQS9CckIsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgeyBfLCBxdW90ZSB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHsgaXNOb3RoaW5nIH0gPSByZXF1aXJlKCcuLi8uLi91dGlscy9sYW5nJyk7XG5jb25zdCBhbnkgPSByZXF1aXJlKCcuL2FueScpO1xuY29uc3QgeyBEYXRhVmFsaWRhdGlvbkVycm9yIH0gPSByZXF1aXJlKCcuLi8uLi9ydW50aW1lL0Vycm9ycycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBuYW1lOiAnYXJyYXknLFxuXG4gICAgYWxpYXM6IFsgJ2xpc3QnIF0sXG5cbiAgICBzYW5pdGl6ZTogKHZhbHVlLCBpbmZvLCBpMThuKSA9PiB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBsZXQgdHJpbW1lZCA9IHZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgIGlmICh0cmltbWVkLnN0YXJ0c1dpdGgoJ1snKSAmJiB0cmltbWVkLmVuZHNXaXRoKCddJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh0cmltbWVkKTtcbiAgICAgICAgICAgIH0gICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRocm93IG5ldyBEYXRhVmFsaWRhdGlvbkVycm9yKGBJbnZhbGlkIGFycmF5IGZvcm1hdDogJHt2YWx1ZX1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbIHZhbHVlIF07XG4gICAgfSxcblxuICAgIGRlZmF1bHRWYWx1ZTogW10sXG5cbiAgICBnZW5lcmF0ZTogKGluZm8sIGkxOG4pID0+IG51bGwsXG5cbiAgICBzZXJpYWxpemU6ICh2YWx1ZSkgPT4gaXNOb3RoaW5nKHZhbHVlKSA/IG51bGwgOiBKU09OLnN0cmluZ2lmeSh2YWx1ZSksXG5cbiAgICBxdWFsaWZpZXJzOiBhbnkucXVhbGlmaWVycy5jb25jYXQoW1xuICAgICAgICAnY3N2JyxcbiAgICAgICAgJ29mJ1xuICAgIF0pLFxuXG4gICAgdG9Dc3Y6IChkYXRhLCBzZXBhcmF0b3IgPSAnLCcpID0+IGRhdGEubWFwKFxuICAgICAgICBlbGVtID0+IHsgZWxlbSA9IGVsZW0udG9TdHJpbmcoKTsgcmV0dXJuIGVsZW0uaW5kZXhPZihzZXBhcmF0b3IpICE9IC0xID8gcXVvdGUoZWxlbSwgJ1wiJykgOiBlbGVtOyB9XG4gICAgICAgICkuam9pbihzZXBhcmF0b3IpXG59OyJdfQ==