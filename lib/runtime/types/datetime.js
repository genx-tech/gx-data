"use strict";

require("source-map-support/register");

const _ = require('rk-utils')._;

const {
  DateTime
} = require('luxon');

const any = require('./any');

module.exports = {
  name: 'datetime',
  typeObject: DateTime,
  alias: ['date', 'time', 'timestamp'],
  sanitize: (value, info, i18n) => {
    if (value instanceof Date) {
      return i18n ? i18n.datetime.fromJSDate(value) : DateTime.fromJSDate(value);
    }

    if (value instanceof DateTime) {
      return value;
    }

    if (typeof value === 'string') {
      return i18n ? i18n.datetime.fromISO(value) : DateTime.fromISO(value, {
        setZone: true
      });
    }

    if (typeof value === 'number') {
      return i18n ? i18n.datetime.fromMillis(value) : DateTime.fromMillis(value);
    }

    if (_.isPlainObject(value)) {
      return i18n ? i18n.datetime.fromObject(value) : DateTime.fromObject(value);
    }

    throw new TypeError(`Invalid datetime: ${value}`);
  },
  defaultValue: 0,
  generate: (info, i18n) => i18n ? i18n.now() : DateTime.local(),
  serialize: value => value.toISO({
    includeOffset: false
  }),
  qualifiers: any.qualifiers.concat(['timezone', 'dateOnly', 'timeOnly'])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ydW50aW1lL3R5cGVzL2RhdGV0aW1lLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiRGF0ZVRpbWUiLCJhbnkiLCJtb2R1bGUiLCJleHBvcnRzIiwibmFtZSIsInR5cGVPYmplY3QiLCJhbGlhcyIsInNhbml0aXplIiwidmFsdWUiLCJpbmZvIiwiaTE4biIsIkRhdGUiLCJkYXRldGltZSIsImZyb21KU0RhdGUiLCJmcm9tSVNPIiwic2V0Wm9uZSIsImZyb21NaWxsaXMiLCJpc1BsYWluT2JqZWN0IiwiZnJvbU9iamVjdCIsIlR5cGVFcnJvciIsImRlZmF1bHRWYWx1ZSIsImdlbmVyYXRlIiwibm93IiwibG9jYWwiLCJzZXJpYWxpemUiLCJ0b0lTTyIsImluY2x1ZGVPZmZzZXQiLCJxdWFsaWZpZXJzIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLENBQUMsR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBUCxDQUFvQkQsQ0FBOUI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQTtBQUFGLElBQWVELE9BQU8sQ0FBQyxPQUFELENBQTVCOztBQUNBLE1BQU1FLEdBQUcsR0FBR0YsT0FBTyxDQUFDLE9BQUQsQ0FBbkI7O0FBRUFHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNiQyxFQUFBQSxJQUFJLEVBQUUsVUFETztBQUdiQyxFQUFBQSxVQUFVLEVBQUVMLFFBSEM7QUFLYk0sRUFBQUEsS0FBSyxFQUFFLENBQUUsTUFBRixFQUFVLE1BQVYsRUFBa0IsV0FBbEIsQ0FMTTtBQU9iQyxFQUFBQSxRQUFRLEVBQUUsQ0FBQ0MsS0FBRCxFQUFRQyxJQUFSLEVBQWNDLElBQWQsS0FBdUI7QUFDN0IsUUFBSUYsS0FBSyxZQUFZRyxJQUFyQixFQUEyQjtBQUN2QixhQUFPRCxJQUFJLEdBQUdBLElBQUksQ0FBQ0UsUUFBTCxDQUFjQyxVQUFkLENBQXlCTCxLQUF6QixDQUFILEdBQXFDUixRQUFRLENBQUNhLFVBQVQsQ0FBb0JMLEtBQXBCLENBQWhEO0FBQ0g7O0FBRUQsUUFBSUEsS0FBSyxZQUFZUixRQUFyQixFQUErQjtBQUMzQixhQUFPUSxLQUFQO0FBQ0g7O0FBRUQsUUFBSSxPQUFPQSxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzNCLGFBQU9FLElBQUksR0FBR0EsSUFBSSxDQUFDRSxRQUFMLENBQWNFLE9BQWQsQ0FBc0JOLEtBQXRCLENBQUgsR0FBa0NSLFFBQVEsQ0FBQ2MsT0FBVCxDQUFpQk4sS0FBakIsRUFBd0I7QUFBQ08sUUFBQUEsT0FBTyxFQUFFO0FBQVYsT0FBeEIsQ0FBN0M7QUFDSDs7QUFFRCxRQUFJLE9BQU9QLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDM0IsYUFBT0UsSUFBSSxHQUFHQSxJQUFJLENBQUNFLFFBQUwsQ0FBY0ksVUFBZCxDQUF5QlIsS0FBekIsQ0FBSCxHQUFxQ1IsUUFBUSxDQUFDZ0IsVUFBVCxDQUFvQlIsS0FBcEIsQ0FBaEQ7QUFDSDs7QUFFRCxRQUFJVixDQUFDLENBQUNtQixhQUFGLENBQWdCVCxLQUFoQixDQUFKLEVBQTRCO0FBQ3hCLGFBQU9FLElBQUksR0FBR0EsSUFBSSxDQUFDRSxRQUFMLENBQWNNLFVBQWQsQ0FBeUJWLEtBQXpCLENBQUgsR0FBcUNSLFFBQVEsQ0FBQ2tCLFVBQVQsQ0FBb0JWLEtBQXBCLENBQWhEO0FBQ0g7O0FBRUQsVUFBTSxJQUFJVyxTQUFKLENBQWUscUJBQW9CWCxLQUFNLEVBQXpDLENBQU47QUFDSCxHQTdCWTtBQStCYlksRUFBQUEsWUFBWSxFQUFFLENBL0JEO0FBaUNiQyxFQUFBQSxRQUFRLEVBQUUsQ0FBQ1osSUFBRCxFQUFPQyxJQUFQLEtBQWdCQSxJQUFJLEdBQUdBLElBQUksQ0FBQ1ksR0FBTCxFQUFILEdBQWdCdEIsUUFBUSxDQUFDdUIsS0FBVCxFQWpDakM7QUFtQ2JDLEVBQUFBLFNBQVMsRUFBRWhCLEtBQUssSUFBSUEsS0FBSyxDQUFDaUIsS0FBTixDQUFZO0FBQUVDLElBQUFBLGFBQWEsRUFBRTtBQUFqQixHQUFaLENBbkNQO0FBcUNiQyxFQUFBQSxVQUFVLEVBQUUxQixHQUFHLENBQUMwQixVQUFKLENBQWVDLE1BQWYsQ0FBc0IsQ0FDOUIsVUFEOEIsRUFFOUIsVUFGOEIsRUFHOUIsVUFIOEIsQ0FBdEI7QUFyQ0MsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgXyA9IHJlcXVpcmUoJ3JrLXV0aWxzJykuXztcbmNvbnN0IHsgRGF0ZVRpbWUgfSA9IHJlcXVpcmUoJ2x1eG9uJyk7XG5jb25zdCBhbnkgPSByZXF1aXJlKCcuL2FueScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBuYW1lOiAnZGF0ZXRpbWUnLFxuXG4gICAgdHlwZU9iamVjdDogRGF0ZVRpbWUsXG5cbiAgICBhbGlhczogWyAnZGF0ZScsICd0aW1lJywgJ3RpbWVzdGFtcCcgXSxcblxuICAgIHNhbml0aXplOiAodmFsdWUsIGluZm8sIGkxOG4pID0+IHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGkxOG4gPyBpMThuLmRhdGV0aW1lLmZyb21KU0RhdGUodmFsdWUpIDogRGF0ZVRpbWUuZnJvbUpTRGF0ZSh2YWx1ZSk7XG4gICAgICAgIH0gXG5cbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZVRpbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBpMThuID8gaTE4bi5kYXRldGltZS5mcm9tSVNPKHZhbHVlKSA6IERhdGVUaW1lLmZyb21JU08odmFsdWUsIHtzZXRab25lOiB0cnVlfSk7XG4gICAgICAgIH0gXG4gICAgICAgIFxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIGkxOG4gPyBpMThuLmRhdGV0aW1lLmZyb21NaWxsaXModmFsdWUpIDogRGF0ZVRpbWUuZnJvbU1pbGxpcyh2YWx1ZSk7XG4gICAgICAgIH0gXG4gICAgICAgIFxuICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGkxOG4gPyBpMThuLmRhdGV0aW1lLmZyb21PYmplY3QodmFsdWUpIDogRGF0ZVRpbWUuZnJvbU9iamVjdCh2YWx1ZSk7XG4gICAgICAgIH0gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBkYXRldGltZTogJHt2YWx1ZX1gKTtcbiAgICB9LFxuXG4gICAgZGVmYXVsdFZhbHVlOiAwLFxuXG4gICAgZ2VuZXJhdGU6IChpbmZvLCBpMThuKSA9PiBpMThuID8gaTE4bi5ub3coKSA6IERhdGVUaW1lLmxvY2FsKCksXG5cbiAgICBzZXJpYWxpemU6IHZhbHVlID0+IHZhbHVlLnRvSVNPKHsgaW5jbHVkZU9mZnNldDogZmFsc2UgfSksXG5cbiAgICBxdWFsaWZpZXJzOiBhbnkucXVhbGlmaWVycy5jb25jYXQoW1xuICAgICAgICAndGltZXpvbmUnLFxuICAgICAgICAnZGF0ZU9ubHknLFxuICAgICAgICAndGltZU9ubHknXG4gICAgXSlcbn07Il19