"use strict";

require("source-map-support/register");

const randomstring = require("randomstring");

const any = require('./any');

module.exports = {
  name: 'text',
  alias: ['string', 'char'],
  sanitize: (value, info, i18n) => value && (typeof value !== 'string' ? value.toString() : value).trim(),
  defaultValue: '',
  generate: (info, i18n) => {
    let randOpt = {};

    if (info.fixedLength) {
      randOpt.length = info.fixedLength;
    }

    if (info.maxLength) {
      randOpt.length = info.maxLength > 32 ? 32 : info.maxLength;
    }

    if (info.allowedChars) {
      randOpt.charset = info.allowedChars;
    }

    return randomstring.generate(randOpt);
  },
  serialize: value => value,
  qualifiers: any.qualifiers.concat(['fixedLength', 'maxLength', 'encoding', 'allowedChars'])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ydW50aW1lL3R5cGVzL3RleHQuanMiXSwibmFtZXMiOlsicmFuZG9tc3RyaW5nIiwicmVxdWlyZSIsImFueSIsIm1vZHVsZSIsImV4cG9ydHMiLCJuYW1lIiwiYWxpYXMiLCJzYW5pdGl6ZSIsInZhbHVlIiwiaW5mbyIsImkxOG4iLCJ0b1N0cmluZyIsInRyaW0iLCJkZWZhdWx0VmFsdWUiLCJnZW5lcmF0ZSIsInJhbmRPcHQiLCJmaXhlZExlbmd0aCIsImxlbmd0aCIsIm1heExlbmd0aCIsImFsbG93ZWRDaGFycyIsImNoYXJzZXQiLCJzZXJpYWxpemUiLCJxdWFsaWZpZXJzIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLFlBQVksR0FBR0MsT0FBTyxDQUFDLGNBQUQsQ0FBNUI7O0FBQ0EsTUFBTUMsR0FBRyxHQUFHRCxPQUFPLENBQUMsT0FBRCxDQUFuQjs7QUFFQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2JDLEVBQUFBLElBQUksRUFBRSxNQURPO0FBR2JDLEVBQUFBLEtBQUssRUFBRSxDQUFFLFFBQUYsRUFBWSxNQUFaLENBSE07QUFLYkMsRUFBQUEsUUFBUSxFQUFFLENBQUNDLEtBQUQsRUFBUUMsSUFBUixFQUFjQyxJQUFkLEtBQXVCRixLQUFLLElBQUksQ0FBQyxPQUFPQSxLQUFQLEtBQWlCLFFBQWpCLEdBQTRCQSxLQUFLLENBQUNHLFFBQU4sRUFBNUIsR0FBK0NILEtBQWhELEVBQXVESSxJQUF2RCxFQUw3QjtBQU9iQyxFQUFBQSxZQUFZLEVBQUUsRUFQRDtBQVNiQyxFQUFBQSxRQUFRLEVBQUUsQ0FBQ0wsSUFBRCxFQUFPQyxJQUFQLEtBQWdCO0FBQ3RCLFFBQUlLLE9BQU8sR0FBRyxFQUFkOztBQUVBLFFBQUlOLElBQUksQ0FBQ08sV0FBVCxFQUFzQjtBQUNsQkQsTUFBQUEsT0FBTyxDQUFDRSxNQUFSLEdBQWlCUixJQUFJLENBQUNPLFdBQXRCO0FBQ0g7O0FBRUQsUUFBSVAsSUFBSSxDQUFDUyxTQUFULEVBQW9CO0FBQ2hCSCxNQUFBQSxPQUFPLENBQUNFLE1BQVIsR0FBaUJSLElBQUksQ0FBQ1MsU0FBTCxHQUFpQixFQUFqQixHQUFzQixFQUF0QixHQUEyQlQsSUFBSSxDQUFDUyxTQUFqRDtBQUNIOztBQUVELFFBQUlULElBQUksQ0FBQ1UsWUFBVCxFQUF1QjtBQUNuQkosTUFBQUEsT0FBTyxDQUFDSyxPQUFSLEdBQWtCWCxJQUFJLENBQUNVLFlBQXZCO0FBQ0g7O0FBRUQsV0FBT25CLFlBQVksQ0FBQ2MsUUFBYixDQUFzQkMsT0FBdEIsQ0FBUDtBQUNILEdBekJZO0FBMkJiTSxFQUFBQSxTQUFTLEVBQUViLEtBQUssSUFBSUEsS0EzQlA7QUE2QmJjLEVBQUFBLFVBQVUsRUFBRXBCLEdBQUcsQ0FBQ29CLFVBQUosQ0FBZUMsTUFBZixDQUFzQixDQUM5QixhQUQ4QixFQUU5QixXQUY4QixFQUc5QixVQUg4QixFQUk5QixjQUo4QixDQUF0QjtBQTdCQyxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCByYW5kb21zdHJpbmcgPSByZXF1aXJlKFwicmFuZG9tc3RyaW5nXCIpO1xuY29uc3QgYW55ID0gcmVxdWlyZSgnLi9hbnknKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbmFtZTogJ3RleHQnLFxuXG4gICAgYWxpYXM6IFsgJ3N0cmluZycsICdjaGFyJyBdLFxuXG4gICAgc2FuaXRpemU6ICh2YWx1ZSwgaW5mbywgaTE4bikgPT4gdmFsdWUgJiYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgPyB2YWx1ZS50b1N0cmluZygpIDogdmFsdWUpLnRyaW0oKSxcblxuICAgIGRlZmF1bHRWYWx1ZTogJycsXG5cbiAgICBnZW5lcmF0ZTogKGluZm8sIGkxOG4pID0+IHtcbiAgICAgICAgbGV0IHJhbmRPcHQgPSB7fTtcblxuICAgICAgICBpZiAoaW5mby5maXhlZExlbmd0aCkge1xuICAgICAgICAgICAgcmFuZE9wdC5sZW5ndGggPSBpbmZvLmZpeGVkTGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZm8ubWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICByYW5kT3B0Lmxlbmd0aCA9IGluZm8ubWF4TGVuZ3RoID4gMzIgPyAzMiA6IGluZm8ubWF4TGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZm8uYWxsb3dlZENoYXJzKSB7XG4gICAgICAgICAgICByYW5kT3B0LmNoYXJzZXQgPSBpbmZvLmFsbG93ZWRDaGFycztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByYW5kb21zdHJpbmcuZ2VuZXJhdGUocmFuZE9wdCk7XG4gICAgfSwgIFxuXG4gICAgc2VyaWFsaXplOiB2YWx1ZSA9PiB2YWx1ZSxcblxuICAgIHF1YWxpZmllcnM6IGFueS5xdWFsaWZpZXJzLmNvbmNhdChbXG4gICAgICAgICdmaXhlZExlbmd0aCcsXG4gICAgICAgICdtYXhMZW5ndGgnLFxuICAgICAgICAnZW5jb2RpbmcnLFxuICAgICAgICAnYWxsb3dlZENoYXJzJ1xuICAgIF0pXG59OyJdfQ==