"use strict";

require("source-map-support/register");

const {
  Helpers: {
    withExpose,
    withName,
    withExtraInfo
  }
} = require('@k-suite/app');

const HttpCode = require('http-status-codes');

const withStatus = (Base, STATUS) => {
  var _temp;

  return _temp = class extends Base {
    constructor(...args) {
      super(...args);
      this.status = STATUS;
    }

  }, _temp;
};

class BusinessError extends withExpose(withExtraInfo(withName(Error))) {
  constructor(message, status, ...others) {
    if (arguments.length === 1 && typeof message === 'number') {
      super(HttpCode.getStatusText(message));
    } else {
      super(message, ...others);
    }

    this.status = status || HttpCode.BAD_REQUEST;
  }

}

class DataValidationError extends BusinessError {
  constructor(message, ...others) {
    super(message, HttpCode.BAD_REQUEST, ...others);
  }

}

class OolongUsageError extends withStatus(withExtraInfo(withName(Error)), HttpCode.INTERNAL_SERVER_ERROR) {}

class DsOperationError extends withStatus(withExtraInfo(withName(Error)), HttpCode.INTERNAL_SERVER_ERROR) {}

module.exports = {
  DataValidationError,
  OolongUsageError,
  DsOperationError,
  BusinessError
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydW50aW1lL0Vycm9ycy5qcyJdLCJuYW1lcyI6WyJIZWxwZXJzIiwid2l0aEV4cG9zZSIsIndpdGhOYW1lIiwid2l0aEV4dHJhSW5mbyIsInJlcXVpcmUiLCJIdHRwQ29kZSIsIndpdGhTdGF0dXMiLCJCYXNlIiwiU1RBVFVTIiwic3RhdHVzIiwiQnVzaW5lc3NFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwib3RoZXJzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZ2V0U3RhdHVzVGV4dCIsIkJBRF9SRVFVRVNUIiwiRGF0YVZhbGlkYXRpb25FcnJvciIsIk9vbG9uZ1VzYWdlRXJyb3IiLCJJTlRFUk5BTF9TRVJWRVJfRVJST1IiLCJEc09wZXJhdGlvbkVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNO0FBQUVBLEVBQUFBLE9BQU8sRUFBRTtBQUFFQyxJQUFBQSxVQUFGO0FBQWNDLElBQUFBLFFBQWQ7QUFBd0JDLElBQUFBO0FBQXhCO0FBQVgsSUFBdURDLE9BQU8sQ0FBQyxjQUFELENBQXBFOztBQUNBLE1BQU1DLFFBQVEsR0FBR0QsT0FBTyxDQUFDLG1CQUFELENBQXhCOztBQVFBLE1BQU1FLFVBQVUsR0FBRyxDQUFDQyxJQUFELEVBQU9DLE1BQVA7QUFBQTs7QUFBQSxpQkFBa0IsY0FBY0QsSUFBZCxDQUFtQjtBQUFBO0FBQUE7QUFBQSxXQUtwREUsTUFMb0QsR0FLM0NELE1BTDJDO0FBQUE7O0FBQUEsR0FBckM7QUFBQSxDQUFuQjs7QUFlQSxNQUFNRSxhQUFOLFNBQTRCVCxVQUFVLENBQUNFLGFBQWEsQ0FBQ0QsUUFBUSxDQUFDUyxLQUFELENBQVQsQ0FBZCxDQUF0QyxDQUF1RTtBQUNuRUMsRUFBQUEsV0FBVyxDQUFDQyxPQUFELEVBQVVKLE1BQVYsRUFBa0IsR0FBR0ssTUFBckIsRUFBNkI7QUFDcEMsUUFBSUMsU0FBUyxDQUFDQyxNQUFWLEtBQXFCLENBQXJCLElBQTBCLE9BQU9ILE9BQVAsS0FBbUIsUUFBakQsRUFBMkQ7QUFDdkQsWUFBTVIsUUFBUSxDQUFDWSxhQUFULENBQXVCSixPQUF2QixDQUFOO0FBQ0gsS0FGRCxNQUVPO0FBQ0gsWUFBTUEsT0FBTixFQUFlLEdBQUdDLE1BQWxCO0FBQ0g7O0FBRUQsU0FBS0wsTUFBTCxHQUFjQSxNQUFNLElBQUlKLFFBQVEsQ0FBQ2EsV0FBakM7QUFDSDs7QUFUa0U7O0FBa0J2RSxNQUFNQyxtQkFBTixTQUFrQ1QsYUFBbEMsQ0FBZ0Q7QUFDNUNFLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVLEdBQUdDLE1BQWIsRUFBcUI7QUFDNUIsVUFBTUQsT0FBTixFQUFlUixRQUFRLENBQUNhLFdBQXhCLEVBQXFDLEdBQUdKLE1BQXhDO0FBQ0g7O0FBSDJDOztBQVloRCxNQUFNTSxnQkFBTixTQUErQmQsVUFBVSxDQUFDSCxhQUFhLENBQUNELFFBQVEsQ0FBQ1MsS0FBRCxDQUFULENBQWQsRUFBaUNOLFFBQVEsQ0FBQ2dCLHFCQUExQyxDQUF6QyxDQUEwRzs7QUFVMUcsTUFBTUMsZ0JBQU4sU0FBK0JoQixVQUFVLENBQUNILGFBQWEsQ0FBQ0QsUUFBUSxDQUFDUyxLQUFELENBQVQsQ0FBZCxFQUFpQ04sUUFBUSxDQUFDZ0IscUJBQTFDLENBQXpDLENBQTBHOztBQUcxR0UsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2JMLEVBQUFBLG1CQURhO0FBRWJDLEVBQUFBLGdCQUZhO0FBR2JFLEVBQUFBLGdCQUhhO0FBSWJaLEVBQUFBO0FBSmEsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgeyBIZWxwZXJzOiB7IHdpdGhFeHBvc2UsIHdpdGhOYW1lLCB3aXRoRXh0cmFJbmZvIH0gfSA9IHJlcXVpcmUoJ0BrLXN1aXRlL2FwcCcpO1xuY29uc3QgSHR0cENvZGUgPSByZXF1aXJlKCdodHRwLXN0YXR1cy1jb2RlcycpO1xuXG4vKipcbiAqIEFkZHMgYSBzdGF0dXMgcHJvcGVydHkgdG8gdGhlIGNsYXNzLlxuICogQG1peGluXG4gKiBAcGFyYW0geyp9IEJhc2UgXG4gKiBAcGFyYW0geyp9IFNUQVRVUyBcbiAqL1xuY29uc3Qgd2l0aFN0YXR1cyA9IChCYXNlLCBTVEFUVVMpID0+IGNsYXNzIGV4dGVuZHMgQmFzZSB7XG4gICAgLyoqXG4gICAgICogU3RhdHVzIGNvZGUuXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHN0YXR1cyA9IFNUQVRVUztcbn07XG5cbi8qKlxuICogRXhwZWN0ZWQgYnVzaW5lc3MgZXJyb3JzIHVwb24gd3JvbmcgcmVxdWVzdC5cbiAqIEBjbGFzcyBFcnJvcnM6QnVzaW5lc3NFcnJvclxuICogQGV4dGVuZHMgRXJyb3JcbiAqIEBtaXhlcyB3aXRoTmFtZVxuICogQG1peGVzIHdpdGhFeHRyYUluZm9cbiAqL1xuY2xhc3MgQnVzaW5lc3NFcnJvciBleHRlbmRzIHdpdGhFeHBvc2Uod2l0aEV4dHJhSW5mbyh3aXRoTmFtZShFcnJvcikpKSB7ICAgIFxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHN0YXR1cywgLi4ub3RoZXJzKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBtZXNzYWdlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgc3VwZXIoSHR0cENvZGUuZ2V0U3RhdHVzVGV4dChtZXNzYWdlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdXBlcihtZXNzYWdlLCAuLi5vdGhlcnMpO1xuICAgICAgICB9ICAgICAgICBcblxuICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cyB8fCBIdHRwQ29kZS5CQURfUkVRVUVTVDtcbiAgICB9XG59XG5cbi8qKlxuICogRXJyb3JzIGNhdXNlZCBieSBmYWlsaW5nIHRvIHBhc3MgaW5wdXQgdmFsaWRhdGlvblxuICogQGNsYXNzIEVycm9yczpEYXRhVmFsaWRhdGlvbkVycm9yXG4gKiBAZXh0ZW5kcyBFcnJvclxuICogQG1peGVzIHdpdGhOYW1lXG4gKi9cbmNsYXNzIERhdGFWYWxpZGF0aW9uRXJyb3IgZXh0ZW5kcyBCdXNpbmVzc0Vycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCAuLi5vdGhlcnMpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgSHR0cENvZGUuQkFEX1JFUVVFU1QsIC4uLm90aGVycyk7XG4gICAgfVxufVxuXG4vKipcbiAqIEVycm9ycyBjYXVzZWQgYnkgd3JvbmdseSB1c2FnZSBwYXR0ZXJucywgZS5nLiBjYWxsZWQgd2l0aCBpbnZhbGlkIG9wdGlvbnMuXG4gKiBAY2xhc3MgRXJyb3JzOk9vbG9uZ1VzYWdlRXJyb3JcbiAqIEBleHRlbmRzIEVycm9yXG4gKiBAbWl4ZXMgd2l0aE5hbWVcbiAqL1xuY2xhc3MgT29sb25nVXNhZ2VFcnJvciBleHRlbmRzIHdpdGhTdGF0dXMod2l0aEV4dHJhSW5mbyh3aXRoTmFtZShFcnJvcikpLCBIdHRwQ29kZS5JTlRFUk5BTF9TRVJWRVJfRVJST1IpIHtcbn1cblxuLyoqXG4gKiBFcnJvcnMgb2NjdXJyZWQgZHVyaW5nIHBlcmZvcm1pbmcgb3BlcmF0aW9ucyBhZ2FpbnN0IGEgZGF0YSBzb3VyY2UuXG4gKiBAY2xhc3MgRXJyb3JzOkRzT3BlcmF0aW9uRXJyb3JcbiAqIEBleHRlbmRzIEVycm9yXG4gKiBAbWl4ZXMgd2l0aE5hbWVcbiAqIEBtaXhlcyB3aXRoRXh0cmFJbmZvXG4gKi9cbmNsYXNzIERzT3BlcmF0aW9uRXJyb3IgZXh0ZW5kcyB3aXRoU3RhdHVzKHdpdGhFeHRyYUluZm8od2l0aE5hbWUoRXJyb3IpKSwgSHR0cENvZGUuSU5URVJOQUxfU0VSVkVSX0VSUk9SKSB7ICAgIFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBEYXRhVmFsaWRhdGlvbkVycm9yLFxuICAgIE9vbG9uZ1VzYWdlRXJyb3IsXG4gICAgRHNPcGVyYXRpb25FcnJvcixcbiAgICBCdXNpbmVzc0Vycm9yXG59OyJdfQ==