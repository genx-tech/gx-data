"use strict";

require("source-map-support/register");

const Rules = require('../../enum/Rules');

const Generators = require('../Generators');

module.exports = {
  [Rules.RULE_AFTER_VALIDATION]: (feature, entityModel, context) => {
    feature.forEach(featureItem => {
      if (featureItem.field in context.latest) {
        let targetState = context.latest[featureItem.field];
        let timestampFieldName = featureItem.stateMapping[targetState];

        if (!timestampFieldName) {
          throw new Error(`State "${targetState}" is not one of the pre-defined states of field "${featureItem.field}" of entity "${entityModel.meta.name}".`);
        }

        context.latest[timestampFieldName] = Generators.default(entityModel.meta.fields[timestampFieldName], context.i18n);
      }
    });
    return true;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ydW50aW1lL2VudGl0eUZlYXR1cmVzL3N0YXRlVHJhY2tpbmcuanMiXSwibmFtZXMiOlsiUnVsZXMiLCJyZXF1aXJlIiwiR2VuZXJhdG9ycyIsIm1vZHVsZSIsImV4cG9ydHMiLCJSVUxFX0FGVEVSX1ZBTElEQVRJT04iLCJmZWF0dXJlIiwiZW50aXR5TW9kZWwiLCJjb250ZXh0IiwiZm9yRWFjaCIsImZlYXR1cmVJdGVtIiwiZmllbGQiLCJsYXRlc3QiLCJ0YXJnZXRTdGF0ZSIsInRpbWVzdGFtcEZpZWxkTmFtZSIsInN0YXRlTWFwcGluZyIsIkVycm9yIiwibWV0YSIsIm5hbWUiLCJkZWZhdWx0IiwiZmllbGRzIiwiaTE4biJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxrQkFBRCxDQUFyQjs7QUFDQSxNQUFNQyxVQUFVLEdBQUdELE9BQU8sQ0FBQyxlQUFELENBQTFCOztBQU9BRSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDYixHQUFDSixLQUFLLENBQUNLLHFCQUFQLEdBQStCLENBQUNDLE9BQUQsRUFBVUMsV0FBVixFQUF1QkMsT0FBdkIsS0FBbUM7QUFDOURGLElBQUFBLE9BQU8sQ0FBQ0csT0FBUixDQUFnQkMsV0FBVyxJQUFJO0FBQzNCLFVBQUlBLFdBQVcsQ0FBQ0MsS0FBWixJQUFxQkgsT0FBTyxDQUFDSSxNQUFqQyxFQUF5QztBQUNyQyxZQUFJQyxXQUFXLEdBQUdMLE9BQU8sQ0FBQ0ksTUFBUixDQUFlRixXQUFXLENBQUNDLEtBQTNCLENBQWxCO0FBQ0EsWUFBSUcsa0JBQWtCLEdBQUdKLFdBQVcsQ0FBQ0ssWUFBWixDQUF5QkYsV0FBekIsQ0FBekI7O0FBQ0EsWUFBSSxDQUFDQyxrQkFBTCxFQUF5QjtBQUNyQixnQkFBTSxJQUFJRSxLQUFKLENBQVcsVUFBU0gsV0FBWSxvREFBbURILFdBQVcsQ0FBQ0MsS0FBTSxnQkFBZUosV0FBVyxDQUFDVSxJQUFaLENBQWlCQyxJQUFLLElBQTFJLENBQU47QUFDSDs7QUFDRFYsUUFBQUEsT0FBTyxDQUFDSSxNQUFSLENBQWVFLGtCQUFmLElBQXFDWixVQUFVLENBQUNpQixPQUFYLENBQW1CWixXQUFXLENBQUNVLElBQVosQ0FBaUJHLE1BQWpCLENBQXdCTixrQkFBeEIsQ0FBbkIsRUFBZ0VOLE9BQU8sQ0FBQ2EsSUFBeEUsQ0FBckM7QUFDSDtBQUNKLEtBVEQ7QUFXQSxXQUFPLElBQVA7QUFDSDtBQWRZLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IFJ1bGVzID0gcmVxdWlyZSgnLi4vLi4vZW51bS9SdWxlcycpO1xuY29uc3QgR2VuZXJhdG9ycyA9IHJlcXVpcmUoJy4uL0dlbmVyYXRvcnMnKTtcblxuLyoqXG4gKiBBIHJ1bGUgc3BlY2lmaWVzIHRoZSBjaGFuZ2Ugb2Ygc3RhdGUgd2lsbCBiZSB0cmFja2VkIGF1dG9tYXRpY2FsbHkuXG4gKiBAbW9kdWxlIEVudGl0eUZlYXR1cmVSdW50aW1lX1N0YXRlVHJhY2tpbmdcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBbUnVsZXMuUlVMRV9BRlRFUl9WQUxJREFUSU9OXTogKGZlYXR1cmUsIGVudGl0eU1vZGVsLCBjb250ZXh0KSA9PiB7XG4gICAgICAgIGZlYXR1cmUuZm9yRWFjaChmZWF0dXJlSXRlbSA9PiB7XG4gICAgICAgICAgICBpZiAoZmVhdHVyZUl0ZW0uZmllbGQgaW4gY29udGV4dC5sYXRlc3QpIHtcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0U3RhdGUgPSBjb250ZXh0LmxhdGVzdFtmZWF0dXJlSXRlbS5maWVsZF07XG4gICAgICAgICAgICAgICAgbGV0IHRpbWVzdGFtcEZpZWxkTmFtZSA9IGZlYXR1cmVJdGVtLnN0YXRlTWFwcGluZ1t0YXJnZXRTdGF0ZV07XG4gICAgICAgICAgICAgICAgaWYgKCF0aW1lc3RhbXBGaWVsZE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTdGF0ZSBcIiR7dGFyZ2V0U3RhdGV9XCIgaXMgbm90IG9uZSBvZiB0aGUgcHJlLWRlZmluZWQgc3RhdGVzIG9mIGZpZWxkIFwiJHtmZWF0dXJlSXRlbS5maWVsZH1cIiBvZiBlbnRpdHkgXCIke2VudGl0eU1vZGVsLm1ldGEubmFtZX1cIi5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGV4dC5sYXRlc3RbdGltZXN0YW1wRmllbGROYW1lXSA9IEdlbmVyYXRvcnMuZGVmYXVsdChlbnRpdHlNb2RlbC5tZXRhLmZpZWxkc1t0aW1lc3RhbXBGaWVsZE5hbWVdLCBjb250ZXh0LmkxOG4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTsgICAgICAgIFxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn07Il19