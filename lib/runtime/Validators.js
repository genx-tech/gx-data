"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  _
} = Util;

const {
  isNothing
} = require('../utils/lang');

const validator = require('validator');

module.exports = _.pick(validator, ['equals', 'contains', 'matches', 'isEmail', 'isURL', 'isMACAddress', 'isIP', 'isFQDN', 'isBoolean', 'isAlpha', 'isAlphanumeric', 'isNumeric', 'isPort', 'isLowercase', 'isUppercase', 'isAscii', 'isFullWidth', 'isHalfWidth', 'isVariableWidth', 'isMultibyte', 'isSurrogatePair', 'isInt', 'isFloat', 'isDecimal', 'isHexadecimal', 'isDivisibleBy', 'isHexColor', 'isISRC', 'isMD5', 'isHash', 'isJSON', 'isEmpty', 'isLength', 'isByteLength', 'isUUID', 'isMongoId', 'isAfter', 'isBefore', 'isIn', 'isCreditCard', 'isISIN', 'isISBN', 'isISSN', 'isMobilePhone', 'isPostalCode', 'isCurrency', 'isISO8601', 'isISO31661Alpha2', 'isBase64', 'isDataURI', 'isMimeType', 'isLatLong']);
const RE_PHONE = /^((\+|00)\d+)?(\(\d+\))?((\ |-)?\d+)*$/;

module.exports.isPhone = function (value) {
  return RE_PHONE.test(value);
};

module.exports.min = function (value, minValue) {
  return value >= minValue;
};

module.exports.max = function (value, maxValue) {
  return value <= maxValue;
};

module.exports.gt = function (value, minValue) {
  return value > minValue;
};

module.exports.lt = function (value, maxValue) {
  return value < maxValue;
};

module.exports.maxLength = function (value, maxLength) {
  return value.length <= maxLength;
};

module.exports.notNull = function (value) {
  return !isNothing(value);
};

module.exports.notNullIf = function (value, condition) {
  return !condition || !isNothing(value);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydW50aW1lL1ZhbGlkYXRvcnMuanMiXSwibmFtZXMiOlsiVXRpbCIsInJlcXVpcmUiLCJfIiwiaXNOb3RoaW5nIiwidmFsaWRhdG9yIiwibW9kdWxlIiwiZXhwb3J0cyIsInBpY2siLCJSRV9QSE9ORSIsImlzUGhvbmUiLCJ2YWx1ZSIsInRlc3QiLCJtaW4iLCJtaW5WYWx1ZSIsIm1heCIsIm1heFZhbHVlIiwiZ3QiLCJsdCIsIm1heExlbmd0aCIsImxlbmd0aCIsIm5vdE51bGwiLCJub3ROdWxsSWYiLCJjb25kaXRpb24iXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBUUYsSUFBZDs7QUFDQSxNQUFNO0FBQUVHLEVBQUFBO0FBQUYsSUFBZ0JGLE9BQU8sQ0FBQyxlQUFELENBQTdCOztBQUVBLE1BQU1HLFNBQVMsR0FBR0gsT0FBTyxDQUFDLFdBQUQsQ0FBekI7O0FBRUFJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkosQ0FBQyxDQUFDSyxJQUFGLENBQU9ILFNBQVAsRUFBa0IsQ0FDL0IsUUFEK0IsRUFFL0IsVUFGK0IsRUFHL0IsU0FIK0IsRUFJL0IsU0FKK0IsRUFLL0IsT0FMK0IsRUFNL0IsY0FOK0IsRUFPL0IsTUFQK0IsRUFRL0IsUUFSK0IsRUFTL0IsV0FUK0IsRUFVL0IsU0FWK0IsRUFXL0IsZ0JBWCtCLEVBWS9CLFdBWitCLEVBYS9CLFFBYitCLEVBYy9CLGFBZCtCLEVBZS9CLGFBZitCLEVBZ0IvQixTQWhCK0IsRUFpQi9CLGFBakIrQixFQWtCL0IsYUFsQitCLEVBbUIvQixpQkFuQitCLEVBb0IvQixhQXBCK0IsRUFxQi9CLGlCQXJCK0IsRUFzQi9CLE9BdEIrQixFQXVCL0IsU0F2QitCLEVBd0IvQixXQXhCK0IsRUF5Qi9CLGVBekIrQixFQTBCL0IsZUExQitCLEVBMkIvQixZQTNCK0IsRUE0Qi9CLFFBNUIrQixFQTZCL0IsT0E3QitCLEVBOEIvQixRQTlCK0IsRUErQi9CLFFBL0IrQixFQWdDL0IsU0FoQytCLEVBaUMvQixVQWpDK0IsRUFrQy9CLGNBbEMrQixFQW1DL0IsUUFuQytCLEVBb0MvQixXQXBDK0IsRUFxQy9CLFNBckMrQixFQXNDL0IsVUF0QytCLEVBdUMvQixNQXZDK0IsRUF3Qy9CLGNBeEMrQixFQXlDL0IsUUF6QytCLEVBMEMvQixRQTFDK0IsRUEyQy9CLFFBM0MrQixFQTRDL0IsZUE1QytCLEVBNkMvQixjQTdDK0IsRUE4Qy9CLFlBOUMrQixFQStDL0IsV0EvQytCLEVBZ0QvQixrQkFoRCtCLEVBaUQvQixVQWpEK0IsRUFrRC9CLFdBbEQrQixFQW1EL0IsWUFuRCtCLEVBb0QvQixXQXBEK0IsQ0FBbEIsQ0FBakI7QUF1REEsTUFBTUksUUFBUSxHQUFHLHdDQUFqQjs7QUFFQUgsTUFBTSxDQUFDQyxPQUFQLENBQWVHLE9BQWYsR0FBeUIsVUFBVUMsS0FBVixFQUFpQjtBQUN0QyxTQUFPRixRQUFRLENBQUNHLElBQVQsQ0FBY0QsS0FBZCxDQUFQO0FBQ0gsQ0FGRDs7QUFJQUwsTUFBTSxDQUFDQyxPQUFQLENBQWVNLEdBQWYsR0FBcUIsVUFBVUYsS0FBVixFQUFpQkcsUUFBakIsRUFBMkI7QUFDNUMsU0FBT0gsS0FBSyxJQUFJRyxRQUFoQjtBQUNILENBRkQ7O0FBSUFSLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlUSxHQUFmLEdBQXFCLFVBQVVKLEtBQVYsRUFBaUJLLFFBQWpCLEVBQTJCO0FBQzVDLFNBQU9MLEtBQUssSUFBSUssUUFBaEI7QUFDSCxDQUZEOztBQUlBVixNQUFNLENBQUNDLE9BQVAsQ0FBZVUsRUFBZixHQUFvQixVQUFVTixLQUFWLEVBQWlCRyxRQUFqQixFQUEyQjtBQUMzQyxTQUFPSCxLQUFLLEdBQUdHLFFBQWY7QUFDSCxDQUZEOztBQUlBUixNQUFNLENBQUNDLE9BQVAsQ0FBZVcsRUFBZixHQUFvQixVQUFVUCxLQUFWLEVBQWlCSyxRQUFqQixFQUEyQjtBQUMzQyxTQUFPTCxLQUFLLEdBQUdLLFFBQWY7QUFDSCxDQUZEOztBQUlBVixNQUFNLENBQUNDLE9BQVAsQ0FBZVksU0FBZixHQUEyQixVQUFVUixLQUFWLEVBQWlCUSxTQUFqQixFQUE0QjtBQUNuRCxTQUFPUixLQUFLLENBQUNTLE1BQU4sSUFBZ0JELFNBQXZCO0FBQ0gsQ0FGRDs7QUFJQWIsTUFBTSxDQUFDQyxPQUFQLENBQWVjLE9BQWYsR0FBeUIsVUFBVVYsS0FBVixFQUFpQjtBQUN0QyxTQUFPLENBQUNQLFNBQVMsQ0FBQ08sS0FBRCxDQUFqQjtBQUNILENBRkQ7O0FBSUFMLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlZSxTQUFmLEdBQTJCLFVBQVVYLEtBQVYsRUFBaUJZLFNBQWpCLEVBQTRCO0FBQ25ELFNBQU8sQ0FBQ0EsU0FBRCxJQUFjLENBQUNuQixTQUFTLENBQUNPLEtBQUQsQ0FBL0I7QUFDSCxDQUZEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IFV0aWwgPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyBfIH0gPSBVdGlsO1xuY29uc3QgeyBpc05vdGhpbmcgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL2xhbmcnKTtcblxuY29uc3QgdmFsaWRhdG9yID0gcmVxdWlyZSgndmFsaWRhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gXy5waWNrKHZhbGlkYXRvciwgWyBcbiAgICAnZXF1YWxzJyxcbiAgICAnY29udGFpbnMnLFxuICAgICdtYXRjaGVzJyxcbiAgICAnaXNFbWFpbCcsXG4gICAgJ2lzVVJMJyxcbiAgICAnaXNNQUNBZGRyZXNzJyxcbiAgICAnaXNJUCcsXG4gICAgJ2lzRlFETicsXG4gICAgJ2lzQm9vbGVhbicsXG4gICAgJ2lzQWxwaGEnLFxuICAgICdpc0FscGhhbnVtZXJpYycsXG4gICAgJ2lzTnVtZXJpYycsXG4gICAgJ2lzUG9ydCcsXG4gICAgJ2lzTG93ZXJjYXNlJyxcbiAgICAnaXNVcHBlcmNhc2UnLFxuICAgICdpc0FzY2lpJyxcbiAgICAnaXNGdWxsV2lkdGgnLFxuICAgICdpc0hhbGZXaWR0aCcsXG4gICAgJ2lzVmFyaWFibGVXaWR0aCcsXG4gICAgJ2lzTXVsdGlieXRlJyxcbiAgICAnaXNTdXJyb2dhdGVQYWlyJyxcbiAgICAnaXNJbnQnLFxuICAgICdpc0Zsb2F0JyxcbiAgICAnaXNEZWNpbWFsJyxcbiAgICAnaXNIZXhhZGVjaW1hbCcsXG4gICAgJ2lzRGl2aXNpYmxlQnknLFxuICAgICdpc0hleENvbG9yJyxcbiAgICAnaXNJU1JDJyxcbiAgICAnaXNNRDUnLFxuICAgICdpc0hhc2gnLFxuICAgICdpc0pTT04nLFxuICAgICdpc0VtcHR5JyxcbiAgICAnaXNMZW5ndGgnLFxuICAgICdpc0J5dGVMZW5ndGgnLFxuICAgICdpc1VVSUQnLFxuICAgICdpc01vbmdvSWQnLFxuICAgICdpc0FmdGVyJyxcbiAgICAnaXNCZWZvcmUnLFxuICAgICdpc0luJyxcbiAgICAnaXNDcmVkaXRDYXJkJyxcbiAgICAnaXNJU0lOJyxcbiAgICAnaXNJU0JOJyxcbiAgICAnaXNJU1NOJyxcbiAgICAnaXNNb2JpbGVQaG9uZScsXG4gICAgJ2lzUG9zdGFsQ29kZScsXG4gICAgJ2lzQ3VycmVuY3knLFxuICAgICdpc0lTTzg2MDEnLFxuICAgICdpc0lTTzMxNjYxQWxwaGEyJyxcbiAgICAnaXNCYXNlNjQnLFxuICAgICdpc0RhdGFVUkknLFxuICAgICdpc01pbWVUeXBlJyxcbiAgICAnaXNMYXRMb25nJ1xuXSk7XG5cbmNvbnN0IFJFX1BIT05FID0gL14oKFxcK3wwMClcXGQrKT8oXFwoXFxkK1xcKSk/KChcXCB8LSk/XFxkKykqJC87XG5cbm1vZHVsZS5leHBvcnRzLmlzUGhvbmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gUkVfUEhPTkUudGVzdCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzLm1pbiA9IGZ1bmN0aW9uICh2YWx1ZSwgbWluVmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPj0gbWluVmFsdWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5tYXggPSBmdW5jdGlvbiAodmFsdWUsIG1heFZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIDw9IG1heFZhbHVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMuZ3QgPSBmdW5jdGlvbiAodmFsdWUsIG1pblZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID4gbWluVmFsdWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5sdCA9IGZ1bmN0aW9uICh2YWx1ZSwgbWF4VmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPCBtYXhWYWx1ZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLm1heExlbmd0aCA9IGZ1bmN0aW9uICh2YWx1ZSwgbWF4TGVuZ3RoKSB7XG4gICAgcmV0dXJuIHZhbHVlLmxlbmd0aCA8PSBtYXhMZW5ndGg7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5ub3ROdWxsID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuICFpc05vdGhpbmcodmFsdWUpO1xufTtcblxubW9kdWxlLmV4cG9ydHMubm90TnVsbElmID0gZnVuY3Rpb24gKHZhbHVlLCBjb25kaXRpb24pIHtcbiAgICByZXR1cm4gIWNvbmRpdGlvbiB8fCAhaXNOb3RoaW5nKHZhbHVlKTtcbn07Il19