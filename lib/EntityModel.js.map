{"version":3,"sources":["../src/EntityModel.js"],"names":["HttpCode","require","_","eachAsync_","Errors","Generators","Convertors","Types","ValidationError","DatabaseError","InvalidArgument","Features","Rules","isNothing","hasValueIn","JES","NEED_OVERRIDE","minifyAssocs","assocs","sorted","uniq","sort","reverse","minified","take","l","length","i","k","find","a","startsWith","push","oorTypesToBypass","Set","EntityModel","constructor","rawData","Object","assign","valueOfKey","data","meta","keyField","fieldSchema","name","extra","fields","schema","omit","$addEnumValues","others","type","ENUM","values","concat","inputSchema","inputSetName","options","key","JSON","stringify","_cachedSchema","cache","schemaGenerator","db","assocFrom","extraArray","result","forEach","keyPath","keyNodes","split","assoc","slice","join","add","Array","from","getUniqueKeyFieldsFrom","uniqueKeys","every","f","isNil","getUniqueKeyValuePairsFrom","ukFields","pick","getNestedObject","entityObj","defaultValue","nodes","isArray","map","get","ensureFields_","connOpts","field","has","uk","isEmpty","UnexpectedState","findOptions","$query","$association","findOne_","ensureRetrieveCreated","context","customOptions","$retrieveCreated","ensureRetrieveUpdated","$retrieveUpdated","ensureRetrieveDeleted","$retrieveDeleted","ensureTransaction_","connOptions","connection","connector","beginTransaction_","getValueFromContext","cached_","associations","combinedKey","cachedData","_cachedData","findAll_","$toDictionary","toDictionary","entityCollection","transformer","toKVPairs","rawOptions","_prepareQueries","op","applyRules_","RULE_BEFORE_FIND","_safeExecute_","records","find_","$retrieveDbResult","$result","$relationships","$skipOrm","undefined","_mapRecordsToObjects","$nestedKeyGetter","log","entity","$transformer","evaluate","totalCount","rows","$totalCount","afterFindAll_","row","ret","totalItems","items","$offset","offset","$limit","limit","retryCreateOnDuplicate_","dataGenerator_","maxRery","createOptions","counter","errorRet","create_","error","code","raw","references","_extractAssociations","beforeCreate_","return","success","_populateReferences_","needCreateAssocs","_createAssocs_","_prepareEntityData_","RULE_BEFORE_CREATE","_internalBeforeCreate_","$dryRun","$upsert","upsertOne_","latest","_fillResult","insertId","affectedRows","_internalAfterCreate_","queryKey","RULE_AFTER_CREATE","afterCreate_","updateOne_","updateOptions","$bypassReadOnly","reason","_update_","updateMany_","forSingleRecord","conditionFields","toUpdate","beforeUpdate_","beforeUpdateMany_","needUpdateAssocs","doneUpdateAssocs","_updateAssocs_","RULE_BEFORE_UPDATE","_internalBeforeUpdate_","_internalBeforeUpdateMany_","otherOptions","update_","_internalAfterUpdate_","_internalAfterUpdateMany_","RULE_AFTER_UPDATE","afterUpdate_","afterUpdateMany_","replaceOne_","_doReplaceOne_","deleteOne_","deleteOptions","_delete_","deleteMany_","deleteAll_","$deleteAll","toDelete","beforeDelete_","beforeDeleteMany_","deletedCount","RULE_BEFORE_DELETE","_internalBeforeDelete_","_internalBeforeDeleteMany_","delete_","_internalAfterDelete_","_internalAfterDeleteMany_","RULE_AFTER_DELETE","afterDelete_","afterDeleteMany_","_containsUniqueKey","hasKeyNameOnly","hasNotNullKey","hasKeys","_ensureContainsUniqueKey","condition","containsUniqueKeyAndValue","containsUniqueKeyOnly","isUpdating","i18n","existing","$existing","opOptions","_dependsOnExistingData","$retrieveExisting","RULE_BEFORE_VALIDATION","fieldInfo","fieldName","value","useRaw","readOnly","$migration","freezeAfterNonDefault","Error","default","optional","isPlainObject","oorType","sanitize","stack","forceUpdate","updateByDb","hasActivator","auto","createByDb","_translateValue","$variables","RULE_AFTER_VALIDATION","$skipModifiers","applyModifiers_","mapValues","$requireSplitColumns","_serializeByTypeInfo","executor","bind","commit_","message","latestData","rollback_","_dependencyChanged","fieldDependencies","deps","d","reference","hasIn","_referenceExist","input","ref","pos","indexOf","substr","hasDepends","nullDepends","dep","whenNull","atLeastOneNotNull","features","_hasReservedKeys","obj","v","keyFields","normalizedOptions","query","forOwn","$bypassEnsureUnique","$groupBy","having","$projection","_prepareAssociations","inputKeyField","_translateSymbolToken","info","variables","skipTypeCast","arrayToInOperator","session","errArgs","missingMessage","missingStatus","BAD_REQUEST","$in","typeCast","module","exports"],"mappings":"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","sourcesContent":["const { HttpCode } = require('@genx/error');\nconst { _, eachAsync_ } = require('@genx/july');\nconst Errors = require('./utils/Errors');\nconst Generators = require('./Generators');\nconst Convertors = require('./Convertors');\nconst Types = require('./types');\nconst { ValidationError, DatabaseError, InvalidArgument } = Errors;\nconst Features = require('./entityFeatures');\nconst Rules = require('./enum/Rules');\n\nconst { isNothing, hasValueIn } = require('./utils/lang');\nconst JES = require('@genx/jes');\n\nconst NEED_OVERRIDE = 'Should be overrided by driver-specific subclass.';\n\nfunction minifyAssocs(assocs) {\n    const sorted = _.uniq(assocs).sort().reverse();\n\n    const minified = _.take(sorted, 1);\n    const l = sorted.length - 1;\n\n    for (let i = 1; i < l; i++) {\n        const k = sorted[i] + '.';\n\n        if (!_.find(minified, (a) => a.startsWith(k))) {\n            minified.push(sorted[i]);\n        }\n    }\n\n    return minified;\n}\n\nconst oorTypesToBypass = new Set([\n    'ColumnReference',\n    'Function',\n    'BinaryExpression',\n    'DataSet',\n    'SQL',\n]);\n\n/**\n * Base entity model class.\n * @class\n */\nclass EntityModel {\n    /**\n     * @param {Object} [rawData] - Raw data object\n     */\n    constructor(rawData) {\n        if (rawData) {\n            // only pick those that are fields of this entity\n            Object.assign(this, rawData);\n        }\n    }\n\n    static valueOfKey(data) {\n        return data[this.meta.keyField];\n    }\n\n    /**\n     * Get a field schema based on the metadata of the field.\n     * @param {string} name - Field name\n     * @param {object} [extra] - Extra schema options\n     * @return {object} Schema object\n     */\n    static fieldSchema(name, extra) {\n        const meta = this.meta.fields[name];\n        if (!meta) {\n            throw new InvalidArgument(\n                `Unknown field \"${name}\" of entity \"${this.meta.name}\".`\n            );\n        }\n\n        const schema = _.omit(meta, ['default']);\n        if (extra) {\n            const { $addEnumValues, ...others } = extra;\n            if (meta.type === Types.ENUM.name && $addEnumValues) {\n                schema.values = schema.values.concat($addEnumValues);\n            } \n\n            Object.assign(schema, others);\n        }\n\n        return schema;\n    }\n\n    /**\n     * Get a map of fields schema by predefined input set.\n     * @param {string} inputSetName - Input set name, predefined in geml\n     * @param {object} [options] - Input set options\n     * @return {object} Schema object\n     */\n    static inputSchema(inputSetName, options) {\n        const key =\n            inputSetName + (options == null ? '{}' : JSON.stringify(options));\n\n        if (this._cachedSchema) {\n            const cache = this._cachedSchema[key];\n            if (cache) {\n                return cache;\n            }\n        } else {\n            this._cachedSchema = {};\n        }\n\n        const schemaGenerator = this.db.require(\n            `inputs/${this.meta.name}-${inputSetName}`\n        );\n\n        return (this._cachedSchema[key] = schemaGenerator(options));\n    }\n\n    /**\n     * Helper to combine explicit required associations and associations required by query fields or projection fields.\n     * @param {*} extraArray \n     * @param {*} fields \n     * @returns {Array}\n     */\n    static assocFrom(extraArray, fields) {\n        const result = new Set(extraArray);       \n\n        if (fields) {\n            fields.forEach(keyPath => {\n                const keyNodes = keyPath.split('.');\n                if (keyNodes.length > 1) {\n                    const assoc = keyNodes.slice(0, -1).join('.');\n                    result.add(assoc);\n                }\n            })\n        }\n\n        return Array.from(result);\n    }\n\n    /**\n     * Get field names array of a unique key from input data.\n     * @param {object} data - Input data.\n     */\n    static getUniqueKeyFieldsFrom(data) {\n        return _.find(this.meta.uniqueKeys, (fields) =>\n            _.every(fields, (f) => !_.isNil(data[f]))\n        );\n    }\n\n    /**\n     * Get key-value pairs of a unique key from input data.\n     * @param {object} data - Input data.\n     */\n    static getUniqueKeyValuePairsFrom(data) {\n        const ukFields = this.getUniqueKeyFieldsFrom(data);\n        return _.pick(data, ukFields);\n    }\n\n    /**\n     * Get nested object of an entity.\n     * @param {*} entityObj\n     * @param {*} keyPath\n     */\n    static getNestedObject(entityObj, keyPath, defaultValue) {\n        const nodes = (\n            Array.isArray(keyPath) ? keyPath : keyPath.split('.')\n        ).map((key) => (key[0] === ':' ? key : ':' + key));\n        return _.get(entityObj, nodes, defaultValue);\n    }\n\n    /**\n     * Ensure the entity object containing required fields, if not, it will automatically fetched from db and return.\n     * @param {*} entityObj \n     * @param {Array} fields \n     * @param {*} connOpts \n     * @returns {Object}\n     */\n    static async ensureFields_(entityObj, fields, connOpts) {\n        if (_.find(fields, field => !_.has(entityObj, field))) {\n            const uk = this.getUniqueKeyValuePairsFrom(entityObj);\n\n            if (_.isEmpty(uk)) {\n                throw new UnexpectedState('None of the unique keys found from the data set.');\n            }\n\n            const findOptions = { $query: uk, /* $projection: fields,*/ $association: this.assocFrom(null, fields) };\n\n            return this.findOne_(findOptions, connOpts)\n        }\n\n        return entityObj;\n    }\n\n    /**\n     * Ensure context.latest be the just created entity.\n     * @param {*} context\n     * @param {*} customOptions\n     */\n    static ensureRetrieveCreated(context, customOptions) {\n        if (!context.options.$retrieveCreated) {\n            context.options.$retrieveCreated = customOptions || true;\n        }\n    }\n\n    /**\n     * Ensure context.latest be the just updated entity.\n     * @param {*} context\n     * @param {*} customOptions\n     */\n    static ensureRetrieveUpdated(context, customOptions) {\n        if (!context.options.$retrieveUpdated) {\n            context.options.$retrieveUpdated = customOptions || true;\n        }\n    }\n\n    /**\n     * Ensure context.exisintg be the just deleted entity.\n     * @param {*} context\n     * @param {*} customOptions\n     */\n    static ensureRetrieveDeleted(context, customOptions) {\n        if (!context.options.$retrieveDeleted) {\n            context.options.$retrieveDeleted = customOptions || true;\n        }\n    }\n\n    /**\n     * Ensure the upcoming operations are executed in a transaction.\n     * @param {*} context\n     */\n    static async ensureTransaction_(context) {\n        if (!context.connOptions || !context.connOptions.connection) {\n            context.connOptions || (context.connOptions = {});\n\n            context.connOptions.connection =\n                await this.db.connector.beginTransaction_();\n        }\n    }\n\n    /**\n     * Get value from context, e.g. session, query ...\n     * @param {*} context\n     * @param {string} key\n     * @returns {*}\n     */\n    static getValueFromContext(context, key) {\n        return _.get(context, 'options.$variables.' + key);\n    }\n\n    /**\n     * Get a pk-indexed hashtable with all undeleted data\n     * {string} [key] - The key field to used by the hashtable.\n     * {array} [associations] - With an array of associations.\n     * {object} [connOptions] - Connection options, e.g. transaction handle\n     */\n    static async cached_(key, associations, connOptions) {\n        if (key) {\n            let combinedKey = key;\n\n            if (!_.isEmpty(associations)) {\n                combinedKey += '/' + minifyAssocs(associations).join('&');\n            }\n\n            let cachedData;\n\n            if (!this._cachedData) {\n                this._cachedData = {};\n            } else if (this._cachedData[combinedKey]) {\n                cachedData = this._cachedData[combinedKey];\n            }\n\n            if (!cachedData) {\n                cachedData = this._cachedData[combinedKey] =\n                    await this.findAll_(\n                        { $association: associations, $toDictionary: key },\n                        connOptions\n                    );\n            }\n\n            return cachedData;\n        }\n\n        return this.cached_(this.meta.keyField, associations, connOptions);\n    }\n\n    static toDictionary(entityCollection, key, transformer) {\n        key || (key = this.meta.keyField);\n\n        return Convertors.toKVPairs(entityCollection, key, transformer);\n    }\n\n    /**\n     * Find one record, returns a model object containing the record or undefined if nothing found.\n     * @param {object|array} condition - Query condition, key-value pair will be joined with 'AND', array element will be joined with 'OR'.\n     * @param {object} [findOptions] - findOptions\n     * @property {object} [findOptions.$association] - Joinings\n     * @property {object} [findOptions.$projection] - Selected fields\n     * @property {object} [findOptions.$transformer] - Transform fields before returning\n     * @property {object} [findOptions.$query] - Extra condition\n     * @property {object} [findOptions.$groupBy] - Group by fields\n     * @property {object} [findOptions.$orderBy] - Order by fields\n     * @property {number} [findOptions.$offset] - Offset\n     * @property {number} [findOptions.$limit] - Limit\n     * @property {bool} [findOptions.$includeDeleted=false] - Include those marked as logical deleted.\n     * @param {object} [connOptions]\n     * @property {object} [connOptions.connection]\n     * @returns {*}\n     */\n    static async findOne_(findOptions, connOptions) {\n        const rawOptions = findOptions;\n\n        findOptions = this._prepareQueries(\n            findOptions,\n            true /* for single record */\n        );\n\n        const context = {\n            op: 'find',\n            options: findOptions,\n            connOptions,\n        };\n\n        await Features.applyRules_(Rules.RULE_BEFORE_FIND, this, context);\n\n        const result = await this._safeExecute_(async (context) => {\n            let records = await this.db.connector.find_(\n                this.meta.name,\n                context.options,\n                context.connOptions\n            );\n            if (!records)\n                throw new DatabaseError(\n                    'connector.find_() returns undefined data record.'\n                );\n\n            if (rawOptions && rawOptions.$retrieveDbResult) {\n                rawOptions.$result = records.slice(1);\n            }\n\n            if (findOptions.$relationships && !findOptions.$skipOrm) {\n                // rows, coloumns, aliasMap\n                if (records[0].length === 0) return undefined;\n\n                records = this._mapRecordsToObjects(\n                    records,\n                    findOptions.$relationships,\n                    findOptions.$nestedKeyGetter\n                );\n            } else if (records.length === 0) {\n                return undefined;\n            }\n\n            if (records.length !== 1) {\n                this.db.connector.log(\n                    'error',\n                    `findOne() returns more than one record.`,\n                    { entity: this.meta.name, options: context.options }\n                );\n            }\n\n            const result = records[0];\n\n            return result;\n        }, context);\n\n        if (findOptions.$transformer) {\n            return JES.evaluate(result, findOptions.$transformer);\n        }\n\n        return result;\n    }\n\n    /**\n     * Find records matching the condition, returns an array of records.\n     * @param {object} [findOptions] - findOptions\n     * @property {object} [findOptions.$association] - Joinings\n     * @property {object} [findOptions.$projection] - Selected fields\n     * @property {object} [findOptions.$transformer] - Transform fields before returning\n     * @property {object} [findOptions.$query] - Extra condition\n     * @property {object} [findOptions.$groupBy] - Group by fields\n     * @property {object} [findOptions.$orderBy] - Order by fields\n     * @property {number} [findOptions.$offset] - Offset\n     * @property {number} [findOptions.$limit] - Limit\n     * @property {number} [findOptions.$totalCount] - Return totalCount\n     * @property {bool} [findOptions.$includeDeleted=false] - Include those marked as logical deleted.\n     * @param {object} [connOptions]\n     * @property {object} [connOptions.connection]\n     * @returns {array}\n     */\n    static async findAll_(findOptions, connOptions) {\n        const rawOptions = findOptions;\n\n        findOptions = this._prepareQueries(findOptions);\n\n        const context = {\n            op: 'find',\n            options: findOptions,\n            connOptions,\n        };\n\n        await Features.applyRules_(Rules.RULE_BEFORE_FIND, this, context);\n\n        let totalCount;\n\n        let rows = await this._safeExecute_(async (context) => {\n            let records = await this.db.connector.find_(\n                this.meta.name,\n                context.options,\n                context.connOptions\n            );\n\n            if (!records)\n                throw new DatabaseError(\n                    'connector.find_() returns undefined data record.'\n                );\n\n            if (rawOptions && rawOptions.$retrieveDbResult) {\n                rawOptions.$result = records.slice(1);\n            }\n\n            if (findOptions.$relationships) {\n                if (findOptions.$totalCount) {\n                    totalCount = records[3];\n                }\n\n                if (!findOptions.$skipOrm) {\n                    records = this._mapRecordsToObjects(\n                        records,\n                        findOptions.$relationships,\n                        findOptions.$nestedKeyGetter\n                    );\n                } else {\n                    records = records[0];\n                }\n            } else {\n                if (findOptions.$totalCount) {\n                    totalCount = records[1];\n                    records = records[0];\n                } else if (findOptions.$skipOrm) {\n                    records = records[0];\n                }\n            }\n\n            return this.afterFindAll_(context, records);\n        }, context);\n\n        if (findOptions.$transformer) {\n            rows = rows.map((row) =>\n                JES.evaluate(row, findOptions.$transformer)\n            );\n        }\n\n        if (findOptions.$totalCount) {\n            const ret = { totalItems: totalCount, items: rows };\n\n            if (!isNothing(findOptions.$offset)) {\n                ret.offset = findOptions.$offset;\n            }\n\n            if (!isNothing(findOptions.$limit)) {\n                ret.limit = findOptions.$limit;\n            }\n\n            return ret;\n        }\n\n        return rows;\n    }\n\n    /**\n     * Regenerate creation data and try again if duplicate record exists\n     * @param {Function} dataGenerator_\n     * @param {Object} connOptions\n     */\n    static async retryCreateOnDuplicate_(\n        dataGenerator_,\n        maxRery,\n        createOptions,\n        connOptions\n    ) {\n        let counter = 0;\n        let errorRet;\n        maxRery || (maxRery = 10);\n\n        while (counter++ < maxRery) {\n            const data = await dataGenerator_();\n\n            try {\n                return await this.create_(data, createOptions, connOptions);\n            } catch (error) {\n                if (error.code !== 'E_DUPLICATE') {\n                    throw error;\n                }\n\n                errorRet = error;\n            }\n        }\n\n        return errorRet;\n    }\n\n    /**\n     * Create a new entity with given data.\n     * @param {object} data - Entity data\n     * @param {object} [createOptions] - Create options\n     * @property {bool} [createOptions.$retrieveCreated=false] - Retrieve the newly created record from db.\n     * @property {bool} [createOptions.$upsert=false] - If already exist, just update the record.\n     * @param {object} [connOptions]\n     * @property {object} [connOptions.connection]\n     * @returns {EntityModel}\n     */\n    static async create_(data, createOptions, connOptions) {\n        const rawOptions = createOptions;\n\n        if (!createOptions) {\n            createOptions = {};\n        }\n\n        let [raw, associations, references] = this._extractAssociations(\n            data,\n            true\n        );\n\n        const context = {\n            op: 'create',\n            raw,\n            rawOptions,\n            options: createOptions,\n            connOptions,\n        };\n\n        if (!(await this.beforeCreate_(context))) {\n            return context.return;\n        }\n\n        const success = await this._safeExecute_(async (context) => {\n            if (!_.isEmpty(references)) {\n                await this.ensureTransaction_(context);\n                await this._populateReferences_(context, references);\n            }\n\n            let needCreateAssocs = !_.isEmpty(associations);\n            if (needCreateAssocs) {\n                await this.ensureTransaction_(context);\n\n                associations = await this._createAssocs_(\n                    context,\n                    associations,\n                    true /* before create */\n                );\n                // check any other associations left\n                needCreateAssocs = !_.isEmpty(associations);\n            }\n\n            await this._prepareEntityData_(context);\n\n            if (\n                !(await Features.applyRules_(\n                    Rules.RULE_BEFORE_CREATE,\n                    this,\n                    context\n                ))\n            ) {\n                return false;\n            }\n\n            if (!(await this._internalBeforeCreate_(context))) {\n                return false;\n            }\n\n            if (!context.options.$dryRun) {\n                if (context.options.$upsert) {\n                    context.result = await this.db.connector.upsertOne_(\n                        this.meta.name,\n                        context.latest,\n                        this.getUniqueKeyFieldsFrom(context.latest),\n                        context.connOptions,\n                        context.options.$upsert\n                    );                    \n                } else {\n                    context.result = await this.db.connector.create_(\n                        this.meta.name,\n                        context.latest,\n                        context.connOptions\n                    );\n                }\n\n                this._fillResult(context);\n            } else {\n                context.return = context.latest;\n                context.result = { insertId: context.latest[this.meta.keyField], affectedRows: 1 };\n            }\n\n            if (needCreateAssocs) {\n                await this._createAssocs_(context, associations);\n            }\n\n            await this._internalAfterCreate_(context);\n\n            if (!context.queryKey) {\n                context.queryKey = this.getUniqueKeyValuePairsFrom(\n                    context.latest\n                );\n            }\n\n            await Features.applyRules_(Rules.RULE_AFTER_CREATE, this, context);\n\n            return true;\n        }, context);\n\n        if (success) {\n            await this.afterCreate_(context);\n        }\n\n        return context.return;\n    }\n\n    /**\n     * Update an existing entity with given data.\n     * @param {object} data - Entity data with at least one unique key (pair) given\n     * @param {object} [updateOptions] - Update options\n     * @property {object} [updateOptions.$query] - Extra condition\n     * @property {bool} [updateOptions.$retrieveUpdated=false] - Retrieve the updated entity from database\n     * @param {object} [connOptions]\n     * @property {object} [connOptions.connection]\n     * @returns {object}\n     */\n    static async updateOne_(data, updateOptions, connOptions) {\n        if (updateOptions && updateOptions.$bypassReadOnly) {\n            throw new InvalidArgument('Unexpected usage.', {\n                entity: this.meta.name,\n                reason: '$bypassReadOnly option is not allow to be set from public update_ method.',\n                updateOptions,\n            });\n        }\n\n        return this._update_(data, updateOptions, connOptions, true);\n    }\n\n    /**\n     * Update many existing entites with given data.\n     * @param {*} data\n     * @param {*} updateOptions\n     * @param {*} connOptions\n     */\n    static async updateMany_(data, updateOptions, connOptions) {\n        if (updateOptions && updateOptions.$bypassReadOnly) {\n            throw new InvalidArgument('Unexpected usage.', {\n                entity: this.meta.name,\n                reason: '$bypassReadOnly option is not allow to be set from public update_ method.',\n                updateOptions,\n            });\n        }\n\n        return this._update_(data, updateOptions, connOptions, false);\n    }\n\n    static async _update_(data, updateOptions, connOptions, forSingleRecord) {\n        const rawOptions = updateOptions;\n\n        if (!updateOptions) {\n            // if no condition given, extract from data\n            const conditionFields = this.getUniqueKeyFieldsFrom(data);\n            if (_.isEmpty(conditionFields)) {\n                throw new InvalidArgument(\n                    'Primary key value(s) or at least one group of unique key value(s) is required for updating an entity.',\n                    {\n                        entity: this.meta.name,\n                        data,\n                    }\n                );\n            }\n            updateOptions = { $query: _.pick(data, conditionFields) };\n            data = _.omit(data, conditionFields);\n        }\n\n        // see if there is associated entity data provided together\n        let [raw, associations, references] = this._extractAssociations(data);\n\n        const context = {\n            op: 'update',\n            raw,\n            rawOptions,\n            options: this._prepareQueries(\n                updateOptions,\n                forSingleRecord /* for single record */\n            ),\n            connOptions,\n            forSingleRecord,\n        };\n\n        // see if there is any runtime feature stopping the update\n        let toUpdate;\n\n        if (forSingleRecord) {\n            toUpdate = await this.beforeUpdate_(context);\n        } else {\n            toUpdate = await this.beforeUpdateMany_(context);\n        }\n\n        if (!toUpdate) {\n            return context.return;\n        }\n\n        const success = await this._safeExecute_(async (context) => {\n            if (!_.isEmpty(references)) {\n                await this.ensureTransaction_(context);\n                await this._populateReferences_(context, references);\n            }\n\n            let needUpdateAssocs = !_.isEmpty(associations);\n            let doneUpdateAssocs;\n\n            if (needUpdateAssocs) {\n                await this.ensureTransaction_(context);\n\n                associations = await this._updateAssocs_(\n                    context,\n                    associations,\n                    true /* before update */,\n                    forSingleRecord\n                );\n                needUpdateAssocs = !_.isEmpty(associations);\n                doneUpdateAssocs = true;\n            }\n\n            await this._prepareEntityData_(\n                context,\n                true /* is updating */,\n                forSingleRecord\n            );\n\n            if (\n                !(await Features.applyRules_(\n                    Rules.RULE_BEFORE_UPDATE,\n                    this,\n                    context\n                ))\n            ) {\n                return false;\n            }\n\n            if (forSingleRecord) {\n                toUpdate = await this._internalBeforeUpdate_(context);\n            } else {\n                toUpdate = await this._internalBeforeUpdateMany_(context);\n            }\n\n            if (!toUpdate) {\n                return false;\n            }\n\n            const { $query, ...otherOptions } = context.options;\n\n            if (_.isEmpty(context.latest)) {\n                if (!doneUpdateAssocs && !needUpdateAssocs) {\n                    throw new InvalidArgument(\n                        'Cannot do the update with empty record. Entity: ' +\n                            this.meta.name\n                    );\n                }\n            } else {\n                if (\n                    needUpdateAssocs &&\n                    !hasValueIn([$query, context.latest], this.meta.keyField) &&\n                    !otherOptions.$retrieveUpdated\n                ) {\n                    // has associated data depending on this record\n                    // should ensure the latest result will contain the key of this record\n                    otherOptions.$retrieveUpdated = true;\n                }\n\n                context.result = await this.db.connector.update_(\n                    this.meta.name,\n                    context.latest,\n                    $query,\n                    otherOptions,\n                    context.connOptions\n                );\n\n                context.return = context.latest;\n            }\n\n            if (forSingleRecord) {\n                await this._internalAfterUpdate_(context);\n\n                if (!context.queryKey) {\n                    context.queryKey = this.getUniqueKeyValuePairsFrom($query);\n                }\n            } else {\n                await this._internalAfterUpdateMany_(context);\n            }\n\n            await Features.applyRules_(Rules.RULE_AFTER_UPDATE, this, context);\n\n            if (needUpdateAssocs) {\n                await this._updateAssocs_(\n                    context,\n                    associations,\n                    false,\n                    forSingleRecord\n                );\n            }\n\n            return true;\n        }, context);\n\n        if (success) {\n            if (forSingleRecord) {\n                await this.afterUpdate_(context);\n            } else {\n                await this.afterUpdateMany_(context);\n            }\n        }\n\n        return context.return;\n    }\n\n    /**\n     * Update an existing entity with given data, or create one if not found.\n     * @param {*} data\n     * @param {*} updateOptions\n     * @param {*} connOptions\n     */\n    static async replaceOne_(data, updateOptions, connOptions) {\n        const rawOptions = updateOptions;\n\n        if (!updateOptions) {\n            const conditionFields = this.getUniqueKeyFieldsFrom(data);\n            if (_.isEmpty(conditionFields)) {\n                throw new InvalidArgument(\n                    'Primary key value(s) or at least one group of unique key value(s) is required for replacing an entity.',\n                    {\n                        entity: this.meta.name,\n                        data,\n                    }\n                );\n            }\n\n            updateOptions = {\n                ...updateOptions,\n                $query: _.pick(data, conditionFields),\n            };\n        } else {\n            updateOptions = this._prepareQueries(updateOptions, true);\n        }\n\n        const context = {\n            op: 'replace',\n            raw: data,\n            rawOptions,\n            options: updateOptions,\n            connOptions,\n        };\n\n        return this._safeExecute_(async (context) => {\n            return this._doReplaceOne_(context); // different dbms has different replacing strategy\n        }, context);\n    }\n\n    /**\n     * Remove an existing entity with given data.\n     * @param {object} [deleteOptions] - Update options\n     * @property {object} [deleteOptions.$query] - Extra condition\n     * @property {bool} [deleteOptions.$retrieveDeleted=false] - Retrieve the deleted entity from database\n     * @property {bool} [deleteOptions.$physicalDeletion=false] - When $physicalDeletion = true, deletetion will not take into account logicaldeletion feature\n     * @param {object} [connOptions]\n     * @property {object} [connOptions.connection]\n     */\n    static async deleteOne_(deleteOptions, connOptions) {\n        return this._delete_(deleteOptions, connOptions, true);\n    }\n\n    /**\n     * Remove an existing entity with given data.\n     * @param {object} [deleteOptions] - Update options\n     * @property {object} [deleteOptions.$query] - Extra condition\n     * @property {bool} [deleteOptions.$retrieveDeleted=false] - Retrieve the deleted entity from database\n     * @property {bool} [deleteOptions.$physicalDeletion=false] - When $physicalDeletion = true, deletetion will not take into account logicaldeletion feature\n     * @property {bool} [deleteOptions.$deleteAll=false] - When $deleteAll = true, the operation will proceed even empty condition is given\n     * @param {object} [connOptions]\n     * @property {object} [connOptions.connection]\n     */\n    static async deleteMany_(deleteOptions, connOptions) {\n        return this._delete_(deleteOptions, connOptions, false);\n    }\n\n    static async deleteAll_(connOptions) {\n        return this.deleteMany_({ $deleteAll: true }, connOptions);\n    }\n\n    /**\n     * Remove an existing entity with given data.\n     * @param {object} [deleteOptions] - Update options\n     * @property {object} [deleteOptions.$query] - Extra condition\n     * @property {bool} [deleteOptions.$retrieveDeleted=false] - Retrieve the deleted entity from database\n     * @property {bool} [deleteOptions.$physicalDeletion=false] - When $physicalDeletion = true, deletetion will not take into account logicaldeletion feature\n     * @param {object} [connOptions]\n     * @property {object} [connOptions.connection]\n     */\n    static async _delete_(deleteOptions, connOptions, forSingleRecord) {\n        const rawOptions = deleteOptions;\n\n        deleteOptions = this._prepareQueries(\n            deleteOptions,\n            forSingleRecord /* for single record */\n        );\n\n        if (\n            _.isEmpty(deleteOptions.$query) &&\n            (forSingleRecord || !deleteOptions.$deleteAll)\n        ) {\n            throw new InvalidArgument(\n                'Empty condition is not allowed for deleting an entity.',\n                {\n                    entity: this.meta.name,\n                    deleteOptions,\n                }\n            );\n        }\n\n        const context = {\n            op: 'delete',\n            rawOptions,\n            options: deleteOptions,\n            connOptions,\n            forSingleRecord,\n        };\n\n        let toDelete;\n\n        if (forSingleRecord) {\n            toDelete = await this.beforeDelete_(context);\n        } else {\n            toDelete = await this.beforeDeleteMany_(context);\n        }\n\n        if (!toDelete) {\n            return context.return;\n        }\n\n        const deletedCount = await this._safeExecute_(async (context) => {\n            if (\n                !(await Features.applyRules_(\n                    Rules.RULE_BEFORE_DELETE,\n                    this,\n                    context\n                ))\n            ) {\n                return false;\n            }\n\n            if (forSingleRecord) {\n                toDelete = await this._internalBeforeDelete_(context);\n            } else {\n                toDelete = await this._internalBeforeDeleteMany_(context);\n            }\n\n            if (!toDelete) {\n                return false;\n            }\n\n            const { $query, ...otherOptions } = context.options;\n\n            context.result = await this.db.connector.delete_(\n                this.meta.name,\n                $query,\n                otherOptions,\n                context.connOptions\n            );\n\n            if (forSingleRecord) {\n                await this._internalAfterDelete_(context);\n            } else {\n                await this._internalAfterDeleteMany_(context);\n            }\n\n            if (!context.queryKey) {\n                if (forSingleRecord) {\n                    context.queryKey = this.getUniqueKeyValuePairsFrom(\n                        context.options.$query\n                    );\n                } else {\n                    context.queryKey = context.options.$query;\n                }\n            }\n\n            await Features.applyRules_(Rules.RULE_AFTER_DELETE, this, context);\n\n            return this.db.connector.deletedCount(context);\n        }, context);\n\n        if (deletedCount) {\n            if (forSingleRecord) {\n                await this.afterDelete_(context);\n            } else {\n                await this.afterDeleteMany_(context);\n            }\n        }\n\n        return context.return || deletedCount;\n    }\n\n    /**\n     * Check whether a data record contains primary key or at least one unique key pair.\n     * @param {object} data\n     */\n    static _containsUniqueKey(data) {\n        let hasKeyNameOnly = false;\n\n        const hasNotNullKey = _.find(this.meta.uniqueKeys, (fields) => {\n            const hasKeys = _.every(fields, (f) => f in data);\n            hasKeyNameOnly = hasKeyNameOnly || hasKeys;\n\n            return _.every(fields, (f) => !_.isNil(data[f]));\n        });\n\n        return [hasNotNullKey, hasKeyNameOnly];\n    }\n\n    /**\n     * Ensure the condition contains one of the unique keys.\n     * @param {*} condition\n     */\n    static _ensureContainsUniqueKey(condition) {\n        const [containsUniqueKeyAndValue, containsUniqueKeyOnly] =\n            this._containsUniqueKey(condition);\n\n        if (!containsUniqueKeyAndValue) {\n            if (containsUniqueKeyOnly) {\n                throw new ValidationError(\n                    'One of the unique key field as query condition is null. Condition: ' +\n                        JSON.stringify(condition)\n                );\n            }\n\n            throw new InvalidArgument(\n                'Single record operation requires at least one unique key value pair in the query condition.',\n                {\n                    entity: this.meta.name,\n                    condition,\n                }\n            );\n        }\n    }\n\n    /**\n     * Prepare valid and sanitized entity data for sending to database.\n     * @param {object} context - Operation context.\n     * @property {object} context.raw - Raw input data.\n     * @property {object} [context.connOptions]\n     * @param {bool} isUpdating - Flag for updating existing entity.\n     */\n    static async _prepareEntityData_(\n        context,\n        isUpdating = false,\n        forSingleRecord = true\n    ) {\n        const meta = this.meta;\n        const i18n = this.i18n;\n        const { name, fields } = meta;\n\n        const { raw } = context;\n        let latest = {};\n        // returned by $retrieveExisting\n        let existing = context.options.$existing;\n        context.latest = latest;\n\n        if (!context.i18n) {\n            context.i18n = i18n;\n        }\n\n        const opOptions = context.options;\n\n        if (\n            isUpdating &&\n            _.isEmpty(existing) &&\n            (this._dependsOnExistingData(raw) || opOptions.$retrieveExisting)\n        ) {\n            await this.ensureTransaction_(context);\n\n            if (forSingleRecord) {\n                existing = await this.findOne_(\n                    { $query: opOptions.$query },\n                    context.connOptions\n                );\n            } else {\n                existing = await this.findAll_(\n                    { $query: opOptions.$query },\n                    context.connOptions\n                );\n            }\n            context.existing = existing;\n        }\n\n        if (opOptions.$retrieveExisting && !context.rawOptions.$existing) {\n            context.rawOptions.$existing = existing;\n        }\n\n        await Features.applyRules_(Rules.RULE_BEFORE_VALIDATION, this, context);\n\n        await eachAsync_(fields, async (fieldInfo, fieldName) => {\n            let value;\n            let useRaw = false;\n\n            if (fieldName in raw) {\n                value = raw[fieldName];\n                useRaw = true;\n            } else if (fieldName in latest) {\n                value = latest[fieldName];\n            }\n\n            if (typeof value !== 'undefined') {\n                // field value given in raw data\n                if (fieldInfo.readOnly && useRaw) {\n                    if (\n                        !opOptions.$migration &&\n                        (!isUpdating ||\n                            !opOptions.$bypassReadOnly ||\n                            !opOptions.$bypassReadOnly.has(fieldName))\n                    ) {\n                        // read only, not allow to set by input value\n                        throw new ValidationError(\n                            `Read-only field \"${fieldName}\" is not allowed to be set by manual input.`,\n                            {\n                                entity: name,\n                                fieldInfo: fieldInfo,\n                            }\n                        );\n                    }\n                }\n\n                if (isUpdating && fieldInfo.freezeAfterNonDefault) {\n                    if (!existing) {\n                        throw new Error(\n                            '\"freezeAfterNonDefault\" qualifier requires existing data.'\n                        );\n                    }\n\n                    if (existing[fieldName] !== fieldInfo.default) {\n                        // freezeAfterNonDefault, not allow to change if value is non-default\n                        throw new ValidationError(\n                            `FreezeAfterNonDefault field \"${fieldName}\" is not allowed to be changed.`,\n                            {\n                                entity: name,\n                                fieldInfo: fieldInfo,\n                            }\n                        );\n                    }\n                }\n\n                /**  todo: fix dependency, check writeProtect \n                if (isUpdating && fieldInfo.writeOnce) {     \n                    assert: existing, '\"writeOnce\" qualifier requires existing data.';\n                    if (!_.isNil(existing[fieldName])) {\n                        throw new ValidationError(`Write-once field \"${fieldName}\" is not allowed to be update once it was set.`, {\n                            entity: name,\n                            fieldInfo: fieldInfo \n                        });\n                    }\n                } */\n\n                // sanitize first\n                if (isNothing(value)) {\n                    if (fieldInfo.default) {\n                        // has default setting in meta data\n                        latest[fieldName] = fieldInfo.default;\n                    } else if (!fieldInfo.optional) {\n                        throw new ValidationError(\n                            `The \"${fieldName}\" value of \"${name}\" entity cannot be null.`,\n                            {\n                                entity: name,\n                                fieldInfo: fieldInfo,\n                            }\n                        );\n                    } else {\n                        latest[fieldName] = null;\n                    }\n                } else {\n                    if (_.isPlainObject(value) && value.oorType) {\n                        latest[fieldName] = value;\n\n                        return;\n                    }\n\n                    try {\n                        latest[fieldName] = Types.sanitize(\n                            value,\n                            fieldInfo,\n                            i18n\n                        );\n                    } catch (error) {\n                        throw new ValidationError(\n                            `Invalid \"${fieldName}\" value of \"${name}\" entity.`,\n                            {\n                                entity: name,\n                                fieldInfo: fieldInfo,\n                                value,\n                                error: error.stack,\n                            }\n                        );\n                    }\n                }\n\n                return;\n            }\n\n            // not given in raw data\n            if (isUpdating) {\n                if (fieldInfo.forceUpdate) {\n                    // has force update policy, e.g. updateTimestamp\n                    if (fieldInfo.updateByDb || fieldInfo.hasActivator) {\n                        return;\n                    }\n\n                    // require generator to refresh auto generated value\n                    if (fieldInfo.auto) {                        \n                        latest[fieldName] = await Generators.default(\n                            fieldInfo,\n                            i18n\n                        );\n                        return;\n                    }\n\n                    throw new ValidationError(\n                        `Field \"${fieldName}\" of \"${name}\" entity is required for each update.`,\n                        {\n                            entity: name,\n                            fieldInfo: fieldInfo,\n                        }\n                    );\n                }\n\n                return;\n            }\n\n            // new record\n            if (!fieldInfo.createByDb) {\n                if ('default' in fieldInfo) {\n                    // has default setting in meta data\n                    latest[fieldName] = fieldInfo.default;\n                } else if (fieldInfo.optional) {\n                    // ignore\n                } else if (fieldInfo.auto) {\n                    // automatically generated\n                    latest[fieldName] = await Generators.default(\n                        fieldInfo,\n                        i18n\n                    );\n                } else if (!fieldInfo.hasActivator) {\n                    // skip those have activators\n\n                    throw new ValidationError(\n                        `Field \"${fieldName}\" of \"${name}\" entity is required.`,\n                        {\n                            entity: name,\n                            fieldInfo: fieldInfo,\n                            raw,\n                        }\n                    );\n                }\n            } // else default value set by database or by rules\n        });\n\n        latest = context.latest = this._translateValue(\n            latest,\n            opOptions.$variables,\n            true\n        );\n\n        await Features.applyRules_(Rules.RULE_AFTER_VALIDATION, this, context);\n\n        if (!opOptions.$skipModifiers) {\n            await this.applyModifiers_(context, isUpdating);\n        }\n\n        // final round process before entering database\n        context.latest = _.mapValues(latest, (value, key) => {\n            if (value == null) return value;\n\n            if (_.isPlainObject(value) && value.oorType) {\n                // there is special input column which maybe a function or an expression\n                opOptions.$requireSplitColumns = true;\n                return value;\n            }\n\n            const fieldInfo = fields[key];\n\n            return this._serializeByTypeInfo(value, fieldInfo);\n        });\n\n        return context;\n    }\n\n    /**\n     * Ensure commit or rollback is called if transaction is created within the executor.\n     * @param {*} executor\n     * @param {*} context\n     */\n    static async _safeExecute_(executor, context) {\n        executor = executor.bind(this);\n\n        if (context.connOptions && context.connOptions.connection) {\n            return executor(context);\n        }\n\n        try {\n            const result = await executor(context);\n\n            // if the executor have initiated a transaction\n            if (context.connOptions && context.connOptions.connection) {\n                await this.db.connector.commit_(context.connOptions.connection);\n                delete context.connOptions.connection;\n            }\n\n            return result;\n        } catch (error) {\n            // we have to rollback if error occurred in a transaction\n            if (context.connOptions && context.connOptions.connection) {\n                this.db.connector.log(\n                    'error',\n                    `Rollbacked, reason: ${error.message}`,\n                    {\n                        entity: this.meta.name,\n                        context: context.options,\n                        rawData: context.raw,\n                        latestData: context.latest,\n                    }\n                );\n                await this.db.connector.rollback_(\n                    context.connOptions.connection\n                );\n                delete context.connOptions.connection;\n            }\n\n            throw error;\n        }\n    }\n\n    static _dependencyChanged(fieldName, context) {\n        if (this.meta.fieldDependencies) {\n            const deps = this.meta.fieldDependencies[fieldName];\n\n            return _.find(deps, (d) =>\n                _.isPlainObject(d)\n                    ? (d.reference !== fieldName && _.hasIn(context, d.reference))\n                    : _.hasIn(context, d)\n            );\n        }\n        \n        return false;\n    }\n\n    static _referenceExist(input, ref) {\n        const pos = ref.indexOf('.');\n\n        if (pos > 0) {\n            return ref.substr(pos + 1) in input;\n        }\n\n        return ref in input;\n    }\n\n    static _dependsOnExistingData(input) {\n        // check modifier dependencies\n        const deps = this.meta.fieldDependencies;\n        let hasDepends = false;\n\n        if (deps) {\n            const nullDepends = new Set();\n\n            hasDepends = _.find(deps, (dep, fieldName) =>\n                _.find(dep, (d) => {\n                    if (_.isPlainObject(d)) {\n                        if (d.whenNull) {\n                            if (_.isNil(input[fieldName])) {\n                                nullDepends.add(dep);\n                            }\n\n                            return false;\n                        }\n\n                        if (d.reference === fieldName) return false;\n\n                        d = d.reference;\n                    }\n\n                    return (\n                        fieldName in input && !this._referenceExist(input, d)\n                    ) || (this._referenceExist(input, d) && !(fieldName in input));\n                })\n            );\n\n            if (hasDepends) {\n                return true;\n            }\n\n            for (const dep of nullDepends) {\n                if (\n                    _.find(\n                        dep,\n                        (d) => !this._referenceExist(input, d.reference)\n                    )\n                ) {\n                    return true;\n                }\n            }\n        }\n\n        // check by special rules\n        const atLeastOneNotNull = this.meta.features.atLeastOneNotNull;\n        if (atLeastOneNotNull) {\n            hasDepends = _.find(atLeastOneNotNull, (fields) =>\n                _.find(\n                    fields,\n                    (field) => field in input && _.isNil(input[field])\n                )\n            );\n            if (hasDepends) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    static _hasReservedKeys(obj) {\n        return _.find(obj, (v, k) => k[0] === '$');\n    }\n\n    static _prepareQueries(options, forSingleRecord = false) {\n        if (!_.isPlainObject(options)) {\n            if (forSingleRecord && Array.isArray(this.meta.keyField)) {\n                throw new InvalidArgument(\n                    'Cannot use a singular value as condition to query against a entity with combined primary key.',\n                    {\n                        entity: this.meta.name,\n                        keyFields: this.meta.keyField,\n                    }\n                );\n            }\n\n            return options\n                ? {\n                      $query: {\n                          [this.meta.keyField]: this._translateValue(options),\n                      },\n                  }\n                : {};\n        }\n\n        const normalizedOptions = {};\n        const query = {};\n\n        _.forOwn(options, (v, k) => {\n            if (k[0] === '$') {\n                normalizedOptions[k] = v;\n            } else {\n                query[k] = v;\n            }\n        });\n\n        normalizedOptions.$query = { ...query, ...normalizedOptions.$query };\n\n        if (forSingleRecord && !options.$bypassEnsureUnique) {\n            this._ensureContainsUniqueKey(normalizedOptions.$query);\n        }\n\n        normalizedOptions.$query = this._translateValue(\n            normalizedOptions.$query,\n            normalizedOptions.$variables,\n            null,\n            true\n        );\n\n        if (normalizedOptions.$groupBy) {\n            if (_.isPlainObject(normalizedOptions.$groupBy)) {\n                if (normalizedOptions.$groupBy.having) {\n                    normalizedOptions.$groupBy.having = this._translateValue(\n                        normalizedOptions.$groupBy.having,\n                        normalizedOptions.$variables\n                    );\n                }\n            }\n        }\n\n        if (normalizedOptions.$projection) {\n            normalizedOptions.$projection = this._translateValue(\n                normalizedOptions.$projection,\n                normalizedOptions.$variables\n            );\n        }\n\n        if (\n            normalizedOptions.$association &&\n            !normalizedOptions.$relationships\n        ) {\n            normalizedOptions.$relationships =\n                this._prepareAssociations(normalizedOptions);\n        }\n\n        return normalizedOptions;\n    }\n\n    /**\n     * Pre create processing, return false to stop upcoming operation.\n     * @param {*} context\n     */\n    static async beforeCreate_(context) {\n        return true;\n    }\n\n    /**\n     * Pre update processing, return false to stop upcoming operation.\n     * @param {*} context\n     */\n    static async beforeUpdate_(context) {\n        return true;\n    }\n\n    /**\n     * Pre update processing, multiple records, return false to stop upcoming operation.\n     * @param {*} context\n     */\n    static async beforeUpdateMany_(context) {\n        return true;\n    }\n\n    /**\n     * Pre delete processing, return false to stop upcoming operation.\n     * @param {*} context\n     */\n    static async beforeDelete_(context) {\n        return true;\n    }\n\n    /**\n     * Pre delete processing, multiple records, return false to stop upcoming operation.\n     * @param {*} context\n     */\n    static async beforeDeleteMany_(context) {\n        return true;\n    }\n\n    /**\n     * Post create processing.\n     * @param {*} context\n     */\n    static async afterCreate_(context) {}\n\n    /**\n     * Post update processing.\n     * @param {*} context\n     */\n    static async afterUpdate_(context) {}\n\n    /**\n     * Post update processing, multiple records\n     * @param {*} context\n     */\n    static async afterUpdateMany_(context) {}\n\n    /**\n     * Post delete processing.\n     * @param {*} context\n     */\n    static async afterDelete_(context) {}\n\n    /**\n     * Post delete processing, multiple records\n     * @param {*} context\n     */\n    static async afterDeleteMany_(context) {}\n\n    /**\n     * Post findAll processing\n     * @param {*} context\n     * @param {*} records\n     */\n    static async afterFindAll_(context, records) {\n        if (context.options.$toDictionary) {\n            let keyField = this.meta.keyField;\n\n            if (typeof context.options.$toDictionary === 'string') {\n                keyField = context.options.$toDictionary;\n\n                if (!(keyField in this.meta.fields)) {\n                    throw new InvalidArgument(\n                        `The key field \"${keyField}\" provided to index the cached dictionary is not a field of entity \"${this.meta.name}\".`,\n                        {\n                            entity: this.meta.name,\n                            inputKeyField: keyField,\n                        }\n                    );\n                }\n            }\n\n            return this.toDictionary(records, keyField);\n        }\n\n        return records;\n    }\n\n    static _prepareAssociations() {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    static _mapRecordsToObjects() {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    static _extractAssociations(data) {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    // will update context.raw if applicable\n    static async _populateReferences_(context, references) {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    // will update context.raw if applicable\n    static async _createAssocs_(context, assocs) {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    static async _updateAssocs_(context, assocs) {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    static _translateSymbolToken(name) {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    static _serializeByTypeInfo(value, info) {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    static _translateValue(value, variables, skipTypeCast, arrayToInOperator) {\n        if (_.isPlainObject(value)) {\n            if (value.oorType) {\n                if (oorTypesToBypass.has(value.oorType)) return value;\n\n                if (value.oorType === 'SessionVariable') {\n                    if (!variables) {\n                        throw new InvalidArgument(\n                            'Variables context missing.',\n                            {\n                                entity: this.meta.name,\n                            }\n                        );\n                    }\n\n                    if (\n                        (!variables.session ||\n                            !(value.name in variables.session)) &&\n                        !value.optional\n                    ) {\n                        const errArgs = [];\n                        if (value.missingMessage) {\n                            errArgs.push(value.missingMessage);\n                        }\n                        if (value.missingStatus) {\n                            errArgs.push(\n                                value.missingStatus || HttpCode.BAD_REQUEST\n                            );\n                        }\n\n                        throw new ValidationError(...errArgs);\n                    }\n\n                    return variables.session[value.name];\n                } else if (value.oorType === 'QueryVariable') {\n                    if (!variables) {\n                        throw new InvalidArgument(\n                            'Variables context missing.',\n                            {\n                                entity: this.meta.name,\n                            }\n                        );\n                    }\n\n                    if (!variables.query || !(value.name in variables.query)) {\n                        throw new InvalidArgument(\n                            `Query parameter \"${value.name}\" in configuration not found.`,\n                            {\n                                entity: this.meta.name,\n                            }\n                        );\n                    }\n\n                    return variables.query[value.name];\n                } else if (value.oorType === 'SymbolToken') {\n                    return this._translateSymbolToken(value.name);\n                }\n\n                throw new Error('Not implemented yet. ' + value.oorType);\n            }\n\n            return _.mapValues(value, (v, k) =>\n                this._translateValue(\n                    v,\n                    variables,\n                    skipTypeCast,\n                    arrayToInOperator && k[0] !== '$'\n                )\n            );\n        }\n\n        if (Array.isArray(value)) {\n            const ret = value.map((v) =>\n                this._translateValue(\n                    v,\n                    variables,\n                    skipTypeCast,\n                    arrayToInOperator\n                )\n            );\n            return arrayToInOperator ? { $in: ret } : ret;\n        }\n\n        if (skipTypeCast) return value;\n\n        return this.db.connector.typeCast(value);\n    }\n}\n\nmodule.exports = EntityModel;\n"],"file":"EntityModel.js"}