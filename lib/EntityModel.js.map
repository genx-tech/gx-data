{"version":3,"sources":["../src/EntityModel.js"],"names":["HttpCode","require","_","eachAsync_","Errors","Generators","Convertors","Types","ValidationError","DatabaseError","InvalidArgument","Features","Rules","isNothing","hasValueIn","JES","NEED_OVERRIDE","minifyAssocs","assocs","sorted","uniq","sort","reverse","minified","take","l","length","i","k","find","a","startsWith","push","oorTypesToBypass","Set","EntityModel","constructor","rawData","Object","assign","valueOfKey","data","meta","keyField","fieldSchema","name","extra","fields","schema","omit","inputSchema","inputSetName","options","key","JSON","stringify","_cachedSchema","cache","schemaGenerator","db","getUniqueKeyFieldsFrom","uniqueKeys","every","f","isNil","getUniqueKeyValuePairsFrom","pre","ukFields","pick","getNestedObject","entityObj","keyPath","defaultValue","nodes","Array","isArray","split","map","get","ensureRetrieveCreated","context","customOptions","$retrieveCreated","ensureRetrieveUpdated","$retrieveUpdated","ensureRetrieveDeleted","$retrieveDeleted","ensureTransaction_","connOptions","connection","connector","beginTransaction_","getValueFromContext","cached_","associations","combinedKey","isEmpty","join","cachedData","_cachedData","findAll_","$association","$toDictionary","toDictionary","entityCollection","transformer","toKVPairs","findOne_","findOptions","rawOptions","_prepareQueries","op","applyRules_","RULE_BEFORE_FIND","result","_safeExecute_","records","find_","$retrieveDbResult","$result","slice","$relationships","$skipOrm","undefined","_mapRecordsToObjects","$nestedKeyGetter","log","entity","$transformer","evaluate","totalCount","rows","$totalCount","afterFindAll_","row","ret","totalItems","items","$offset","offset","$limit","limit","create_","createOptions","raw","references","_extractAssociations","beforeCreate_","return","success","_populateReferences_","needCreateAssocs","_createAssocs_","_prepareEntityData_","RULE_BEFORE_CREATE","_internalBeforeCreate_","$upsert","upsertOne_","latest","_fillResult","_internalAfterCreate_","queryKey","RULE_AFTER_CREATE","afterCreate_","updateOne_","updateOptions","$bypassReadOnly","reason","_update_","updateMany_","forSingleRecord","conditionFields","$query","toUpdate","beforeUpdate_","beforeUpdateMany_","needUpdateAssocs","doneUpdateAssocs","_updateAssocs_","RULE_BEFORE_UPDATE","_internalBeforeUpdate_","_internalBeforeUpdateMany_","otherOptions","update_","_internalAfterUpdate_","_internalAfterUpdateMany_","RULE_AFTER_UPDATE","afterUpdate_","afterUpdateMany_","replaceOne_","_doReplaceOne_","deleteOne_","deleteOptions","_delete_","deleteMany_","deleteAll_","$deleteAll","toDelete","beforeDelete_","beforeDeleteMany_","deletedCount","RULE_BEFORE_DELETE","_internalBeforeDelete_","_internalBeforeDeleteMany_","delete_","_internalAfterDelete_","_internalAfterDeleteMany_","RULE_AFTER_DELETE","afterDelete_","afterDeleteMany_","_containsUniqueKey","hasKeyNameOnly","hasNotNullKey","hasKeys","_ensureContainsUniqueKey","condition","containsUniqueKeyAndValue","containsUniqueKeyOnly","isUpdating","i18n","existing","$existing","opOptions","_dependsOnExistingData","$retrieveExisting","RULE_BEFORE_VALIDATION","fieldInfo","fieldName","value","useRaw","readOnly","$migration","has","freezeAfterNonDefault","assert","default","optional","isPlainObject","oorType","sanitize","error","stack","forceUpdate","updateByDb","hasActivator","auto","createByDb","hasOwnProperty","_translateValue","$variables","RULE_AFTER_VALIDATION","$skipModifiers","applyModifiers_","mapValues","$requireSplitColumns","_serializeByTypeInfo","executor","bind","commit_","message","latestData","rollback_","_dependencyChanged","deps","fieldDependencies","d","hasIn","reference","_referenceExist","input","ref","pos","indexOf","substr","hasDepends","nullDepends","dep","whenNull","add","atLeastOneNotNull","features","field","_hasReservedKeys","obj","v","keyFields","normalizedOptions","query","forOwn","$bypassEnsureUnique","$groupBy","having","$projection","_prepareAssociations","inputKeyField","Error","_translateSymbolToken","info","variables","skipTypeCast","arrayToInOperator","session","errArgs","missingMessage","missingStatus","BAD_REQUEST","$in","typeCast","module","exports"],"mappings":"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","sourcesContent":["const { HttpCode } = require('@genx/error');\nconst { _, eachAsync_ } = require('@genx/july');\nconst Errors = require('./utils/Errors');\nconst Generators = require('./Generators');\nconst Convertors = require('./Convertors');\nconst Types = require('./types');\nconst { ValidationError, DatabaseError, InvalidArgument } = Errors;\nconst Features = require('./entityFeatures');\nconst Rules = require('./enum/Rules');\n\nconst { isNothing, hasValueIn } = require('./utils/lang');\nconst JES = require('@genx/jes');\n\nconst NEED_OVERRIDE = 'Should be overrided by driver-specific subclass.';\n\nfunction minifyAssocs(assocs) {\n    let sorted = _.uniq(assocs).sort().reverse();\n\n    let minified = _.take(sorted, 1),\n        l = sorted.length - 1;\n\n    for (let i = 1; i < l; i++) {\n        let k = sorted[i] + '.';\n\n        if (!_.find(minified, (a) => a.startsWith(k))) {\n            minified.push(sorted[i]);\n        }\n    }\n\n    return minified;\n}\n\nconst oorTypesToBypass = new Set([\n    'ColumnReference',\n    'Function',\n    'BinaryExpression',\n    'DataSet',\n    'SQL',\n]);\n\n/**\n * Base entity model class.\n * @class\n */\nclass EntityModel {\n    /**\n     * @param {Object} [rawData] - Raw data object\n     */\n    constructor(rawData) {\n        if (rawData) {\n            //only pick those that are fields of this entity\n            Object.assign(this, rawData);\n        }\n    }\n\n    static valueOfKey(data) {\n        return data[this.meta.keyField];\n    }\n\n    /**\n     * Get a field schema based on the metadata of the field.\n     * @param {string} name - Field name\n     * @param {object} [extra] - Extra schema options\n     * @return {object} Schema object\n     */\n    static fieldSchema(name, extra) {\n        const meta = this.meta.fields[name];\n        if (!meta) {\n            throw new InvalidArgument(\n                `Unknown field \"${name}\" of entity \"${this.meta.name}\".`\n            );\n        }\n\n        const schema = _.omit(meta, ['default']);\n        if (extra) {\n            Object.assign(schema, extra);\n        }\n\n        return schema;\n    }\n\n    /**\n     * Get a map of fields schema by predefined input set.\n     * @param {string} inputSetName - Input set name, predefined in geml\n     * @param {object} [options] - Input set options\n     * @return {object} Schema object\n     */\n    static inputSchema(inputSetName, options) {\n        const key =\n            inputSetName + (options == null ? '{}' : JSON.stringify(options));\n\n        if (this._cachedSchema) {\n            const cache = this._cachedSchema[key];\n            if (cache) {\n                return cache;\n            }\n        } else {\n            this._cachedSchema = {};\n        }\n\n        const schemaGenerator = this.db.require(\n            `inputs/${this.meta.name}-${inputSetName}`\n        );\n\n        return (this._cachedSchema[key] = schemaGenerator(options));\n    }\n\n    /**\n     * Get field names array of a unique key from input data.\n     * @param {object} data - Input data.\n     */\n    static getUniqueKeyFieldsFrom(data) {\n        return _.find(this.meta.uniqueKeys, (fields) =>\n            _.every(fields, (f) => !_.isNil(data[f]))\n        );\n    }\n\n    /**\n     * Get key-value pairs of a unique key from input data.\n     * @param {object} data - Input data.\n     */\n    static getUniqueKeyValuePairsFrom(data) {\n        pre: typeof data === 'object';\n\n        let ukFields = this.getUniqueKeyFieldsFrom(data);\n        return _.pick(data, ukFields);\n    }\n\n    /**\n     * Get nested object of an entity.\n     * @param {*} entityObj\n     * @param {*} keyPath\n     */\n    static getNestedObject(entityObj, keyPath, defaultValue) {\n        let nodes = (Array.isArray(keyPath) ? keyPath : keyPath.split('.')).map(\n            (key) => (key[0] === ':' ? key : ':' + key)\n        );\n        return _.get(entityObj, nodes, defaultValue);\n    }\n\n    /**\n     * Ensure context.latest be the just created entity.\n     * @param {*} context\n     * @param {*} customOptions\n     */\n    static ensureRetrieveCreated(context, customOptions) {\n        if (!context.options.$retrieveCreated) {\n            context.options.$retrieveCreated = customOptions\n                ? customOptions\n                : true;\n        }\n    }\n\n    /**\n     * Ensure context.latest be the just updated entity.\n     * @param {*} context\n     * @param {*} customOptions\n     */\n    static ensureRetrieveUpdated(context, customOptions) {\n        if (!context.options.$retrieveUpdated) {\n            context.options.$retrieveUpdated = customOptions\n                ? customOptions\n                : true;\n        }\n    }\n\n    /**\n     * Ensure context.exisintg be the just deleted entity.\n     * @param {*} context\n     * @param {*} customOptions\n     */\n    static ensureRetrieveDeleted(context, customOptions) {\n        if (!context.options.$retrieveDeleted) {\n            context.options.$retrieveDeleted = customOptions\n                ? customOptions\n                : true;\n        }\n    }\n\n    /**\n     * Ensure the upcoming operations are executed in a transaction.\n     * @param {*} context\n     */\n    static async ensureTransaction_(context) {\n        if (!context.connOptions || !context.connOptions.connection) {\n            context.connOptions || (context.connOptions = {});\n\n            context.connOptions.connection =\n                await this.db.connector.beginTransaction_();\n        }\n    }\n\n    /**\n     * Get value from context, e.g. session, query ...\n     * @param {*} context\n     * @param {string} key\n     * @returns {*}\n     */\n    static getValueFromContext(context, key) {\n        return _.get(context, 'options.$variables.' + key);\n    }\n\n    /**\n     * Get a pk-indexed hashtable with all undeleted data\n     * {string} [key] - The key field to used by the hashtable.\n     * {array} [associations] - With an array of associations.\n     * {object} [connOptions] - Connection options, e.g. transaction handle\n     */\n    static async cached_(key, associations, connOptions) {\n        if (key) {\n            let combinedKey = key;\n\n            if (!_.isEmpty(associations)) {\n                combinedKey += '/' + minifyAssocs(associations).join('&');\n            }\n\n            let cachedData;\n\n            if (!this._cachedData) {\n                this._cachedData = {};\n            } else if (this._cachedData[combinedKey]) {\n                cachedData = this._cachedData[combinedKey];\n            }\n\n            if (!cachedData) {\n                cachedData = this._cachedData[combinedKey] =\n                    await this.findAll_(\n                        { $association: associations, $toDictionary: key },\n                        connOptions\n                    );\n            }\n\n            return cachedData;\n        }\n\n        return this.cached_(this.meta.keyField, associations, connOptions);\n    }\n\n    static toDictionary(entityCollection, key, transformer) {\n        key || (key = this.meta.keyField);\n\n        return Convertors.toKVPairs(entityCollection, key, transformer);\n    }\n\n    /**\n     * Find one record, returns a model object containing the record or undefined if nothing found.\n     * @param {object|array} condition - Query condition, key-value pair will be joined with 'AND', array element will be joined with 'OR'.\n     * @param {object} [findOptions] - findOptions\n     * @property {object} [findOptions.$association] - Joinings\n     * @property {object} [findOptions.$projection] - Selected fields\n     * @property {object} [findOptions.$transformer] - Transform fields before returning\n     * @property {object} [findOptions.$query] - Extra condition\n     * @property {object} [findOptions.$groupBy] - Group by fields\n     * @property {object} [findOptions.$orderBy] - Order by fields\n     * @property {number} [findOptions.$offset] - Offset\n     * @property {number} [findOptions.$limit] - Limit\n     * @property {bool} [findOptions.$includeDeleted=false] - Include those marked as logical deleted.\n     * @param {object} [connOptions]\n     * @property {object} [connOptions.connection]\n     * @returns {*}\n     */\n    static async findOne_(findOptions, connOptions) {\n        let rawOptions = findOptions;\n\n        findOptions = this._prepareQueries(\n            findOptions,\n            true /* for single record */\n        );\n\n        let context = {\n            op: 'find',\n            options: findOptions,\n            connOptions,\n        };\n\n        await Features.applyRules_(Rules.RULE_BEFORE_FIND, this, context);\n\n        const result = await this._safeExecute_(async (context) => {\n            let records = await this.db.connector.find_(\n                this.meta.name,\n                context.options,\n                context.connOptions\n            );\n            if (!records)\n                throw new DatabaseError(\n                    'connector.find_() returns undefined data record.'\n                );\n\n            if (rawOptions && rawOptions.$retrieveDbResult) {\n                rawOptions.$result = records.slice(1);\n            }\n\n            if (findOptions.$relationships && !findOptions.$skipOrm) {\n                //rows, coloumns, aliasMap\n                if (records[0].length === 0) return undefined;\n\n                records = this._mapRecordsToObjects(\n                    records,\n                    findOptions.$relationships,\n                    findOptions.$nestedKeyGetter\n                );\n            } else if (records.length === 0) {\n                return undefined;\n            }\n\n            if (records.length !== 1) {\n                this.db.connector.log(\n                    'error',\n                    `findOne() returns more than one record.`,\n                    { entity: this.meta.name, options: context.options }\n                );\n            }\n\n            let result = records[0];\n\n            return result;\n        }, context);\n\n        if (findOptions.$transformer) {\n            return JES.evaluate(result, findOptions.$transformer);\n        }\n\n        return result;\n    }\n\n    /**\n     * Find records matching the condition, returns an array of records.\n     * @param {object} [findOptions] - findOptions\n     * @property {object} [findOptions.$association] - Joinings\n     * @property {object} [findOptions.$projection] - Selected fields\n     * @property {object} [findOptions.$transformer] - Transform fields before returning\n     * @property {object} [findOptions.$query] - Extra condition\n     * @property {object} [findOptions.$groupBy] - Group by fields\n     * @property {object} [findOptions.$orderBy] - Order by fields\n     * @property {number} [findOptions.$offset] - Offset\n     * @property {number} [findOptions.$limit] - Limit\n     * @property {number} [findOptions.$totalCount] - Return totalCount\n     * @property {bool} [findOptions.$includeDeleted=false] - Include those marked as logical deleted.\n     * @param {object} [connOptions]\n     * @property {object} [connOptions.connection]\n     * @returns {array}\n     */\n    static async findAll_(findOptions, connOptions) {\n        let rawOptions = findOptions;\n\n        findOptions = this._prepareQueries(findOptions);\n\n        let context = {\n            op: 'find',\n            options: findOptions,\n            connOptions,\n        };\n\n        await Features.applyRules_(Rules.RULE_BEFORE_FIND, this, context);\n\n        let totalCount;\n\n        let rows = await this._safeExecute_(async (context) => {\n            let records = await this.db.connector.find_(\n                this.meta.name,\n                context.options,\n                context.connOptions\n            );\n\n            if (!records)\n                throw new DatabaseError(\n                    'connector.find_() returns undefined data record.'\n                );\n\n            if (rawOptions && rawOptions.$retrieveDbResult) {\n                rawOptions.$result = records.slice(1);\n            }\n\n            if (findOptions.$relationships) {\n                if (findOptions.$totalCount) {\n                    totalCount = records[3];\n                }\n\n                if (!findOptions.$skipOrm) {\n                    records = this._mapRecordsToObjects(\n                        records,\n                        findOptions.$relationships,\n                        findOptions.$nestedKeyGetter\n                    );\n                } else {\n                    records = records[0];\n                }\n            } else {\n                if (findOptions.$totalCount) {\n                    totalCount = records[1];\n                    records = records[0];\n                } else if (findOptions.$skipOrm) {\n                    records = records[0];\n                }\n            }\n\n            return this.afterFindAll_(context, records);\n        }, context);\n\n        if (findOptions.$transformer) {\n            rows = rows.map((row) =>\n                JES.evaluate(row, findOptions.$transformer)\n            );\n        }\n\n        if (findOptions.$totalCount) {\n            let ret = { totalItems: totalCount, items: rows };\n\n            if (!isNothing(findOptions.$offset)) {\n                ret.offset = findOptions.$offset;\n            }\n\n            if (!isNothing(findOptions.$limit)) {\n                ret.limit = findOptions.$limit;\n            }\n\n            return ret;\n        }\n\n        return rows;\n    }\n\n    /**\n     * Create a new entity with given data.\n     * @param {object} data - Entity data\n     * @param {object} [createOptions] - Create options\n     * @property {bool} [createOptions.$retrieveCreated=false] - Retrieve the newly created record from db.\n     * @property {bool} [createOptions.$upsert=false] - If already exist, just update the record.\n     * @param {object} [connOptions]\n     * @property {object} [connOptions.connection]\n     * @returns {EntityModel}\n     */\n    static async create_(data, createOptions, connOptions) {\n        let rawOptions = createOptions;\n\n        if (!createOptions) {\n            createOptions = {};\n        }\n\n        let [raw, associations, references] = this._extractAssociations(\n            data,\n            true\n        );\n\n        let context = {\n            op: 'create',\n            raw,\n            rawOptions,\n            options: createOptions,\n            connOptions,\n        };\n\n        if (!(await this.beforeCreate_(context))) {\n            return context.return;\n        }\n\n        let success = await this._safeExecute_(async (context) => {\n            if (!_.isEmpty(references)) {\n                await this.ensureTransaction_(context);\n                await this._populateReferences_(context, references);\n            }\n\n            let needCreateAssocs = !_.isEmpty(associations);\n            if (needCreateAssocs) {\n                await this.ensureTransaction_(context);\n\n                associations = await this._createAssocs_(\n                    context,\n                    associations,\n                    true /* before create */\n                );\n                //check any other associations left\n                needCreateAssocs = !_.isEmpty(associations);\n            }\n\n            await this._prepareEntityData_(context);\n\n            if (\n                !(await Features.applyRules_(\n                    Rules.RULE_BEFORE_CREATE,\n                    this,\n                    context\n                ))\n            ) {\n                return false;\n            }\n\n            if (!(await this._internalBeforeCreate_(context))) {\n                return false;\n            }\n\n            if (context.options.$upsert) {\n                context.result = await this.db.connector.upsertOne_(\n                    this.meta.name,\n                    context.latest,\n                    this.getUniqueKeyFieldsFrom(context.latest),\n                    context.connOptions,\n                    context.options.$upsert\n                );\n            } else {\n                context.result = await this.db.connector.create_(\n                    this.meta.name,\n                    context.latest,\n                    context.connOptions\n                );\n            }\n\n            this._fillResult(context);\n\n            if (needCreateAssocs) {\n                await this._createAssocs_(context, associations);\n            }\n\n            await this._internalAfterCreate_(context);\n\n            if (!context.queryKey) {\n                context.queryKey = this.getUniqueKeyValuePairsFrom(\n                    context.latest\n                );\n            }\n\n            await Features.applyRules_(Rules.RULE_AFTER_CREATE, this, context);\n\n            return true;\n        }, context);\n\n        if (success) {\n            await this.afterCreate_(context);\n        }\n\n        return context.return;\n    }\n\n    /**\n     * Update an existing entity with given data.\n     * @param {object} data - Entity data with at least one unique key (pair) given\n     * @param {object} [updateOptions] - Update options\n     * @property {object} [updateOptions.$query] - Extra condition\n     * @property {bool} [updateOptions.$retrieveUpdated=false] - Retrieve the updated entity from database\n     * @param {object} [connOptions]\n     * @property {object} [connOptions.connection]\n     * @returns {object}\n     */\n    static async updateOne_(data, updateOptions, connOptions) {\n        if (updateOptions && updateOptions.$bypassReadOnly) {\n            throw new InvalidArgument('Unexpected usage.', {\n                entity: this.meta.name,\n                reason: '$bypassReadOnly option is not allow to be set from public update_ method.',\n                updateOptions,\n            });\n        }\n\n        return this._update_(data, updateOptions, connOptions, true);\n    }\n\n    /**\n     * Update many existing entites with given data.\n     * @param {*} data\n     * @param {*} updateOptions\n     * @param {*} connOptions\n     */\n    static async updateMany_(data, updateOptions, connOptions) {\n        if (updateOptions && updateOptions.$bypassReadOnly) {\n            throw new InvalidArgument('Unexpected usage.', {\n                entity: this.meta.name,\n                reason: '$bypassReadOnly option is not allow to be set from public update_ method.',\n                updateOptions,\n            });\n        }\n\n        return this._update_(data, updateOptions, connOptions, false);\n    }\n\n    static async _update_(data, updateOptions, connOptions, forSingleRecord) {\n        let rawOptions = updateOptions;\n\n        if (!updateOptions) {\n            //if no condition given, extract from data\n            let conditionFields = this.getUniqueKeyFieldsFrom(data);\n            if (_.isEmpty(conditionFields)) {\n                throw new InvalidArgument(\n                    'Primary key value(s) or at least one group of unique key value(s) is required for updating an entity.',\n                    {\n                        entity: this.meta.name,\n                        data,\n                    }\n                );\n            }\n            updateOptions = { $query: _.pick(data, conditionFields) };\n            data = _.omit(data, conditionFields);\n        }\n\n        //see if there is associated entity data provided together\n        let [raw, associations, references] = this._extractAssociations(data);\n\n        let context = {\n            op: 'update',\n            raw,\n            rawOptions,\n            options: this._prepareQueries(\n                updateOptions,\n                forSingleRecord /* for single record */\n            ),\n            connOptions,\n            forSingleRecord,\n        };\n\n        //see if there is any runtime feature stopping the update\n        let toUpdate;\n\n        if (forSingleRecord) {\n            toUpdate = await this.beforeUpdate_(context);\n        } else {\n            toUpdate = await this.beforeUpdateMany_(context);\n        }\n\n        if (!toUpdate) {\n            return context.return;\n        }\n\n        let success = await this._safeExecute_(async (context) => {\n            if (!_.isEmpty(references)) {\n                await this.ensureTransaction_(context);\n                await this._populateReferences_(context, references);\n            }\n\n            let needUpdateAssocs = !_.isEmpty(associations);\n            let doneUpdateAssocs;\n\n            if (needUpdateAssocs) {\n                await this.ensureTransaction_(context);\n\n                associations = await this._updateAssocs_(\n                    context,\n                    associations,\n                    true /* before update */,\n                    forSingleRecord\n                );\n                needUpdateAssocs = !_.isEmpty(associations);\n                doneUpdateAssocs = true;\n            }\n\n            await this._prepareEntityData_(\n                context,\n                true /* is updating */,\n                forSingleRecord\n            );\n\n            if (\n                !(await Features.applyRules_(\n                    Rules.RULE_BEFORE_UPDATE,\n                    this,\n                    context\n                ))\n            ) {\n                return false;\n            }\n\n            if (forSingleRecord) {\n                toUpdate = await this._internalBeforeUpdate_(context);\n            } else {\n                toUpdate = await this._internalBeforeUpdateMany_(context);\n            }\n\n            if (!toUpdate) {\n                return false;\n            }\n\n            const { $query, ...otherOptions } = context.options;\n\n            if (_.isEmpty(context.latest)) {\n                if (!doneUpdateAssocs && !needUpdateAssocs) {\n                    throw new InvalidArgument(\n                        'Cannot do the update with empty record. Entity: ' +\n                            this.meta.name\n                    );\n                }\n            } else {\n                if (\n                    needUpdateAssocs &&\n                    !hasValueIn([$query, context.latest], this.meta.keyField) &&\n                    !otherOptions.$retrieveUpdated\n                ) {\n                    //has associated data depending on this record\n                    //should ensure the latest result will contain the key of this record\n                    otherOptions.$retrieveUpdated = true;\n                }\n\n                context.result = await this.db.connector.update_(\n                    this.meta.name,\n                    context.latest,\n                    $query,\n                    otherOptions,\n                    context.connOptions\n                );\n\n                context.return = context.latest;\n            }\n\n            if (forSingleRecord) {\n                await this._internalAfterUpdate_(context);\n\n                if (!context.queryKey) {\n                    context.queryKey = this.getUniqueKeyValuePairsFrom($query);\n                }\n            } else {\n                await this._internalAfterUpdateMany_(context);\n            }\n\n            await Features.applyRules_(Rules.RULE_AFTER_UPDATE, this, context);\n\n            if (needUpdateAssocs) {\n                await this._updateAssocs_(\n                    context,\n                    associations,\n                    false,\n                    forSingleRecord\n                );\n            }\n\n            return true;\n        }, context);\n\n        if (success) {\n            if (forSingleRecord) {\n                await this.afterUpdate_(context);\n            } else {\n                await this.afterUpdateMany_(context);\n            }\n        }\n\n        return context.return;\n    }\n\n    /**\n     * Update an existing entity with given data, or create one if not found.\n     * @param {*} data\n     * @param {*} updateOptions\n     * @param {*} connOptions\n     */\n    static async replaceOne_(data, updateOptions, connOptions) {\n        let rawOptions = updateOptions;\n\n        if (!updateOptions) {\n            let conditionFields = this.getUniqueKeyFieldsFrom(data);\n            if (_.isEmpty(conditionFields)) {\n                throw new InvalidArgument(\n                    'Primary key value(s) or at least one group of unique key value(s) is required for replacing an entity.',\n                    {\n                        entity: this.meta.name,\n                        data,\n                    }\n                );\n            }\n\n            updateOptions = {\n                ...updateOptions,\n                $query: _.pick(data, conditionFields),\n            };\n        } else {\n            updateOptions = this._prepareQueries(updateOptions, true);\n        }\n\n        let context = {\n            op: 'replace',\n            raw: data,\n            rawOptions,\n            options: updateOptions,\n            connOptions,\n        };\n\n        return this._safeExecute_(async (context) => {\n            return this._doReplaceOne_(context); // different dbms has different replacing strategy\n        }, context);\n    }\n\n    /**\n     * Remove an existing entity with given data.\n     * @param {object} [deleteOptions] - Update options\n     * @property {object} [deleteOptions.$query] - Extra condition\n     * @property {bool} [deleteOptions.$retrieveDeleted=false] - Retrieve the deleted entity from database\n     * @property {bool} [deleteOptions.$physicalDeletion=false] - When $physicalDeletion = true, deletetion will not take into account logicaldeletion feature\n     * @param {object} [connOptions]\n     * @property {object} [connOptions.connection]\n     */\n    static async deleteOne_(deleteOptions, connOptions) {\n        return this._delete_(deleteOptions, connOptions, true);\n    }\n\n    /**\n     * Remove an existing entity with given data.\n     * @param {object} [deleteOptions] - Update options\n     * @property {object} [deleteOptions.$query] - Extra condition\n     * @property {bool} [deleteOptions.$retrieveDeleted=false] - Retrieve the deleted entity from database\n     * @property {bool} [deleteOptions.$physicalDeletion=false] - When $physicalDeletion = true, deletetion will not take into account logicaldeletion feature\n     * @property {bool} [deleteOptions.$deleteAll=false] - When $deleteAll = true, the operation will proceed even empty condition is given\n     * @param {object} [connOptions]\n     * @property {object} [connOptions.connection]\n     */\n    static async deleteMany_(deleteOptions, connOptions) {\n        return this._delete_(deleteOptions, connOptions, false);\n    }\n\n    static async deleteAll_(connOptions) {\n        return this.deleteMany_({ $deleteAll: true }, connOptions);\n    }\n\n    /**\n     * Remove an existing entity with given data.\n     * @param {object} [deleteOptions] - Update options\n     * @property {object} [deleteOptions.$query] - Extra condition\n     * @property {bool} [deleteOptions.$retrieveDeleted=false] - Retrieve the deleted entity from database\n     * @property {bool} [deleteOptions.$physicalDeletion=false] - When $physicalDeletion = true, deletetion will not take into account logicaldeletion feature\n     * @param {object} [connOptions]\n     * @property {object} [connOptions.connection]\n     */\n    static async _delete_(deleteOptions, connOptions, forSingleRecord) {\n        let rawOptions = deleteOptions;\n\n        deleteOptions = this._prepareQueries(\n            deleteOptions,\n            forSingleRecord /* for single record */\n        );\n\n        if (\n            _.isEmpty(deleteOptions.$query) &&\n            (forSingleRecord || !deleteOptions.$deleteAll)\n        ) {\n            throw new InvalidArgument(\n                'Empty condition is not allowed for deleting an entity.',\n                {\n                    entity: this.meta.name,\n                    deleteOptions,\n                }\n            );\n        }\n\n        let context = {\n            op: 'delete',\n            rawOptions,\n            options: deleteOptions,\n            connOptions,\n            forSingleRecord,\n        };\n\n        let toDelete;\n\n        if (forSingleRecord) {\n            toDelete = await this.beforeDelete_(context);\n        } else {\n            toDelete = await this.beforeDeleteMany_(context);\n        }\n\n        if (!toDelete) {\n            return context.return;\n        }\n\n        let deletedCount = await this._safeExecute_(async (context) => {\n            if (\n                !(await Features.applyRules_(\n                    Rules.RULE_BEFORE_DELETE,\n                    this,\n                    context\n                ))\n            ) {\n                return false;\n            }\n\n            if (forSingleRecord) {\n                toDelete = await this._internalBeforeDelete_(context);\n            } else {\n                toDelete = await this._internalBeforeDeleteMany_(context);\n            }\n\n            if (!toDelete) {\n                return false;\n            }\n\n            const { $query, ...otherOptions } = context.options;\n\n            context.result = await this.db.connector.delete_(\n                this.meta.name,\n                $query,\n                otherOptions,\n                context.connOptions\n            );\n\n            if (forSingleRecord) {\n                await this._internalAfterDelete_(context);\n            } else {\n                await this._internalAfterDeleteMany_(context);\n            }\n\n            if (!context.queryKey) {\n                if (forSingleRecord) {\n                    context.queryKey = this.getUniqueKeyValuePairsFrom(\n                        context.options.$query\n                    );\n                } else {\n                    context.queryKey = context.options.$query;\n                }\n            }\n\n            await Features.applyRules_(Rules.RULE_AFTER_DELETE, this, context);\n\n            return this.db.connector.deletedCount(context);\n        }, context);\n\n        if (deletedCount) {\n            if (forSingleRecord) {\n                await this.afterDelete_(context);\n            } else {\n                await this.afterDeleteMany_(context);\n            }\n        }\n\n        return context.return || deletedCount;\n    }\n\n    /**\n     * Check whether a data record contains primary key or at least one unique key pair.\n     * @param {object} data\n     */\n    static _containsUniqueKey(data) {\n        let hasKeyNameOnly = false;\n\n        let hasNotNullKey = _.find(this.meta.uniqueKeys, (fields) => {\n            let hasKeys = _.every(fields, (f) => f in data);\n            hasKeyNameOnly = hasKeyNameOnly || hasKeys;\n\n            return _.every(fields, (f) => !_.isNil(data[f]));\n        });\n\n        return [hasNotNullKey, hasKeyNameOnly];\n    }\n\n    /**\n     * Ensure the condition contains one of the unique keys.\n     * @param {*} condition\n     */\n    static _ensureContainsUniqueKey(condition) {\n        let [containsUniqueKeyAndValue, containsUniqueKeyOnly] =\n            this._containsUniqueKey(condition);\n\n        if (!containsUniqueKeyAndValue) {\n            if (containsUniqueKeyOnly) {\n                throw new ValidationError(\n                    'One of the unique key field as query condition is null. Condition: ' +\n                        JSON.stringify(condition)\n                );\n            }\n\n            throw new InvalidArgument(\n                'Single record operation requires at least one unique key value pair in the query condition.',\n                {\n                    entity: this.meta.name,\n                    condition,\n                }\n            );\n        }\n    }\n\n    /**\n     * Prepare valid and sanitized entity data for sending to database.\n     * @param {object} context - Operation context.\n     * @property {object} context.raw - Raw input data.\n     * @property {object} [context.connOptions]\n     * @param {bool} isUpdating - Flag for updating existing entity.\n     */\n    static async _prepareEntityData_(\n        context,\n        isUpdating = false,\n        forSingleRecord = true\n    ) {\n        let meta = this.meta;\n        let i18n = this.i18n;\n        let { name, fields } = meta;\n\n        let { raw } = context;\n        let latest = {},\n            existing = context.options.$existing;\n        context.latest = latest;\n\n        if (!context.i18n) {\n            context.i18n = i18n;\n        }\n\n        let opOptions = context.options;\n\n        if (\n            isUpdating &&\n            _.isEmpty(existing) &&\n            (this._dependsOnExistingData(raw) || opOptions.$retrieveExisting)\n        ) {\n            await this.ensureTransaction_(context);\n\n            if (forSingleRecord) {\n                existing = await this.findOne_(\n                    { $query: opOptions.$query },\n                    context.connOptions\n                );\n            } else {\n                existing = await this.findAll_(\n                    { $query: opOptions.$query },\n                    context.connOptions\n                );\n            }\n            context.existing = existing;\n        }\n\n        if (opOptions.$retrieveExisting && !context.rawOptions.$existing) {\n            context.rawOptions.$existing = existing;\n        }\n\n        await Features.applyRules_(Rules.RULE_BEFORE_VALIDATION, this, context);\n\n        await eachAsync_(fields, async (fieldInfo, fieldName) => {\n            let value,\n                useRaw = false;\n\n            if (fieldName in raw) {\n                value = raw[fieldName];\n                useRaw = true;\n            } else if (fieldName in latest) {\n                value = latest[fieldName];\n            }\n\n            if (typeof value !== 'undefined') {\n                //field value given in raw data\n                if (fieldInfo.readOnly && useRaw) {\n                    if (\n                        !opOptions.$migration &&\n                        (!isUpdating ||\n                            !opOptions.$bypassReadOnly ||\n                            !opOptions.$bypassReadOnly.has(fieldName))\n                    ) {\n                        //read only, not allow to set by input value\n                        throw new ValidationError(\n                            `Read-only field \"${fieldName}\" is not allowed to be set by manual input.`,\n                            {\n                                entity: name,\n                                fieldInfo: fieldInfo,\n                            }\n                        );\n                    }\n                }\n\n                if (isUpdating && fieldInfo.freezeAfterNonDefault) {\n                    assert: existing,\n                        '\"freezeAfterNonDefault\" qualifier requires existing data.';\n\n                    if (existing[fieldName] !== fieldInfo.default) {\n                        //freezeAfterNonDefault, not allow to change if value is non-default\n                        throw new ValidationError(\n                            `FreezeAfterNonDefault field \"${fieldName}\" is not allowed to be changed.`,\n                            {\n                                entity: name,\n                                fieldInfo: fieldInfo,\n                            }\n                        );\n                    }\n                }\n\n                /**  todo: fix dependency, check writeProtect \n                if (isUpdating && fieldInfo.writeOnce) {     \n                    assert: existing, '\"writeOnce\" qualifier requires existing data.';\n                    if (!_.isNil(existing[fieldName])) {\n                        throw new ValidationError(`Write-once field \"${fieldName}\" is not allowed to be update once it was set.`, {\n                            entity: name,\n                            fieldInfo: fieldInfo \n                        });\n                    }\n                } */\n\n                //sanitize first\n                if (isNothing(value)) {\n                    if (fieldInfo['default']) {\n                        //has default setting in meta data\n                        latest[fieldName] = fieldInfo['default'];\n                    } else if (!fieldInfo.optional) {\n                        throw new ValidationError(\n                            `The \"${fieldName}\" value of \"${name}\" entity cannot be null.`,\n                            {\n                                entity: name,\n                                fieldInfo: fieldInfo,\n                            }\n                        );\n                    } else {\n                        latest[fieldName] = null;\n                    }\n                } else {\n                    if (_.isPlainObject(value) && value.oorType) {\n                        latest[fieldName] = value;\n\n                        return;\n                    }\n\n                    try {\n                        latest[fieldName] = Types.sanitize(\n                            value,\n                            fieldInfo,\n                            i18n\n                        );\n                    } catch (error) {\n                        throw new ValidationError(\n                            `Invalid \"${fieldName}\" value of \"${name}\" entity.`,\n                            {\n                                entity: name,\n                                fieldInfo: fieldInfo,\n                                value,\n                                error: error.stack,\n                            }\n                        );\n                    }\n                }\n\n                return;\n            }\n\n            //not given in raw data\n            if (isUpdating) {\n                if (fieldInfo.forceUpdate) {\n                    //has force update policy, e.g. updateTimestamp\n                    if (fieldInfo.updateByDb || fieldInfo.hasActivator) {\n                        return;\n                    }\n\n                    //require generator to refresh auto generated value\n                    if (fieldInfo.auto) {\n                        latest[fieldName] = await Generators.default(\n                            fieldInfo,\n                            i18n\n                        );\n                        return;\n                    }\n\n                    throw new ValidationError(\n                        `Field \"${fieldName}\" of \"${name}\" entity is required for each update.`,\n                        {\n                            entity: name,\n                            fieldInfo: fieldInfo,\n                        }\n                    );\n                }\n\n                return;\n            }\n\n            //new record\n            if (!fieldInfo.createByDb) {\n                if (fieldInfo.hasOwnProperty('default')) {\n                    //has default setting in meta data\n                    latest[fieldName] = fieldInfo.default;\n                } else if (fieldInfo.optional) {\n                    return;\n                } else if (fieldInfo.auto) {\n                    //automatically generated\n                    latest[fieldName] = await Generators.default(\n                        fieldInfo,\n                        i18n\n                    );\n                } else if (!fieldInfo.hasActivator) {\n                    //skip those have activators\n\n                    throw new ValidationError(\n                        `Field \"${fieldName}\" of \"${name}\" entity is required.`,\n                        {\n                            entity: name,\n                            fieldInfo: fieldInfo,\n                            raw,\n                        }\n                    );\n                }\n            } // else default value set by database or by rules\n        });\n\n        latest = context.latest = this._translateValue(\n            latest,\n            opOptions.$variables,\n            true\n        );\n\n        await Features.applyRules_(Rules.RULE_AFTER_VALIDATION, this, context);\n\n        if (!opOptions.$skipModifiers) {\n            await this.applyModifiers_(context, isUpdating);\n        }\n\n        //final round process before entering database\n        context.latest = _.mapValues(latest, (value, key) => {\n            if (value == null) return value;\n\n            if (_.isPlainObject(value) && value.oorType) {\n                //there is special input column which maybe a function or an expression\n                opOptions.$requireSplitColumns = true;\n                return value;\n            }\n\n            let fieldInfo = fields[key];\n            assert: fieldInfo;\n\n            return this._serializeByTypeInfo(value, fieldInfo);\n        });\n\n        return context;\n    }\n\n    /**\n     * Ensure commit or rollback is called if transaction is created within the executor.\n     * @param {*} executor\n     * @param {*} context\n     */\n    static async _safeExecute_(executor, context) {\n        executor = executor.bind(this);\n\n        if (context.connOptions && context.connOptions.connection) {\n            return executor(context);\n        }\n\n        try {\n            let result = await executor(context);\n\n            //if the executor have initiated a transaction\n            if (context.connOptions && context.connOptions.connection) {\n                await this.db.connector.commit_(context.connOptions.connection);\n                delete context.connOptions.connection;\n            }\n\n            return result;\n        } catch (error) {\n            //we have to rollback if error occurred in a transaction\n            if (context.connOptions && context.connOptions.connection) {\n                this.db.connector.log(\n                    'error',\n                    `Rollbacked, reason: ${error.message}`,\n                    {\n                        entity: this.meta.name,\n                        context: context.options,\n                        rawData: context.raw,\n                        latestData: context.latest,\n                    }\n                );\n                await this.db.connector.rollback_(\n                    context.connOptions.connection\n                );\n                delete context.connOptions.connection;\n            }\n\n            throw error;\n        }\n    }\n\n    static _dependencyChanged(fieldName, context) {\n        let deps = this.meta.fieldDependencies[fieldName];\n\n        return _.find(deps, (d) =>\n            _.isPlainObject(d)\n                ? _.hasIn(context, d.reference)\n                : _.hasIn(context, d)\n        );\n    }\n\n    static _referenceExist(input, ref) {\n        let pos = ref.indexOf('.');\n\n        if (pos > 0) {\n            return ref.substr(pos + 1) in input;\n        }\n\n        return ref in input;\n    }\n\n    static _dependsOnExistingData(input) {\n        //check modifier dependencies\n        let deps = this.meta.fieldDependencies;\n        let hasDepends = false;\n\n        if (deps) {\n            let nullDepends = new Set();\n\n            hasDepends = _.find(deps, (dep, fieldName) =>\n                _.find(dep, (d) => {\n                    if (_.isPlainObject(d)) {\n                        if (d.whenNull) {\n                            if (_.isNil(input[fieldName])) {\n                                nullDepends.add(dep);\n                            }\n\n                            return false;\n                        }\n\n                        d = d.reference;\n                    }\n\n                    return (\n                        fieldName in input && !this._referenceExist(input, d)\n                    );\n                })\n            );\n\n            if (hasDepends) {\n                return true;\n            }\n\n            for (let dep of nullDepends) {\n                if (\n                    _.find(\n                        dep,\n                        (d) => !this._referenceExist(input, d.reference)\n                    )\n                ) {\n                    return true;\n                }\n            }\n        }\n\n        //check by special rules\n        let atLeastOneNotNull = this.meta.features.atLeastOneNotNull;\n        if (atLeastOneNotNull) {\n            hasDepends = _.find(atLeastOneNotNull, (fields) =>\n                _.find(\n                    fields,\n                    (field) => field in input && _.isNil(input[field])\n                )\n            );\n            if (hasDepends) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    static _hasReservedKeys(obj) {\n        return _.find(obj, (v, k) => k[0] === '$');\n    }\n\n    static _prepareQueries(options, forSingleRecord = false) {\n        if (!_.isPlainObject(options)) {\n            if (forSingleRecord && Array.isArray(this.meta.keyField)) {\n                throw new InvalidArgument(\n                    'Cannot use a singular value as condition to query against a entity with combined primary key.',\n                    {\n                        entity: this.meta.name,\n                        keyFields: this.meta.keyField,\n                    }\n                );\n            }\n\n            return options\n                ? {\n                      $query: {\n                          [this.meta.keyField]: this._translateValue(options),\n                      },\n                  }\n                : {};\n        }\n\n        let normalizedOptions = {},\n            query = {};\n\n        _.forOwn(options, (v, k) => {\n            if (k[0] === '$') {\n                normalizedOptions[k] = v;\n            } else {\n                query[k] = v;\n            }\n        });\n\n        normalizedOptions.$query = { ...query, ...normalizedOptions.$query };\n\n        if (forSingleRecord && !options.$bypassEnsureUnique) {\n            this._ensureContainsUniqueKey(normalizedOptions.$query);\n        }\n\n        normalizedOptions.$query = this._translateValue(\n            normalizedOptions.$query,\n            normalizedOptions.$variables,\n            null,\n            true\n        );\n\n        if (normalizedOptions.$groupBy) {\n            if (_.isPlainObject(normalizedOptions.$groupBy)) {\n                if (normalizedOptions.$groupBy.having) {\n                    normalizedOptions.$groupBy.having = this._translateValue(\n                        normalizedOptions.$groupBy.having,\n                        normalizedOptions.$variables\n                    );\n                }\n            }\n        }\n\n        if (normalizedOptions.$projection) {\n            normalizedOptions.$projection = this._translateValue(\n                normalizedOptions.$projection,\n                normalizedOptions.$variables\n            );\n        }\n\n        if (\n            normalizedOptions.$association &&\n            !normalizedOptions.$relationships\n        ) {\n            normalizedOptions.$relationships =\n                this._prepareAssociations(normalizedOptions);\n        }\n\n        return normalizedOptions;\n    }\n\n    /**\n     * Pre create processing, return false to stop upcoming operation.\n     * @param {*} context\n     */\n    static async beforeCreate_(context) {\n        return true;\n    }\n\n    /**\n     * Pre update processing, return false to stop upcoming operation.\n     * @param {*} context\n     */\n    static async beforeUpdate_(context) {\n        return true;\n    }\n\n    /**\n     * Pre update processing, multiple records, return false to stop upcoming operation.\n     * @param {*} context\n     */\n    static async beforeUpdateMany_(context) {\n        return true;\n    }\n\n    /**\n     * Pre delete processing, return false to stop upcoming operation.\n     * @param {*} context\n     */\n    static async beforeDelete_(context) {\n        return true;\n    }\n\n    /**\n     * Pre delete processing, multiple records, return false to stop upcoming operation.\n     * @param {*} context\n     */\n    static async beforeDeleteMany_(context) {\n        return true;\n    }\n\n    /**\n     * Post create processing.\n     * @param {*} context\n     */\n    static async afterCreate_(context) {}\n\n    /**\n     * Post update processing.\n     * @param {*} context\n     */\n    static async afterUpdate_(context) {}\n\n    /**\n     * Post update processing, multiple records\n     * @param {*} context\n     */\n    static async afterUpdateMany_(context) {}\n\n    /**\n     * Post delete processing.\n     * @param {*} context\n     */\n    static async afterDelete_(context) {}\n\n    /**\n     * Post delete processing, multiple records\n     * @param {*} context\n     */\n    static async afterDeleteMany_(context) {}\n\n    /**\n     * Post findAll processing\n     * @param {*} context\n     * @param {*} records\n     */\n    static async afterFindAll_(context, records) {\n        if (context.options.$toDictionary) {\n            let keyField = this.meta.keyField;\n\n            if (typeof context.options.$toDictionary === 'string') {\n                keyField = context.options.$toDictionary;\n\n                if (!(keyField in this.meta.fields)) {\n                    throw new InvalidArgument(\n                        `The key field \"${keyField}\" provided to index the cached dictionary is not a field of entity \"${this.meta.name}\".`,\n                        {\n                            entity: this.meta.name,\n                            inputKeyField: keyField,\n                        }\n                    );\n                }\n            }\n\n            return this.toDictionary(records, keyField);\n        }\n\n        return records;\n    }\n\n    static _prepareAssociations() {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    static _mapRecordsToObjects() {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    static _extractAssociations(data) {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    //will update context.raw if applicable\n    static async _populateReferences_(context, references) {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    //will update context.raw if applicable\n    static async _createAssocs_(context, assocs) {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    static async _updateAssocs_(context, assocs) {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    static _translateSymbolToken(name) {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    static _serializeByTypeInfo(value, info) {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    static _translateValue(value, variables, skipTypeCast, arrayToInOperator) {\n        if (_.isPlainObject(value)) {\n            if (value.oorType) {\n                if (oorTypesToBypass.has(value.oorType)) return value;\n\n                if (value.oorType === 'SessionVariable') {\n                    if (!variables) {\n                        throw new InvalidArgument(\n                            'Variables context missing.',\n                            {\n                                entity: this.meta.name,\n                            }\n                        );\n                    }\n\n                    if (\n                        (!variables.session ||\n                            !(value.name in variables.session)) &&\n                        !value.optional\n                    ) {\n                        let errArgs = [];\n                        if (value.missingMessage) {\n                            errArgs.push(value.missingMessage);\n                        }\n                        if (value.missingStatus) {\n                            errArgs.push(\n                                value.missingStatus || HttpCode.BAD_REQUEST\n                            );\n                        }\n\n                        throw new ValidationError(...errArgs);\n                    }\n\n                    return variables.session[value.name];\n                } else if (value.oorType === 'QueryVariable') {\n                    if (!variables) {\n                        throw new InvalidArgument(\n                            'Variables context missing.',\n                            {\n                                entity: this.meta.name,\n                            }\n                        );\n                    }\n\n                    if (!variables.query || !(value.name in variables.query)) {\n                        throw new InvalidArgument(\n                            `Query parameter \"${value.name}\" in configuration not found.`,\n                            {\n                                entity: this.meta.name,\n                            }\n                        );\n                    }\n\n                    return variables.query[value.name];\n                } else if (value.oorType === 'SymbolToken') {\n                    return this._translateSymbolToken(value.name);\n                }\n\n                throw new Error('Not implemented yet. ' + value.oorType);\n            }\n\n            return _.mapValues(value, (v, k) =>\n                this._translateValue(\n                    v,\n                    variables,\n                    skipTypeCast,\n                    arrayToInOperator && k[0] !== '$'\n                )\n            );\n        }\n\n        if (Array.isArray(value)) {\n            let ret = value.map((v) =>\n                this._translateValue(\n                    v,\n                    variables,\n                    skipTypeCast,\n                    arrayToInOperator\n                )\n            );\n            return arrayToInOperator ? { $in: ret } : ret;\n        }\n\n        if (skipTypeCast) return value;\n\n        return this.db.connector.typeCast(value);\n    }\n}\n\nmodule.exports = EntityModel;\n"],"file":"EntityModel.js"}