"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  _
} = Util;

const {
  isNothing
} = require('./utils/lang');

const validator = require('validator');

module.exports = _.pick(validator, ['equals', 'contains', 'matches', 'isEmail', 'isURL', 'isMACAddress', 'isIP', 'isFQDN', 'isBoolean', 'isAlpha', 'isAlphanumeric', 'isNumeric', 'isPort', 'isLowercase', 'isUppercase', 'isAscii', 'isFullWidth', 'isHalfWidth', 'isVariableWidth', 'isMultibyte', 'isSurrogatePair', 'isInt', 'isFloat', 'isDecimal', 'isHexadecimal', 'isDivisibleBy', 'isHexColor', 'isISRC', 'isMD5', 'isHash', 'isJSON', 'isEmpty', 'isLength', 'isByteLength', 'isUUID', 'isMongoId', 'isAfter', 'isBefore', 'isIn', 'isCreditCard', 'isISIN', 'isISBN', 'isISSN', 'isMobilePhone', 'isPostalCode', 'isCurrency', 'isISO8601', 'isISO31661Alpha2', 'isBase64', 'isDataURI', 'isMimeType', 'isLatLong']);
const RE_PHONE = /^((\+|00)\d+)?(\(\d+\))?((\ |-)?\d+)*$/;

module.exports.isPhone = function (value) {
  return RE_PHONE.test(value);
};

module.exports.min = function (value, minValue) {
  return value >= minValue;
};

module.exports.max = function (value, maxValue) {
  return value <= maxValue;
};

module.exports.gt = function (value, minValue) {
  return value > minValue;
};

module.exports.lt = function (value, maxValue) {
  return value < maxValue;
};

module.exports.maxLength = function (value, maxLength) {
  return value.length <= maxLength;
};

module.exports.notNull = function (value) {
  return !isNothing(value);
};

module.exports.notNullIf = function (value, condition) {
  return !condition || !isNothing(value);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9WYWxpZGF0b3JzLmpzIl0sIm5hbWVzIjpbIlV0aWwiLCJyZXF1aXJlIiwiXyIsImlzTm90aGluZyIsInZhbGlkYXRvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJwaWNrIiwiUkVfUEhPTkUiLCJpc1Bob25lIiwidmFsdWUiLCJ0ZXN0IiwibWluIiwibWluVmFsdWUiLCJtYXgiLCJtYXhWYWx1ZSIsImd0IiwibHQiLCJtYXhMZW5ndGgiLCJsZW5ndGgiLCJub3ROdWxsIiwibm90TnVsbElmIiwiY29uZGl0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBcEI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQVFGLElBQWQ7O0FBQ0EsTUFBTTtBQUFFRyxFQUFBQTtBQUFGLElBQWdCRixPQUFPLENBQUMsY0FBRCxDQUE3Qjs7QUFFQSxNQUFNRyxTQUFTLEdBQUdILE9BQU8sQ0FBQyxXQUFELENBQXpCOztBQUVBSSxNQUFNLENBQUNDLE9BQVAsR0FBaUJKLENBQUMsQ0FBQ0ssSUFBRixDQUFPSCxTQUFQLEVBQWtCLENBQy9CLFFBRCtCLEVBRS9CLFVBRitCLEVBRy9CLFNBSCtCLEVBSS9CLFNBSitCLEVBSy9CLE9BTCtCLEVBTS9CLGNBTitCLEVBTy9CLE1BUCtCLEVBUS9CLFFBUitCLEVBUy9CLFdBVCtCLEVBVS9CLFNBVitCLEVBVy9CLGdCQVgrQixFQVkvQixXQVorQixFQWEvQixRQWIrQixFQWMvQixhQWQrQixFQWUvQixhQWYrQixFQWdCL0IsU0FoQitCLEVBaUIvQixhQWpCK0IsRUFrQi9CLGFBbEIrQixFQW1CL0IsaUJBbkIrQixFQW9CL0IsYUFwQitCLEVBcUIvQixpQkFyQitCLEVBc0IvQixPQXRCK0IsRUF1Qi9CLFNBdkIrQixFQXdCL0IsV0F4QitCLEVBeUIvQixlQXpCK0IsRUEwQi9CLGVBMUIrQixFQTJCL0IsWUEzQitCLEVBNEIvQixRQTVCK0IsRUE2Qi9CLE9BN0IrQixFQThCL0IsUUE5QitCLEVBK0IvQixRQS9CK0IsRUFnQy9CLFNBaEMrQixFQWlDL0IsVUFqQytCLEVBa0MvQixjQWxDK0IsRUFtQy9CLFFBbkMrQixFQW9DL0IsV0FwQytCLEVBcUMvQixTQXJDK0IsRUFzQy9CLFVBdEMrQixFQXVDL0IsTUF2QytCLEVBd0MvQixjQXhDK0IsRUF5Qy9CLFFBekMrQixFQTBDL0IsUUExQytCLEVBMkMvQixRQTNDK0IsRUE0Qy9CLGVBNUMrQixFQTZDL0IsY0E3QytCLEVBOEMvQixZQTlDK0IsRUErQy9CLFdBL0MrQixFQWdEL0Isa0JBaEQrQixFQWlEL0IsVUFqRCtCLEVBa0QvQixXQWxEK0IsRUFtRC9CLFlBbkQrQixFQW9EL0IsV0FwRCtCLENBQWxCLENBQWpCO0FBdURBLE1BQU1JLFFBQVEsR0FBRyx3Q0FBakI7O0FBRUFILE1BQU0sQ0FBQ0MsT0FBUCxDQUFlRyxPQUFmLEdBQXlCLFVBQVVDLEtBQVYsRUFBaUI7QUFDdEMsU0FBT0YsUUFBUSxDQUFDRyxJQUFULENBQWNELEtBQWQsQ0FBUDtBQUNILENBRkQ7O0FBSUFMLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlTSxHQUFmLEdBQXFCLFVBQVVGLEtBQVYsRUFBaUJHLFFBQWpCLEVBQTJCO0FBQzVDLFNBQU9ILEtBQUssSUFBSUcsUUFBaEI7QUFDSCxDQUZEOztBQUlBUixNQUFNLENBQUNDLE9BQVAsQ0FBZVEsR0FBZixHQUFxQixVQUFVSixLQUFWLEVBQWlCSyxRQUFqQixFQUEyQjtBQUM1QyxTQUFPTCxLQUFLLElBQUlLLFFBQWhCO0FBQ0gsQ0FGRDs7QUFJQVYsTUFBTSxDQUFDQyxPQUFQLENBQWVVLEVBQWYsR0FBb0IsVUFBVU4sS0FBVixFQUFpQkcsUUFBakIsRUFBMkI7QUFDM0MsU0FBT0gsS0FBSyxHQUFHRyxRQUFmO0FBQ0gsQ0FGRDs7QUFJQVIsTUFBTSxDQUFDQyxPQUFQLENBQWVXLEVBQWYsR0FBb0IsVUFBVVAsS0FBVixFQUFpQkssUUFBakIsRUFBMkI7QUFDM0MsU0FBT0wsS0FBSyxHQUFHSyxRQUFmO0FBQ0gsQ0FGRDs7QUFJQVYsTUFBTSxDQUFDQyxPQUFQLENBQWVZLFNBQWYsR0FBMkIsVUFBVVIsS0FBVixFQUFpQlEsU0FBakIsRUFBNEI7QUFDbkQsU0FBT1IsS0FBSyxDQUFDUyxNQUFOLElBQWdCRCxTQUF2QjtBQUNILENBRkQ7O0FBSUFiLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlYyxPQUFmLEdBQXlCLFVBQVVWLEtBQVYsRUFBaUI7QUFDdEMsU0FBTyxDQUFDUCxTQUFTLENBQUNPLEtBQUQsQ0FBakI7QUFDSCxDQUZEOztBQUlBTCxNQUFNLENBQUNDLE9BQVAsQ0FBZWUsU0FBZixHQUEyQixVQUFVWCxLQUFWLEVBQWlCWSxTQUFqQixFQUE0QjtBQUNuRCxTQUFPLENBQUNBLFNBQUQsSUFBYyxDQUFDbkIsU0FBUyxDQUFDTyxLQUFELENBQS9CO0FBQ0gsQ0FGRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBVdGlsID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHsgXyB9ID0gVXRpbDtcbmNvbnN0IHsgaXNOb3RoaW5nIH0gPSByZXF1aXJlKCcuL3V0aWxzL2xhbmcnKTtcblxuY29uc3QgdmFsaWRhdG9yID0gcmVxdWlyZSgndmFsaWRhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gXy5waWNrKHZhbGlkYXRvciwgWyBcbiAgICAnZXF1YWxzJyxcbiAgICAnY29udGFpbnMnLFxuICAgICdtYXRjaGVzJyxcbiAgICAnaXNFbWFpbCcsXG4gICAgJ2lzVVJMJyxcbiAgICAnaXNNQUNBZGRyZXNzJyxcbiAgICAnaXNJUCcsXG4gICAgJ2lzRlFETicsXG4gICAgJ2lzQm9vbGVhbicsXG4gICAgJ2lzQWxwaGEnLFxuICAgICdpc0FscGhhbnVtZXJpYycsXG4gICAgJ2lzTnVtZXJpYycsXG4gICAgJ2lzUG9ydCcsXG4gICAgJ2lzTG93ZXJjYXNlJyxcbiAgICAnaXNVcHBlcmNhc2UnLFxuICAgICdpc0FzY2lpJyxcbiAgICAnaXNGdWxsV2lkdGgnLFxuICAgICdpc0hhbGZXaWR0aCcsXG4gICAgJ2lzVmFyaWFibGVXaWR0aCcsXG4gICAgJ2lzTXVsdGlieXRlJyxcbiAgICAnaXNTdXJyb2dhdGVQYWlyJyxcbiAgICAnaXNJbnQnLFxuICAgICdpc0Zsb2F0JyxcbiAgICAnaXNEZWNpbWFsJyxcbiAgICAnaXNIZXhhZGVjaW1hbCcsXG4gICAgJ2lzRGl2aXNpYmxlQnknLFxuICAgICdpc0hleENvbG9yJyxcbiAgICAnaXNJU1JDJyxcbiAgICAnaXNNRDUnLFxuICAgICdpc0hhc2gnLFxuICAgICdpc0pTT04nLFxuICAgICdpc0VtcHR5JyxcbiAgICAnaXNMZW5ndGgnLFxuICAgICdpc0J5dGVMZW5ndGgnLFxuICAgICdpc1VVSUQnLFxuICAgICdpc01vbmdvSWQnLFxuICAgICdpc0FmdGVyJyxcbiAgICAnaXNCZWZvcmUnLFxuICAgICdpc0luJyxcbiAgICAnaXNDcmVkaXRDYXJkJyxcbiAgICAnaXNJU0lOJyxcbiAgICAnaXNJU0JOJyxcbiAgICAnaXNJU1NOJyxcbiAgICAnaXNNb2JpbGVQaG9uZScsXG4gICAgJ2lzUG9zdGFsQ29kZScsXG4gICAgJ2lzQ3VycmVuY3knLFxuICAgICdpc0lTTzg2MDEnLFxuICAgICdpc0lTTzMxNjYxQWxwaGEyJyxcbiAgICAnaXNCYXNlNjQnLFxuICAgICdpc0RhdGFVUkknLFxuICAgICdpc01pbWVUeXBlJyxcbiAgICAnaXNMYXRMb25nJ1xuXSk7XG5cbmNvbnN0IFJFX1BIT05FID0gL14oKFxcK3wwMClcXGQrKT8oXFwoXFxkK1xcKSk/KChcXCB8LSk/XFxkKykqJC87XG5cbm1vZHVsZS5leHBvcnRzLmlzUGhvbmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gUkVfUEhPTkUudGVzdCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzLm1pbiA9IGZ1bmN0aW9uICh2YWx1ZSwgbWluVmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPj0gbWluVmFsdWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5tYXggPSBmdW5jdGlvbiAodmFsdWUsIG1heFZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIDw9IG1heFZhbHVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMuZ3QgPSBmdW5jdGlvbiAodmFsdWUsIG1pblZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID4gbWluVmFsdWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5sdCA9IGZ1bmN0aW9uICh2YWx1ZSwgbWF4VmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPCBtYXhWYWx1ZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLm1heExlbmd0aCA9IGZ1bmN0aW9uICh2YWx1ZSwgbWF4TGVuZ3RoKSB7XG4gICAgcmV0dXJuIHZhbHVlLmxlbmd0aCA8PSBtYXhMZW5ndGg7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5ub3ROdWxsID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuICFpc05vdGhpbmcodmFsdWUpO1xufTtcblxubW9kdWxlLmV4cG9ydHMubm90TnVsbElmID0gZnVuY3Rpb24gKHZhbHVlLCBjb25kaXRpb24pIHtcbiAgICByZXR1cm4gIWNvbmRpdGlvbiB8fCAhaXNOb3RoaW5nKHZhbHVlKTtcbn07Il19