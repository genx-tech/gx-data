"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  _
} = Util;

const {
  isNothing
} = require('./utils/lang');

const {
  tryRequire
} = require('./utils/lib');

const validator = require('validator');

module.exports = _.pick(validator, ['equals', 'contains', 'matches', 'isEmail', 'isURL', 'isMACAddress', 'isIP', 'isFQDN', 'isBoolean', 'isAlpha', 'isAlphanumeric', 'isNumeric', 'isPort', 'isLowercase', 'isUppercase', 'isAscii', 'isFullWidth', 'isHalfWidth', 'isVariableWidth', 'isMultibyte', 'isSurrogatePair', 'isInt', 'isFloat', 'isDecimal', 'isHexadecimal', 'isDivisibleBy', 'isHexColor', 'isISRC', 'isMD5', 'isHash', 'isJSON', 'isEmpty', 'isLength', 'isByteLength', 'isUUID', 'isMongoId', 'isAfter', 'isBefore', 'isIn', 'isCreditCard', 'isISIN', 'isISBN', 'isISSN', 'isMobilePhone', 'isPostalCode', 'isCurrency', 'isISO8601', 'isISO31661Alpha2', 'isBase64', 'isDataURI', 'isMimeType', 'isLatLong']);
const RE_PHONE = /^((\+|00)\d+)?(\(\d+\))?((\ |-)?\d+)*$/;

module.exports.isPhone = function (value) {
  return RE_PHONE.test(value);
};

module.exports.min = function (value, minValue) {
  return value >= minValue;
};

module.exports.max = function (value, maxValue) {
  return value <= maxValue;
};

module.exports.gt = function (value, minValue) {
  return value > minValue;
};

module.exports.lt = function (value, maxValue) {
  return value < maxValue;
};

module.exports.maxLength = function (value, maxLength) {
  return value.length <= maxLength;
};

module.exports.notNull = function (value) {
  return !isNothing(value);
};

module.exports.notNullIf = function (value, condition) {
  return !condition || !isNothing(value);
};

function validate(obj, condition) {
  const {
    Query
  } = tryRequire('mingo');
  let query = new Query(condition);
  return query.test(obj);
}

module.exports.validate = validate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9WYWxpZGF0b3JzLmpzIl0sIm5hbWVzIjpbIlV0aWwiLCJyZXF1aXJlIiwiXyIsImlzTm90aGluZyIsInRyeVJlcXVpcmUiLCJ2YWxpZGF0b3IiLCJtb2R1bGUiLCJleHBvcnRzIiwicGljayIsIlJFX1BIT05FIiwiaXNQaG9uZSIsInZhbHVlIiwidGVzdCIsIm1pbiIsIm1pblZhbHVlIiwibWF4IiwibWF4VmFsdWUiLCJndCIsImx0IiwibWF4TGVuZ3RoIiwibGVuZ3RoIiwibm90TnVsbCIsIm5vdE51bGxJZiIsImNvbmRpdGlvbiIsInZhbGlkYXRlIiwib2JqIiwiUXVlcnkiLCJxdWVyeSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFRRixJQUFkOztBQUNBLE1BQU07QUFBRUcsRUFBQUE7QUFBRixJQUFnQkYsT0FBTyxDQUFDLGNBQUQsQ0FBN0I7O0FBQ0EsTUFBTTtBQUFFRyxFQUFBQTtBQUFGLElBQWlCSCxPQUFPLENBQUMsYUFBRCxDQUE5Qjs7QUFFQSxNQUFNSSxTQUFTLEdBQUdKLE9BQU8sQ0FBQyxXQUFELENBQXpCOztBQUVBSyxNQUFNLENBQUNDLE9BQVAsR0FBaUJMLENBQUMsQ0FBQ00sSUFBRixDQUFPSCxTQUFQLEVBQWtCLENBQy9CLFFBRCtCLEVBRS9CLFVBRitCLEVBRy9CLFNBSCtCLEVBSS9CLFNBSitCLEVBSy9CLE9BTCtCLEVBTS9CLGNBTitCLEVBTy9CLE1BUCtCLEVBUS9CLFFBUitCLEVBUy9CLFdBVCtCLEVBVS9CLFNBVitCLEVBVy9CLGdCQVgrQixFQVkvQixXQVorQixFQWEvQixRQWIrQixFQWMvQixhQWQrQixFQWUvQixhQWYrQixFQWdCL0IsU0FoQitCLEVBaUIvQixhQWpCK0IsRUFrQi9CLGFBbEIrQixFQW1CL0IsaUJBbkIrQixFQW9CL0IsYUFwQitCLEVBcUIvQixpQkFyQitCLEVBc0IvQixPQXRCK0IsRUF1Qi9CLFNBdkIrQixFQXdCL0IsV0F4QitCLEVBeUIvQixlQXpCK0IsRUEwQi9CLGVBMUIrQixFQTJCL0IsWUEzQitCLEVBNEIvQixRQTVCK0IsRUE2Qi9CLE9BN0IrQixFQThCL0IsUUE5QitCLEVBK0IvQixRQS9CK0IsRUFnQy9CLFNBaEMrQixFQWlDL0IsVUFqQytCLEVBa0MvQixjQWxDK0IsRUFtQy9CLFFBbkMrQixFQW9DL0IsV0FwQytCLEVBcUMvQixTQXJDK0IsRUFzQy9CLFVBdEMrQixFQXVDL0IsTUF2QytCLEVBd0MvQixjQXhDK0IsRUF5Qy9CLFFBekMrQixFQTBDL0IsUUExQytCLEVBMkMvQixRQTNDK0IsRUE0Qy9CLGVBNUMrQixFQTZDL0IsY0E3QytCLEVBOEMvQixZQTlDK0IsRUErQy9CLFdBL0MrQixFQWdEL0Isa0JBaEQrQixFQWlEL0IsVUFqRCtCLEVBa0QvQixXQWxEK0IsRUFtRC9CLFlBbkQrQixFQW9EL0IsV0FwRCtCLENBQWxCLENBQWpCO0FBdURBLE1BQU1JLFFBQVEsR0FBRyx3Q0FBakI7O0FBRUFILE1BQU0sQ0FBQ0MsT0FBUCxDQUFlRyxPQUFmLEdBQXlCLFVBQVVDLEtBQVYsRUFBaUI7QUFDdEMsU0FBT0YsUUFBUSxDQUFDRyxJQUFULENBQWNELEtBQWQsQ0FBUDtBQUNILENBRkQ7O0FBSUFMLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlTSxHQUFmLEdBQXFCLFVBQVVGLEtBQVYsRUFBaUJHLFFBQWpCLEVBQTJCO0FBQzVDLFNBQU9ILEtBQUssSUFBSUcsUUFBaEI7QUFDSCxDQUZEOztBQUlBUixNQUFNLENBQUNDLE9BQVAsQ0FBZVEsR0FBZixHQUFxQixVQUFVSixLQUFWLEVBQWlCSyxRQUFqQixFQUEyQjtBQUM1QyxTQUFPTCxLQUFLLElBQUlLLFFBQWhCO0FBQ0gsQ0FGRDs7QUFJQVYsTUFBTSxDQUFDQyxPQUFQLENBQWVVLEVBQWYsR0FBb0IsVUFBVU4sS0FBVixFQUFpQkcsUUFBakIsRUFBMkI7QUFDM0MsU0FBT0gsS0FBSyxHQUFHRyxRQUFmO0FBQ0gsQ0FGRDs7QUFJQVIsTUFBTSxDQUFDQyxPQUFQLENBQWVXLEVBQWYsR0FBb0IsVUFBVVAsS0FBVixFQUFpQkssUUFBakIsRUFBMkI7QUFDM0MsU0FBT0wsS0FBSyxHQUFHSyxRQUFmO0FBQ0gsQ0FGRDs7QUFJQVYsTUFBTSxDQUFDQyxPQUFQLENBQWVZLFNBQWYsR0FBMkIsVUFBVVIsS0FBVixFQUFpQlEsU0FBakIsRUFBNEI7QUFDbkQsU0FBT1IsS0FBSyxDQUFDUyxNQUFOLElBQWdCRCxTQUF2QjtBQUNILENBRkQ7O0FBSUFiLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlYyxPQUFmLEdBQXlCLFVBQVVWLEtBQVYsRUFBaUI7QUFDdEMsU0FBTyxDQUFDUixTQUFTLENBQUNRLEtBQUQsQ0FBakI7QUFDSCxDQUZEOztBQUlBTCxNQUFNLENBQUNDLE9BQVAsQ0FBZWUsU0FBZixHQUEyQixVQUFVWCxLQUFWLEVBQWlCWSxTQUFqQixFQUE0QjtBQUNuRCxTQUFPLENBQUNBLFNBQUQsSUFBYyxDQUFDcEIsU0FBUyxDQUFDUSxLQUFELENBQS9CO0FBQ0gsQ0FGRDs7QUFVQSxTQUFTYSxRQUFULENBQWtCQyxHQUFsQixFQUF1QkYsU0FBdkIsRUFBa0M7QUFDOUIsUUFBTTtBQUFFRyxJQUFBQTtBQUFGLE1BQVl0QixVQUFVLENBQUMsT0FBRCxDQUE1QjtBQUNBLE1BQUl1QixLQUFLLEdBQUcsSUFBSUQsS0FBSixDQUFVSCxTQUFWLENBQVo7QUFHQSxTQUFPSSxLQUFLLENBQUNmLElBQU4sQ0FBV2EsR0FBWCxDQUFQO0FBQ0g7O0FBRURuQixNQUFNLENBQUNDLE9BQVAsQ0FBZWlCLFFBQWYsR0FBMEJBLFFBQTFCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IFV0aWwgPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyBfIH0gPSBVdGlsO1xuY29uc3QgeyBpc05vdGhpbmcgfSA9IHJlcXVpcmUoJy4vdXRpbHMvbGFuZycpO1xuY29uc3QgeyB0cnlSZXF1aXJlIH0gPSByZXF1aXJlKCcuL3V0aWxzL2xpYicpO1xuXG5jb25zdCB2YWxpZGF0b3IgPSByZXF1aXJlKCd2YWxpZGF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBfLnBpY2sodmFsaWRhdG9yLCBbIFxuICAgICdlcXVhbHMnLFxuICAgICdjb250YWlucycsXG4gICAgJ21hdGNoZXMnLFxuICAgICdpc0VtYWlsJyxcbiAgICAnaXNVUkwnLFxuICAgICdpc01BQ0FkZHJlc3MnLFxuICAgICdpc0lQJyxcbiAgICAnaXNGUUROJyxcbiAgICAnaXNCb29sZWFuJyxcbiAgICAnaXNBbHBoYScsXG4gICAgJ2lzQWxwaGFudW1lcmljJyxcbiAgICAnaXNOdW1lcmljJyxcbiAgICAnaXNQb3J0JyxcbiAgICAnaXNMb3dlcmNhc2UnLFxuICAgICdpc1VwcGVyY2FzZScsXG4gICAgJ2lzQXNjaWknLFxuICAgICdpc0Z1bGxXaWR0aCcsXG4gICAgJ2lzSGFsZldpZHRoJyxcbiAgICAnaXNWYXJpYWJsZVdpZHRoJyxcbiAgICAnaXNNdWx0aWJ5dGUnLFxuICAgICdpc1N1cnJvZ2F0ZVBhaXInLFxuICAgICdpc0ludCcsXG4gICAgJ2lzRmxvYXQnLFxuICAgICdpc0RlY2ltYWwnLFxuICAgICdpc0hleGFkZWNpbWFsJyxcbiAgICAnaXNEaXZpc2libGVCeScsXG4gICAgJ2lzSGV4Q29sb3InLFxuICAgICdpc0lTUkMnLFxuICAgICdpc01ENScsXG4gICAgJ2lzSGFzaCcsXG4gICAgJ2lzSlNPTicsXG4gICAgJ2lzRW1wdHknLFxuICAgICdpc0xlbmd0aCcsXG4gICAgJ2lzQnl0ZUxlbmd0aCcsXG4gICAgJ2lzVVVJRCcsXG4gICAgJ2lzTW9uZ29JZCcsXG4gICAgJ2lzQWZ0ZXInLFxuICAgICdpc0JlZm9yZScsXG4gICAgJ2lzSW4nLFxuICAgICdpc0NyZWRpdENhcmQnLFxuICAgICdpc0lTSU4nLFxuICAgICdpc0lTQk4nLFxuICAgICdpc0lTU04nLFxuICAgICdpc01vYmlsZVBob25lJyxcbiAgICAnaXNQb3N0YWxDb2RlJyxcbiAgICAnaXNDdXJyZW5jeScsXG4gICAgJ2lzSVNPODYwMScsXG4gICAgJ2lzSVNPMzE2NjFBbHBoYTInLFxuICAgICdpc0Jhc2U2NCcsXG4gICAgJ2lzRGF0YVVSSScsXG4gICAgJ2lzTWltZVR5cGUnLFxuICAgICdpc0xhdExvbmcnXG5dKTtcblxuY29uc3QgUkVfUEhPTkUgPSAvXigoXFwrfDAwKVxcZCspPyhcXChcXGQrXFwpKT8oKFxcIHwtKT9cXGQrKSokLztcblxubW9kdWxlLmV4cG9ydHMuaXNQaG9uZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBSRV9QSE9ORS50ZXN0KHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMubWluID0gZnVuY3Rpb24gKHZhbHVlLCBtaW5WYWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA+PSBtaW5WYWx1ZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLm1heCA9IGZ1bmN0aW9uICh2YWx1ZSwgbWF4VmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPD0gbWF4VmFsdWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5ndCA9IGZ1bmN0aW9uICh2YWx1ZSwgbWluVmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPiBtaW5WYWx1ZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLmx0ID0gZnVuY3Rpb24gKHZhbHVlLCBtYXhWYWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA8IG1heFZhbHVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMubWF4TGVuZ3RoID0gZnVuY3Rpb24gKHZhbHVlLCBtYXhMZW5ndGgpIHtcbiAgICByZXR1cm4gdmFsdWUubGVuZ3RoIDw9IG1heExlbmd0aDtcbn07XG5cbm1vZHVsZS5leHBvcnRzLm5vdE51bGwgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gIWlzTm90aGluZyh2YWx1ZSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5ub3ROdWxsSWYgPSBmdW5jdGlvbiAodmFsdWUsIGNvbmRpdGlvbikge1xuICAgIHJldHVybiAhY29uZGl0aW9uIHx8ICFpc05vdGhpbmcodmFsdWUpO1xufTtcblxuLyoqXG4gKiBWYWxpZGF0ZSBhbiBvYmogd2l0aCBjb25kaXRpb24gbGlrZSBtb25nby1zdHlsZSBxdWVyeVxuICogQHBhcmFtIHsqfSBvYmogXG4gKiBAcGFyYW0ge2FycmF5fG9iamVjdH0gY29uZGl0aW9uIFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlKG9iaiwgY29uZGl0aW9uKSB7ICAgIFxuICAgIGNvbnN0IHsgUXVlcnkgfSA9IHRyeVJlcXVpcmUoJ21pbmdvJyk7XG4gICAgbGV0IHF1ZXJ5ID0gbmV3IFF1ZXJ5KGNvbmRpdGlvbik7XG4gICAgXG4gICAgLy8gdGVzdCBpZiBhbiBvYmplY3QgbWF0Y2hlcyBxdWVyeVxuICAgIHJldHVybiBxdWVyeS50ZXN0KG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzLnZhbGlkYXRlID0gdmFsaWRhdGU7Il19