"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  generateDisplayName,
  deepCloneField,
  Clonable,
  fieldNaming
} = require('./OolUtils');

const Types = require('../runtime/types');

const RESERVED_KEYS = new Set(['name', 'type', 'modifiers', 'subClass', 'values']);

class Field extends Clonable {
  constructor(name, info) {
    super();
    this.name = fieldNaming(name);
    this.info = info;
  }

  link() {
    if (!Types.Builtin.has(this.info.type)) {
      throw new Error("Assertion failed: Types.Builtin.has(this.info.type)");
    }

    let typeObject = Types[this.info.type];

    _.forOwn(this.info, (value, key) => {
      if (RESERVED_KEYS.has(key)) {
        this[key] = value;
        return;
      }

      if (!typeObject.qualifiers.includes(key)) {
        throw new Error(`Unsupported field qualifier "${key}" for type "${this.info.type}" of field "${this.name}."`);
      }

      this[key] = Array.isArray(value) ? value[0] : value;
    });

    this.displayName = generateDisplayName(this.name);
    deepCloneField(this.info, this, 'modifiers');
    this.linked = true;
  }

  hasSameType(targetField) {
    return _.isEqual(this.toJSON(), targetField);
  }

  clone() {
    super.clone();
    let field = new Field(this.name, this.info);
    Object.assign(field, this.toJSON());
    field.linked = true;
    return field;
  }

  toJSON() {
    return _.omit(_.toPlainObject(this), ['name', 'linked', 'info']);
  }

}

module.exports = Field;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW5nL0ZpZWxkLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiZ2VuZXJhdGVEaXNwbGF5TmFtZSIsImRlZXBDbG9uZUZpZWxkIiwiQ2xvbmFibGUiLCJmaWVsZE5hbWluZyIsIlR5cGVzIiwiUkVTRVJWRURfS0VZUyIsIlNldCIsIkZpZWxkIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiaW5mbyIsImxpbmsiLCJCdWlsdGluIiwiaGFzIiwidHlwZSIsInR5cGVPYmplY3QiLCJmb3JPd24iLCJ2YWx1ZSIsImtleSIsInF1YWxpZmllcnMiLCJpbmNsdWRlcyIsIkVycm9yIiwiQXJyYXkiLCJpc0FycmF5IiwiZGlzcGxheU5hbWUiLCJsaW5rZWQiLCJoYXNTYW1lVHlwZSIsInRhcmdldEZpZWxkIiwiaXNFcXVhbCIsInRvSlNPTiIsImNsb25lIiwiZmllbGQiLCJPYmplY3QiLCJhc3NpZ24iLCJvbWl0IiwidG9QbGFpbk9iamVjdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVFDLE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsbUJBQUY7QUFBdUJDLEVBQUFBLGNBQXZCO0FBQXVDQyxFQUFBQSxRQUF2QztBQUFpREMsRUFBQUE7QUFBakQsSUFBaUVKLE9BQU8sQ0FBQyxZQUFELENBQTlFOztBQUNBLE1BQU1LLEtBQUssR0FBR0wsT0FBTyxDQUFDLGtCQUFELENBQXJCOztBQUNBLE1BQU1NLGFBQWEsR0FBRyxJQUFJQyxHQUFKLENBQVEsQ0FBQyxNQUFELEVBQVMsTUFBVCxFQUFpQixXQUFqQixFQUE4QixVQUE5QixFQUEwQyxRQUExQyxDQUFSLENBQXRCOztBQU1BLE1BQU1DLEtBQU4sU0FBb0JMLFFBQXBCLENBQTZCO0FBS3pCTSxFQUFBQSxXQUFXLENBQUNDLElBQUQsRUFBT0MsSUFBUCxFQUFhO0FBQ3BCO0FBRUEsU0FBS0QsSUFBTCxHQUFZTixXQUFXLENBQUNNLElBQUQsQ0FBdkI7QUFNQSxTQUFLQyxJQUFMLEdBQVlBLElBQVo7QUFDSDs7QUFLREMsRUFBQUEsSUFBSSxHQUFHO0FBQUEsU0FDS1AsS0FBSyxDQUFDUSxPQUFOLENBQWNDLEdBQWQsQ0FBa0IsS0FBS0gsSUFBTCxDQUFVSSxJQUE1QixDQURMO0FBQUE7QUFBQTs7QUFFSCxRQUFJQyxVQUFVLEdBQUdYLEtBQUssQ0FBQyxLQUFLTSxJQUFMLENBQVVJLElBQVgsQ0FBdEI7O0FBRUFoQixJQUFBQSxDQUFDLENBQUNrQixNQUFGLENBQVMsS0FBS04sSUFBZCxFQUFvQixDQUFDTyxLQUFELEVBQVFDLEdBQVIsS0FBZ0I7QUFDaEMsVUFBSWIsYUFBYSxDQUFDUSxHQUFkLENBQWtCSyxHQUFsQixDQUFKLEVBQTRCO0FBQ3hCLGFBQUtBLEdBQUwsSUFBWUQsS0FBWjtBQUNBO0FBQ0g7O0FBRUQsVUFBSSxDQUFDRixVQUFVLENBQUNJLFVBQVgsQ0FBc0JDLFFBQXRCLENBQStCRixHQUEvQixDQUFMLEVBQTBDO0FBQ3RDLGNBQU0sSUFBSUcsS0FBSixDQUFXLGdDQUErQkgsR0FBSSxlQUFjLEtBQUtSLElBQUwsQ0FBVUksSUFBSyxlQUFjLEtBQUtMLElBQUssSUFBbkcsQ0FBTjtBQUNIOztBQUVELFdBQUtTLEdBQUwsSUFBWUksS0FBSyxDQUFDQyxPQUFOLENBQWNOLEtBQWQsSUFBdUJBLEtBQUssQ0FBQyxDQUFELENBQTVCLEdBQWtDQSxLQUE5QztBQUNILEtBWEQ7O0FBaUJBLFNBQUtPLFdBQUwsR0FBbUJ4QixtQkFBbUIsQ0FBQyxLQUFLUyxJQUFOLENBQXRDO0FBRUFSLElBQUFBLGNBQWMsQ0FBQyxLQUFLUyxJQUFOLEVBQVksSUFBWixFQUFrQixXQUFsQixDQUFkO0FBRUEsU0FBS2UsTUFBTCxHQUFjLElBQWQ7QUFDSDs7QUFFREMsRUFBQUEsV0FBVyxDQUFDQyxXQUFELEVBQWM7QUFDckIsV0FBTzdCLENBQUMsQ0FBQzhCLE9BQUYsQ0FBVSxLQUFLQyxNQUFMLEVBQVYsRUFBeUJGLFdBQXpCLENBQVA7QUFDSDs7QUFNREcsRUFBQUEsS0FBSyxHQUFHO0FBQ0osVUFBTUEsS0FBTjtBQUVBLFFBQUlDLEtBQUssR0FBRyxJQUFJeEIsS0FBSixDQUFVLEtBQUtFLElBQWYsRUFBcUIsS0FBS0MsSUFBMUIsQ0FBWjtBQUNBc0IsSUFBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWNGLEtBQWQsRUFBcUIsS0FBS0YsTUFBTCxFQUFyQjtBQUNBRSxJQUFBQSxLQUFLLENBQUNOLE1BQU4sR0FBZSxJQUFmO0FBRUEsV0FBT00sS0FBUDtBQUNIOztBQU1ERixFQUFBQSxNQUFNLEdBQUc7QUFDTCxXQUFPL0IsQ0FBQyxDQUFDb0MsSUFBRixDQUFPcEMsQ0FBQyxDQUFDcUMsYUFBRixDQUFnQixJQUFoQixDQUFQLEVBQThCLENBQUUsTUFBRixFQUFVLFFBQVYsRUFBb0IsTUFBcEIsQ0FBOUIsQ0FBUDtBQUNIOztBQXhFd0I7O0FBMkU3QkMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCOUIsS0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgeyBfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyBnZW5lcmF0ZURpc3BsYXlOYW1lLCBkZWVwQ2xvbmVGaWVsZCwgQ2xvbmFibGUsIGZpZWxkTmFtaW5nIH0gPSByZXF1aXJlKCcuL09vbFV0aWxzJyk7XG5jb25zdCBUeXBlcyA9IHJlcXVpcmUoJy4uL3J1bnRpbWUvdHlwZXMnKTtcbmNvbnN0IFJFU0VSVkVEX0tFWVMgPSBuZXcgU2V0KFsnbmFtZScsICd0eXBlJywgJ21vZGlmaWVycycsICdzdWJDbGFzcycsICd2YWx1ZXMnXSk7XG5cbi8qKlxuICogT29sb25nIGVudGl0eSBmaWVsZCBjbGFzcy5cbiAqIEBjbGFzc1xuICovXG5jbGFzcyBGaWVsZCBleHRlbmRzIENsb25hYmxlIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBpbmZvXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobmFtZSwgaW5mbykge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMubmFtZSA9IGZpZWxkTmFtaW5nKG5hbWUpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPcmlnaW5hbCB0eXBlIGluZm9ybWF0aW9uLlxuICAgICAgICAgKiBAbWVtYmVyIHtvYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmluZm8gPSBpbmZvOyAgICAgICAgXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGlua2luZyB0aGUgXG4gICAgICovXG4gICAgbGluaygpIHtcbiAgICAgICAgYXNzZXJ0OiBUeXBlcy5CdWlsdGluLmhhcyh0aGlzLmluZm8udHlwZSk7XG4gICAgICAgIGxldCB0eXBlT2JqZWN0ID0gVHlwZXNbdGhpcy5pbmZvLnR5cGVdO1xuXG4gICAgICAgIF8uZm9yT3duKHRoaXMuaW5mbywgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgIGlmIChSRVNFUlZFRF9LRVlTLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgdGhpc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSAgICAgICBcblxuICAgICAgICAgICAgaWYgKCF0eXBlT2JqZWN0LnF1YWxpZmllcnMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZmllbGQgcXVhbGlmaWVyIFwiJHtrZXl9XCIgZm9yIHR5cGUgXCIke3RoaXMuaW5mby50eXBlfVwiIG9mIGZpZWxkIFwiJHt0aGlzLm5hbWV9LlwiYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXNba2V5XSA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWVbMF0gOiB2YWx1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBkZWZhdWx0IG5hbWUgb2YgdGhlIGZpZWxkXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGlzcGxheU5hbWUgPSBnZW5lcmF0ZURpc3BsYXlOYW1lKHRoaXMubmFtZSk7ICAgICAgICBcblxuICAgICAgICBkZWVwQ2xvbmVGaWVsZCh0aGlzLmluZm8sIHRoaXMsICdtb2RpZmllcnMnKTtcblxuICAgICAgICB0aGlzLmxpbmtlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaGFzU2FtZVR5cGUodGFyZ2V0RmllbGQpIHtcbiAgICAgICAgcmV0dXJuIF8uaXNFcXVhbCh0aGlzLnRvSlNPTigpLCB0YXJnZXRGaWVsZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvbmUgdGhlIGZpZWxkICAgICBcbiAgICAgKiBAcmV0dXJucyB7RmllbGR9XG4gICAgICovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHN1cGVyLmNsb25lKCk7XG5cbiAgICAgICAgbGV0IGZpZWxkID0gbmV3IEZpZWxkKHRoaXMubmFtZSwgdGhpcy5pbmZvKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihmaWVsZCwgdGhpcy50b0pTT04oKSk7XG4gICAgICAgIGZpZWxkLmxpbmtlZCA9IHRydWU7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZmllbGQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRlIHRoZSBmaWVsZCBpbnRvIGEgcGxhaW4gSlNPTiBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxuICAgICAqL1xuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIF8ub21pdChfLnRvUGxhaW5PYmplY3QodGhpcyksIFsgJ25hbWUnLCAnbGlua2VkJywgJ2luZm8nIF0pO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGaWVsZDsiXX0=