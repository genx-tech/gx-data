"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const FEATURE_NAME = 'autoId';

function feature(entity, args = []) {
  let typeInfo = {
    name: 'id',
    type: 'integer',
    auto: true,
    writeOnce: true
  };
  let [options] = args;
  let featureExtra = {};

  if (options) {
    if (typeof options === 'string') {
      options = {
        name: options
      };
    }

    if (options.type) {
      switch (options.type) {
        case 'integer':
          if (options.startFrom) {
            featureExtra.startFrom = options.startFrom;
          }

          break;

        case 'uuid':
          typeInfo['type'] = 'text';
          typeInfo['fixedLength'] = 36;
          typeInfo['generator'] = 'uuid';
          break;

        case 'shortid':
          typeInfo['type'] = 'text';
          typeInfo['maxLength'] = 20;
          typeInfo['generator'] = 'shortid';
          break;

        case 'uniqid':
          typeInfo['type'] = 'text';

          if (options.prefix) {
            if (typeof options.prefix !== 'string') {
              throw new Error(`"prefix" option should be a string. Entity: ${entity.name}, feature: autoId`);
            }

            typeInfo['fixedLength'] = 17 + options.prefix.length;
            typeInfo['generator'] = ['uniqid', options.prefix];
          } else {
            typeInfo['fixedLength'] = 17;
            typeInfo['generator'] = 'uniqid';
          }

          break;

        case 'hyperid':
          typeInfo['type'] = 'text';
          typeInfo['fixedLength'] = 33;
          let args = ['hyperid'];
          let opt = {};

          if (options.fixedLength) {
            opt.fixedLength = options.fixedLength;
          }

          if (options.urlSafe) {
            opt.urlSafe = options.urlSafe;
          }

          if (!_.isEmpty(opt)) {
            args.push(opt);
          }

          typeInfo['generator'] = args.length > 1 ? args : args[0];
          break;

        default:
          throw new Error(`Unsupported autoId type: ${options.type}. Entity: ${entity.name}`);
      }
    } else {
      if (options.startFrom) {
        featureExtra.startFrom = options.startFrom;
      }
    }

    if (options.name) {
      typeInfo.name = options.name;
    }
  }

  let fieldName = typeInfo.name;
  entity.addFeature(FEATURE_NAME, {
    field: fieldName,
    ...featureExtra
  }).on('beforeAddingFields', () => {
    entity.addField(fieldName, typeInfo).setKey(fieldName);
  });
}

module.exports = feature;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sYW5nL2VudGl0eUZlYXR1cmVzL2F1dG9JZC5qcyJdLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsIkZFQVRVUkVfTkFNRSIsImZlYXR1cmUiLCJlbnRpdHkiLCJhcmdzIiwidHlwZUluZm8iLCJuYW1lIiwidHlwZSIsImF1dG8iLCJ3cml0ZU9uY2UiLCJvcHRpb25zIiwiZmVhdHVyZUV4dHJhIiwic3RhcnRGcm9tIiwicHJlZml4IiwiRXJyb3IiLCJsZW5ndGgiLCJvcHQiLCJmaXhlZExlbmd0aCIsInVybFNhZmUiLCJpc0VtcHR5IiwicHVzaCIsImZpZWxkTmFtZSIsImFkZEZlYXR1cmUiLCJmaWVsZCIsIm9uIiwiYWRkRmllbGQiLCJzZXRLZXkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFRQyxPQUFPLENBQUMsVUFBRCxDQUFyQjs7QUFFQSxNQUFNQyxZQUFZLEdBQUcsUUFBckI7O0FBY0EsU0FBU0MsT0FBVCxDQUFpQkMsTUFBakIsRUFBeUJDLElBQUksR0FBRyxFQUFoQyxFQUFvQztBQUNoQyxNQUFJQyxRQUFRLEdBQUc7QUFDWEMsSUFBQUEsSUFBSSxFQUFFLElBREs7QUFFWEMsSUFBQUEsSUFBSSxFQUFFLFNBRks7QUFHWEMsSUFBQUEsSUFBSSxFQUFFLElBSEs7QUFJWEMsSUFBQUEsU0FBUyxFQUFFO0FBSkEsR0FBZjtBQU9BLE1BQUksQ0FBRUMsT0FBRixJQUFjTixJQUFsQjtBQUVBLE1BQUlPLFlBQVksR0FBRyxFQUFuQjs7QUFFQSxNQUFJRCxPQUFKLEVBQWE7QUFDVCxRQUFJLE9BQU9BLE9BQVAsS0FBbUIsUUFBdkIsRUFBaUM7QUFDN0JBLE1BQUFBLE9BQU8sR0FBRztBQUFFSixRQUFBQSxJQUFJLEVBQUVJO0FBQVIsT0FBVjtBQUNIOztBQUVELFFBQUlBLE9BQU8sQ0FBQ0gsSUFBWixFQUFrQjtBQUNkLGNBQVFHLE9BQU8sQ0FBQ0gs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USxDQUFDQyxJQUF6QjtBQUVBSCxFQUFBQSxNQUFNLENBQUNtQixVQUFQLENBQWtCckIsWUFBbEIsRUFBZ0M7QUFDNUJzQixJQUFBQSxLQUFLLEVBQUVGLFNBRHFCO0FBRTVCLE9BQUdWO0FBRnlCLEdBQWhDLEVBR0dhLEVBSEgsQ0FHTSxvQkFITixFQUc0QixNQUFNO0FBQzlCckIsSUFBQUEsTUFBTSxDQUFDc0IsUUFBUCxDQUFnQkosU0FBaEIsRUFBMkJoQixRQUEzQixFQUNLcUIsTUFETCxDQUNZTCxTQURaO0FBRUgsR0FORDtBQU9IOztBQUVETSxNQUFNLENBQUNDLE9BQVAsR0FBaUIxQixPQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB7IF8gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5cbmNvbnN0IEZFQVRVUkVfTkFNRSA9ICdhdXRvSWQnO1xuXG4vKipcbiAqIEEgcnVsZSBzcGVjaWZpZXMgdGhlIGlkIG9mIGVudGl0eSBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZC5cbiAqIEBtb2R1bGUgRW50aXR5RmVhdHVyZV9BdXRvSWRcbiAqL1xuXG4vKipcbiAqIEluaXRpYWxpemUgdGhlIGZlYXR1cmVcbiAqIEBwYXJhbSB7T29sb25nRW50aXR5fSBlbnRpdHkgLSBFbnRpdHkgdG8gYXBwbHkgdGhpcyBmZWF0dXJlXG4gKiBAcGFyYW0ge2FycmF5fSBvcHRpb25zIC0gQXV0byBpZCBmaWVsZCBvcHRpb25zXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW29wdGlvbnMubmFtZT0naWQnXSAtIEZpZWxkIG5hbWVcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb3B0aW9ucy50eXBlPSdpbnRlZ2VyJ10gLSBGaWVsZCB0eXBlXG4gKi9cbmZ1bmN0aW9uIGZlYXR1cmUoZW50aXR5LCBhcmdzID0gW10pIHtcbiAgICBsZXQgdHlwZUluZm8gPSB7XG4gICAgICAgIG5hbWU6ICdpZCcsXG4gICAgICAgIHR5cGU6ICdpbnRlZ2VyJyxcbiAgICAgICAgYXV0bzogdHJ1ZSwgICAgICAgIFxuICAgICAgICB3cml0ZU9uY2U6IHRydWVcbiAgICB9O1xuXG4gICAgbGV0IFsgb3B0aW9ucyBdID0gYXJncztcblxuICAgIGxldCBmZWF0dXJlRXh0cmEgPSB7fTtcblxuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7IG5hbWU6IG9wdGlvbnMgfTtcbiAgICAgICAgfSAgICAgICAgXG5cbiAgICAgICAgaWYgKG9wdGlvbnMudHlwZSkge1xuICAgICAgICAgICAgc3dpdGNoIChvcHRpb25zLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdpbnRlZ2VyJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3RhcnRGcm9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlRXh0cmEuc3RhcnRGcm9tID0gb3B0aW9ucy5zdGFydEZyb207XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3V1aWQnOlxuICAgICAgICAgICAgICAgICAgICB0eXBlSW5mb1sndHlwZSddID0gJ3RleHQnO1xuICAgICAgICAgICAgICAgICAgICB0eXBlSW5mb1snZml4ZWRMZW5ndGgnXSA9IDM2O1xuICAgICAgICAgICAgICAgICAgICB0eXBlSW5mb1snZ2VuZXJhdG9yJ10gPSAndXVpZCc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdzaG9ydGlkJzpcbiAgICAgICAgICAgICAgICAgICAgdHlwZUluZm9bJ3R5cGUnXSA9ICd0ZXh0JztcbiAgICAgICAgICAgICAgICAgICAgdHlwZUluZm9bJ21heExlbmd0aCddID0gMjA7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVJbmZvWydnZW5lcmF0b3InXSA9ICdzaG9ydGlkJztcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3VuaXFpZCc6XG4gICAgICAgICAgICAgICAgICAgIHR5cGVJbmZvWyd0eXBlJ10gPSAndGV4dCc7ICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5wcmVmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5wcmVmaXggIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBcInByZWZpeFwiIG9wdGlvbiBzaG91bGQgYmUgYSBzdHJpbmcuIEVudGl0eTogJHtlbnRpdHkubmFtZX0sIGZlYXR1cmU6IGF1dG9JZGApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSAgICBcblxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUluZm9bJ2ZpeGVkTGVuZ3RoJ10gPSAxNyArIG9wdGlvbnMucHJlZml4Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVJbmZvWydnZW5lcmF0b3InXSA9IFsgJ3VuaXFpZCcsIG9wdGlvbnMucHJlZml4IF07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlSW5mb1snZml4ZWRMZW5ndGgnXSA9IDE3O1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZUluZm9bJ2dlbmVyYXRvciddID0gJ3VuaXFpZCc7XG4gICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnaHlwZXJpZCc6XG4gICAgICAgICAgICAgICAgICAgIHR5cGVJbmZvWyd0eXBlJ10gPSAndGV4dCc7ICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdHlwZUluZm9bJ2ZpeGVkTGVuZ3RoJ10gPSAzMztcblxuICAgICAgICAgICAgICAgICAgICBsZXQgYXJncyA9IFsgJ2h5cGVyaWQnIF07XG4gICAgICAgICAgICAgICAgICAgIGxldCBvcHQgPSB7fTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5maXhlZExlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0LmZpeGVkTGVuZ3RoID0gb3B0aW9ucy5maXhlZExlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnVybFNhZmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdC51cmxTYWZlID0gb3B0aW9ucy51cmxTYWZlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfLmlzRW1wdHkob3B0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKG9wdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0eXBlSW5mb1snZ2VuZXJhdG9yJ10gPSBhcmdzLmxlbmd0aCA+IDEgPyBhcmdzIDogYXJnc1swXTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgYXV0b0lkIHR5cGU6ICR7b3B0aW9ucy50eXBlfS4gRW50aXR5OiAke2VudGl0eS5uYW1lfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3RhcnRGcm9tKSB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZUV4dHJhLnN0YXJ0RnJvbSA9IG9wdGlvbnMuc3RhcnRGcm9tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IFxuICAgICAgICBcbiAgICAgICAgaWYgKG9wdGlvbnMubmFtZSkge1xuICAgICAgICAgICAgdHlwZUluZm8ubmFtZSA9IG9wdGlvbnMubmFtZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxldCBmaWVsZE5hbWUgPSB0eXBlSW5mby5uYW1lO1xuXG4gICAgZW50aXR5LmFkZEZlYXR1cmUoRkVBVFVSRV9OQU1FLCB7XG4gICAgICAgIGZpZWxkOiBmaWVsZE5hbWUsXG4gICAgICAgIC4uLmZlYXR1cmVFeHRyYSAgICAgICAgXG4gICAgfSkub24oJ2JlZm9yZUFkZGluZ0ZpZWxkcycsICgpID0+IHtcbiAgICAgICAgZW50aXR5LmFkZEZpZWxkKGZpZWxkTmFtZSwgdHlwZUluZm8pXG4gICAgICAgICAgICAuc2V0S2V5KGZpZWxkTmFtZSk7XG4gICAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmVhdHVyZTsiXX0=