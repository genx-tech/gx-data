"use strict";

require("source-map-support/register");

const FEATURE_NAME = 'createTimestamp';

function feature(entity, args = []) {
  let typeInfo = {
    name: 'createdAt',
    type: 'datetime',
    auto: true,
    readOnly: true,
    writeOnce: true
  };
  let [options] = args;

  if (options) {
    if (typeof options === 'string') {
      options = {
        name: options
      };
    }

    Object.assign(typeInfo, options);
  }

  let fieldName = typeInfo.name;
  entity.addFeature(FEATURE_NAME, {
    field: fieldName
  }).on('afterAddingFields', () => {
    entity.addField(fieldName, typeInfo);
  });
}

module.exports = feature;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sYW5nL2VudGl0eUZlYXR1cmVzL2NyZWF0ZVRpbWVzdGFtcC5qcyJdLCJuYW1lcyI6WyJGRUFUVVJFX05BTUUiLCJmZWF0dXJlIiwiZW50aXR5IiwiYXJncyIsInR5cGVJbmZvIiwibmFtZSIsInR5cGUiLCJhdXRvIiwicmVhZE9ubHkiLCJ3cml0ZU9uY2UiLCJvcHRpb25zIiwiT2JqZWN0IiwiYXNzaWduIiwiZmllbGROYW1lIiwiYWRkRmVhdHVyZSIsImZpZWxkIiwib24iLCJhZGRGaWVsZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsWUFBWSxHQUFHLGlCQUFyQjs7QUFZQSxTQUFTQyxPQUFULENBQWlCQyxNQUFqQixFQUF5QkMsSUFBSSxHQUFHLEVBQWhDLEVBQW9DO0FBQ2hDLE1BQUlDLFFBQVEsR0FBRztBQUNYQyxJQUFBQSxJQUFJLEVBQUUsV0FESztBQUVYQyxJQUFBQSxJQUFJLEVBQUUsVUFGSztBQUdYQyxJQUFBQSxJQUFJLEVBQUUsSUFISztBQUlYQyxJQUFBQSxRQUFRLEVBQUUsSUFKQztBQUtYQyxJQUFBQSxTQUFTLEVBQUU7QUFMQSxHQUFmO0FBUUEsTUFBSSxDQUFFQyxPQUFGLElBQWNQLElBQWxCOztBQUVBLE1BQUlPLE9BQUosRUFBYTtBQUNULFFBQUksT0FBT0EsT0FBUCxLQUFtQixRQUF2QixFQUFpQztBQUM3QkEsTUFBQUEsT0FBTyxHQUFHO0FBQUVMLFFBQUFBLElBQUksRUFBRUs7QUFBUixPQUFWO0FBQ0g7O0FBRURDLElBQUFBLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjUixRQUFkLEVBQXdCTSxPQUF4QjtBQUNIOztBQUVELE1BQUlHLFNBQVMsR0FBR1QsUUFBUSxDQUFDQyxJQUF6QjtBQUVBSCxFQUFBQSxNQUFNLENBQUNZLFVBQVAsQ0FBa0JkLFlBQWxCLEVBQWdDO0FBQzVCZSxJQUFBQSxLQUFLLEVBQUVGO0FBRHFCLEdBQWhDLEVBRUdHLEVBRkgsQ0FFTSxtQkFGTixFQUUyQixNQUFNO0FBQzdCZCxJQUFBQSxNQUFNLENBQUNlLFFBQVAsQ0FBZ0JKLFNBQWhCLEVBQTJCVCxRQUEzQjtBQUNILEdBSkQ7QUFLSDs7QUFFRGMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCbEIsT0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgRkVBVFVSRV9OQU1FID0gJ2NyZWF0ZVRpbWVzdGFtcCc7XG5cbi8qKlxuICogQSBydWxlIHNwZWNpZmllcyB0aGUgZW50aXR5IHRvIGF1dG9tYXRpY2FsbHkgcmVjb3JkIHRoZSBjcmVhdGlvbiB0aW1lXG4gKiBAbW9kdWxlIEVudGl0eUZlYXR1cmVfQ3JlYXRlVGltZXN0YW1wXG4gKi9cblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBmZWF0dXJlXG4gKiBAcGFyYW0ge09vbG9uZ0VudGl0eX0gZW50aXR5IC0gRW50aXR5IHRvIGFwcGx5IHRoaXMgZmVhdHVyZVxuICogQHBhcmFtIHthcnJheX0gb3B0aW9ucyAtIEZpZWxkIG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gZmVhdHVyZShlbnRpdHksIGFyZ3MgPSBbXSkge1xuICAgIGxldCB0eXBlSW5mbyA9IHtcbiAgICAgICAgbmFtZTogJ2NyZWF0ZWRBdCcsXG4gICAgICAgIHR5cGU6ICdkYXRldGltZScsXG4gICAgICAgIGF1dG86IHRydWUsXG4gICAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgICB3cml0ZU9uY2U6IHRydWVcbiAgICB9O1xuXG4gICAgbGV0IFsgb3B0aW9ucyBdID0gYXJncztcblxuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7IG5hbWU6IG9wdGlvbnMgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5hc3NpZ24odHlwZUluZm8sIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGxldCBmaWVsZE5hbWUgPSB0eXBlSW5mby5uYW1lO1xuXG4gICAgZW50aXR5LmFkZEZlYXR1cmUoRkVBVFVSRV9OQU1FLCB7XG4gICAgICAgIGZpZWxkOiBmaWVsZE5hbWVcbiAgICB9KS5vbignYWZ0ZXJBZGRpbmdGaWVsZHMnLCAoKSA9PiB7XG4gICAgICAgIGVudGl0eS5hZGRGaWVsZChmaWVsZE5hbWUsIHR5cGVJbmZvKTtcbiAgICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmZWF0dXJlOyJdfQ==