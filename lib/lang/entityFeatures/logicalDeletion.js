"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const _ = Util._;
const FEATURE_NAME = 'logicalDeletion';

function feature(entity, args = []) {
  let newField = true,
      fieldInfo = {
    name: 'isDeleted',
    type: 'boolean',
    'default': false,
    readOnly: true
  },
      fieldName,
      featureSetting;
  let [options] = args;

  if (options) {
    if (_.isPlainObject(options)) {
      newField = false;
      let keys = Object.keys(options);

      if (keys.length !== 1) {
        throw new Error(`Invalid options for feature "${FEATURE_NAME}".`);
      }

      let fieldName = keys[0];
      featureSetting = {
        field: fieldName,
        value: options[fieldName]
      };
    } else if (typeof options === 'string') {
      Object.assign(fieldInfo, {
        name: options
      });
    } else {
      throw new Error(`Invalid options for feature "${FEATURE_NAME}".`);
    }
  }

  if (newField) {
    fieldName = fieldInfo.name;
    let timestampFieldName = 'deletedAt';
    let deletedTimestamp = {
      type: 'datetime',
      readOnly: true,
      optional: true,
      writeOnce: true,
      auto: true
    };
    entity.addFeature(FEATURE_NAME, {
      field: fieldName,
      value: true,
      timestampField: timestampFieldName
    });
    entity.on('afterAddingFields', () => {
      entity.addField(fieldName, fieldInfo);
      entity.addField(timestampFieldName, deletedTimestamp);
    });
  } else {
    entity.addFeature(FEATURE_NAME, featureSetting);
    entity.on('afterAddingFields', () => {
      if (!entity.hasField(featureSetting.field)) {
        throw new Error(`Field "${featureSetting.field}" used by feature "${FEATURE_NAME}" is not found in entity "${entity.name}".`);
      }
    });
  }
}

module.exports = feature;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sYW5nL2VudGl0eUZlYXR1cmVzL2xvZ2ljYWxEZWxldGlvbi5qcyJdLCJuYW1lcyI6WyJVdGlsIiwicmVxdWlyZSIsIl8iLCJGRUFUVVJFX05BTUUiLCJmZWF0dXJlIiwiZW50aXR5IiwiYXJncyIsIm5ld0ZpZWxkIiwiZmllbGRJbmZvIiwibmFtZSIsInR5cGUiLCJyZWFkT25seSIsImZpZWxkTmFtZSIsImZlYXR1cmVTZXR0aW5nIiwib3B0aW9ucyIsImlzUGxhaW5PYmplY3QiLCJrZXlzIiwiT2JqZWN0IiwibGVuZ3RoIiwiRXJyb3IiLCJmaWVsZCIsInZhbHVlIiwiYXNzaWduIiwidGltZXN0YW1wRmllbGROYW1lIiwiZGVsZXRlZFRpbWVzdGFtcCIsIm9wdGlvbmFsIiwid3JpdGVPbmNlIiwiYXV0byIsImFkZEZlYXR1cmUiLCJ0aW1lc3RhbXBGaWVsZCIsIm9uIiwiYWRkRmllbGQiLCJoYXNGaWVsZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUFwQjs7QUFDQSxNQUFNQyxDQUFDLEdBQUdGLElBQUksQ0FBQ0UsQ0FBZjtBQUVBLE1BQU1DLFlBQVksR0FBRyxpQkFBckI7O0FBWUEsU0FBU0MsT0FBVCxDQUFpQkMsTUFBakIsRUFBeUJDLElBQUksR0FBRyxFQUFoQyxFQUFvQztBQUNoQyxNQUFJQyxRQUFRLEdBQUcsSUFBZjtBQUFBLE1BQXFCQyxTQUFTLEdBQUc7QUFDN0JDLElBQUFBLElBQUksRUFBRSxXQUR1QjtBQUU3QkMsSUFBQUEsSUFBSSxFQUFFLFNBRnVCO0FBRzdCLGVBQVcsS0FIa0I7QUFJN0JDLElBQUFBLFFBQVEsRUFBRTtBQUptQixHQUFqQztBQUFBLE1BS0dDLFNBTEg7QUFBQSxNQUtjQyxjQUxkO0FBT0EsTUFBSSxDQUFFQyxPQUFGLElBQWNSLElBQWxCOztBQUVBLE1BQUlRLE9BQUosRUFBYTtBQUNULFFBQUlaLENBQUMsQ0FBQ2EsYUFBRixDQUFnQkQsT0FBaEIsQ0FBSixFQUE4QjtBQUMxQlAsTUFBQUEsUUFBUSxHQUFHLEtBQVg7QUFFQSxVQUFJUyxJQUFJLEdBQUdDLE1BQU0sQ0FBQ0QsSUFBUCxDQUFZRixPQUFaLENBQVg7O0FBQ0EsVUFBSUUsSUFBSSxDQUFDRSxNQUFMLEtBQWdCLENBQXBCLEVBQXVCO0FBQ25CLGNBQU0sSUFBSUMsS0FBSixDQUFXLGdDQUErQmhCLFlBQWEsSUFBdkQsQ0FBTjtBQUNIOztBQUVELFVBQUlTLFNBQVMsR0FBR0ksSUFBSSxDQUFDLENBQUQsQ0FBcEI7QUFFQUgsTUFBQUEsY0FBYyxHQUFHO0FBQ2JPLFFBQUFBLEtBQUssRUFBRVIsU0FETTtBQUViUyxRQUFBQSxLQUFLLEVBQUVQLE9BQU8sQ0FBQ0YsU0FBRDtBQUZELE9BQWpCO0FBS0gsS0FmRCxNQWVPLElBQUksT0FBT0UsT0FBUCxLQUFtQixRQUF2QixFQUFpQztBQUNwQ0csTUFBQUEsTUFBTSxDQUFDSyxNQUFQLENBQWNkLFNBQWQsRUFBeUI7QUFBRUMsUUFBQUEsSUFBSSxFQUFFSztBQUFSLE9BQXpCO0FBQ0gsS0FGTSxNQUVBO0FBQ0gsWUFBTSxJQUFJSyxLQUFKLENBQVcsZ0NBQStCaEIsWUFBYSxJQUF2RCxDQUFOO0FBQ0g7QUFDSjs7QUFFRCxNQUFJSSxRQUFKLEVBQWM7QUFDVkssSUFBQUEsU0FBUyxHQUFHSixTQUFTLENBQUNDLElBQXRCO0FBRUEsUUFBSWMsa0JBQWtCLEdBQUcsV0FBekI7QUFDQSxRQUFJQyxnQkFBZ0IsR0FBRztBQUNuQmQsTUFBQUEsSUFBSSxFQUFFLFVBRGE7QUFFbkJDLE1BQUFBLFFBQVEsRUFBRSxJQUZTO0FBR25CYyxNQUFBQSxRQUFRLEVBQUUsSUFIUztBQUluQkMsTUFBQUEsU0FBUyxFQUFFLElBSlE7QUFLbkJDLE1BQUFBLElBQUksRUFBRTtBQUxhLEtBQXZCO0FBUUF0QixJQUFBQSxNQUFNLENBQUN1QixVQUFQLENBQWtCekIsWUFBbEIsRUFBZ0M7QUFDNUJpQixNQUFBQSxLQUFLLEVBQUVSLFNBRHFCO0FBRTVCUyxNQUFBQSxLQUFLLEVBQUUsSUFGcUI7QUFHNUJRLE1BQUFBLGNBQWMsRUFBRU47QUFIWSxLQUFoQztBQU1BbEIsSUFBQUEsTUFBTSxDQUFDeUIsRUFBUCxDQUFVLG1CQUFWLEVBQStCLE1BQU07QUFDakN6QixNQUFBQSxNQUFNLENBQUMwQixRQUFQLENBQWdCbkIsU0FBaEIsRUFBMkJKLFNBQTNCO0FBQ0FILE1BQUFBLE1BQU0sQ0FBQzBCLFFBQVAsQ0FBZ0JSLGtCQUFoQixFQUFvQ0MsZ0JBQXBDO0FBQ0gsS0FIRDtBQUlILEdBdEJELE1Bc0JPO0FBQ0huQixJQUFBQSxNQUFNLENBQUN1QixVQUFQLENBQWtCekIsWUFBbEIsRUFBZ0NVLGNBQWhDO0FBRUFSLElBQUFBLE1BQU0sQ0FBQ3lCLEVBQVAsQ0FBVSxtQkFBVixFQUErQixNQUFNO0FBQ2pDLFVBQUksQ0FBQ3pCLE1BQU0sQ0FBQzJCLFFBQVAsQ0FBZ0JuQixjQUFjLENBQUNPLEtBQS9CLENBQUwsRUFBNEM7QUFDeEMsY0FBTSxJQUFJRCxLQUFKLENBQVcsVUFBU04sY0FBYyxDQUFDTyxLQUFNLHNCQUFxQmpCLFlBQWEsNkJBQTRCRSxNQUFNLENBQUNJLElBQUssSUFBbkgsQ0FBTjtBQUNIO0FBQ0osS0FKRDtBQUtIO0FBQ0o7O0FBRUR3QixNQUFNLENBQUNDLE9BQVAsR0FBaUI5QixPQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBVdGlsID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IF8gPSBVdGlsLl87XG5cbmNvbnN0IEZFQVRVUkVfTkFNRSA9ICdsb2dpY2FsRGVsZXRpb24nO1xuXG4vKipcbiAqIEEgcnVsZSBzcGVjaWZpZXMgdGhlIGVudGl0eSB3aWxsIG5vdCBiZSBkZWxldGVkIHBoeXNpY2FsbHkuXG4gKiBAbW9kdWxlIEVudGl0eUZlYXR1cmVfTG9naWNhbERlbGV0aW9uXG4gKi9cblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBmZWF0dXJlXG4gKiBAcGFyYW0ge09vbG9uZ0VudGl0eX0gZW50aXR5IC0gRW50aXR5IHRvIGFwcGx5IHRoaXMgZmVhdHVyZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBGaWVsZCBvcHRpb25zLCBjYW4gYmUgYSBzdHJpbmcgYXMgYSBuZXcgc3RhdHVzIGZpZWxkIG9yIGFuIG9iamVjdCByZWZlcmVuY2UgdG8gYSBjZXJ0YWluIHN0YXR1cyBvZiBhbiBleGlzdGluZyBmaWVsZFxuICovXG5mdW5jdGlvbiBmZWF0dXJlKGVudGl0eSwgYXJncyA9IFtdKSB7XG4gICAgbGV0IG5ld0ZpZWxkID0gdHJ1ZSwgZmllbGRJbmZvID0ge1xuICAgICAgICBuYW1lOiAnaXNEZWxldGVkJyxcbiAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICAnZGVmYXVsdCc6IGZhbHNlLFxuICAgICAgICByZWFkT25seTogdHJ1ZVxuICAgIH0sIGZpZWxkTmFtZSwgZmVhdHVyZVNldHRpbmc7XG5cbiAgICBsZXQgWyBvcHRpb25zIF0gPSBhcmdzO1xuXG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdChvcHRpb25zKSkge1xuICAgICAgICAgICAgbmV3RmllbGQgPSBmYWxzZTtcblxuICAgICAgICAgICAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgICAgICAgICAgIGlmIChrZXlzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBvcHRpb25zIGZvciBmZWF0dXJlIFwiJHtGRUFUVVJFX05BTUV9XCIuYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBmaWVsZE5hbWUgPSBrZXlzWzBdO1xuXG4gICAgICAgICAgICBmZWF0dXJlU2V0dGluZyA9IHtcbiAgICAgICAgICAgICAgICBmaWVsZDogZmllbGROYW1lLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBvcHRpb25zW2ZpZWxkTmFtZV1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZmllbGRJbmZvLCB7IG5hbWU6IG9wdGlvbnMgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgb3B0aW9ucyBmb3IgZmVhdHVyZSBcIiR7RkVBVFVSRV9OQU1FfVwiLmApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5ld0ZpZWxkKSB7XG4gICAgICAgIGZpZWxkTmFtZSA9IGZpZWxkSW5mby5uYW1lO1xuXG4gICAgICAgIGxldCB0aW1lc3RhbXBGaWVsZE5hbWUgPSAnZGVsZXRlZEF0JztcbiAgICAgICAgbGV0IGRlbGV0ZWRUaW1lc3RhbXAgPSB7XG4gICAgICAgICAgICB0eXBlOiAnZGF0ZXRpbWUnLFxuICAgICAgICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICAgICAgICBvcHRpb25hbDogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRlT25jZTogdHJ1ZSxcbiAgICAgICAgICAgIGF1dG86IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICBlbnRpdHkuYWRkRmVhdHVyZShGRUFUVVJFX05BTUUsIHtcbiAgICAgICAgICAgIGZpZWxkOiBmaWVsZE5hbWUsXG4gICAgICAgICAgICB2YWx1ZTogdHJ1ZSxcbiAgICAgICAgICAgIHRpbWVzdGFtcEZpZWxkOiB0aW1lc3RhbXBGaWVsZE5hbWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZW50aXR5Lm9uKCdhZnRlckFkZGluZ0ZpZWxkcycsICgpID0+IHtcbiAgICAgICAgICAgIGVudGl0eS5hZGRGaWVsZChmaWVsZE5hbWUsIGZpZWxkSW5mbyk7XG4gICAgICAgICAgICBlbnRpdHkuYWRkRmllbGQodGltZXN0YW1wRmllbGROYW1lLCBkZWxldGVkVGltZXN0YW1wKTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZW50aXR5LmFkZEZlYXR1cmUoRkVBVFVSRV9OQU1FLCBmZWF0dXJlU2V0dGluZyk7XG5cbiAgICAgICAgZW50aXR5Lm9uKCdhZnRlckFkZGluZ0ZpZWxkcycsICgpID0+IHtcbiAgICAgICAgICAgIGlmICghZW50aXR5Lmhhc0ZpZWxkKGZlYXR1cmVTZXR0aW5nLmZpZWxkKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmllbGQgXCIke2ZlYXR1cmVTZXR0aW5nLmZpZWxkfVwiIHVzZWQgYnkgZmVhdHVyZSBcIiR7RkVBVFVSRV9OQU1FfVwiIGlzIG5vdCBmb3VuZCBpbiBlbnRpdHkgXCIke2VudGl0eS5uYW1lfVwiLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmVhdHVyZTsiXX0=