"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  _
} = Util;

const {
  generateDisplayName
} = require('./OolUtils');

const {
  isNothing,
  isQuotedWith
} = require('../utils/lang');

const KW_NAMESPACE = 'import';
const KW_SCHEMA = 'schema';
const KW_ENTITIES = 'entities';
const KW_ENTITY_AS_ALIAS = 'as';
const KW_TYPE_DEFINE = 'type';
const KW_ENTITY = 'entity';
const KW_CODE = 'code';
const KW_COMMENT = '--';
const KW_WITH_FEATURE = 'with';
const KW_FIELDS = 'has';
const KW_ASSOCIATIONS = 'associations';
const KW_KEY = 'key';
const KW_INDEXES = 'index';

const Types = require('../runtime/types');

const OolTypes = require('./OolTypes');

class OolCodeGen {
  static transform(json, options) {
    let codeGen = new OolCodeGen(options);
    return codeGen.generate(json);
  }

  constructor(options) {
    this.indented = 0;
    this.content = '';
    this.options = options;
  }

  generate(json) {
    this.generateObject(json);
    return this.content;
  }

  appendLine(line) {
    if (line) {
      if (arguments.length > 1) {
        line = [...arguments].join(' ');
      }

      this.content += (this.indented > 0 ? _.repeat(' ', this.indented) : '') + line + '\n';
    } else {
      this.content += '\n';
    }

    return this;
  }

  indent() {
    this.indented += 2;
    return this;
  }

  dedent() {
    const _checkPostcondition = it => {
      if (!(this.indented >= 0)) {
        throw new Error('Unexpected indented state.');
      }

      return it;
    };

    this.indented -= 2;
    return _checkPostcondition(this);
  }

  generateObject(obj) {
    _.forOwn(obj, (v, k) => {
      let generateMethod = 'generate_' + k;

      if (generateMethod in this) {
        return this[generateMethod](v);
      }

      throw new Error('to be implemented, object: ' + k);
    });
  }

  generate_namespace(namespaces) {
    const _checkPostcondition2 = it => {
      if (!(this.indented == 0)) {
        throw new Error('Unexpected indented state.');
      }

      return it;
    };

    if (!Array.isArray(namespaces)) {
      throw new Error('Invalid namespaces.');
    }

    if (!(this.indented == 0)) {
      throw new Error('Unexpected indented state.');
    }

    if (namespaces.length > 0) {
      this.appendLine(KW_NAMESPACE).indent();
      namespaces.forEach(ns => {
        this.appendLine(Util.quote(ns, "'"));
      });
      this.dedent().appendLine();
    }

    _checkPostcondition2();
  }

  generate_schema(schema) {
    const _checkPostcondition3 = it => {
      if (!(this.indented == 0)) {
        throw new Error('Unexpected indented state.');
      }

      return it;
    };

    if (!(this.indented == 0)) {
      throw new Error('Unexpected indented state.');
    }

    _.forOwn(schema, (schemaInfo, name) => {
      this.appendLine(KW_SCHEMA, Util.quote(name, "'")).indent();

      if (schemaInfo.entities) {
        this.appendLine(KW_ENTITIES).indent();
        schemaInfo.entities.forEach(entityEntry => {
          if (entityEntry.alias) {
            this.appendLine(entityEntry.entity, KW_ENTITY_AS_ALIAS, entityEntry.alias);
          } else {
            this.appendLine(entityEntry.entity);
          }
        });
        this.dedent().appendLine();
      }

      this.dedent();
    });

    _checkPostcondition3();
  }

  generate_type(types) {
    const _checkPostcondition4 = it => {
      if (!(this.indented == 0)) {
        throw new Error('Unexpected indented state.');
      }

      return it;
    };

    if (!_.isPlainObject(types)) {
      throw new Error('Invalid types.');
    }

    if (!(this.indented == 0)) {
      throw new Error('Unexpected indented state.');
    }

    if (!_.isEmpty(types)) {
      this.appendLine(KW_TYPE_DEFINE).indent();

      _.forOwn(types, (type, name) => {
        let lineInfo = [name, ':', type.type];

        this._translateType(type, lineInfo);

        this.appendLine(...lineInfo);
      });

      this.dedent().appendLine();
    }

    _checkPostcondition4();
  }

  generate_field_comment(entityName, colName) {
    let colNameFullSnake = _.trimStart(_.snakeCase(colName), '_');

    let [colNameFirstWord, colNameRest] = colNameFullSnake.split('_', 2);
    let result;

    let entityNameFullSnake = _.trim(_.snakeCase(entityName), '_');

    if (_.endsWith(entityNameFullSnake, colNameFirstWord)) {
      result = entityNameFullSnake + '_' + colNameRest;
    } else {
      result = entityNameFullSnake + '_' + colNameFullSnake;
    }

    return generateDisplayName(result);
  }

  generate_entity(entities) {
    const _checkPostcondition5 = it => {
      if (!(this.indented == 0)) {
        throw new Error('Unexpected indented state.');
      }

      return it;
    };

    if (!_.isPlainObject(entities)) {
      throw new Error('Invalid entities.');
    }

    if (!(this.indented == 0)) {
      throw new Error('Unexpected indented state.');
    }

    _.forOwn(entities, (entity, enityName) => {
      this.appendLine(KW_ENTITY, enityName).indent();

      if (entity.source) {
        this.appendLine(KW_CODE, Util.quote(entity.source));
      }

      this.appendLine(KW_COMMENT, Util.quote(entity.comment || generateDisplayName(enityName)));
      let hasAutoId = false;

      if (!_.isEmpty(entity.features)) {
        this.appendLine(KW_WITH_FEATURE).indent();
        entity.features.forEach(feature => {
          if (typeof feature === 'string') {
            feature = {
              name: feature
            };
          }

          if (feature.name === 'autoId') {
            hasAutoId = true;
          }

          if (feature.args) {
            this.appendLine(feature.name + '(' + feature.args.map(a => JSON.stringify(a)).join(', ') + ')');
          } else {
            this.appendLine(feature.name);
          }
        });
        this.dedent();
      }

      if (!_.isEmpty(entity.fields)) {
        this.appendLine().appendLine(KW_FIELDS).indent();

        _.forOwn(entity.fields, (field, name) => {
          if (!field.type) {
            throw new Error("Assertion failed: field.type");
          }

          let lineInfo = [];
          lineInfo.push(Types.Builtin.has(name) ? Util.quote(name) : name);

          if (field.type !== name) {
            lineInfo.push(':');
            lineInfo.push(field.type);
          }

          this._translateType(field, lineInfo);

          lineInfo.push(KW_COMMENT + ' ' + Util.quote(field.comment || this.generate_field_comment(enityName, name)));
          this.appendLine(...lineInfo);
        });

        this.dedent();
      }

      if (!_.isEmpty(entity.associations)) {
        this.appendLine().appendLine(KW_ASSOCIATIONS).indent();
        entity.associations.forEach(({
          type,
          srcField,
          destEntity,
          connectedBy
        }) => {
          if (srcField) {
            this.appendLine(type, Util.quote(destEntity, "'"), 'as', Util.quote(srcField, "'"));
          } else if (connectedBy) {
            this.appendLine(type, Util.quote(destEntity, "'"), 'connectedBy', Util.quote(connectedBy, "'"));
          } else {
            this.appendLine(type, Util.quote(destEntity, "'"));
          }
        });
        this.dedent();
      }

      if (entity.key && !hasAutoId) {
        let key = Array.isArray(entity.key) && entity.key.length === 1 ? entity.key[0] : entity.key;

        if (Array.isArray(key)) {
          this.appendLine().appendLine(KW_KEY, '[ ' + key.join(', ') + ' ]');
        } else {
          this.appendLine().appendLine(KW_KEY, key);
        }
      }

      if (!_.isEmpty(entity.indexes)) {
        this.appendLine().appendLine(KW_INDEXES).indent();
        entity.indexes.forEach(i => {
          let indexInfo = [];

          if (Array.isArray(i.fields)) {
            indexInfo.push('[' + i.fields.join(', ') + ']');
          } else {
            indexInfo.push(i.fields);
          }

          if (i.unique) {
            indexInfo.push('is');
            indexInfo.push('unique');
          }

          this.appendLine(...indexInfo);
        });
        this.dedent();
      }

      this.dedent();
    });

    _checkPostcondition5();
  }

  _translateType(field, lineInfo) {
    let extraTypeInfo = _.omit(field, ['type', 'modifiers', 'name']);

    _.forOwn(extraTypeInfo, (v, k) => {
      if (k === 'comment') return;

      if (typeof v === 'boolean' || isNothing(v)) {
        if (v) {
          lineInfo.push(k);
        }
      } else {
        v = _.castArray(v);
        lineInfo.push(k + '(' + this._translateArgs(v) + ')');
      }
    });

    if (field.modifiers) {
      this._translatePipedValue(lineInfo, field);
    }
  }

  _translatePipedValue(lineInfo, value) {
    if (value.modifiers) {
      value.modifiers.forEach(v => {
        switch (v.oolType) {
          case OolTypes.Lang.VALIDATOR:
            lineInfo.push('|~' + this._translateModifier(v));
            break;

          case OolTypes.Lang.PROCESSOR:
            lineInfo.push('|>' + this._translateModifier(v));
            break;

          case OolTypes.Lang.ACTIVATOR:
            lineInfo.push('|=' + this._translateModifier(v));
            break;

          default:
            throw new Error(`Unknown modifier type: "${v.oolType}"!`);
        }
      });
    }
  }

  _translateModifier(f) {
    let r = f.name;

    if (!_.isEmpty(f.args)) {
      r += '(';
      r += this._translateArgs(f.args);
      r += ')';
    }

    return r;
  }

  _translateArgs(args) {
    return args.map(a => this._translateArg(a)).join(', ');
  }

  _translateArg(a) {
    if (_.isPlainObject(a) && a.hasOwnProperty('oolType')) {
      if (a.oolType === 'PipedValue') {
        let pipeline = [this._translateArg(a.value)];

        if (a.modifiers) {
          this._translatePipedValue(pipeline, a);
        }

        return pipeline.join(' ');
      } else if (a.oolType === 'ObjectReference') {
        return '@' + a.name;
      } else {
        throw new Error('Not supported oolType: ' + a.oolType);
      }
    }

    if (typeof a === 'string' && isQuotedWith(a, '/')) return a;
    return JSON.stringify(a);
  }

}

module.exports = OolCodeGen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW5nL09vbENvZGVHZW4uanMiXSwibmFtZXMiOlsiVXRpbCIsInJlcXVpcmUiLCJfIiwiZ2VuZXJhdGVEaXNwbGF5TmFtZSIsImlzTm90aGluZyIsImlzUXVvdGVkV2l0aCIsIktXX05BTUVTUEFDRSIsIktXX1NDSEVNQSIsIktXX0VOVElUSUVTIiwiS1dfRU5USVRZX0FTX0FMSUFTIiwiS1dfVFlQRV9ERUZJTkUiLCJLV19FTlRJVFkiLCJLV19DT0RFIiwiS1dfQ09NTUVOVCIsIktXX1dJVEhfRkVBVFVSRSIsIktXX0ZJRUxEUyIsIktXX0FTU09DSUFUSU9OUyIsIktXX0tFWSIsIktXX0lOREVYRVMiLCJUeXBlcyIsIk9vbFR5cGVzIiwiT29sQ29kZUdlbiIsInRyYW5zZm9ybSIsImpzb24iLCJvcHRpb25zIiwiY29kZUdlbiIsImdlbmVyYXRlIiwiY29uc3RydWN0b3IiLCJpbmRlbnRlZCIsImNvbnRlbnQiLCJnZW5lcmF0ZU9iamVjdCIsImFwcGVuZExpbmUiLCJsaW5lIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiam9pbiIsInJlcGVhdCIsImluZGVudCIsImRlZGVudCIsIm9iaiIsImZvck93biIsInYiLCJrIiwiZ2VuZXJhdGVNZXRob2QiLCJFcnJvciIsImdlbmVyYXRlX25hbWVzcGFjZSIsIm5hbWVzcGFjZXMiLCJBcnJheSIsImlzQXJyYXkiLCJmb3JFYWNoIiwibnMiLCJxdW90ZSIsImdlbmVyYXRlX3NjaGVtYSIsInNjaGVtYSIsInNjaGVtYUluZm8iLCJuYW1lIiwiZW50aXRpZXMiLCJlbnRpdHlFbnRyeSIsImFsaWFzIiwiZW50aXR5IiwiZ2VuZXJhdGVfdHlwZSIsInR5cGVzIiwiaXNQbGFpbk9iamVjdCIsImlzRW1wdHkiLCJ0eXBlIiwibGluZUluZm8iLCJfdHJhbnNsYXRlVHlwZSIsImdlbmVyYXRlX2ZpZWxkX2NvbW1lbnQiLCJlbnRpdHlOYW1lIiwiY29sTmFtZSIsImNvbE5hbWVGdWxsU25ha2UiLCJ0cmltU3RhcnQiLCJzbmFrZUNhc2UiLCJjb2xOYW1lRmlyc3RXb3JkIiwiY29sTmFtZVJlc3QiLCJzcGxpdCIsInJlc3VsdCIsImVudGl0eU5hbWVGdWxsU25ha2UiLCJ0cmltIiwiZW5kc1dpdGgiLCJnZW5lcmF0ZV9lbnRpdHkiLCJlbml0eU5hbWUiLCJzb3VyY2UiLCJjb21tZW50IiwiaGFzQXV0b0lkIiwiZmVhdHVyZXMiLCJmZWF0dXJlIiwiYXJncyIsIm1hcCIsImEiLCJKU09OIiwic3RyaW5naWZ5IiwiZmllbGRzIiwiZmllbGQiLCJwdXNoIiwiQnVpbHRpbiIsImhhcyIsImFzc29jaWF0aW9ucyIsInNyY0ZpZWxkIiwiZGVzdEVudGl0eSIsImNvbm5lY3RlZEJ5Iiwia2V5IiwiaW5kZXhlcyIsImkiLCJpbmRleEluZm8iLCJ1bmlxdWUiLCJleHRyYVR5cGVJbmZvIiwib21pdCIsImNhc3RBcnJheSIsIl90cmFuc2xhdGVBcmdzIiwibW9kaWZpZXJzIiwiX3RyYW5zbGF0ZVBpcGVkVmFsdWUiLCJ2YWx1ZSIsIm9vbFR5cGUiLCJMYW5nIiwiVkFMSURBVE9SIiwiX3RyYW5zbGF0ZU1vZGlmaWVyIiwiUFJPQ0VTU09SIiwiQUNUSVZBVE9SIiwiZiIsInIiLCJfdHJhbnNsYXRlQXJnIiwiaGFzT3duUHJvcGVydHkiLCJwaXBlbGluZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBUUYsSUFBZDs7QUFDQSxNQUFNO0FBQUVHLEVBQUFBO0FBQUYsSUFBMEJGLE9BQU8sQ0FBQyxZQUFELENBQXZDOztBQUNBLE1BQU07QUFBRUcsRUFBQUEsU0FBRjtBQUFhQyxFQUFBQTtBQUFiLElBQThCSixPQUFPLENBQUMsZUFBRCxDQUEzQzs7QUFFQSxNQUFNSyxZQUFZLEdBQUcsUUFBckI7QUFDQSxNQUFNQyxTQUFTLEdBQUcsUUFBbEI7QUFDQSxNQUFNQyxXQUFX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QmhDLENBQW5CLENBQWQsRUFBcUN0RCxJQUFyQyxDQUEwQyxJQUExQyxDQUFQO0FBQ0g7O0FBRURzRixFQUFBQSxhQUFhLENBQUNoQyxDQUFELEVBQUk7QUFDYixRQUFJdkYsQ0FBQyxDQUFDNEQsYUFBRixDQUFnQjJCLENBQWhCLEtBQXNCQSxDQUFDLENBQUNpQyxjQUFGLENBQWlCLFNBQWpCLENBQTFCLEVBQXVEO0FBQ25ELFVBQUlqQyxDQUFDLENBQUN3QixPQUFGLEtBQWMsWUFBbEIsRUFBZ0M7QUFDNUIsWUFBSVUsUUFBUSxHQUFHLENBQUUsS0FBS0YsYUFBTCxDQUFtQmhDLENBQUMsQ0FBQ3VCLEtBQXJCLENBQUYsQ0FBZjs7QUFFQSxZQUFJdkIsQ0FBQyxDQUFDcUIsU0FBTixFQUFpQjtBQUNiLGVBQUtDLG9CQUFMLENBQTBCWSxRQUExQixFQUFvQ2xDLENBQXBDO0FBQ0g7O0FBRUQsZUFBT2tDLFFBQVEsQ0FBQ3hGLElBQVQsQ0FBYyxHQUFkLENBQVA7QUFDSCxPQVJELE1BUU8sSUFBSXNELENBQUMsQ0FBQ3dCLE9BQUYsS0FBYyxpQkFBbEIsRUFBcUM7QUFDeEMsZUFBTyxNQUFNeEIsQ0FBQyxDQUFDbEMsSUFBZjtBQUNILE9BRk0sTUFFQTtBQUNILGNBQU0sSUFBSVgsS0FBSixDQUFVLDRCQUE0QjZDLENBQUMsQ0FBQ3dCLE9BQXhDLENBQU47QUFDSDtBQUNKOztBQUVELFFBQUksT0FBT3hCLENBQVAsS0FBYSxRQUFiLElBQXlCcEYsWUFBWSxDQUFDb0YsQ0FBRCxFQUFJLEdBQUosQ0FBekMsRUFBbUQsT0FBT0EsQ0FBUDtBQUVuRCxXQUFPQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUYsQ0FBZixDQUFQO0FBQ0g7O0FBdlZZOztBQTBWakJtQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJ4RyxVQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBVdGlsID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHsgXyB9ID0gVXRpbDtcbmNvbnN0IHsgZ2VuZXJhdGVEaXNwbGF5TmFtZSB9ID0gcmVxdWlyZSgnLi9Pb2xVdGlscycpO1xuY29uc3QgeyBpc05vdGhpbmcsIGlzUXVvdGVkV2l0aCB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvbGFuZycpO1xuXG5jb25zdCBLV19OQU1FU1BBQ0UgPSAnaW1wb3J0JztcbmNvbnN0IEtXX1NDSEVNQSA9ICdzY2hlbWEnO1xuY29uc3QgS1dfRU5USVRJRVMgPSAnZW50aXRpZXMnO1xuY29uc3QgS1dfRU5USVRZX0FTX0FMSUFTID0gJ2FzJztcbmNvbnN0IEtXX1RZUEVfREVGSU5FID0gJ3R5cGUnO1xuY29uc3QgS1dfRU5USVRZID0gJ2VudGl0eSc7XG5jb25zdCBLV19DT0RFID0gJ2NvZGUnO1xuY29uc3QgS1dfQ09NTUVOVCA9ICctLSc7XG5jb25zdCBLV19XSVRIX0ZFQVRVUkUgPSAnd2l0aCc7XG5jb25zdCBLV19GSUVMRFMgPSAnaGFzJztcbmNvbnN0IEtXX0FTU09DSUFUSU9OUyA9ICdhc3NvY2lhdGlvbnMnO1xuY29uc3QgS1dfS0VZID0gJ2tleSc7XG5jb25zdCBLV19JTkRFWEVTID0gJ2luZGV4JztcblxuY29uc3QgVHlwZXMgPSByZXF1aXJlKCcuLi9ydW50aW1lL3R5cGVzJyk7XG5jb25zdCBPb2xUeXBlcyA9IHJlcXVpcmUoJy4vT29sVHlwZXMnKTtcblxuY2xhc3MgT29sQ29kZUdlbiB7XG4gICAgc3RhdGljIHRyYW5zZm9ybShqc29uLCBvcHRpb25zKSB7XG4gICAgICAgIGxldCBjb2RlR2VuID0gbmV3IE9vbENvZGVHZW4ob3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBjb2RlR2VuLmdlbmVyYXRlKGpzb24pO1xuICAgIH1cblxuICAgIGluZGVudGVkID0gMDtcbiAgICBjb250ZW50ID0gJyc7XG5cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuXG4gICAgZ2VuZXJhdGUoanNvbikge1xuICAgICAgICB0aGlzLmdlbmVyYXRlT2JqZWN0KGpzb24pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnQ7XG4gICAgfVxuXG4gICAgYXBwZW5kTGluZShsaW5lKSB7XG4gICAgICAgIGlmIChsaW5lKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBsaW5lID0gWyAuLi5hcmd1bWVudHNdLmpvaW4oJyAnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5jb250ZW50ICs9ICh0aGlzLmluZGVudGVkID4gMCA/IF8ucmVwZWF0KCcgJywgdGhpcy5pbmRlbnRlZCkgOiAnJykgKyBsaW5lICsgJ1xcbic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQgKz0gJ1xcbic7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaW5kZW50KCkge1xuICAgICAgICB0aGlzLmluZGVudGVkICs9IDI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGRlZGVudCgpIHtcbiAgICAgICAgdGhpcy5pbmRlbnRlZCAtPSAyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgcG9zdDogdGhpcy5pbmRlbnRlZCA+PSAwLCAnVW5leHBlY3RlZCBpbmRlbnRlZCBzdGF0ZS4nO1xuICAgIH1cblxuICAgIGdlbmVyYXRlT2JqZWN0KG9iaikge1xuICAgICAgICBfLmZvck93bihvYmosICh2LGspID0+IHtcbiAgICAgICAgICAgIGxldCBnZW5lcmF0ZU1ldGhvZCA9ICdnZW5lcmF0ZV8nICsgaztcblxuICAgICAgICAgICAgaWYgKGdlbmVyYXRlTWV0aG9kIGluIHRoaXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1tnZW5lcmF0ZU1ldGhvZF0odik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndG8gYmUgaW1wbGVtZW50ZWQsIG9iamVjdDogJyArIGspO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZW5lcmF0ZV9uYW1lc3BhY2UobmFtZXNwYWNlcykge1xuICAgICAgICBwcmU6IHtcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkobmFtZXNwYWNlcyksICdJbnZhbGlkIG5hbWVzcGFjZXMuJztcbiAgICAgICAgICAgIHRoaXMuaW5kZW50ZWQgPT0gMCwgJ1VuZXhwZWN0ZWQgaW5kZW50ZWQgc3RhdGUuJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuYW1lc3BhY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kTGluZShLV19OQU1FU1BBQ0UpLmluZGVudCgpO1xuXG4gICAgICAgICAgICBuYW1lc3BhY2VzLmZvckVhY2gobnMgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kTGluZShVdGlsLnF1b3RlKG5zLCBcIidcIikpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuZGVkZW50KCkuYXBwZW5kTGluZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcG9zdDogdGhpcy5pbmRlbnRlZCA9PSAwLCAnVW5leHBlY3RlZCBpbmRlbnRlZCBzdGF0ZS4nO1xuICAgIH1cblxuICAgIGdlbmVyYXRlX3NjaGVtYShzY2hlbWEpIHtcbiAgICAgICAgcHJlOiB7ICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmluZGVudGVkID09IDAsICdVbmV4cGVjdGVkIGluZGVudGVkIHN0YXRlLic7XG4gICAgICAgIH1cblxuICAgICAgICBfLmZvck93bihzY2hlbWEsIChzY2hlbWFJbmZvLCBuYW1lKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZExpbmUoS1dfU0NIRU1BLCBVdGlsLnF1b3RlKG5hbWUsIFwiJ1wiKSkuaW5kZW50KCk7XG5cbiAgICAgICAgICAgIGlmIChzY2hlbWFJbmZvLmVudGl0aWVzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRMaW5lKEtXX0VOVElUSUVTKS5pbmRlbnQoKTtcblxuICAgICAgICAgICAgICAgIHNjaGVtYUluZm8uZW50aXRpZXMuZm9yRWFjaChlbnRpdHlFbnRyeSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnRpdHlFbnRyeS5hbGlhcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRMaW5lKGVudGl0eUVudHJ5LmVudGl0eSwgS1dfRU5USVRZX0FTX0FMSUFTLCBlbnRpdHlFbnRyeS5hbGlhcyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZExpbmUoZW50aXR5RW50cnkuZW50aXR5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kZWRlbnQoKS5hcHBlbmRMaW5lKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZGVkZW50KCk7XG4gICAgICAgIH0pOyAgICAgICAgXG5cbiAgICAgICAgcG9zdDogdGhpcy5pbmRlbnRlZCA9PSAwLCAnVW5leHBlY3RlZCBpbmRlbnRlZCBzdGF0ZS4nO1xuICAgIH1cblxuICAgIGdlbmVyYXRlX3R5cGUodHlwZXMpIHtcbiAgICAgICAgcHJlOiB7XG4gICAgICAgICAgICBfLmlzUGxhaW5PYmplY3QodHlwZXMpLCAnSW52YWxpZCB0eXBlcy4nO1xuICAgICAgICAgICAgdGhpcy5pbmRlbnRlZCA9PSAwLCAnVW5leHBlY3RlZCBpbmRlbnRlZCBzdGF0ZS4nO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFfLmlzRW1wdHkodHlwZXMpKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZExpbmUoS1dfVFlQRV9ERUZJTkUpLmluZGVudCgpO1xuXG4gICAgICAgICAgICBfLmZvck93bih0eXBlcywgKHR5cGUsIG5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgbGluZUluZm8gPSBbIG5hbWUsICc6JywgdHlwZS50eXBlIF07XG5cbiAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2xhdGVUeXBlKHR5cGUsIGxpbmVJbmZvKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kTGluZSguLi5saW5lSW5mbyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5kZWRlbnQoKS5hcHBlbmRMaW5lKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwb3N0OiB0aGlzLmluZGVudGVkID09IDAsICdVbmV4cGVjdGVkIGluZGVudGVkIHN0YXRlLic7XG4gICAgfVxuXG4gICAgZ2VuZXJhdGVfZmllbGRfY29tbWVudChlbnRpdHlOYW1lLCBjb2xOYW1lKSB7XG4gICAgICAgIGxldCBjb2xOYW1lRnVsbFNuYWtlID0gXy50cmltU3RhcnQoXy5zbmFrZUNhc2UoY29sTmFtZSksICdfJyk7XG4gICAgICAgIGxldCAgWyBjb2xOYW1lRmlyc3RXb3JkLCBjb2xOYW1lUmVzdCBdID0gY29sTmFtZUZ1bGxTbmFrZS5zcGxpdCgnXycsIDIpO1xuXG4gICAgICAgIGxldCByZXN1bHQ7XG5cbiAgICAgICAgbGV0IGVudGl0eU5hbWVGdWxsU25ha2UgPSBfLnRyaW0oXy5zbmFrZUNhc2UoZW50aXR5TmFtZSksICdfJyk7XG4gICAgICAgIGlmIChfLmVuZHNXaXRoKGVudGl0eU5hbWVGdWxsU25ha2UsIGNvbE5hbWVGaXJzdFdvcmQpKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBlbnRpdHlOYW1lRnVsbFNuYWtlICsgJ18nICsgY29sTmFtZVJlc3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSBlbnRpdHlOYW1lRnVsbFNuYWtlICsgJ18nICsgY29sTmFtZUZ1bGxTbmFrZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnZW5lcmF0ZURpc3BsYXlOYW1lKHJlc3VsdCk7XG4gICAgfVxuXG4gICAgZ2VuZXJhdGVfZW50aXR5KGVudGl0aWVzKSB7XG4gICAgICAgIHByZToge1xuICAgICAgICAgICAgXy5pc1BsYWluT2JqZWN0KGVudGl0aWVzKSwgJ0ludmFsaWQgZW50aXRpZXMuJztcbiAgICAgICAgICAgIHRoaXMuaW5kZW50ZWQgPT0gMCwgJ1VuZXhwZWN0ZWQgaW5kZW50ZWQgc3RhdGUuJztcbiAgICAgICAgfVxuXG4gICAgICAgIF8uZm9yT3duKGVudGl0aWVzLCAoZW50aXR5LCBlbml0eU5hbWUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kTGluZShLV19FTlRJVFksIGVuaXR5TmFtZSkuaW5kZW50KCk7XG5cbiAgICAgICAgICAgIGlmIChlbnRpdHkuc291cmNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRMaW5lKEtXX0NPREUsIFV0aWwucXVvdGUoZW50aXR5LnNvdXJjZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmFwcGVuZExpbmUoS1dfQ09NTUVOVCwgVXRpbC5xdW90ZShlbnRpdHkuY29tbWVudCB8fCBnZW5lcmF0ZURpc3BsYXlOYW1lKGVuaXR5TmFtZSkpKTtcblxuICAgICAgICAgICAgbGV0IGhhc0F1dG9JZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoIV8uaXNFbXB0eShlbnRpdHkuZmVhdHVyZXMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRMaW5lKEtXX1dJVEhfRkVBVFVSRSkuaW5kZW50KCk7XG5cbiAgICAgICAgICAgICAgICBlbnRpdHkuZmVhdHVyZXMuZm9yRWFjaChmZWF0dXJlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmZWF0dXJlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZSA9IHsgbmFtZTogZmVhdHVyZSB9O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZlYXR1cmUubmFtZSA9PT0gJ2F1dG9JZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0F1dG9JZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZS5hcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZExpbmUoZmVhdHVyZS5uYW1lICsgJygnICsgZmVhdHVyZS5hcmdzLm1hcChhID0+IEpTT04uc3RyaW5naWZ5KGEpKS5qb2luKCcsICcpICsgJyknKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kTGluZShmZWF0dXJlLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmRlZGVudCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIV8uaXNFbXB0eShlbnRpdHkuZmllbGRzKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kTGluZSgpLmFwcGVuZExpbmUoS1dfRklFTERTKS5pbmRlbnQoKTtcblxuICAgICAgICAgICAgICAgIF8uZm9yT3duKGVudGl0eS5maWVsZHMsIChmaWVsZCwgbmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnQ6IGZpZWxkLnR5cGU7ICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgICAgICBsZXQgbGluZUluZm8gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgbGluZUluZm8ucHVzaChUeXBlcy5CdWlsdGluLmhhcyhuYW1lKSA/IFV0aWwucXVvdGUobmFtZSkgOiBuYW1lKTsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkLnR5cGUgIT09IG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVJbmZvLnB1c2goJzonKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVJbmZvLnB1c2goZmllbGQudHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2xhdGVUeXBlKGZpZWxkLCBsaW5lSW5mbyk7XG5cbiAgICAgICAgICAgICAgICAgICAgbGluZUluZm8ucHVzaChLV19DT01NRU5UICsgJyAnICsgVXRpbC5xdW90ZShmaWVsZC5jb21tZW50IHx8IHRoaXMuZ2VuZXJhdGVfZmllbGRfY29tbWVudChlbml0eU5hbWUsIG5hbWUpKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRMaW5lKC4uLmxpbmVJbmZvKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZGVkZW50KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghXy5pc0VtcHR5KGVudGl0eS5hc3NvY2lhdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRMaW5lKCkuYXBwZW5kTGluZShLV19BU1NPQ0lBVElPTlMpLmluZGVudCgpO1xuXG4gICAgICAgICAgICAgICAgZW50aXR5LmFzc29jaWF0aW9ucy5mb3JFYWNoKCh7IHR5cGUsIHNyY0ZpZWxkLCBkZXN0RW50aXR5LCBjb25uZWN0ZWRCeSB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcmNGaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRMaW5lKHR5cGUsIFV0aWwucXVvdGUoZGVzdEVudGl0eSwgXCInXCIpLCAnYXMnLCBVdGlsLnF1b3RlKHNyY0ZpZWxkLCBcIidcIikpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvbm5lY3RlZEJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZExpbmUodHlwZSwgVXRpbC5xdW90ZShkZXN0RW50aXR5LCBcIidcIiksICdjb25uZWN0ZWRCeScsIFV0aWwucXVvdGUoY29ubmVjdGVkQnksIFwiJ1wiKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZExpbmUodHlwZSwgVXRpbC5xdW90ZShkZXN0RW50aXR5LCBcIidcIikpO1xuICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZGVkZW50KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChlbnRpdHkua2V5ICYmICFoYXNBdXRvSWQpIHtcbiAgICAgICAgICAgICAgICBsZXQga2V5ID0gKEFycmF5LmlzQXJyYXkoZW50aXR5LmtleSkgJiYgZW50aXR5LmtleS5sZW5ndGggPT09IDEpID8gZW50aXR5LmtleVswXSA6IGVudGl0eS5rZXk7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZExpbmUoKS5hcHBlbmRMaW5lKEtXX0tFWSwgJ1sgJyArIGtleS5qb2luKCcsICcpICsgJyBdJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRMaW5lKCkuYXBwZW5kTGluZShLV19LRVksIGtleSk7XG4gICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFfLmlzRW1wdHkoZW50aXR5LmluZGV4ZXMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRMaW5lKCkuYXBwZW5kTGluZShLV19JTkRFWEVTKS5pbmRlbnQoKTtcblxuICAgICAgICAgICAgICAgIGVudGl0eS5pbmRleGVzLmZvckVhY2goaSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleEluZm8gPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpLmZpZWxkcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4SW5mby5wdXNoKCdbJyArIGkuZmllbGRzLmpvaW4oJywgJykgKyAnXScpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhJbmZvLnB1c2goaS5maWVsZHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGkudW5pcXVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleEluZm8ucHVzaCgnaXMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4SW5mby5wdXNoKCd1bmlxdWUnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kTGluZSguLi5pbmRleEluZm8pO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kZWRlbnQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5kZWRlbnQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcG9zdDogdGhpcy5pbmRlbnRlZCA9PSAwLCAnVW5leHBlY3RlZCBpbmRlbnRlZCBzdGF0ZS4nO1xuICAgIH1cblxuICAgIF90cmFuc2xhdGVUeXBlKGZpZWxkLCBsaW5lSW5mbykge1xuICAgICAgICBsZXQgZXh0cmFUeXBlSW5mbyA9IF8ub21pdChmaWVsZCwgWyd0eXBlJywgJ21vZGlmaWVycycsICduYW1lJ10pO1xuICAgICAgICAvL2xldCB0eXBlTWV0YSA9IFR5cGVzW2ZpZWxkLnR5cGVdO1xuICAgICAgICBfLmZvck93bihleHRyYVR5cGVJbmZvLCAodiwgaykgPT4ge1xuICAgICAgICAgICAgLy9pZiAoIXR5cGVNZXRhLnF1YWxpZmllcnMuaW5jbHVkZXMoaykpIHtcbiAgICAgICAgICAgIC8vICAgIHRocm93IG5ldyBFcnJvcihgXCIke2t9XCIgaXMgbm90IGEgdmFsaWQgcXVhbGlmaWVyIGZvciB0eXBlIFwiJHtmaWVsZC50eXBlfVwiLmApO1xuICAgICAgICAgICAgLy99XG4gICAgICAgICAgICBpZiAoayA9PT0gJ2NvbW1lbnQnKSByZXR1cm47XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nIHx8IGlzTm90aGluZyh2KSkge1xuICAgICAgICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVJbmZvLnB1c2goayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2ID0gXy5jYXN0QXJyYXkodik7XG4gICAgICAgICAgICAgICAgbGluZUluZm8ucHVzaChrICsgJygnICsgdGhpcy5fdHJhbnNsYXRlQXJncyh2KSArICcpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChmaWVsZC5tb2RpZmllcnMpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyYW5zbGF0ZVBpcGVkVmFsdWUobGluZUluZm8sIGZpZWxkKTtcbiAgICAgICAgfSAgICAgICAgXG4gICAgfVxuXG4gICAgX3RyYW5zbGF0ZVBpcGVkVmFsdWUobGluZUluZm8sIHZhbHVlKSB7ICAgICAgICBcbiAgICAgICAgaWYgKHZhbHVlLm1vZGlmaWVycykge1xuICAgICAgICAgICAgdmFsdWUubW9kaWZpZXJzLmZvckVhY2godiA9PiB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh2Lm9vbFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBPb2xUeXBlcy5MYW5nLlZBTElEQVRPUjpcbiAgICAgICAgICAgICAgICAgICAgbGluZUluZm8ucHVzaCgnfH4nICsgdGhpcy5fdHJhbnNsYXRlTW9kaWZpZXIodikpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIE9vbFR5cGVzLkxhbmcuUFJPQ0VTU09SOlxuICAgICAgICAgICAgICAgICAgICBsaW5lSW5mby5wdXNoKCd8PicgKyB0aGlzLl90cmFuc2xhdGVNb2RpZmllcih2KSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgT29sVHlwZXMuTGFuZy5BQ1RJVkFUT1I6XG4gICAgICAgICAgICAgICAgICAgIGxpbmVJbmZvLnB1c2goJ3w9JyArIHRoaXMuX3RyYW5zbGF0ZU1vZGlmaWVyKHYpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBtb2RpZmllciB0eXBlOiBcIiR7di5vb2xUeXBlfVwiIWApO1xuICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gXG4gICAgfVxuXG4gICAgX3RyYW5zbGF0ZU1vZGlmaWVyKGYpIHtcbiAgICAgICAgbGV0IHIgPSBmLm5hbWU7XG5cbiAgICAgICAgaWYgKCFfLmlzRW1wdHkoZi5hcmdzKSkge1xuICAgICAgICAgICAgciArPSAnKCc7XG5cbiAgICAgICAgICAgIHIgKz0gdGhpcy5fdHJhbnNsYXRlQXJncyhmLmFyZ3MpO1xuXG4gICAgICAgICAgICByICs9ICcpJztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByO1xuICAgIH1cblxuICAgIF90cmFuc2xhdGVBcmdzKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3MubWFwKGEgPT4gdGhpcy5fdHJhbnNsYXRlQXJnKGEpKS5qb2luKCcsICcpO1xuICAgIH1cblxuICAgIF90cmFuc2xhdGVBcmcoYSkge1xuICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KGEpICYmIGEuaGFzT3duUHJvcGVydHkoJ29vbFR5cGUnKSkge1xuICAgICAgICAgICAgaWYgKGEub29sVHlwZSA9PT0gJ1BpcGVkVmFsdWUnKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBpcGVsaW5lID0gWyB0aGlzLl90cmFuc2xhdGVBcmcoYS52YWx1ZSkgXTtcblxuICAgICAgICAgICAgICAgIGlmIChhLm1vZGlmaWVycykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2xhdGVQaXBlZFZhbHVlKHBpcGVsaW5lLCBhKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcGlwZWxpbmUuam9pbignICcpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhLm9vbFR5cGUgPT09ICdPYmplY3RSZWZlcmVuY2UnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdAJyArIGEubmFtZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3Qgc3VwcG9ydGVkIG9vbFR5cGU6ICcgKyBhLm9vbFR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IFxuXG4gICAgICAgIGlmICh0eXBlb2YgYSA9PT0gJ3N0cmluZycgJiYgaXNRdW90ZWRXaXRoKGEsICcvJykpIHJldHVybiBhO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGEpO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBPb2xDb2RlR2VuOyJdfQ==